service: rick-love-blog-aws

custom:
  bucket: rick-love-blog-user-data
  keybucket: rick-love-blog-user-data-keys
  tempbucket: rick-love-blog-user-data-temp

resources:
  Resources:
    UploadsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucket}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT]
              AllowedOrigins: ['*']
        # This allows listing of bucket objects, not reading an object
        # AccessControl: PublicRead
    # Allow Reading an object (but not listing - key must be known)
    UploadsBucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        PolicyDocument:
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action:
                - 's3:GetObject'
              Resource: arn:aws:s3:::${self:custom.bucket}/*
        Bucket:
          Ref: UploadsBucket

    # Holds server-only data for access key verification
    UploadsKeyBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.keybucket}

    # Holds shared keys for a short time - auto-expiring
    UploadsTempBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.tempbucket}
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT]
              AllowedOrigins: ['*']
        LifecycleConfiguration:
          Rules:
            - ExpirationInDays: 1
              Prefix: '/'
              Status: Enabled
    UploadsTempBucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        PolicyDocument:
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action:
                - 's3:GetObject'
              Resource: arn:aws:s3:::${self:custom.tempbucket}/*
        Bucket:
          Ref: UploadsTempBucket

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  stage: prod
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:PutObjectAcl
        - s3:GetObject
        - s3:GetObjectAcl
      Resource: arn:aws:s3:::${self:custom.bucket}/*
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:PutObjectAcl
        - s3:GetObject
        - s3:GetObjectAcl
      Resource: arn:aws:s3:::${self:custom.keybucket}/*
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:PutObjectAcl
        - s3:GetObject
        - s3:GetObjectAcl
      Resource: arn:aws:s3:::${self:custom.tempbucket}/*

functions:
  upload-api:
    handler: lambda/upload-api/index.handler
    environment:
      BUCKET: ${self:custom.bucket}
      KEYBUCKET: ${self:custom.keybucket}
      TEMPBUCKET: ${self:custom.tempbucket}
    events:
      - http:
          path: upload-api/{param}
          method: POST
          cors: true
