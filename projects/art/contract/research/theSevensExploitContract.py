# pylint: disable-all

#
#  Panoramix v4 Oct 2019 
#  Decompiled source of 0x8a072fB16959d1c887d80A3faEbdE38b7dFa78ED
# 
#  Let's make the world open source 
# 
#
#  I failed with these: 
#  - withdraw()
#  All the rest is below.
#

def storage:
  owner is addr at storage 0
  unknownb3e078f4Address is addr at storage 1

def owner(): # not payable
  return owner

def unknownb3e078f4(): # not payable
  return unknownb3e078f4Address

#
#  Regular functions
#

def _fallback() payable: # default function
  revert

def renounceOwnership(): # not payable
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  owner = 0
  log OwnershipTransferred(
        address previousOwner=owner,
        address newOwner=0)

def transferOwnership(address _newOwner): # not payable
  require calldata.size - 4 >=′ 32
  require _newOwner == _newOwner
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  if not _newOwner:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Ownable: new owner is the zero address'
  owner = _newOwner
  log OwnershipTransferred(
        address previousOwner=owner,
        address newOwner=_newOwner)

def onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data): # not payable
  require calldata.size - 4 >=′ 128
  require _operator == _operator
  require _from == _from
  require _data <= 18446744073709551615
  require _data + 35 <′ calldata.size
  require _data.length <= 18446744073709551615
  require _data + _data.length + 36 <= calldata.size
  return 0x150b7a0200000000000000000000000000000000000000000000000000000000

def unknownee253a76(uint256 _param1): # not payable
  require calldata.size - 4 >=′ 32
  require _param1 == addr(_param1)
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  require ext_code.size(addr(_param1))
  call addr(_param1).setApprovalForAll(address to, bool approved) with:
       gas gas_remaining wei
      args owner, 1
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]

def unknown4997c676(uint256 _param1, uint256 _param2) payable: 
  require calldata.size - 4 >=′ 64
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  if _param1 and _param2 > -1 / _param1:
      revert with 0, 17
  if _param1 * _param2 != call.value:
      revert with 0, 'MySevens: incorrect Ether value'
  idx = 0
  while idx < _param2:
      mem[96] = 0x97304ced00000000000000000000000000000000000000000000000000000000
      mem[100] = 1
      require ext_code.size(unknownb3e078f4Address)
      call unknownb3e078f4Address.mintTokens(uint256 addSupply) with:
         value _param1 wei
           gas gas_remaining wei
          args 1
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      if idx == -1:
          revert with 0, 17
      idx = idx + 1
      continue 

def unknowne0e7e252(uint256 _param1, uint256 _param2): # not payable
  require calldata.size - 4 >=′ 64
  if owner != caller:
      revert with 0, 'Ownable: caller is not the owner'
  idx = 0
  while idx < _param2:
      if _param1 > !idx:
          revert with 0, 17
      mem[96] = 0x23b872dd00000000000000000000000000000000000000000000000000000000
      mem[100] = this.address
      mem[132] = owner
      mem[164] = _param1 + idx
      require ext_code.size(unknownb3e078f4Address)
      call unknownb3e078f4Address.transferFrom(address from, address to, uint256 value) with:
           gas gas_remaining wei
          args addr(this.address), owner, _param1 + idx
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      if idx == -1:
          revert with 0, 17
      idx = idx + 1
      continue 

