/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ExperimentsContract,
  ExperimentsContractInterface,
} from "../ExperimentsContract";

const _abi = [
  {
    inputs: [],
    name: "create256BitString",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
    ],
    name: "get16Bit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
    ],
    name: "get256Bit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "get256Bit10k",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "get256Bit10k_inline",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "get256Bit10k_loopOnly",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "get256Bit10k_unsafe",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
    ],
    name: "get8Bit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061125c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063859e5c221161005b578063859e5c2214610117578063bd1e72b214610135578063cfae468714610153578063eef13e981461018357610088565b806310c94ba41461008d5780631239bb59146100ab578063375de040146100db5780635e0b5c06146100f9575b600080fd5b6100956101b3565b6040516100a29190610ae4565b60405180910390f35b6100c560048036038101906100c09190610984565b6102ee565b6040516100d29190610ae4565b60405180910390f35b6100e3610321565b6040516100f09190610ae4565b60405180910390f35b61010161045c565b60405161010e9190610a62565b60405180910390f35b61011f610582565b60405161012c9190610ae4565b60405180910390f35b61013d6106c0565b60405161014a9190610ae4565b60405180910390f35b61016d60048036038101906101689190610984565b6107a1565b60405161017a9190610ae4565b60405180910390f35b61019d60048036038101906101989190610984565b6107d5565b6040516101aa9190610ae4565b60405180910390f35b6000806040518061042001604052806104008152602001610de7610400913990506000805b6103e88110156102e5576101ed836000610824565b826101f89190610b1b565b9150610205836001610824565b826102109190610b1b565b915061021d836002610824565b826102289190610b1b565b9150610235836003610824565b826102409190610b1b565b915061024d836004610824565b826102589190610b1b565b9150610265836005610824565b826102709190610b1b565b915061027d836006610824565b826102889190610b1b565b9150610295836007610824565b826102a09190610b1b565b91506102ad836008610824565b826102b89190610b1b565b91506102c5836009610824565b826102d09190610b1b565b915080806102dd90610c08565b9150506101d8565b50809250505090565b6000806040518061042001604052806104008152602001610de761040091399050610319818461083a565b915050919050565b6000806040518061042001604052806104008152602001610de7610400913990506000805b6103e88110156104535761035b83600061083a565b826103669190610b1b565b915061037383600161083a565b8261037e9190610b1b565b915061038b83600261083a565b826103969190610b1b565b91506103a383600361083a565b826103ae9190610b1b565b91506103bb83600461083a565b826103c69190610b1b565b91506103d383600561083a565b826103de9190610b1b565b91506103eb83600661083a565b826103f69190610b1b565b915061040383600761083a565b8261040e9190610b1b565b915061041b83600861083a565b826104269190610b1b565b915061043383600961083a565b8261043e9190610b1b565b9150808061044b90610c08565b915050610346565b50809250505090565b606060006040518061042001604052806104008152602001610de7610400913990506000614e20905060008167ffffffffffffffff8111156104a1576104a0610d0f565b5b6040519080825280601f01601f1916602001820160405280156104d35781602001600182028036833780820191505090505b5090506000805b8381101561057757610504856020601e846104f59190610c51565b6104ff9190610b71565b610824565b9150600a826105139190610c51565b603061051f9190610b1b565b60f81b83828151811061053557610534610ce0565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350808061056f90610c08565b9150506104da565b508194505050505090565b6000806040518061042001604052806104008152602001610de76104009139905060008060005b6103e88110156106b6576000602085010151915081836105c99190610b1b565b92506001602085010151915081836105e19190610b1b565b92506002602085010151915081836105f99190610b1b565b92506003602085010151915081836106119190610b1b565b92506004602085010151915081836106299190610b1b565b92506005602085010151915081836106419190610b1b565b92506006602085010151915081836106599190610b1b565b92506007602085010151915081836106719190610b1b565b92506008602085010151915081836106899190610b1b565b92506009602085010151915081836106a19190610b1b565b925080806106ae90610c08565b9150506105a9565b5081935050505090565b6000806040518061042001604052806104008152602001610de7610400913990506000805b6103e8811015610798576000826106fc9190610b1b565b915060018261070b9190610b1b565b915060028261071a9190610b1b565b91506003826107299190610b1b565b91506004826107389190610b1b565b91506005826107479190610b1b565b91506006826107569190610b1b565b91506007826107659190610b1b565b91506008826107749190610b1b565b91506009826107839190610b1b565b9150808061079090610c08565b9150506106e5565b50809250505090565b6000806040518060600160405280604081526020016111e76040913990506107c981846108a1565b61ffff16915050919050565b6000806040518060400160405280602081526020017e0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f81525090506108198184610908565b60ff16915050919050565b6000808260208501015190508091505092915050565b60006020826108499190610b1b565b8351101561088c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088390610aa4565b60405180910390fd5b60008260208501015190508091505092915050565b60006002826108b09190610b1b565b835110156108f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ea90610a84565b60405180910390fd5b60008260028501015190508091505092915050565b60006001826109179190610b1b565b8351101561095a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095190610ac4565b60405180910390fd5b60008260018501015190508091505092915050565b60008135905061097e81610dcf565b92915050565b60006020828403121561099a57610999610d3e565b5b60006109a88482850161096f565b91505092915050565b60006109bc82610aff565b6109c68185610b0a565b93506109d6818560208601610bd5565b6109df81610d43565b840191505092915050565b60006109f7601483610b0a565b9150610a0282610d54565b602082019050919050565b6000610a1a601583610b0a565b9150610a2582610d7d565b602082019050919050565b6000610a3d601383610b0a565b9150610a4882610da6565b602082019050919050565b610a5c81610bcb565b82525050565b60006020820190508181036000830152610a7c81846109b1565b905092915050565b60006020820190508181036000830152610a9d816109ea565b9050919050565b60006020820190508181036000830152610abd81610a0d565b9050919050565b60006020820190508181036000830152610add81610a30565b9050919050565b6000602082019050610af96000830184610a53565b92915050565b600081519050919050565b600082825260208201905092915050565b6000610b2682610bcb565b9150610b3183610bcb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b6657610b65610c82565b5b828201905092915050565b6000610b7c82610bcb565b9150610b8783610bcb565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bc057610bbf610c82565b5b828202905092915050565b6000819050919050565b60005b83811015610bf3578082015181840152602081019050610bd8565b83811115610c02576000848401525b50505050565b6000610c1382610bcb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c4657610c45610c82565b5b600182019050919050565b6000610c5c82610bcb565b9150610c6783610bcb565b925082610c7757610c76610cb1565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f746f55696e7431365f6f75744f66426f756e6473000000000000000000000000600082015250565b7f746f55696e743235365f6f75744f66426f756e64730000000000000000000000600082015250565b7f746f55696e74385f6f75744f66426f756e647300000000000000000000000000600082015250565b610dd881610bcb565b8114610de357600080fd5b5056fea000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000fa000000000000000000000000000000000000000000000000000000000000001b000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001d000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000001f0000000100020003000400050006000700080009000a000b000c000d000e000f0010001100120013001400150016001700180019001a001b001c001d001e001fa26469706673582212209616d8d581a5d0c206afdfc12393cfaabf6e4f59f0d5028f3ccbe28dd8b5a73264736f6c63430008070033";

export class ExperimentsContract__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ExperimentsContract> {
    return super.deploy(overrides || {}) as Promise<ExperimentsContract>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ExperimentsContract {
    return super.attach(address) as ExperimentsContract;
  }
  connect(signer: Signer): ExperimentsContract__factory {
    return super.connect(signer) as ExperimentsContract__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExperimentsContractInterface {
    return new utils.Interface(_abi) as ExperimentsContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExperimentsContract {
    return new Contract(address, _abi, signerOrProvider) as ExperimentsContract;
  }
}
