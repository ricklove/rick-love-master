/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ExperimentsContract,
  ExperimentsContractInterface,
} from "../ExperimentsContract";

const _abi = [
  {
    inputs: [],
    name: "create256BitString",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
    ],
    name: "get16Bit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
    ],
    name: "get256Bit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "get256Bit10k",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "get256Bit10k_inline",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "get256Bit10k_loopOnly",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "get256Bit10k_unsafe",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
    ],
    name: "get8Bit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_dataByteIndex",
        type: "uint256",
      },
    ],
    name: "getData_01",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610eca806100206000396000f3fe608060405234801561001057600080fd5b50600436106100835760003560e01c806310c94ba4146100885780631239bb59146100a3578063375de040146100b657806354ecf81b146100be5780635e0b5c06146100de578063859e5c22146100e6578063bd1e72b2146100ee578063cfae4687146100f6578063eef13e9814610109575b600080fd5b61009061011c565b6040519081526020015b60405180910390f35b6100906100b1366004610806565b610217565b610090610249565b6100d16100cc366004610806565b610370565b60405161009a919061081f565b6100d16103c0565b610090610497565b6100906105aa565b610090610104366004610806565b61066d565b610090610117366004610806565b6106a0565b6000806040518061042001604052806104008152602001610915610400913990506000805b6103e881101561021057602083015161015a9083610874565b602184015190925061016c9083610874565b602284015190925061017e9083610874565b60238401519092506101909083610874565b60248401519092506101a29083610874565b60258401519092506101b49083610874565b60268401519092506101c69083610874565b60278401519092506101d89083610874565b60288401519092506101ea9083610874565b60298401519092506101fc9083610874565b915080610208816108ab565b915050610141565b5092915050565b60008060405180610420016040528061040081526020016109156104009139905061024281846106ea565b9392505050565b6000806040518061042001604052806104008152602001610915610400913990506000805b6103e8811015610210576102838360006106ea565b61028d9083610874565b915061029a8360016106ea565b6102a49083610874565b91506102b18360026106ea565b6102bb9083610874565b91506102c88360036106ea565b6102d29083610874565b91506102df8360046106ea565b6102e99083610874565b91506102f68360056106ea565b6103009083610874565b915061030d8360066106ea565b6103179083610874565b91506103248360076106ea565b61032e9083610874565b915061033b8360086106ea565b6103459083610874565b91506103528360096106ea565b61035c9083610874565b915080610368816108ab565b91505061026e565b60608060006040518061016001604052806101408152602001610d55610140913990506040519150602081016103a68582015190565b602084810191909152835250506040808201905292915050565b606060006040518061042001604052806104008152602001610915610400913960408051614e20808252614e40820190925291925090600090826020820181803683370190505090506000805b8381101561048d5761043785610424601e846108c6565b61042f90602061088c565b016020015190565b9150610444600a836108c6565b61044f906030610874565b60f81b838281518110610464576104646108fe565b60200101906001600160f81b031916908160001a90535080610485816108ab565b91505061040d565b5090949350505050565b60008060405180610420016040528061040081526020016109156104009139905060008060005b6103e88110156105a157602084015191506104d98284610874565b602185015190935091506104ed8284610874565b602285015190935091506105018284610874565b602385015190935091506105158284610874565b602485015190935091506105298284610874565b6025850151909350915061053d8284610874565b602685015190935091506105518284610874565b602785015190935091506105658284610874565b602885015190935091506105798284610874565b6029850151909350915061058d8284610874565b925080610599816108ab565b9150506104be565b50909392505050565b6000806040518061042001604052806104008152602001610915610400913990506000805b6103e8811015610210576105e4600083610874565b91506105f1600183610874565b91506105fe600283610874565b915061060b600383610874565b9150610618600483610874565b9150610625600583610874565b9150610632600683610874565b915061063f600783610874565b915061064c600883610874565b9150610659600983610874565b915080610665816108ab565b9150506105cf565b600080604051806060016040528060408152602001610d15604091399050610695818461074d565b61ffff169392505050565b6040805180820190915260208082527e0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f908201526000906106e081846107aa565b60ff169392505050565b60006106f7826020610874565b835110156107445760405162461bcd60e51b8152602060048201526015602482015274746f55696e743235365f6f75744f66426f756e647360581b60448201526064015b60405180910390fd5b50016020015190565b600061075a826002610874565b835110156107a15760405162461bcd60e51b8152602060048201526014602482015273746f55696e7431365f6f75744f66426f756e647360601b604482015260640161073b565b50016002015190565b60006107b7826001610874565b835110156107fd5760405162461bcd60e51b8152602060048201526013602482015272746f55696e74385f6f75744f66426f756e647360681b604482015260640161073b565b50016001015190565b60006020828403121561081857600080fd5b5035919050565b600060208083528351808285015260005b8181101561084c57858101830151858201604001528201610830565b8181111561085e576000604083870101525b50601f01601f1916929092016040019392505050565b60008219821115610887576108876108e8565b500190565b60008160001904831182151516156108a6576108a66108e8565b500290565b60006000198214156108bf576108bf6108e8565b5060010190565b6000826108e357634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000fa000000000000000000000000000000000000000000000000000000000000001b000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001d000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000001f0000000100020003000400050006000700080009000a000b000c000d000e000f0010001100120013001400150016001700180019001a001b001c001d001e001f3030303130323033303430353036303730383039306130623063306430653066313031313132313331343135313631373138313931613162316331643165316620462d3827207374616e64616c6f6e653d276e6f273f3e3c7376672077696474683d273130302527206865696768743d2731303025272076696577426f783d273020302033303020333030272076657273696f6e3d27312e312720786d6c6e733a786c696e6b3d27687474703a2f2f7777772e77332e6f72672f313939392f786c696e6b2720786d6c6e733d27687474703a2f2f7777772e77332e6f72672f323030302f7376672720786d6c6e733a7376673d27687474703a2f2f7777772e77332e6f72672f323030302f737667273e3c646566733e3c6c696e6561724772616469656e742069643d277831273e3c73746f70207374796c653d2773746f702da264697066735822122022c2b971467d74c52a51c074f93f33284121ddb96e0ee41144ddfc8a49203b7164736f6c63430008070033";

export class ExperimentsContract__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ExperimentsContract> {
    return super.deploy(overrides || {}) as Promise<ExperimentsContract>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ExperimentsContract {
    return super.attach(address) as ExperimentsContract;
  }
  connect(signer: Signer): ExperimentsContract__factory {
    return super.connect(signer) as ExperimentsContract__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExperimentsContractInterface {
    return new utils.Interface(_abi) as ExperimentsContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExperimentsContract {
    return new Contract(address, _abi, signerOrProvider) as ExperimentsContract;
  }
}
