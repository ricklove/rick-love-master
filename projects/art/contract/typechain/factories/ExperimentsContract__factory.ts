/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ExperimentsContract,
  ExperimentsContractInterface,
} from "../ExperimentsContract";

const _abi = [
  {
    inputs: [],
    name: "create256BitString",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
    ],
    name: "get16Bit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
    ],
    name: "get256Bit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "get256Bit10k",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "get256Bit10k_inline",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "get256Bit10k_loopOnly",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "get256Bit10k_unsafe",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
    ],
    name: "get8Bit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d2c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063859e5c221161005b578063859e5c22146100d8578063bd1e72b2146100e0578063cfae4687146100e8578063eef13e98146100fb57600080fd5b806310c94ba41461008d5780631239bb59146100a8578063375de040146100bb5780635e0b5c06146100c3575b600080fd5b61009561010e565b6040519081526020015b60405180910390f35b6100956100b63660046107a8565b610209565b61009561023b565b6100cb610362565b60405161009f91906107c1565b610095610439565b61009561054c565b6100956100f63660046107a8565b61060f565b6100956101093660046107a8565b610642565b60008060405180610420016040528061040081526020016108b7610400913990506000805b6103e881101561020257602083015161014c9083610816565b602184015190925061015e9083610816565b60228401519092506101709083610816565b60238401519092506101829083610816565b60248401519092506101949083610816565b60258401519092506101a69083610816565b60268401519092506101b89083610816565b60278401519092506101ca9083610816565b60288401519092506101dc9083610816565b60298401519092506101ee9083610816565b9150806101fa8161084d565b915050610133565b5092915050565b60008060405180610420016040528061040081526020016108b761040091399050610234818461068c565b9392505050565b60008060405180610420016040528061040081526020016108b7610400913990506000805b6103e88110156102025761027583600061068c565b61027f9083610816565b915061028c83600161068c565b6102969083610816565b91506102a383600261068c565b6102ad9083610816565b91506102ba83600361068c565b6102c49083610816565b91506102d183600461068c565b6102db9083610816565b91506102e883600561068c565b6102f29083610816565b91506102ff83600661068c565b6103099083610816565b915061031683600761068c565b6103209083610816565b915061032d83600861068c565b6103379083610816565b915061034483600961068c565b61034e9083610816565b91508061035a8161084d565b915050610260565b6060600060405180610420016040528061040081526020016108b7610400913960408051614e20808252614e40820190925291925090600090826020820181803683370190505090506000805b8381101561042f576103d9856103c6601e84610868565b6103d190602061082e565b016020015190565b91506103e6600a83610868565b6103f1906030610816565b60f81b838281518110610406576104066108a0565b60200101906001600160f81b031916908160001a905350806104278161084d565b9150506103af565b5090949350505050565b60008060405180610420016040528061040081526020016108b76104009139905060008060005b6103e8811015610543576020840151915061047b8284610816565b6021850151909350915061048f8284610816565b602285015190935091506104a38284610816565b602385015190935091506104b78284610816565b602485015190935091506104cb8284610816565b602585015190935091506104df8284610816565b602685015190935091506104f38284610816565b602785015190935091506105078284610816565b6028850151909350915061051b8284610816565b6029850151909350915061052f8284610816565b92508061053b8161084d565b915050610460565b50909392505050565b60008060405180610420016040528061040081526020016108b7610400913990506000805b6103e881101561020257610586600083610816565b9150610593600183610816565b91506105a0600283610816565b91506105ad600383610816565b91506105ba600483610816565b91506105c7600583610816565b91506105d4600683610816565b91506105e1600783610816565b91506105ee600883610816565b91506105fb600983610816565b9150806106078161084d565b915050610571565b600080604051806060016040528060408152602001610cb760409139905061063781846106ef565b61ffff169392505050565b6040805180820190915260208082527e0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f90820152600090610682818461074c565b60ff169392505050565b6000610699826020610816565b835110156106e65760405162461bcd60e51b8152602060048201526015602482015274746f55696e743235365f6f75744f66426f756e647360581b60448201526064015b60405180910390fd5b50016020015190565b60006106fc826002610816565b835110156107435760405162461bcd60e51b8152602060048201526014602482015273746f55696e7431365f6f75744f66426f756e647360601b60448201526064016106dd565b50016002015190565b6000610759826001610816565b8351101561079f5760405162461bcd60e51b8152602060048201526013602482015272746f55696e74385f6f75744f66426f756e647360681b60448201526064016106dd565b50016001015190565b6000602082840312156107ba57600080fd5b5035919050565b600060208083528351808285015260005b818110156107ee578581018301518582016040015282016107d2565b81811115610800576000604083870101525b50601f01601f1916929092016040019392505050565b600082198211156108295761082961088a565b500190565b60008160001904831182151516156108485761084861088a565b500290565b60006000198214156108615761086161088a565b5060010190565b60008261088557634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000fa000000000000000000000000000000000000000000000000000000000000001b000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001d000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000001f0000000100020003000400050006000700080009000a000b000c000d000e000f0010001100120013001400150016001700180019001a001b001c001d001e001fa264697066735822122055eda3243b263a543e144c893f43a3919e82da7a9913ad6d6742ca4f2169467d64736f6c63430008070033";

export class ExperimentsContract__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ExperimentsContract> {
    return super.deploy(overrides || {}) as Promise<ExperimentsContract>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ExperimentsContract {
    return super.attach(address) as ExperimentsContract;
  }
  connect(signer: Signer): ExperimentsContract__factory {
    return super.connect(signer) as ExperimentsContract__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExperimentsContractInterface {
    return new utils.Interface(_abi) as ExperimentsContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExperimentsContract {
    return new Contract(address, _abi, signerOrProvider) as ExperimentsContract;
  }
}
