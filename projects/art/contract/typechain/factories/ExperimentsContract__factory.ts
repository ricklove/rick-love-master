/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ExperimentsContract,
  ExperimentsContractInterface,
} from "../ExperimentsContract";

const _abi = [
  {
    inputs: [],
    name: "create256BitString",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
    ],
    name: "get16Bit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
    ],
    name: "get256Bit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "get256Bit10k",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "get256Bit10k_inline",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "get256Bit10k_loopOnly",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "get256Bit10k_unsafe",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "offset",
        type: "uint256",
      },
    ],
    name: "get8Bit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d1c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100785760003560e01c806310c94ba41461007d5780631239bb5914610098578063375de040146100ab5780635e0b5c06146100b3578063859e5c22146100c8578063bd1e72b2146100d0578063cfae4687146100d8578063eef13e98146100eb575b600080fd5b6100856100fe565b6040519081526020015b60405180910390f35b6100856100a6366004610798565b6101f9565b61008561022b565b6100bb610352565b60405161008f91906107b1565b610085610429565b61008561053c565b6100856100e6366004610798565b6105ff565b6100856100f9366004610798565b610632565b60008060405180610420016040528061040081526020016108a7610400913990506000805b6103e88110156101f257602083015161013c9083610806565b602184015190925061014e9083610806565b60228401519092506101609083610806565b60238401519092506101729083610806565b60248401519092506101849083610806565b60258401519092506101969083610806565b60268401519092506101a89083610806565b60278401519092506101ba9083610806565b60288401519092506101cc9083610806565b60298401519092506101de9083610806565b9150806101ea8161083d565b915050610123565b5092915050565b60008060405180610420016040528061040081526020016108a761040091399050610224818461067c565b9392505050565b60008060405180610420016040528061040081526020016108a7610400913990506000805b6103e88110156101f25761026583600061067c565b61026f9083610806565b915061027c83600161067c565b6102869083610806565b915061029383600261067c565b61029d9083610806565b91506102aa83600361067c565b6102b49083610806565b91506102c183600461067c565b6102cb9083610806565b91506102d883600561067c565b6102e29083610806565b91506102ef83600661067c565b6102f99083610806565b915061030683600761067c565b6103109083610806565b915061031d83600861067c565b6103279083610806565b915061033483600961067c565b61033e9083610806565b91508061034a8161083d565b915050610250565b6060600060405180610420016040528061040081526020016108a7610400913960408051614e20808252614e40820190925291925090600090826020820181803683370190505090506000805b8381101561041f576103c9856103b6601e84610858565b6103c190602061081e565b016020015190565b91506103d6600a83610858565b6103e1906030610806565b60f81b8382815181106103f6576103f6610890565b60200101906001600160f81b031916908160001a905350806104178161083d565b91505061039f565b5090949350505050565b60008060405180610420016040528061040081526020016108a76104009139905060008060005b6103e8811015610533576020840151915061046b8284610806565b6021850151909350915061047f8284610806565b602285015190935091506104938284610806565b602385015190935091506104a78284610806565b602485015190935091506104bb8284610806565b602585015190935091506104cf8284610806565b602685015190935091506104e38284610806565b602785015190935091506104f78284610806565b6028850151909350915061050b8284610806565b6029850151909350915061051f8284610806565b92508061052b8161083d565b915050610450565b50909392505050565b60008060405180610420016040528061040081526020016108a7610400913990506000805b6103e88110156101f257610576600083610806565b9150610583600183610806565b9150610590600283610806565b915061059d600383610806565b91506105aa600483610806565b91506105b7600583610806565b91506105c4600683610806565b91506105d1600783610806565b91506105de600883610806565b91506105eb600983610806565b9150806105f78161083d565b915050610561565b600080604051806060016040528060408152602001610ca760409139905061062781846106df565b61ffff169392505050565b6040805180820190915260208082527e0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f90820152600090610672818461073c565b60ff169392505050565b6000610689826020610806565b835110156106d65760405162461bcd60e51b8152602060048201526015602482015274746f55696e743235365f6f75744f66426f756e647360581b60448201526064015b60405180910390fd5b50016020015190565b60006106ec826002610806565b835110156107335760405162461bcd60e51b8152602060048201526014602482015273746f55696e7431365f6f75744f66426f756e647360601b60448201526064016106cd565b50016002015190565b6000610749826001610806565b8351101561078f5760405162461bcd60e51b8152602060048201526013602482015272746f55696e74385f6f75744f66426f756e647360681b60448201526064016106cd565b50016001015190565b6000602082840312156107aa57600080fd5b5035919050565b600060208083528351808285015260005b818110156107de578581018301518582016040015282016107c2565b818111156107f0576000604083870101525b50601f01601f1916929092016040019392505050565b600082198211156108195761081961087a565b500190565b60008160001904831182151516156108385761083861087a565b500290565b60006000198214156108515761085161087a565b5060010190565b60008261087557634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000f0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001100000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000013000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000150000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001700000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000019000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001b000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001d000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000001f0000000100020003000400050006000700080009000a000b000c000d000e000f0010001100120013001400150016001700180019001a001b001c001d001e001fa2646970667358221220acf33d856f2c60bff7330a81bd0d80b405f43970ee10a05c9b723e5236120a0e64736f6c63430008070033";

export class ExperimentsContract__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ExperimentsContract> {
    return super.deploy(overrides || {}) as Promise<ExperimentsContract>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ExperimentsContract {
    return super.attach(address) as ExperimentsContract;
  }
  connect(signer: Signer): ExperimentsContract__factory {
    return super.connect(signer) as ExperimentsContract__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExperimentsContractInterface {
    return new utils.Interface(_abi) as ExperimentsContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ExperimentsContract {
    return new Contract(address, _abi, signerOrProvider) as ExperimentsContract;
  }
}
