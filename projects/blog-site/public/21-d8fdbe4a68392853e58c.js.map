{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/games/educational-games/utils/keyboard-simplified.tsx","webpack:///D:/Projects/rick-love-master/code/games/educational-games/doodle-game.tsx","webpack:///D:/Projects/rick-love-master/code/games/educational-games/doodle-subjects/doodle-spelling.tsx"],"names":["englishKeyboard","rows","keys","split","styles","container","rowView","flex","flexDirection","keyView","margin","padding","width","height","backgroundColor","justifyContent","alignItems","keyView_disabled","opacity","keyText","fontSize","keyText_wrong","color","KeyboardSimplified","expectedCharacter","showHints","onExpectedKeyPress","keyboard","useState","hintKeys","setHintKeys","wrongKeys","setWrongKeys","useEffect","hints","shuffle","flatMap","x","map","trim","filter","slice","style","row","iRow","key","k","i","outline","onPress","s","includes","drawing","drawingChoicesView","maxWidth","flexWrap","drawingChoiceWrapper","drawingChoice","titleView","titleText","promptView","promptText","hintText","buttonRowView","buttonView","buttonText","EducationalGame_Doodle","props","problemSourceKey","setProblemSourceKey","problemService","onOpen","onClose","onSubjectNavigation","EducationalGame_Doodle_Inner","problem","setProblem","mode","setMode","drawings","setDrawings","prompt","useRef","current","gotoNextProblem","p","getNextProblem","setTimeout","gotoTypeMode","speakPrompt","useAutoLoadingError","doWork","loading","error","stopIfObsolete","a","drawingStorage","getDrawings","maxCount","includeOtherPrompts","result","doodles","gotoDrawPromptMode","gotoChooseBestMode","length","onDone","sayAgain","onChooseBest","value","saveBestDrawingSelection","hint","segments","saveDrawing","onSkip","DoodleGameView_DrawWord","defaultDoodleDrawing","setDrawing","onChange","DoodleGameView_ChooseBest","typeStyles","completedText","DoodleGameView_Type","completed","remaining","status","setStatus","nextChar","substr","EducationalGame_Doodle_Spelling","speechService","createSpeechService","Platform","OS","hasStarted","setHasStarted","createDoodleDrawingStorageService","inner","createProgressGameProblemService","createAutoSavedProblemService","createSpellingProblemService","sectionSize","lastProblem","getSections","gotoSection","recordAnswer","answers","find","isCorrect","question","onQuestion","languange","onClick","speak","alignSelf","size"],"mappings":"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","file":"21-d8fdbe4a68392853e58c.js","sourcesContent":["/* eslint-disable react/no-array-index-key */\r\nimport React, { useEffect, useState } from 'react';\r\nimport { View, Text, TouchableOpacity } from 'react-native-lite';\r\nimport { shuffle } from 'utils/arrays';\r\n\r\nconst englishKeyboard = {\r\n    rows: [\r\n        { keys: `qwertyuiop`.split(``) },\r\n        { keys: ` asdfghjkl`.split(``) },\r\n        { keys: `  zxcvbnm `.split(``) },\r\n    ],\r\n};\r\n\r\nconst styles = {\r\n    container: {},\r\n    rowView: { flex: 1, flexDirection: `row` },\r\n    keyView: {\r\n        margin: 2,\r\n        padding: 2,\r\n        width: 20,\r\n        height: 20,\r\n        backgroundColor: `#111111`,\r\n        justifyContent: `center`,\r\n        alignItems: `center`,\r\n    },\r\n    keyView_disabled: { opacity: 0.5 },\r\n    keyText: {\r\n        fontSize: 16,\r\n    },\r\n    keyText_wrong: {\r\n        fontSize: 16,\r\n        color: `#FF0000`,\r\n    },\r\n} as const;\r\n\r\nexport const KeyboardSimplified = ({ expectedCharacter, showHints, onExpectedKeyPress }: { expectedCharacter: string, showHints: boolean, onExpectedKeyPress: () => void }) => {\r\n    const keyboard = englishKeyboard;\r\n\r\n    const [hintKeys, setHintKeys] = useState(null as null | string[]);\r\n    const [wrongKeys, setWrongKeys] = useState([] as string[]);\r\n    useEffect(() => {\r\n        if (!showHints) { setHintKeys(null); }\r\n\r\n        const hints = [expectedCharacter, ...shuffle(keyboard.rows.flatMap(x => x.keys).map(x => x.trim()).filter(x => x)).slice(0, 3)];\r\n        setHintKeys(hints);\r\n        setWrongKeys([]);\r\n    }, [expectedCharacter, showHints]);\r\n\r\n    const onKeyPress = (key: string) => {\r\n        if (key === expectedCharacter) {\r\n            onExpectedKeyPress();\r\n            return;\r\n        }\r\n        // Remove from choices\r\n        if (showHints) {\r\n            setHintKeys(s => (s ?? []).filter(x => x !== key));\r\n            setWrongKeys(s => [...s, key]);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <View style={styles.container}>\r\n                {keyboard.rows.map((row, iRow) => (\r\n                    <View style={styles.rowView} key={`${iRow}`} >\r\n                        {row.keys.map((k, i) => (\r\n                            <TouchableOpacity key={`${k}${i}`} style={{ outline: `none` }} onPress={() => onKeyPress(k)}>\r\n                                <View style={!hintKeys || hintKeys.includes(k) ? {} : styles.keyView_disabled} >\r\n                                    <View style={styles.keyView}>\r\n                                        <Text style={wrongKeys.includes(k) ? styles.keyText_wrong : styles.keyText}>{k}</Text>\r\n                                    </View>\r\n                                </View>\r\n                            </TouchableOpacity>\r\n                        ))}\r\n                    </View>\r\n                ))}\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { DoodleDisplayView, DoodleDrawerView } from 'doodle/doodle-view';\r\nimport { defaultDoodleDrawing, DoodleDrawing, DoodleData, DoodleDrawingStorageService } from 'doodle/doodle';\r\nimport { View, Text, TouchableOpacity } from 'react-native-lite';\r\nimport { useAutoLoadingError } from 'utils-react/hooks';\r\nimport { SubjectNavigator } from './utils/subject-navigator';\r\nimport { KeyboardSimplified } from './utils/keyboard-simplified';\r\n\r\nexport const styles = {\r\n    container: {\r\n        alignItems: `center`,\r\n    },\r\n    drawing: {\r\n        width: 312,\r\n        height: 312,\r\n        color: `#FFFFFF`,\r\n        backgroundColor: `#000000`,\r\n    },\r\n    drawingChoicesView: {\r\n        maxWidth: 312 + 4 * 4 + 4,\r\n        flexDirection: `row`,\r\n        flexWrap: `wrap`,\r\n    },\r\n    drawingChoiceWrapper: {\r\n        padding: 4,\r\n    },\r\n    drawingChoice: {\r\n        width: 78,\r\n        height: 78,\r\n        color: `#FFFFFF`,\r\n        backgroundColor: `#000000`,\r\n    },\r\n    titleView: {\r\n        justifyContent: `center`,\r\n        alignItems: `center`,\r\n    },\r\n    titleText: {\r\n        fontSize: 20,\r\n        color: `#FFFFFF`,\r\n    },\r\n    promptView: {\r\n        justifyContent: `center`,\r\n        alignItems: `center`,\r\n    },\r\n    promptText: {\r\n        fontSize: 20,\r\n        color: `#FFFF00`,\r\n    },\r\n    hintText: {\r\n        fontSize: 14,\r\n        color: `#FFFF00`,\r\n    },\r\n    buttonRowView: {\r\n        flexDirection: `row`,\r\n    },\r\n    buttonView: {\r\n        margin: 4,\r\n        padding: 8,\r\n        backgroundColor: `#111111`,\r\n    },\r\n    buttonText: {\r\n        fontSize: 20,\r\n        color: `#FFFF00`,\r\n    },\r\n} as const;\r\n\r\nexport type DoodleProblemService = {\r\n    getSections: () => { key: string, name: string, isComplete: boolean }[];\r\n    gotoSection: (section: { key: string }) => void;\r\n    getNextProblem: () => DoodleProblem | null;\r\n};\r\ntype DoodleProblem = {\r\n    prompt: string;\r\n    hint?: string;\r\n    speakPrompt?: () => void;\r\n};\r\n\r\nexport const EducationalGame_Doodle = (props: { problemService: DoodleProblemService, drawingStorage: DoodleDrawingStorageService }) => {\r\n    const [problemSourceKey, setProblemSourceKey] = useState(0);\r\n\r\n    return (<>\r\n        <EducationalGame_Doodle_Inner {...props} problemSourceKey={problemSourceKey} />\r\n        <SubjectNavigator problemService={props.problemService}\r\n            onOpen={() => { }}\r\n            onClose={() => { }}\r\n            onSubjectNavigation={() => { setProblemSourceKey(s => s + 1); }}\r\n        />\r\n    </>);\r\n};\r\n\r\nexport const EducationalGame_Doodle_Inner = (props: { problemService: DoodleProblemService, drawingStorage: DoodleDrawingStorageService, problemSourceKey: number }) => {\r\n\r\n    const [problem, setProblem] = useState(null as null | DoodleProblem);\r\n    const [mode, setMode] = useState(`type` as 'type' | 'drawPrompt' | 'chooseCorrect' | 'chooseBest');\r\n    const [drawings, setDrawings] = useState(null as null | DoodleData[]);\r\n    const prompt = useRef(problem?.prompt ?? ``);\r\n    prompt.current = problem?.prompt ?? ``;\r\n\r\n    const gotoNextProblem = () => {\r\n        const p = props.problemService.getNextProblem();\r\n        if (!p) { return; }\r\n        setProblem(p);\r\n        setTimeout(gotoTypeMode);\r\n        p.speakPrompt?.();\r\n    };\r\n\r\n    useEffect(() => {\r\n        gotoNextProblem();\r\n    }, [props.problemSourceKey]);\r\n\r\n    const { loading, error, doWork } = useAutoLoadingError();\r\n\r\n    const gotoTypeMode = () => {\r\n        doWork(async (stopIfObsolete) => {\r\n            const result = await props.drawingStorage.getDrawings(prompt.current, { maxCount: 1, includeOtherPrompts: false });\r\n            setDrawings(result.doodles);\r\n            setMode(`type`);\r\n        });\r\n    };\r\n\r\n    const onTypeDone = () => {\r\n        doWork(async (stopIfObsolete) => {\r\n            setTimeout(gotoDrawPromptMode);\r\n        });\r\n    };\r\n\r\n    const sayAgain = () => {\r\n        problem?.speakPrompt?.();\r\n    };\r\n\r\n    const gotoDrawPromptMode = () => {\r\n        setMode(`drawPrompt`);\r\n    };\r\n\r\n    const onDrawingDone = (drawing: DoodleDrawing) => {\r\n        // props.onDone(drawing);\r\n\r\n        // Save drawing with word prompt\r\n        doWork(async (stopIfObsolete) => {\r\n            if (drawing.segments.length > 0) {\r\n                await props.drawingStorage.saveDrawing(prompt.current, drawing);\r\n            }\r\n            stopIfObsolete();\r\n            setTimeout(gotoChooseBestMode);\r\n        });\r\n    };\r\n    const onDrawingSkip = () => {\r\n        setTimeout(gotoChooseBestMode);\r\n    };\r\n\r\n    const gotoChooseBestMode = () => {\r\n        doWork(async (stopIfObsolete) => {\r\n            const result = await props.drawingStorage.getDrawings(prompt.current);\r\n            stopIfObsolete();\r\n\r\n            if (result.doodles.length <= 1) {\r\n                gotoNextProblem();\r\n                return;\r\n            }\r\n\r\n            setDrawings(result.doodles);\r\n            setMode(`chooseBest`);\r\n        });\r\n    };\r\n\r\n    const onChooseBest = (value: DoodleData) => {\r\n        doWork(async (stopIfObsolete) => {\r\n            await props.drawingStorage.saveBestDrawingSelection(value);\r\n            stopIfObsolete();\r\n            gotoNextProblem();\r\n        });\r\n    };\r\n\r\n\r\n    if (!problem) {\r\n        return (\r\n            <>\r\n            </>\r\n        );\r\n    }\r\n\r\n    if (mode === `type`) {\r\n        return (\r\n            <>\r\n                <DoodleGameView_Type prompt={prompt.current} drawings={drawings ?? []} onDone={onTypeDone} sayAgain={sayAgain} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    if (mode === `chooseBest` && drawings) {\r\n        return (\r\n            <>\r\n                <DoodleGameView_ChooseBest prompt={prompt.current} drawings={drawings} onChooseBest={onChooseBest} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <DoodleGameView_DrawWord prompt={prompt.current} hint={problem.hint} onDone={onDrawingDone} onSkip={onDrawingSkip} />\r\n            {/* <DoodleDisplayView style={styles.drawing} drawing={defaultDoodleDrawing()} /> */}\r\n        </>\r\n    );\r\n};\r\n\r\nexport const DoodleGameView_DrawWord = (props: { prompt: string, hint?: string, onDone: (drawing: DoodleDrawing) => void, onSkip: () => void }) => {\r\n    const [drawing, setDrawing] = useState(defaultDoodleDrawing());\r\n    const changeDoodle = (value: DoodleDrawing) => {\r\n        setDrawing(value);\r\n    };\r\n\r\n    const done = () => {\r\n        props.onDone(drawing);\r\n    };\r\n    const skip = () => {\r\n        props.onSkip();\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Reset problem when prompt changes\r\n        setDrawing(defaultDoodleDrawing());\r\n    }, [props.prompt]);\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <View style={styles.titleView}>\r\n                <Text style={styles.titleText}>Draw</Text>\r\n            </View>\r\n            <DoodleDrawerView style={styles.drawing} drawing={drawing} onChange={changeDoodle} />\r\n            <View style={styles.promptView}>\r\n                <Text style={styles.promptText}>{props.prompt}</Text>\r\n                {!!props.hint && (<Text style={styles.hintText}>{props.hint}</Text>)}\r\n            </View>\r\n            <View style={styles.buttonRowView}>\r\n                <TouchableOpacity onPress={skip}>\r\n                    <View style={styles.buttonView}>\r\n                        <Text style={styles.buttonText}>Skip</Text>\r\n                    </View>\r\n                </TouchableOpacity>\r\n                <TouchableOpacity onPress={done}>\r\n                    <View style={styles.buttonView}>\r\n                        <Text style={styles.buttonText}>Done</Text>\r\n                    </View>\r\n                </TouchableOpacity>\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n\r\nexport const DoodleGameView_ChooseBest = (props: { prompt: string, drawings: DoodleData[], onChooseBest: (drawing: DoodleData) => void }) => {\r\n    return (\r\n        <View style={styles.container}>\r\n            <View style={styles.titleView}>\r\n                <Text style={styles.titleText}>Choose Best</Text>\r\n            </View>\r\n            <View style={styles.promptView}>\r\n                <Text style={styles.promptText}>{props.prompt}</Text>\r\n            </View>\r\n            <View style={styles.drawingChoicesView} >\r\n                {props.drawings.map(x => (\r\n                    <TouchableOpacity key={x.key} onPress={() => props.onChooseBest(x)}>\r\n                        <View style={styles.drawingChoiceWrapper} >\r\n                            <DoodleDisplayView style={styles.drawingChoice} drawing={x.drawing} />\r\n                        </View>\r\n                    </TouchableOpacity>\r\n                ))}\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n\r\nconst typeStyles = {\r\n    completedText: {\r\n        fontSize: 16,\r\n        color: `#FFFF00`,\r\n    },\r\n} as const;\r\nexport const DoodleGameView_Type = (props: { prompt: string, drawings: DoodleData[], onDone: () => void, sayAgain: () => void }) => {\r\n\r\n    const [status, setStatus] = useState({ completed: ``, remaining: props.prompt });\r\n    useEffect(() => {\r\n        setStatus({ completed: ``, remaining: props.prompt });\r\n    }, [props.prompt, props.drawings]);\r\n\r\n    const onExpectedKeyPress = () => {\r\n        setStatus(s => {\r\n            if (s.remaining.length <= 1) {\r\n                props.onDone();\r\n            }\r\n            const nextChar = s.remaining[0];\r\n            return {\r\n                completed: s.completed + nextChar,\r\n                remaining: s.remaining.substr(1),\r\n            };\r\n        });\r\n    };\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <View style={styles.titleView}>\r\n                <Text style={styles.titleText}>Type Word</Text>\r\n            </View>\r\n            <View style={styles.drawingChoicesView} >\r\n                {props.drawings.map(x => (\r\n                    <View key={x.key} style={styles.drawingChoiceWrapper} >\r\n                        <DoodleDisplayView style={styles.drawingChoice} drawing={x.drawing} />\r\n                    </View>\r\n                ))}\r\n            </View>\r\n            <TouchableOpacity onPress={props.sayAgain}>\r\n                <View style={styles.buttonView}>\r\n                    <Text style={styles.buttonText}>Say Again</Text>\r\n                </View>\r\n            </TouchableOpacity>\r\n            <View>\r\n                <Text style={typeStyles.completedText}>{`${status.completed}${status.remaining.length > 0 ? `_` : ``}`}</Text>\r\n            </View>\r\n            <KeyboardSimplified expectedCharacter={status.remaining[0] ?? ` `} showHints onExpectedKeyPress={onExpectedKeyPress} />\r\n        </View>\r\n    );\r\n};\r\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\nimport React, { useRef, useState, useEffect } from 'react';\r\nimport { Text, View, Platform, ActivityIndicator } from 'react-native-lite';\r\nimport { createDoodleDrawingStorageService } from 'doodle/doodle-storage';\r\nimport { DoodleDrawingStorageService } from 'doodle/doodle';\r\nimport { useAutoLoadingError } from 'utils-react/hooks';\r\nimport { Problem } from '../problems/problems-service';\r\nimport { EducationalGame_Doodle, DoodleProblemService } from '../doodle-game';\r\nimport { createSpeechService } from '../utils/speech';\r\nimport { createSpellingProblemService } from '../problems/spelling/spelling-problem-service';\r\nimport { VoiceChooser } from '../utils/voice-chooser';\r\nimport { createAutoSavedProblemService } from '../problems/problem-state-storage';\r\nimport { createProgressGameProblemService } from '../progress-games/progress-game';\r\n\r\nexport const EducationalGame_Doodle_Spelling = (props: {}) => {\r\n    const speechService = useRef(createSpeechService());\r\n    const [hasStarted, setHasStarted] = useState(Platform.OS !== `web`);\r\n\r\n    const { loading, error, doWork } = useAutoLoadingError();\r\n    const drawingStorage = useRef(null as null | DoodleDrawingStorageService);\r\n    const problemService = useRef(null as null | DoodleProblemService);\r\n    useEffect(() => {\r\n        doWork(async (stopIfObsolete) => {\r\n            drawingStorage.current = await createDoodleDrawingStorageService();\r\n            stopIfObsolete();\r\n\r\n            const inner = createProgressGameProblemService(\r\n                createAutoSavedProblemService(createSpellingProblemService({ speechService: speechService.current, sectionSize: 8 })\r\n                    , `ProblemsSpellingDoodle`));\r\n\r\n            let lastProblem = null as null | Problem;\r\n            problemService.current = {\r\n                getSections: inner.getSections,\r\n                gotoSection: inner.gotoSection,\r\n                getNextProblem: () => {\r\n                    if (lastProblem) {\r\n                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                        inner.recordAnswer(lastProblem, lastProblem.answers.find(x => x.isCorrect)!);\r\n                    }\r\n\r\n                    const p = inner.getNextProblem();\r\n                    if (!p.question) { return null; }\r\n                    lastProblem = p;\r\n\r\n                    return {\r\n                        prompt: p.answers.find(x => x.isCorrect)?.value ?? ``,\r\n                        // hint: p.question,\r\n                        speakPrompt: p.onQuestion,\r\n                    };\r\n                },\r\n            };\r\n        });\r\n    }, []);\r\n\r\n    // Only web\r\n    if (!hasStarted) {\r\n        const speak = () => { speechService.current.speak(`Start`); setHasStarted(true); };\r\n        return (\r\n            <View>\r\n                <VoiceChooser languange='en' speechService={speechService.current} />\r\n                <div onClick={() => speak()}>\r\n                    <View style={{ height: 300, alignSelf: `center`, alignItems: `center`, justifyContent: `center` }}>\r\n                        <Text style={{ fontSize: 36 }}>Start</Text>\r\n                    </View>\r\n                </div>\r\n            </View>\r\n        );\r\n    }\r\n\r\n    if (loading || !drawingStorage.current || !problemService.current) {\r\n        return (\r\n            <>\r\n                <ActivityIndicator size='large' color='#FFFF00' />\r\n            </>\r\n        );\r\n    }\r\n\r\n    return <EducationalGame_Doodle\r\n        problemService={problemService.current}\r\n        drawingStorage={drawingStorage.current}\r\n    />;\r\n};\r\n"],"sourceRoot":""}