{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/networking/websockets-api/client/websocket-client-test-view.tsx"],"names":["key","Date","now","Math","random","WebsocketClientTestView","props","useState","messages","setMessages","events","setEvents","send","useRef","useEffect","connection","createWebsocketClient","websocketsApiUrl","websocketsApiConfig","connect","channelKey","current","unsubMessages","subscribeMessages","message","s","receivedAtTimestamp","unsubEvents","subscribeConnectionEvents","event","unsubscribe","messageText","setMessageText","sendMessage","text","timestamp","senderKey","style","padding","whiteSpace","fontSize","map","x","i","JSON","stringify","flexDirection","alignItems","flex","paddingRight","value","onChange","keyboardType","autoCompleteType","onBlur","onSubmitEditing","onPress"],"mappings":"gQAOMA,EAAM,GAAGC,KAAKC,MAAQC,KAAKC,SAEpBC,EAA0B,SAACC,GAAc,MAOlBC,mBAAS,IAAlCC,EAP2C,KAOjCC,EAPiC,OAQtBF,mBAAS,IAA9BG,EAR2C,KAQnCC,EARmC,KAS5CC,EAAOC,iBAAO,MAGpBC,qBAAU,WACN,IAAMC,EAAaC,YAAsB,CAAEC,iBAAkBC,IAAoBD,mBAC5EE,QAAqB,CAAEC,WAAY,SAExCR,EAAKS,QAAUN,EAAWH,KAE1B,IAAMU,EAAgBP,EAAWQ,mBAAkB,SAAAC,GAE/Cf,GAAY,SAAAgB,GAAC,4BAAQA,GAAR,kBAAgBD,EAAhB,CAAyBE,oBAAqBzB,KAAKC,gBAE9DyB,EAAcZ,EAAWa,2BAA0B,SAAAC,GACrDlB,GAAU,SAAAc,GAAC,4BAAQA,GAAR,CAAWI,UAE1B,OAAO,WACHjB,EAAKS,QAAU,KACfC,EAAcQ,cACdH,EAAYG,iBAEjB,IA9B+C,MAgCZvB,mBAAS,IAAxCwB,EAhC2C,KAgC9BC,EAhC8B,KAiC5CC,EAAc,WAAM,MACjBrB,EAAKS,UACV,UAAAT,EAAKS,eAAL,cAAAT,EAAe,CAAEsB,KAAMH,EAAaI,UAAWlC,KAAKC,MAAOkC,UAAWpC,IACtEgC,EAAe,MAGnB,OACI,kBAAC,IAAD,CAAMK,MAAO,CAAEC,QAAS,IACpB,kBAAC,IAAD,CAAMD,MAAO,CAAEC,QAAS,IACpB,kBAAC,IAAD,CAAMD,MAAO,CAAEE,WAAY,WAAYC,SAAU,KAAjD,UACC9B,EAAO+B,KAAI,SAACC,EAAGC,GAAJ,OACR,kBAAC,IAAD,CAAM3C,IAAK2C,EAAGN,MAAO,CAAEE,WAAY,WAAYC,SAAU,KAAOI,KAAKC,UAAUH,QAGvF,kBAAC,IAAD,CAAML,MAAO,CAAEC,QAAS,IACpB,kBAAC,IAAD,CAAMD,MAAO,CAAEE,WAAY,WAAYC,SAAU,KAAjD,YACChC,EAASiC,KAAI,SAACC,EAAGC,GAAJ,aACV,kBAAC,IAAD,CAAM3C,IAAK2C,EAAGN,MAAO,CAAEE,WAAY,WAAYC,SAAU,KAAUE,EAAEP,UAArE,KAAkFO,EAAEhB,oBAAsBgB,EAAEP,WAA5G,gBAA0HO,EAAER,YAA5H,QAAoIU,KAAKC,UAAUH,SAG3J,kBAAC,IAAD,CAAML,MAAO,CAAEC,QAAS,IACpB,kBAAC,IAAD,CAAMD,MAAO,CAAEE,WAAY,WAAYC,SAAU,KAAjD,gBACA,kBAAC,IAAD,CAAMH,MAAO,CAAES,cAAe,MAAOC,WAAY,WAC7C,kBAAC,IAAD,CAAMV,MAAO,CAAEW,KAAM,EAAGC,aAAc,IAClC,kBAAC,IAAD,CAAWZ,MAAO,CAAEG,SAAU,IAAMU,MAAOnB,EAAaoB,SAAUnB,EAAgBoB,aAAa,UAAUC,iBAAiB,MAAMC,OAAQrB,EAAasB,gBAAiBtB,KAE1K,kBAAC,IAAD,CAAkBuB,QAASvB,GACvB,kBAAC,IAAD,CAAMI,MAAO,CAAEE,WAAY,WAAYC,SAAU,KAAjD","file":"33-54e95b0777fc49ba3768.js","sourcesContent":["/* eslint-disable react/no-array-index-key */\r\nimport React, { useRef, useState, useEffect } from 'react';\r\nimport { View, Text, TouchableOpacity, TextInput } from 'react-native-lite';\r\nimport { createWebsocketClient } from './websocket-client';\r\nimport { websocketsApiConfig } from './config';\r\nimport { WebsocketConnectionEvent } from './types';\r\n\r\nconst key = `${Date.now()}${Math.random()}`;\r\n\r\nexport const WebsocketClientTestView = (props: {}) => {\r\n\r\n    type TestMessage = {\r\n        text?: string;\r\n        timestamp: number;\r\n        senderKey: string;\r\n    };\r\n    const [messages, setMessages] = useState([] as (TestMessage & { receivedAtTimestamp: number })[]);\r\n    const [events, setEvents] = useState([] as WebsocketConnectionEvent[]);\r\n    const send = useRef(null as null | ((message: TestMessage) => void));\r\n\r\n\r\n    useEffect(() => {\r\n        const connection = createWebsocketClient({ websocketsApiUrl: websocketsApiConfig.websocketsApiUrl })\r\n            .connect<TestMessage>({ channelKey: `test` });\r\n\r\n        send.current = connection.send;\r\n\r\n        const unsubMessages = connection.subscribeMessages(message => {\r\n\r\n            setMessages(s => [...s, { ...message, receivedAtTimestamp: Date.now() }]);\r\n        });\r\n        const unsubEvents = connection.subscribeConnectionEvents(event => {\r\n            setEvents(s => [...s, event]);\r\n        });\r\n        return () => {\r\n            send.current = null;\r\n            unsubMessages.unsubscribe();\r\n            unsubEvents.unsubscribe();\r\n        };\r\n    }, []);\r\n\r\n    const [messageText, setMessageText] = useState(``);\r\n    const sendMessage = () => {\r\n        if (!send.current) { return; }\r\n        send.current?.({ text: messageText, timestamp: Date.now(), senderKey: key });\r\n        setMessageText(``);\r\n    };\r\n\r\n    return (\r\n        <View style={{ padding: 4 }}>\r\n            <View style={{ padding: 4 }}>\r\n                <Text style={{ whiteSpace: `pre-wrap`, fontSize: 18 }}>Events</Text>\r\n                {events.map((x, i) => (\r\n                    <Text key={i} style={{ whiteSpace: `pre-wrap`, fontSize: 14 }}>{JSON.stringify(x)}</Text>\r\n                ))}\r\n            </View>\r\n            <View style={{ padding: 4 }}>\r\n                <Text style={{ whiteSpace: `pre-wrap`, fontSize: 18 }}>Messages</Text>\r\n                {messages.map((x, i) => (\r\n                    <Text key={i} style={{ whiteSpace: `pre-wrap`, fontSize: 14 }}>{`${x.timestamp} ${x.receivedAtTimestamp - x.timestamp}: ${x.text ?? JSON.stringify(x)}`}</Text>\r\n                ))}\r\n            </View>\r\n            <View style={{ padding: 4 }}>\r\n                <Text style={{ whiteSpace: `pre-wrap`, fontSize: 18 }}>Send Message</Text>\r\n                <View style={{ flexDirection: `row`, alignItems: `center` }}>\r\n                    <View style={{ flex: 1, paddingRight: 4 }}>\r\n                        <TextInput style={{ fontSize: 16 }} value={messageText} onChange={setMessageText} keyboardType='default' autoCompleteType='off' onBlur={sendMessage} onSubmitEditing={sendMessage} />\r\n                    </View>\r\n                    <TouchableOpacity onPress={sendMessage} >\r\n                        <Text style={{ whiteSpace: `pre-wrap`, fontSize: 18 }}>Send</Text>\r\n                    </TouchableOpacity>\r\n                </View>\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n"],"sourceRoot":""}