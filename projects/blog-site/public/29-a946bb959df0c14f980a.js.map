{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/payments/providers/stripe/client-test/stripe-example.tsx"],"names":["StripeExamplePage","props","comp","createPaymentClientComponents_stripe","stripePublicKey","setupToken","stripeEncodeClientSetupToken","clientSecret","customerBillingDetails","phone","AppWrapperComponent","children","useState","textPadding","elementPadding","buttonAlignment","borderRadius","borderColor","theme","colors","border","backgroundColor","background_field","textColor","text","style","setStyle","padding","background","color","PaymentMethodEntryComponent","paymentMethodSetupToken","onPaymentMethodReady","params","console","log","TestControls","key","onChangeStyle","JSON","stringify","styleText","setStyleText","error","setError","value","onChange","e","target","type","onClick","preventDefault","s","parse","error_","message","changeStyle"],"mappings":"wHAAA,mKAOaA,EAAoB,SAACC,GAAc,MACtCC,EAAOC,YAAqC,CAAEC,gBAAiB,gBAC/DC,EAAaC,YAA6B,CAAEC,aAAc,eAAgBC,uBAAwB,CAAEC,MAAO,kBAC3GC,EAAmB,UAAGR,EAAKQ,2BAAR,QAAgC,gBAAGC,EAAH,EAAGA,SAAH,OAAmB,oCAAGA,IAHnC,EAIlBC,mBAAS,CAC/BC,YAAa,EACbC,eAAgB,EAChBC,gBAAiB,QACjBC,aAAc,EACdC,YAAaC,IAAMC,OAAOC,OAC1BC,gBAAiBH,IAAMC,OAAOG,iBAC9BC,UAAWL,IAAMC,OAAOK,OAPrBC,EAJqC,KAI9BC,EAJ8B,KAc5C,OACI,kBAAChB,EAAD,KACI,yBAAKe,MAAO,CAAEE,QAAS,GAAIC,WAAYV,IAAMC,OAAOS,WAAYC,MAAOX,IAAMC,OAAOK,OAChF,kDACA,6BACA,mDACA,iCAAM,kBAACtB,EAAK4B,4BAAN,CAAkCL,MAAOA,EAAOM,wBAAyB1B,EAAY2B,qBAAsB,SAACC,GAAaC,QAAQC,IAAR,uBAAoCF,MAAnK,MAEJ,kBAACG,EAAD,CAAcC,IAAI,SAASZ,MAAOA,EAAOa,cAAeZ,MAMvDU,EAAe,SAAC,GAAsH,IAApHX,EAAoH,EAApHA,MAAOa,EAA6G,EAA7GA,cAA6G,EAC7G1B,mBAAS2B,KAAKC,UAAUf,EAAO,KAAM,IAAhEgB,EADwI,KAC7HC,EAD6H,OAErH9B,mBAAS,MAA5B+B,EAFwI,KAEjIC,EAFiI,KAiB/I,OACI,6BACI,8CAEA,sCACA,6BACI,8BAAUC,MAAOJ,EAAWK,SAAU,SAACC,GAAD,OAAOL,EAAaK,EAAEC,OAAOH,WAEvE,4BAAQI,KAAK,SAASC,QAAS,SAACH,GAAQA,EAAEI,iBArB9B,WAChB,IACQR,GACAC,EAAS,MAGb,IAAMQ,EAAIb,KAAKc,MAAMZ,GACrBH,EAAcc,GAChB,MAAOE,GACLV,EAAS,CAAEW,QAAS,cAAeZ,MAAOW,KAYkBE,KAA5D,aAEA,kZAoBCb,GACG,yBAAKlB,MAAO,CAAEI,MAAO,YACjB,8BAAOc,EAAMY,SACb,6BAAMhB,KAAKC,UAAUG,EAAMA,MAAO,KAAM","file":"29-a946bb959df0c14f980a.js","sourcesContent":["/* eslint-disable no-console */\r\nimport React, { useState } from 'react';\r\nimport { theme } from 'themes/theme';\r\nimport { PaymentComponentStyle } from '../../../common/types-react';\r\nimport { createPaymentClientComponents_stripe } from '../client/stripe-payment-react';\r\nimport { stripeEncodeClientSetupToken } from '../client/stripe-client-tokens';\r\n\r\nexport const StripeExamplePage = (props: {}) => {\r\n    const comp = createPaymentClientComponents_stripe({ stripePublicKey: `spkey_12345` });\r\n    const setupToken = stripeEncodeClientSetupToken({ clientSecret: `I like pizza`, customerBillingDetails: { phone: `987-555-1234` } });\r\n    const AppWrapperComponent = comp.AppWrapperComponent ?? (({ children }) => (<>{children}</>));\r\n    const [style, setStyle] = useState({\r\n        textPadding: 4,\r\n        elementPadding: 4,\r\n        buttonAlignment: `right`,\r\n        borderRadius: 4,\r\n        borderColor: theme.colors.border,\r\n        backgroundColor: theme.colors.background_field,\r\n        textColor: theme.colors.text,\r\n    } as PaymentComponentStyle);\r\n\r\n    return (\r\n        <AppWrapperComponent>\r\n            <div style={{ padding: 16, background: theme.colors.background, color: theme.colors.text }}>\r\n                <div>Page and Stuff...</div>\r\n                <hr />\r\n                <div>Show me the Money!</div>\r\n                <div> <comp.PaymentMethodEntryComponent style={style} paymentMethodSetupToken={setupToken} onPaymentMethodReady={(params) => { console.log(`onPaymentMethodReady`, params); }} /> </div>\r\n            </div>\r\n            <TestControls key='STATIC' style={style} onChangeStyle={setStyle} />\r\n        </AppWrapperComponent>\r\n    );\r\n};\r\n\r\n\r\nexport const TestControls = ({ style, onChangeStyle }: { style: PaymentComponentStyle, onChangeStyle: (style: PaymentComponentStyle) => void }) => {\r\n    const [styleText, setStyleText] = useState(JSON.stringify(style, null, 2));\r\n    const [error, setError] = useState(null as null | { message: string, error: unknown });\r\n\r\n    const changeStyle = () => {\r\n        try {\r\n            if (error) {\r\n                setError(null);\r\n            }\r\n\r\n            const s = JSON.parse(styleText);\r\n            onChangeStyle(s);\r\n        } catch (error_) {\r\n            setError({ message: `style error`, error: error_ });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div>Test Controls</div>\r\n\r\n            <div>Style</div>\r\n            <div>\r\n                <textarea value={styleText} onChange={(e) => setStyleText(e.target.value)} />\r\n            </div>\r\n            <button type='button' onClick={(e) => { e.preventDefault(); changeStyle(); }}>Set Style</button>\r\n\r\n            <pre>\r\n                {`\r\nPaymentComponentStyle = {\r\n    borderColor?: string;\r\n    backgroundColor?: string;\r\n    textColor?: string;\r\n    textColor_invalid?: string;\r\n    fontSize?: number;\r\n    fontFamily?: string;\r\n\r\n    textPadding?: number;\r\n    elementPadding?: number;\r\n    buttonAlignment?: 'left' | 'right' | 'center';\r\n\r\n    // Content\r\n    buttonText?: string;\r\n}\r\n                `}\r\n            </pre>\r\n\r\n            {error && (\r\n                <div style={{ color: `#FFCCCC` }}>\r\n                    <span>{error.message}</span>\r\n                    <pre>{JSON.stringify(error.error, null, 2)}</pre>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n"],"sourceRoot":""}