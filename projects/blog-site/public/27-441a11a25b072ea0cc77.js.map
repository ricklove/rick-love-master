{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/games/educational-games/star-blast.tsx"],"names":["EducationalGame_StarBlast_Multiples","props","EducationalGame_StarBlast","problemService","createReviewProblemService","createMultiplesProblemService","min","max","useState","moveDirection","x","y","buttons","pressState","setPressState","style","position","marginTop","marginBottom","padding","alignItems","GameView","top","bottom","left","right","opacity","onPressIn","onPressOut","zIndex","flex","alignSelf","colors","gamepad","onPressStateChange","value","key","text","backgroundColor","borderColor","viewscreen","gameStyles","viewscreenView","height","width","borderWidth","borderStyle","sprite","viewSize","fontFamily","fontSize","textAlign","question","view","justifyContent","gameOver","useRef","current","gameState","lives","gameStartTimeMs","Date","now","getGameTime","gameTime","playerPositionState","rotation","projectilesState","lastShotTime","shots","debris","enemiesState","enemies","problemsState","setRenderId","useEffect","gotoNextProblem","p","getNextProblem","console","log","pSize","answers","length","newProblemState","problemTime","map","i","pos","isAnsweredWrong","newEnemyState","ans","answer","vel","onHit","setTimeout","recordAnswer","isCorrect","forEach","ignore","destroyed","s","gameLastTime","requestAnimationFrame","gameLoop","gameDeltaTime","Math","getCommonState","playerPosition","onLoseLife","push","kind","gameOverTime","deadTime","gameResult","updateGame","isDown","playerResult","updatePlayer","projectilesResult","updateProjectiles","enemiesResult","updateEnemies","timeSinceProblem","Array","Sprite","hasHitGround","filter","Fragment","explodeTime","transform","undefined","targetRotation","w","gw","h","gh","playerPos","didShoot","find","d","pad","hPad","random","newShots","radius","radiusSq","e","getDistanceSq","radiusSq_enemies","e2","i2","swap","a","b","radiusSq_player","newEnemies","offsetX","offsetY","scale","getSpriteEmoji","size","stylePosition","pointerEvents","styleRotation","floor"],"mappings":"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","file":"27-441a11a25b072ea0cc77.js","sourcesContent":["/* eslint-disable react/no-array-index-key */\r\n/* eslint-disable jsx-a11y/accessible-emoji */\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { View, Text, Pressable, TouchableOpacity } from 'react-native-lite';\r\nimport { createMultiplesProblemService } from './problems/multiples';\r\nimport { ProblemService, Problem } from './problems/problems-service';\r\nimport { GamepadAnalogStateful, GamepadPressState } from './components/game-pad-analog';\r\nimport { getDistanceSq, Vector2 } from './utils/vectors';\r\nimport { createReviewProblemService } from './problems/problems-reviewer';\r\n\r\nexport const EducationalGame_StarBlast_Multiples = (props: {}) => {\r\n    return <EducationalGame_StarBlast problemService={createReviewProblemService(createMultiplesProblemService({ min: 1, max: 12 }), {})} />;\r\n};\r\n\r\nexport const EducationalGame_StarBlast = (props: { problemService: ProblemService }) => {\r\n\r\n    const [pressState, setPressState] = useState({ moveDirection: { x: 0, y: 0 }, buttons: [] } as GamepadPressState);\r\n    const onPressStateChange = (value: GamepadPressState) => {\r\n        // console.log(`onPressStateChange`, { ...x, dir: { ...x.moveDirection }, buttons: x.buttons.map(b => ({ ...b })) });\r\n        setPressState(value);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <View style={{ position: `relative` }}>\r\n                <View style={{ marginTop: 50, marginBottom: 150, padding: 2, alignItems: `center` }} >\r\n                    <View style={{ alignItems: `center` }} >\r\n                        <GameView pressState={pressState} problemService={props.problemService} />\r\n                        <Pressable style={{ position: `absolute`, top: 0, bottom: 0, left: 0, right: 0, opacity: 0 }} onPressIn={() => { }} onPressOut={() => { }} />\r\n                        <View style={{ zIndex: 10, flex: 1, alignSelf: `stretch` }}>\r\n                            <GamepadAnalogStateful style={colors.gamepad} onPressStateChange={onPressStateChange} buttons={[{ key: `A`, text: `🔥` }]} />\r\n                        </View>\r\n                    </View>\r\n                </View>\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n\r\nconst colors = {\r\n    gamepad: {\r\n        backgroundColor: `#333333`,\r\n        borderColor: `#000033`,\r\n    },\r\n    viewscreen: {\r\n        borderColor: `#000033`,\r\n        backgroundColor: `#000000`,\r\n    },\r\n};\r\n\r\nconst gameStyles = {\r\n    viewscreenView: {\r\n        height: 300,\r\n        width: 300,\r\n        backgroundColor: colors.viewscreen.backgroundColor,\r\n        borderColor: colors.viewscreen.borderColor,\r\n        borderWidth: 1,\r\n        borderStyle: `solid`,\r\n    },\r\n    sprite: {\r\n        viewSize: { width: 32, height: 32 },\r\n        text: {\r\n            fontFamily: `\"Lucida Console\", Monaco, monospace`,\r\n            fontSize: 32,\r\n            textAlign: `center`,\r\n        },\r\n    },\r\n    question: {\r\n        view: { flex: 1, justifyContent: `center`, padding: 4 },\r\n        text: {\r\n            fontFamily: `\"Lucida Console\", Monaco, monospace`,\r\n            fontSize: 24,\r\n        },\r\n    },\r\n    gameOver: {\r\n        view: { flex: 1, justifyContent: `center`, padding: 4 },\r\n        text: {\r\n            fontFamily: `\"Lucida Console\", Monaco, monospace`,\r\n            fontSize: 24,\r\n            textAlign: `center`,\r\n        },\r\n    },\r\n} as const;\r\n\r\ntype GamePosition = {\r\n    x: number;\r\n    y: number;\r\n    rotation: number;\r\n};\r\n\r\ntype GameState = {\r\n    gameStartTimeMs: number;\r\n    lives: number;\r\n    deadTime?: number;\r\n    gameOverTime?: number;\r\n};\r\n\r\n\r\ntype AnswerState = { key: string, value: string, isCorrect: boolean, isAnsweredWrong: boolean };\r\nconst GameView = (props: { pressState: GamepadPressState, problemService: ProblemService }) => {\r\n\r\n    const pressState = useRef(props.pressState);\r\n    pressState.current = props.pressState;\r\n\r\n    const gameState = useRef({ lives: 3, gameStartTimeMs: Date.now() } as GameState);\r\n    const getGameTime = () => {\r\n        return {\r\n            gameTime: (Date.now() - gameState.current.gameStartTimeMs) / 1000,\r\n        };\r\n    };\r\n\r\n    const playerPositionState = useRef({ x: gameStyles.viewscreenView.width * 0.5, y: gameStyles.viewscreenView.height * 0.85, rotation: 0 } as GamePosition);\r\n    const projectilesState = useRef({ lastShotTime: 0, shots: [], debris: [] } as ProjectilesState);\r\n    const enemiesState = useRef({ enemies: [] } as EnemiesState);\r\n\r\n    const problemsState = useRef(null as null | { problemTime: number, question: string, answers: (Problem['answers'][0] & { key: string, pos: GamePosition, isAnsweredWrong: boolean })[] });\r\n    const [renderId, setRenderId] = useState(0);\r\n\r\n    const restartGame = () => {\r\n        gameState.current = {\r\n            gameStartTimeMs: gameState.current.gameStartTimeMs,\r\n            lives: 3,\r\n        };\r\n    };\r\n\r\n    const gameOver = () => {\r\n        gameState.current = {\r\n            ...gameState.current,\r\n            lives: 0,\r\n            gameOverTime: getGameTime().gameTime,\r\n        };\r\n    };\r\n\r\n    const gotoNextProblem = () => {\r\n        const p = props.problemService.getNextProblem();\r\n\r\n        console.log(`gotoNextProblem`, { p });\r\n\r\n        if (!p.question) {\r\n            // Game over - problems done\r\n            return;\r\n        }\r\n\r\n        const pSize = gameStyles.viewscreenView.width / (p.answers.length);\r\n        const newProblemState = {\r\n            problemTime: getGameTime().gameTime,\r\n            question: p.question,\r\n            answers: p.answers.map((x, i) => ({ ...x, key: `${p.question} ${x.value}`, pos: { x: pSize * (0.5 + i), y: gameStyles.sprite.viewSize.height * 0.5, rotation: 0 }, isAnsweredWrong: false })),\r\n        };\r\n        const newEnemyState = {\r\n            enemies: newProblemState.answers.map((ans, i) => ({\r\n                key: `${p.question} ${ans.value}`,\r\n                answer: ans,\r\n                pos: { x: pSize * (0.5 + i), y: gameStyles.sprite.viewSize.height * 1.5, rotation: 0 },\r\n                vel: { x: 0, y: 5 },\r\n                onHit: () => {\r\n                    setTimeout(() => {\r\n                        console.log(`onHit`, { ans });\r\n                        props.problemService.recordAnswer(p, ans);\r\n                        if (ans.isCorrect) {\r\n                            // TODO: Update score, etc.\r\n                            // Let bullets clear\r\n                            projectilesState.current.shots.forEach(x => { x.ignore = true; });\r\n                            gotoNextProblem();\r\n                        } else {\r\n                            ans.isAnsweredWrong = true;\r\n                        }\r\n                    });\r\n                },\r\n                destroyed: false,\r\n            })),\r\n        };\r\n\r\n        problemsState.current = newProblemState;\r\n        enemiesState.current = newEnemyState;\r\n        setRenderId(s => s + 1);\r\n    };\r\n\r\n    useEffect(() => {\r\n        gotoNextProblem();\r\n\r\n        // Game Loop\r\n        let gameLastTime = Date.now();\r\n        const gameLoop = () => {\r\n            const { gameTime } = getGameTime();\r\n            const gameDeltaTime = Math.min(0.1, (Date.now() - gameLastTime) / 1000);\r\n            gameLastTime = Date.now();\r\n\r\n            // if (!pressState.current.moveDirection.x\r\n            //     && !pressState.current.moveDirection.y) {\r\n            //     // No change\r\n            //     requestAnimationFrame(gameLoop);\r\n            //     return;\r\n            // }\r\n\r\n            // console.log(`gameLoop Update`);\r\n\r\n            // Update\r\n\r\n            const getCommonState = (): CommonGameState => {\r\n                return {\r\n                    gameTime,\r\n                    gameDeltaTime,\r\n                    gameState: gameState.current,\r\n                    pressState: pressState.current,\r\n                    playerPosition: playerPositionState.current,\r\n                    projectilesState: projectilesState.current,\r\n                    enemiesState: enemiesState.current,\r\n                    onLoseLife: () => {\r\n                        projectilesState.current.debris.push({ key: `player${gameTime}`, kind: `player-character`, pos: { ...playerPositionState.current }, vel: { x: 0, y: 0 } });\r\n                        playerPositionState.current = {\r\n                            x: gameStyles.viewscreenView.width * 0.5, y: gameStyles.viewscreenView.height * 0.85, rotation: 0,\r\n                        };\r\n\r\n                        if (gameState.current.lives <= 1) {\r\n                            // Game over\r\n                            gameOver();\r\n                            return;\r\n                        }\r\n\r\n                        gameState.current = {\r\n                            ...gameState.current,\r\n                            lives: gameState.current.lives - 1,\r\n                            deadTime: gameTime,\r\n                        };\r\n                    },\r\n                };\r\n            };\r\n\r\n\r\n            // Game\r\n            const gameResult = updateGame(getCommonState());\r\n            gameState.current = gameResult;\r\n\r\n            if (!gameState.current.gameOverTime) {\r\n                // Player\r\n                const playerResult = updatePlayer(getCommonState());\r\n                playerPositionState.current = playerResult.playerPosition;\r\n            } else if (getGameTime().gameTime > 1 + gameState.current.gameOverTime\r\n                && pressState.current.buttons[0]?.isDown) {\r\n                setTimeout(() => {\r\n                    restartGame();\r\n                }, 250);\r\n            }\r\n\r\n            // Projectiles\r\n            const projectilesResult = updateProjectiles(getCommonState());\r\n            projectilesState.current = projectilesResult;\r\n\r\n            // Enemies\r\n            const enemiesResult = updateEnemies(getCommonState());\r\n            enemiesState.current = enemiesResult;\r\n\r\n\r\n            // Game Loop\r\n            requestAnimationFrame(gameLoop);\r\n            setRenderId(s => s + 1);\r\n        };\r\n\r\n        requestAnimationFrame(gameLoop);\r\n    }, []);\r\n\r\n\r\n    // console.log(`GameView render`, { playerStylePosition });\r\n\r\n    const timeSinceProblem = getGameTime().gameTime - (problemsState.current?.problemTime ?? 0);\r\n\r\n    return (\r\n        <>\r\n            <View style={gameStyles.viewscreenView} >\r\n                {[... new Array(gameState.current.lives)].map((x, i) => (\r\n                    <Sprite key={`life${i}`} kind='life' position={{ x: gameStyles.viewscreenView.width - (gameStyles.sprite.viewSize.width * (1 + i)), y: -0.8 * gameStyles.sprite.viewSize.height, rotation: 0 }} />\r\n                ))}\r\n                {projectilesState.current.debris.map(x => (\r\n                    <Sprite key={x.key} kind={x.hasHitGround ? `${x.kind}-splat` as SpriteKind : x.kind} position={x.pos} />\r\n                ))}\r\n                {enemiesState.current?.enemies.filter(x => !x.destroyed).map(x => (\r\n                    <React.Fragment key={x.key}>\r\n                        {!x.answer.isAnsweredWrong && (<Sprite kind='answer' position={{ x: x.pos.x, y: x.pos.y - gameStyles.sprite.viewSize.height, rotation: 0 }} text={x.answer.value} />)}\r\n                        {x.answer.isAnsweredWrong && (<Sprite kind='answer-wrong' position={{ x: x.pos.x, y: x.pos.y - gameStyles.sprite.viewSize.height, rotation: 0 }} />)}\r\n                    </React.Fragment>\r\n                ))}\r\n                {enemiesState.current?.enemies.filter(x => !x.destroyed).map(x => (\r\n                    <React.Fragment key={x.key}>\r\n                        <Sprite kind={x.explodeTime ? `enemy-explode` : `enemy`} position={x.pos} />\r\n                    </React.Fragment>\r\n                ))}\r\n                {!gameState.current.gameOverTime && !gameState.current.deadTime && (\r\n                    <Sprite kind='player' position={playerPositionState.current} />\r\n                )}\r\n                {projectilesState.current.shots.map(x => (\r\n                    <Sprite key={x.key} kind={x.explodeTime ? `shot-explode` : `shot`} position={x.pos} />\r\n                ))}\r\n                {gameState.current.gameOverTime && (\r\n                    <View>\r\n                        <View style={{ position: `absolute`, top: gameStyles.viewscreenView.height * 0.5, width: gameStyles.viewscreenView.width }}>\r\n                            <Text style={gameStyles.gameOver.text}>Game Over</Text>\r\n                            {getGameTime().gameTime > 1 + gameState.current.gameOverTime && (<Text style={gameStyles.gameOver.text}>Continue?</Text>)}\r\n                        </View>\r\n                    </View>\r\n                )}\r\n            </View>\r\n            <View style={[gameStyles.question.view, { transform: `translate(0px,${-Math.max(0, gameStyles.viewscreenView.height * 0.5 - 125 * timeSinceProblem)}px)` }]}>\r\n                <Text style={gameStyles.question.text} >{problemsState.current?.question}</Text>\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n\r\ntype CommonGameState = { gameTime: number, gameDeltaTime: number, gameState: GameState, pressState: GamepadPressState, playerPosition: GamePosition, projectilesState: ProjectilesState, enemiesState: EnemiesState, onLoseLife: () => void };\r\n\r\nconst updateGame = ({ gameTime, gameDeltaTime, pressState, playerPosition, gameState }: CommonGameState): GameState => {\r\n    if (gameState.deadTime && gameTime > 3 + gameState.deadTime) {\r\n        return { ...gameState, deadTime: undefined };\r\n    }\r\n\r\n    return gameState;\r\n};\r\n\r\nconst updatePlayer = ({ gameTime, gameDeltaTime, pressState, playerPosition, gameState }: CommonGameState): { playerPosition: GamePosition } => {\r\n    if (gameState.deadTime) { return { playerPosition }; }\r\n\r\n    const targetRotation = pressState.moveDirection.x * 0.05;\r\n\r\n    const pos = {\r\n        x: playerPosition.x + pressState.moveDirection.x * gameDeltaTime * 250,\r\n        y: playerPosition.y - pressState.moveDirection.y * gameDeltaTime * 250,\r\n        rotation: playerPosition.rotation * 0.9 + targetRotation * 0.1,\r\n    };\r\n\r\n    const w = gameStyles.viewscreenView.width;\r\n    const gw = gameStyles.sprite.viewSize.width * 0.5;\r\n    const h = gameStyles.viewscreenView.height;\r\n    const gh = gameStyles.sprite.viewSize.height * 0.5;\r\n    pos.x = pos.x < gw ? gw : pos.x > w - gw ? w - gw : pos.x;\r\n    pos.y = pos.y < gh ? gh : pos.y > h - gh ? h - gh : pos.y;\r\n\r\n    return { playerPosition: pos };\r\n};\r\n\r\ntype ProjectilesState = {\r\n    lastShotTime: number;\r\n    shots: { key: string, pos: GamePosition, explodeTime?: number, ignore?: boolean }[];\r\n    debris: { key: string, vel: Vector2, pos: GamePosition, kind: SpriteKind, hasHitGround?: boolean }[];\r\n};\r\nconst updateProjectiles = ({ gameTime, gameDeltaTime, pressState, playerPosition: playerPos, projectilesState, gameState, onLoseLife }: CommonGameState): ProjectilesState => {\r\n    const { shots, debris, lastShotTime } = projectilesState;\r\n\r\n    const canShoot = !gameState.deadTime && !gameState.gameOverTime && gameTime > 0.25 + lastShotTime;\r\n\r\n    // console.log(`updateProjectiles`, { canShoot, gameTime, lastShotTime });\r\n\r\n    const didShoot = canShoot && pressState.buttons.find(x => x.key === `A`)?.isDown;\r\n    if (didShoot) {\r\n        shots.push({ key: `${lastShotTime}`, pos: { ...playerPos } });\r\n    }\r\n\r\n    // Move shots\r\n    shots.forEach(x => {\r\n        if (x.explodeTime) { return; }\r\n\r\n        x.pos.y += -250 * gameDeltaTime;\r\n    });\r\n\r\n    // Move debris\r\n    debris.forEach(d => {\r\n        if (d.hasHitGround) { return; }\r\n\r\n        // Gravity\r\n        d.vel.y += 100 * gameDeltaTime;\r\n\r\n        d.pos.y += d.vel.y * gameDeltaTime;\r\n        d.pos.x += d.vel.x * gameDeltaTime;\r\n\r\n        const pad = gameStyles.sprite.viewSize.width * 0.5;\r\n        const w = gameStyles.viewscreenView.width;\r\n        if (d.pos.x < pad) { d.pos.x = pad; d.vel.x = -d.vel.x; }\r\n        if (d.pos.x > w - pad) { d.pos.x = w - pad; d.vel.x = -d.vel.x; }\r\n\r\n        const hPad = gameStyles.sprite.viewSize.width * 0.8;\r\n        const h = gameStyles.viewscreenView.height;\r\n        if (d.pos.y > h - hPad + Math.random() * 10) {\r\n            d.hasHitGround = true;\r\n\r\n            if (d.kind === `kitten`) {\r\n                onLoseLife();\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    const newShots = shots\r\n        // Remove shots offscreen\r\n        .filter(x => x.pos.y > 0)\r\n        // Remove exploded \r\n        .filter(x => !x.explodeTime || gameTime < 1 + x.explodeTime)\r\n        ;\r\n\r\n    return {\r\n        ...projectilesState,\r\n        lastShotTime: didShoot ? gameTime : lastShotTime,\r\n        shots: newShots,\r\n    };\r\n};\r\n\r\ntype EnemiesState = {\r\n    enemies: {\r\n        key: string;\r\n        pos: GamePosition;\r\n        vel: Vector2;\r\n        explodeTime?: number;\r\n        answer: AnswerState;\r\n        onHit: () => void;\r\n        destroyed?: boolean;\r\n    }[];\r\n};\r\nconst updateEnemies = ({ gameTime, gameDeltaTime, projectilesState, enemiesState, gameState, playerPosition, onLoseLife }: CommonGameState): EnemiesState => {\r\n    const { enemies } = enemiesState;\r\n    const { shots } = projectilesState;\r\n\r\n    // Detect Collisions\r\n\r\n    // Enemies Bullets\r\n    const radius = gameStyles.sprite.viewSize.width * 0.75;\r\n    const radiusSq = radius * radius;\r\n\r\n    enemies.forEach(e => shots.forEach(s => {\r\n        // console.log(`Checking!`, { e, s });\r\n\r\n        if (e.explodeTime) { return; }\r\n        if (s.explodeTime || s.ignore) { return; }\r\n\r\n        if (getDistanceSq(e.pos, s.pos) < radiusSq) {\r\n            console.log(`Exploded!`, { e, s });\r\n\r\n            e.explodeTime = gameTime;\r\n            s.explodeTime = gameTime;\r\n\r\n            e.onHit();\r\n\r\n            if (e.answer.isCorrect) {\r\n                projectilesState.debris.push({ key: `${e.key} ${gameTime}`, kind: `alien`, pos: { ...e.pos }, vel: { ...e.vel } });\r\n            } else {\r\n                projectilesState.debris.push({ key: `${e.key} ${gameTime}`, kind: `kitten`, pos: { ...e.pos }, vel: { ...e.vel } });\r\n            }\r\n        }\r\n    }));\r\n\r\n    // Enemies - Enemies (bounce)\r\n    const radiusSq_enemies = radius * radius * 1.5 * 1.5;\r\n    enemies.forEach((e, i) => enemies.forEach((e2, i2) => {\r\n\r\n        if (i >= i2) { return; }\r\n        if (e.explodeTime) { return; }\r\n        if (e2.explodeTime) { return; }\r\n\r\n        if (getDistanceSq(e.pos, e2.pos) < radiusSq_enemies) {\r\n\r\n            // Transfer momentum\r\n            const frictionRatio = 0.95;\r\n            const swap = e.vel.x;\r\n            e.vel.x = e2.vel.x * frictionRatio;\r\n            e2.vel.x = swap * frictionRatio;\r\n            // }\r\n\r\n            // if (getDistanceSq(e.pos, e2.pos) < radiusSq_enemies * 0.8 * 0.8) {\r\n            // Move apart\r\n            const a = e.pos.x < e2.pos.x ? e : e2;\r\n            const b = e.pos.x < e2.pos.x ? e2 : e;\r\n\r\n            a.pos.x -= 10 * gameDeltaTime;\r\n            b.pos.x += 10 * gameDeltaTime;\r\n            a.vel.x -= 10 * gameDeltaTime;\r\n            b.vel.x += 10 * gameDeltaTime;\r\n        }\r\n    }));\r\n\r\n    // Enemies - Player\r\n    const radiusSq_player = radius * radius * 0.8 * 0.8;\r\n    enemies.forEach((e, i) => {\r\n        if (e.explodeTime) { return; }\r\n        if (gameState.deadTime || gameState.gameOverTime) { return; }\r\n\r\n        if (getDistanceSq(e.pos, playerPosition) < radiusSq_player) {\r\n            onLoseLife();\r\n\r\n            e.explodeTime = gameTime;\r\n            e.onHit();\r\n        }\r\n    });\r\n\r\n    // Enemies move\r\n    enemies.forEach(e => {\r\n        if (e.explodeTime) { return; }\r\n\r\n        e.vel.x += (-1 + 2 * Math.random()) * 250 * gameDeltaTime;\r\n        e.vel.y += 1 * gameDeltaTime;\r\n\r\n        e.pos.x += e.vel.x * gameDeltaTime;\r\n        e.pos.y += e.vel.y * gameDeltaTime;\r\n\r\n        const pad = gameStyles.sprite.viewSize.width * 0.5;\r\n        const w = gameStyles.viewscreenView.width;\r\n        if (e.pos.x < pad) { e.pos.x = pad; e.vel.x = -e.vel.x; }\r\n        if (e.pos.x > w - pad) { e.pos.x = w - pad; e.vel.x = -e.vel.x; }\r\n\r\n        const hPad = gameStyles.sprite.viewSize.width * 1.5;\r\n        const h = gameStyles.viewscreenView.height;\r\n        if (e.pos.y > h - hPad) {\r\n            e.pos.y = h - hPad;\r\n        }\r\n    });\r\n\r\n    // Cleanup\r\n    const newEnemies = enemies;\r\n    newEnemies.filter(x => x.explodeTime && gameTime > 1 + x.explodeTime).forEach(x => {\r\n        x.destroyed = true;\r\n\r\n    });\r\n    // // Remove exploded \r\n    // .filter(x => !x.explodeTime || gameTime < 1 + x.explodeTime)\r\n    // ;\r\n\r\n    return {\r\n        enemies: newEnemies,\r\n    };\r\n};\r\n\r\ntype SpriteKind = 'player' | 'player-character' | 'player-character-splat' | 'shot' | 'shot-explode' | 'enemy' | 'enemy-explode' | 'answer' | 'answer-wrong' | 'alien' | 'kitten' | 'alien-splat' | 'kitten-splat' | 'super-kitten' | 'life';\r\nconst getSpriteEmoji = (kind: SpriteKind) => {\r\n    // ❤💙💚😀🤣😃😁😂😄😉😆😅😊😋😎🥰😙☺🤩🙄😑😐😣🤐😫🤢😬😭🤯🤒😡🤓🤠👽💀👻☠🤖👾😺🙀🙈🙉🙊🐵🐱‍🐉🐶🦁🐯🐺🐱🦒🦊🦝🐗🐷🐮🐭🐹🐰🐼🐨🐻🐸🦓🐴🚀🛸⛵🛰🚁💺🚤🛥⛴⚓🪐🌌🌍🌏🌎\r\n    // ✈🛩🚂🚘🚔🚍🚖🔥💧❄⚡🌀🌈☄🌠⭐❌💥♨🎇🎆✨🎡🍖🥓🍗🥩💚👁‍🗨🥫🍥🍤🧆🥝🥑🧪🧫💉🩸⚰💜🦵🐱‍🚀🐱‍🐉🐱‍🏍😾🐱‍👤😾😿😽😹😸😻🐲🐉\r\n    switch (kind) {\r\n        case `player`: return { text: `🚀`, rotation: -0.125, offsetX: -0.25, offsetY: 0 };\r\n        case `player-character`: return { text: `😭` };\r\n        case `player-character-splat`: return { text: `😫`, rotation: 0.15 };\r\n        case `shot`: return { text: `🔥`, rotation: 0.5 };\r\n        case `shot-explode`: return { text: `✨`, rotation: 0, scale: 0.5 };\r\n        case `enemy`: return { text: `🛸`, offsetX: -0.125, offsetY: -0.125 };\r\n        case `enemy-explode`: return { text: `💥`, offsetX: -0.125, offsetY: -0.125 };\r\n        case `answer`: return { text: ``, offsetX: 0, offsetY: -0.125 };\r\n        case `answer-wrong`: return { text: `❌`, offsetX: -0.125, offsetY: -0.125 };\r\n        case `alien`: return { text: `👽`, offsetX: 0, offsetY: 0 };\r\n        // case `kitten`: return { text: `🐱‍🚀`, offsetX: 0, offsetY: 0 };\r\n        case `kitten`: return { text: `🙀`, offsetX: 0, offsetY: 0 };\r\n        case `alien-splat`: return { text: `💀`, offsetX: 0, offsetY: 0 };\r\n        case `kitten-splat`: return { text: `🥩`, offsetX: 0, offsetY: 0 };\r\n        case `super-kitten`: return { text: `🐱‍🏍`, offsetX: 0, offsetY: 0 };\r\n        // case `kitten-splat`: return { text: `👻`, offsetX: 0, offsetY: 0 };\r\n        case `life`: return { text: `🚀`, scale: 0.5 };\r\n        default: return { text: `😀` };\r\n    }\r\n};\r\n\r\nconst Sprite = ({ kind, position, text }: { kind: SpriteKind, position: { x: number, y: number, rotation: number }, text?: string }) => {\r\n    const s = getSpriteEmoji(kind);\r\n    const size = gameStyles.sprite.viewSize;\r\n    const { fontSize } = gameStyles.sprite.text;\r\n\r\n    const stylePosition = {\r\n        position: `absolute`,\r\n        ...size,\r\n        transform: `translate(${position.x}px, ${position.y}px) rotate(${position.rotation ?? 0}turn)`,\r\n        // backgroundColor: `red`,\r\n        pointerEvents: `none`,\r\n    } as const;\r\n    const styleRotation = {\r\n        ...size,\r\n        transform: `translate( ${size.width * -0.5 + Math.floor((s.offsetX ?? 0) * fontSize)}px, ${size.height * -0.5 + Math.floor((s.offsetY ?? 0) * fontSize)}px) rotate(${s.rotation ?? 0}turn) scale(${s.scale ?? 1})`,\r\n    };\r\n    return (\r\n        <View style={stylePosition}>\r\n            <View style={styleRotation}>\r\n                <Text style={gameStyles.sprite.text}>{text ?? s.text}</Text>\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n"],"sourceRoot":""}