{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/node_modules/gatsby/node_modules/core-js/modules/es.promise.finally.js","webpack:///D:/Projects/rick-love-master/code/art/rando.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/circles.tsx","webpack:///D:/Projects/rick-love-master/code/art/artwork/layers-of-the-onions-soul.tsx","webpack:///D:/Projects/rick-love-master/code/art/artwork/art-121-helpers.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/art-121.tsx","webpack:///D:/Projects/rick-love-master/code/art/p5-viewer.tsx","webpack:///D:/Projects/rick-love-master/code/art/artwork/puzzle/art-puzzle-01.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/gears.tsx","webpack:///D:/Projects/rick-love-master/code/art/artwork/gpu-01/gpu-01.tsx","webpack:///D:/Projects/rick-love-master/code/art/artwork/flying-colors/flying-colors.tsx","webpack:///D:/Projects/rick-love-master/code/art/art-gallery.tsx","webpack:///D:/Projects/rick-love-master/node_modules/gatsby/node_modules/core-js/modules/es.math.hypot.js"],"names":["$","IS_PURE","NativePromise","fails","getBuiltIn","speciesConstructor","promiseResolve","redefine","target","proto","real","forced","prototype","call","then","onFinally","C","this","isFunction","x","e","createRandomGenerator","hash","a","seed","str","h","length","i","Math","imul","charCodeAt","xmur3","random","t","art_circles","key","title","description","artist","getTokenDescription","tokenId","renderArt","hostElement","floor","b","c","cr","cg","cb","ca","tick","p5","s","setup","createCanvas","draw","background","scale","size","color","noFill","stroke","j","circle","translate","rotate","art_layersOfTheOnionsSoul","d","fill","sin","parseTokenId_art121","tokenTimestampValue","Number","parseInt","substr","tokenCounterValue","console","log","isFinite","tokenCounter","timestampSecs","targetSecs","Date","getTime","timeDeltaSecs","abs","art_121","tokenData","drawClock","index","clockRadius","units","value","perUnit","iHalf","PI","isFront","xZeroValue","correctRatioRaw","zRotation","cos","angleOffset","y","isFrontValue","sign","colorKey","alphaShift","lowAlpha","ceil","strokeWeight","line","defaultDelta","now","tokenTimeDeltaSecs","delta","year","month","day","hour","minute","second","iTick","P5Viewer","props","hostElementRef","useRef","useEffect","current","innerHTML","remove","style","ref","art_puzzle01","oppositeDirection","dir","state","board","boardVisits","moveSequence","player","moveIndex","calculateNextPos","posRaw","pos","exit","renderSeed","item","renderPos","push","randomMove","direction","r","distance","gridSize","wallColorCount","wallColors","Array","map","getNextWallRandomSeed","lastReverseMove","calculatePlayerReverseMove","reverseMove","lastPos","nextPos","itemAtPos","find","itemAtNextPos","m","endPosition","actualDistance","startPosition","actualMove","unshift","p","actualReverseMove","isVisited","getRenderPosition","forEach","drawPuzzleItem","gameWon","targetRenderPos","aOffset","tOffset","angle","trans","rect","itemSize","spiralRadius","iOffset","mod","filter","activeMove","pPos","tPos","undefined","wallPos","wall","slice","keyPressed","keyCode","UP_ARROW","LEFT_ARROW","DOWN_ARROW","RIGHT_ARROW","getKeyDirection","nextMove","drawGear","g","options","colorMode","position","radiusInner","radiusOuter","radiusAxis","teeth","rotationAngle","randomSeed","randomConstant","round","randomSym","toothAngle","TWO_PI","radI","radO","jitterSize","angle0","angle1","noStroke","curveTightness","beginShape","curveVertex","endShape","drawFace","faceType","radSmile","ex","ey","art_gears","randomMain","brightness","speed","gearCount","lastGear","radius","canvasSize","gears","targetRadius","targetDistance","angleQuandrant","targetAngle","xDelta","yDelta","actualRadius","sqrt","noise","noiseDebounceTime","toggleNoise","disconnect","Noise","amp","start","mousePressed","mouseX","mouseY","touchStarted","touches","faceCount","faceCreepyCount","entries","gear","teethPassed","pow","result","path","art_gpu_01","shaderInstance","preload","loadShader","WEBGL","setUniform","millis","shader","art_flyingColors","lastTimeMs","ArtGallery","artItems","art","useState","showNavigation","setShowNavigation","setTokenId","kind","artRenderer","setArtRenderer","tokenDescription","setTokenDescription","debounce","useDebounce","queryParts","document","location","search","split","artKey","startsWith","artworkItem","newTokenId","changeTokenId","openSea","View_Panel","View_Form","Fragment","paddingBottom","Button_FormAction","onPress","View_FieldRow","Text_FormTitle","Input_Text","onChange","theme","text_formTitle","whiteSpace","ArtComponent","padding","fontSize","href","$hypot","hypot","stat","Infinity","NaN","value1","value2","arg","div","sum","aLen","arguments","larg"],"mappings":"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","file":"9-99033848186994346421.js","sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar IS_PURE = require('../internals/is-pure');\nvar NativePromise = require('../internals/native-promise-constructor');\nvar fails = require('../internals/fails');\nvar getBuiltIn = require('../internals/get-built-in');\nvar speciesConstructor = require('../internals/species-constructor');\nvar promiseResolve = require('../internals/promise-resolve');\nvar redefine = require('../internals/redefine');\n\n// Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829\nvar NON_GENERIC = !!NativePromise && fails(function () {\n  NativePromise.prototype['finally'].call({ then: function () { /* empty */ } }, function () { /* empty */ });\n});\n\n// `Promise.prototype.finally` method\n// https://tc39.es/ecma262/#sec-promise.prototype.finally\n$({ target: 'Promise', proto: true, real: true, forced: NON_GENERIC }, {\n  'finally': function (onFinally) {\n    var C = speciesConstructor(this, getBuiltIn('Promise'));\n    var isFunction = typeof onFinally == 'function';\n    return this.then(\n      isFunction ? function (x) {\n        return promiseResolve(C, onFinally()).then(function () { return x; });\n      } : onFinally,\n      isFunction ? function (e) {\n        return promiseResolve(C, onFinally()).then(function () { throw e; });\n      } : onFinally\n    );\n  }\n});\n\n// patch native Promise.prototype for native async functions\nif (!IS_PURE && typeof NativePromise == 'function' && !NativePromise.prototype['finally']) {\n  redefine(NativePromise.prototype, 'finally', getBuiltIn('Promise').prototype['finally']);\n}\n","/* eslint-disable no-return-assign */\r\n/* eslint-disable no-multi-assign */\r\n/* eslint-disable @typescript-eslint/no-unused-expressions */\r\n/* eslint-disable no-bitwise */\r\n\r\n// FROM: https://stackoverflow.com/a/47593316/567524\r\n\r\nfunction xmur3(str: string) {\r\n    let h = 1779033703 ^ str.length;\r\n    for (let i = 0; i < str.length; i++) {\r\n        h = Math.imul(h ^ str.charCodeAt(i), 3432918353);\r\n        h = h << 13 | h >>> 19;\r\n    }\r\n\r\n    return () => {\r\n        h = Math.imul(h ^ h >>> 16, 2246822507);\r\n        h = Math.imul(h ^ h >>> 13, 3266489909);\r\n        return (h ^= h >>> 16) >>> 0;\r\n    };\r\n}\r\n\r\nfunction mulberry32(a: number) {\r\n    return () => {\r\n        let t = a += 0x6D2B79F5;\r\n        t = Math.imul(t ^ t >>> 15, t | 1);\r\n        t ^= t + Math.imul(t ^ t >>> 7, t | 61);\r\n        return ((t ^ t >>> 14) >>> 0) / 4294967296;\r\n    };\r\n}\r\n\r\nexport const createRandomGenerator = (hash: string) => {\r\n    const seed = xmur3(hash)();\r\n    return {\r\n        random: mulberry32(seed),\r\n    };\r\n};\r\n","/* eslint-disable new-cap */\r\n/* eslint-disable no-new */\r\nimport p5 from 'p5';\r\nimport { createRandomGenerator } from '../rando';\r\nimport { ArtWork } from '../artwork-type';\r\n\r\nexport const art_circles: ArtWork = {\r\n    key: `art-circles`,\r\n    title: `Circles`,\r\n    description: `The circles we travel in life always bring us back home.`,\r\n    artist: `Rick Love`,\r\n    getTokenDescription: (tokenId: string) => {\r\n        return null;\r\n    },\r\n    // openSea: {\r\n    //     tokenAddress: `0x495f947276749ce646f68ac8c248420045cb7b5e`,\r\n    //     tokenId: `91242641486941084018191434774360347389366801368112854311223385694785434025985`,\r\n    // },\r\n    renderArt: (hostElement: HTMLElement, hash = `This is my hash!`) => {\r\n        // const { a, b, c } = { a: 57, b: 23, c: 15 };\r\n\r\n\r\n        const { random } = createRandomGenerator(hash);\r\n\r\n        const { a, b, c } = { a: 1 + Math.floor(57 * random()), b: 1 + Math.floor(213 * random()), c: 1 + Math.floor(115 * random()) };\r\n        const { cr, cg, cb, ca } = { cr: Math.floor(25 + 230 * random()), cg: Math.floor(25 + 230 * random()), cb: Math.floor(25 + 230 * random()), ca: Math.floor(25 + 25 * random()) };\r\n\r\n        const size = 600;\r\n        const h = 200;\r\n        const scale = size / 400;\r\n        const speed = 0.5;\r\n\r\n        let tick = 0;\r\n        return new p5((s: p5) => {\r\n            s.setup = () => {\r\n                s.createCanvas(size, size);\r\n            };\r\n            s.draw = () => {\r\n                s.background(0);\r\n                s.scale(scale);\r\n\r\n                for (let i = 0; i < 10; i++) {\r\n                    const color = s.color((cr * i) % 255, (cg * i) % 255, (cb * i) % 255, ca);\r\n                    s.noFill();\r\n                    s.stroke(color);\r\n                    for (let j = 0; j < 36; j++) {\r\n                        s.circle(h - a / 2 + j % a, h - b / 2 + j % b, (h * 1.35) - (i * 5) % c);\r\n                    }\r\n                    s.translate(h, h);\r\n                    // s.rotate((a + b + c + tick * 0.001) % 2);\r\n                    s.rotate((a + b + c + tick * 0.001));\r\n                    s.translate(-h, -h);\r\n                    tick += speed;\r\n                }\r\n\r\n                tick++;\r\n            };\r\n        }, hostElement);\r\n    },\r\n};\r\n","/* eslint-disable new-cap */\r\n/* eslint-disable no-new */\r\nimport p5 from 'p5';\r\nimport { createRandomGenerator } from '../rando';\r\nimport { ArtWork } from '../artwork-type';\r\n\r\nexport const art_layersOfTheOnionsSoul: ArtWork = {\r\n    key: `art-onions`,\r\n    title: `Layers of the Onion's Soul`,\r\n    description: `This represents the complexity of an onion's soul - which has many layers, like a human.`,\r\n    artist: `Rick Love & Lydia Love - who called me weirdo as inspiration, and mentioned a circle, some squares, a tetrahedron, Minecraft blocks, and then said she meant cubes and spheres.`,\r\n    getTokenDescription: (tokenId: string) => {\r\n        return null;\r\n    },\r\n    renderArt: (hostElement: HTMLElement, hash = `This is my hash!`) => {\r\n        // const { a, b, c } = { a: 3, b: 7, c: 15 };\r\n\r\n        const { random } = createRandomGenerator(hash);\r\n        const { a, b, c, d, e } = { a: 1 + Math.floor(17 * random()), b: 1 + Math.floor(57 * random()), c: 1 + Math.floor(35 * random()), d: 0 + Math.floor(5 * random()), e: 20 + Math.floor(255 * random()) };\r\n        // const { cr, cg, cb } = { cr: 207, cg: 175, cb: 65 };\r\n        const { cr, cg, cb } = { cr: Math.floor(25 + 230 * random()), cg: Math.floor(25 + 230 * random()), cb: Math.floor(25 + 230 * random()) };\r\n\r\n        let tick = 0;\r\n\r\n        return new p5((s: p5) => {\r\n            s.setup = () => {\r\n                s.createCanvas(400, 400);\r\n            };\r\n            s.draw = () => {\r\n                s.background(0);\r\n                for (let i = 0; i < 35; i++) {\r\n                    const color = s.color((cr + b * i) % 255, cg * (1 + i * a) % 255, (cb + i * d) % 255);\r\n                    s.fill(color);\r\n                    s.circle(150 + (i * 7) % b - a + 32 * Math.sin(tick * 0.001), 250 + i - c % 35 + b, (270 - i) % e);\r\n                    s.translate(100, 100);\r\n                    s.rotate(d + tick * 0.000007);\r\n                    s.translate(-120, -150);\r\n                    tick++;\r\n                }\r\n            };\r\n        }, hostElement);\r\n    },\r\n};\r\n","export const parseTokenId_art121 = (tokenId: string) => {\r\n    const tokenTimestampValue = Number.parseInt(tokenId.substr(0, tokenId.length - 6), 10);\r\n    const tokenCounterValue = Number.parseInt(tokenId.substr(tokenId.length - 6), 10);\r\n    console.log(`parseTokenId_art121`, { tokenId, tokenTimestampValue, tokenCounterValue });\r\n\r\n    if (!Number.isFinite(tokenTimestampValue)) { return null; }\r\n    if (!Number.isFinite(tokenCounterValue)) { return null; }\r\n\r\n    const tokenCounter = tokenCounterValue;\r\n    const timestampSecs = tokenTimestampValue;\r\n    const targetSecs = Math.floor(new Date(`2021-01-21 21:21:21Z`).getTime()) / 1000;\r\n    const timeDeltaSecs = Math.abs(targetSecs - timestampSecs);\r\n    return {\r\n        tokenId,\r\n        tokenCounter,\r\n        timestampSecs,\r\n        targetSecs,\r\n        timeDeltaSecs,\r\n    };\r\n};\r\n","/* eslint-disable new-cap */\r\n/* eslint-disable no-new */\r\nimport p5 from 'p5';\r\nimport { createRandomGenerator } from '../rando';\r\nimport { parseTokenId_art121 } from './art-121-helpers';\r\nimport { ArtWork } from '../artwork-type';\r\n\r\nexport const art_121: ArtWork = {\r\n    key: `art-121`,\r\n    title: `1/21/21 21:21:21`,\r\n    description: `This exact time pattern will occur only once in our human timeline. This NFT crypto art will attempt to capture that time to the precise second and embed it in the distributed blockchain forever. \r\n    \r\nHowever the exact outcome cannot be controlled: \r\n\r\nThe color scheme is generated from the token hash.\r\n\r\nEven more difficult to predict - the block mining timestamp since 1/21/21 21:21:21 UTC controls the behavior of the clocks:\r\n\r\nYear\r\nMonth\r\nDay\r\nHour\r\nMinute\r\nSecond\r\n\r\nIf this is mined at the exact second, perfect stability will be achieved.\r\n\r\nThis is all up to whatever timing occurs on the blockchain when these NFTs are mined by the collectors.\r\n\r\nCan we obtain the exact precision?\r\n`,\r\n    artist: `Rick Love`,\r\n    getTokenDescription: (tokenId: string) => {\r\n        const tokenData = parseTokenId_art121(tokenId);\r\n        if (!tokenData) { return null; }\r\n\r\n        return `${tokenData.timeDeltaSecs} Seconds from 1/21/21 21:21:21 (#${tokenData.tokenCounter})`;\r\n    },\r\n    renderArt: (hostElement: HTMLElement, tokenId: string) => {\r\n        // const { a, b, c } = { a: 57, b: 23, c: 15 };\r\n\r\n\r\n        const { random } = createRandomGenerator(tokenId);\r\n        const { a, b, c } = { a: 1 + Math.floor(57 * random()), b: 1 + Math.floor(213 * random()), c: 1 + Math.floor(115 * random()) };\r\n        const { cr, cg, cb, ca } = { cr: Math.floor(25 + 230 * random()), cg: Math.floor(25 + 230 * random()), cb: Math.floor(25 + 230 * random()), ca: Math.floor(25 + 25 * random()) };\r\n\r\n        let tick = 0;\r\n\r\n        const tokenData = parseTokenId_art121(tokenId);\r\n\r\n        return new p5((s: p5) => {\r\n            s.setup = () => {\r\n                s.createCanvas(350, 350);\r\n            };\r\n            s.draw = () => {\r\n                s.background(0);\r\n\r\n                const drawClock = (index: number, clockRadius: number, units: number, value: number) => {\r\n\r\n                    const perUnit = 1 / units;\r\n                    const d = 0.8 * clockRadius * Math.sin(Math.PI * 2 * perUnit);\r\n\r\n                    for (let iHalf = 0; iHalf <= 1; iHalf++) {\r\n                        const isFront = iHalf === 1;\r\n                        let xZeroValue = 0;\r\n                        for (let i = 0; i < units; i++) {\r\n\r\n\r\n                            const errorRatio = (0.5 - Math.abs((value * perUnit) - 0.5)) * 2;\r\n                            const correctRatioRaw = 1 - errorRatio;\r\n                            // const correctRatio = correctRatioRaw * ((tick * 0.121 * correctRatioRaw) % 2 - 1);\r\n                            const zRotation = Math.cos((tick * 0.0121 * correctRatioRaw + index * 0.25));\r\n                            const angleOffset = -0.25 + value * perUnit;\r\n\r\n                            const x = zRotation * clockRadius * Math.cos(Math.PI * 2 * (angleOffset - i * perUnit));\r\n                            const y = clockRadius * Math.sin(Math.PI * 2 * (angleOffset - i * perUnit));\r\n\r\n                            if (i === 0) {\r\n                                xZeroValue = x;\r\n                            }\r\n\r\n                            const isFrontValue = (value === 0 && index % 2 === 0 ? -1 : 1) * Math.sign(xZeroValue) === Math.sign(x);\r\n                            // const isFrontValue = Math.sign(xZeroValue) === Math.sign(x);\r\n                            // const isFrontValue = Math.sign(xZeroValue) === Math.sign(x);\r\n\r\n                            if (isFront && !isFrontValue) { continue; }\r\n                            if (!isFront && isFrontValue) { continue; }\r\n\r\n                            // if (isFront && isFrontX) { continue; }\r\n                            // if (!isFront && (isFrontOnLeft && x > 0 || !isFrontOnLeft && x < 0)) { continue; }\r\n                            // if (!isFront && value !== 0) { continue; }\r\n\r\n                            const colorKey = index + 1;\r\n\r\n                            // const alphaShift = 0.5 + 0.5 * (x / clockRadius) * (isFrontOnLeft ? -1 : 1);\r\n                            // const alphaShift = 1;\r\n                            const alphaShift = isFront ? 1 : 0.25;\r\n                            const lowAlpha = Math.ceil(units < 100 ? 100 : 25);\r\n\r\n                            s.noFill();\r\n                            s.stroke(s.color((cr * colorKey) % 255, (cg * colorKey) % 255, (cb * colorKey) % 255, Math.ceil((value === 0 ? 255 : lowAlpha) * alphaShift)));\r\n                            s.strokeWeight(2);\r\n                            s.line(x * (1 - 0.05 * Math.abs(zRotation)), y * 0.95, x, y);\r\n\r\n                            if (i === 0) {\r\n                                s.stroke(s.color((cr * colorKey) % 255, (cg * colorKey) % 255, (cb * colorKey) % 255, value === 0 ? 255 : 50));\r\n                                s.line(0, 0, x, y);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                };\r\n\r\n                s.translate(175, 175);\r\n\r\n                const defaultDelta = ((new Date(`2021-01-21 21:21:21.212Z`)).getTime() - Date.now());\r\n                // const defaultDelta = ((new Date(`2022-01-21 21:21:21.212Z`)).getTime() - Date.now());\r\n                // const defaultDelta = ((new Date(`2000-01-01 00:00:00.000Z`)).getTime() - Date.now());\r\n                // const defaultDelta = 0;\r\n\r\n                const tokenTimeDeltaSecs = tokenData?.timeDeltaSecs;\r\n                const delta = tokenTimeDeltaSecs != null ? tokenTimeDeltaSecs * 1000 : defaultDelta;\r\n                // console.log(`delta`, { delta, defaultDelta, tokenId });\r\n\r\n                const e = {\r\n                    year: Math.floor(delta / (1000 * 60 * 60 * 24 * 365)),\r\n                    month: Math.floor(delta / (1000 * 60 * 60 * 24 * 31) % 12),\r\n                    day: Math.floor(delta / (1000 * 60 * 60 * 24) % 31),\r\n                    hour: Math.floor(delta / (1000 * 60 * 60) % 24),\r\n                    minute: Math.floor(delta / (1000 * 60) % 60),\r\n                    second: Math.floor(delta / (1000) % 60),\r\n                    // ms: delta % 1000,\r\n                };\r\n                const isBefore = true;\r\n\r\n                // tick = 0;\r\n                for (let iTick = 0; iTick < 10; iTick++) {\r\n                    drawClock(0, 140, 100, e.year);\r\n                    drawClock(1, 120, 12, e.month);\r\n                    drawClock(2, 100, 31, e.day);\r\n                    drawClock(3, 80, 60, e.hour);\r\n                    drawClock(4, 60, 60, e.minute);\r\n                    drawClock(5, 40, 60, e.second);\r\n                    // drawClock(6, 20, 1000, e.ms);\r\n\r\n                    s.background(s.color(0, 0, 0, 5));\r\n                    tick++;\r\n                }\r\n\r\n                s.translate(-175, -175);\r\n\r\n\r\n                const drawText = () => {\r\n                    s.textSize(20);\r\n                    s.noStroke();\r\n                    s.textFont(`monospace`);\r\n\r\n                    const pad = (value: number, digits: number) => (`${value}`).padStart(digits, `0`);\r\n\r\n                    s.fill(s.color(255, 255, 255));\r\n                    s.text(`1/21/21 21:21:21 GST`, 60, 20);\r\n\r\n                    s.fill(!isBefore ? s.color(0, 255, 0) : s.color(255, 0, 0));\r\n                    s.text(`${isBefore ? `-` : `+`} ${pad(e.year, 2)}y ${pad(e.month, 2)}m ${pad(e.day, 2)}d ${pad(e.hour, 2)}:${pad(e.minute, 2)}:${pad(e.second, 2)}`, 50, 340);\r\n                };\r\n\r\n                // drawText();\r\n\r\n                tick++;\r\n            };\r\n        }, hostElement);\r\n    },\r\n};\r\n","/* eslint-disable react/require-default-props */\r\nimport React, { useEffect, useRef } from 'react';\r\n\r\n\r\nconst hasLoadedScript = false;\r\n\r\nexport const P5Viewer = (props: {\r\n    renderArt: (hostElement: HTMLDivElement) => { remove: () => void };\r\n    // eslint-disable-next-line react/no-unused-prop-types\r\n    openSea?: {\r\n        tokenAddress: string;\r\n        tokenId: string;\r\n    };\r\n}) => {\r\n\r\n    const hostElementRef = useRef(null as null | HTMLDivElement);\r\n\r\n    useEffect(() => {\r\n        // if (!hasLoadedScript) {\r\n        //     hasLoadedScript = true;\r\n        //     const scriptElement = document.createElement(`script`);\r\n        //     scriptElement.src = `https://unpkg.com/embeddable-nfts/dist/nft-card.min.js`;\r\n        //     document.head.append(scriptElement);\r\n        // }\r\n\r\n        if (!hostElementRef.current) { return () => { }; }\r\n\r\n        console.log(`P5Viewer - renderArt`, { renderArt: props.renderArt });\r\n        hostElementRef.current.innerHTML = ``;\r\n        const { remove } = props.renderArt(hostElementRef.current);\r\n        return () => {\r\n            remove();\r\n        };\r\n    }, [hostElementRef.current, props.renderArt]);\r\n\r\n    return (\r\n        <>\r\n            <div style={{}} ref={hostElementRef} />\r\n            {/* {props.openSea && (\r\n                <>\r\n                    <div>Open Sea</div>\r\n                    <nft-card\r\n                        tokenAddress={props.openSea.tokenAddress}\r\n                        tokenId={props.openSea.tokenId}\r\n                        network='mainnet'\r\n                    />\r\n                </>\r\n            )} */}\r\n        </>\r\n    );\r\n};\r\n","/* eslint-disable new-cap */\r\n/* eslint-disable no-new */\r\nimport p5 from 'p5';\r\nimport { ArtWork } from '../../artwork-type';\r\nimport { createRandomGenerator } from '../../rando';\r\n\r\n\r\nconst parseTokenId_puzzle01 = (tokenId: string) => { return tokenId; };\r\n\r\nexport const art_puzzle01: ArtWork = {\r\n    key: `art-puzzle-01`,\r\n    title: `Puzzle 01`,\r\n    description: `Try to puzzle it out and unlock the answer.`,\r\n    artist: `Rick Love`,\r\n    getTokenDescription: (tokenId: string) => {\r\n        const tokenData = parseTokenId_puzzle01(tokenId);\r\n        if (!tokenData) { return null; }\r\n\r\n        return `TokenId: ${tokenData}`;\r\n    },\r\n    renderArt: (hostElement: HTMLElement, tokenId: string) => {\r\n        // const { a, b, c } = { a: 57, b: 23, c: 15 };\r\n\r\n\r\n        const tokenData = parseTokenId_puzzle01(tokenId);\r\n\r\n        type Vector2 = { x: number, y: number };\r\n\r\n        type BoardItem = {\r\n            /** Seed for the render math */\r\n            renderSeed: string;\r\n            item: 'player' | 'exit' | 'entrance' | 'wall' | 'wall-broken';\r\n            pos: Vector2;\r\n\r\n            renderPos?: Vector2;\r\n            targetRenderPos?: Vector2;\r\n            activeMove?: ActualMove;\r\n        }\r\n        type MoveDirection = 'up' | 'down' | 'left' | 'right';\r\n        const oppositeDirection = (dir: MoveDirection): MoveDirection => {\r\n            switch (dir) {\r\n                case `up`: return `down`;\r\n                case `down`: return `up`;\r\n                case `left`: return `right`;\r\n                case `right`: return `left`;\r\n                default: return `up`;\r\n            }\r\n        };\r\n        type Move = {\r\n            direction: MoveDirection;\r\n            distance: number;\r\n        };\r\n        type ActualMove = {\r\n            direction: MoveDirection;\r\n            distance: number;\r\n            startPosition: Vector2;\r\n            endPosition: Vector2;\r\n        };\r\n        const state = {\r\n            board: [] as BoardItem[],\r\n            boardVisits: [] as { pos: Vector2 }[],\r\n            moveSequence: [] as ActualMove[],\r\n            player: {} as BoardItem,\r\n            moveIndex: 0,\r\n        };\r\n\r\n        const canvasSize = 350;\r\n        const gridSize = 16;\r\n        const itemSize = 20;\r\n        const gridAreaOffset = 15;\r\n        const maxMoveCount = 20;\r\n\r\n        const calculateNextPos = (posRaw: Vector2, dir: MoveDirection): Vector2 => {\r\n            const pos = { ...posRaw };\r\n            if (dir === `up`) { pos.y--; }\r\n            if (dir === `down`) { pos.y++; }\r\n            if (dir === `left`) { pos.x--; }\r\n            if (dir === `right`) { pos.x++; }\r\n            return pos;\r\n        };\r\n\r\n        return new p5((s: p5) => {\r\n            s.setup = () => {\r\n                s.createCanvas(canvasSize, canvasSize);\r\n                s.background(0);\r\n                // s.colorMode(s.HSB);\r\n\r\n                // Create board out of backwards generation of correct moves\r\n                const { random } = createRandomGenerator(tokenId);\r\n\r\n                const { board, boardVisits } = state;\r\n                const exit: BoardItem = {\r\n                    renderSeed: `${random()}`,\r\n                    item: `exit`,\r\n                    pos: {\r\n                        x: Math.floor(1 + (gridSize - 2) * random()),\r\n                        y: Math.floor(1 + (gridSize - 2) * random()),\r\n                    },\r\n                };\r\n\r\n                state.player = {\r\n                    renderSeed: `${random()}`,\r\n                    item: `player`,\r\n                    pos: { ...exit.pos },\r\n                    renderPos: { x: 0, y: 0 },\r\n                };\r\n                const { player } = state;\r\n\r\n                board.push(exit);\r\n                // board.push(player);\r\n\r\n                // // Crete outer wall\r\n                // for (let i = 0; i < gridSize; i++) {\r\n                //     board.push({ renderSeed: `${random()}`, item: `wall`, pos: { x: i, y: 0 } });\r\n                //     board.push({ renderSeed: `${random()}`, item: `wall`, pos: { x: i, y: gridSize - 1 } });\r\n                //     board.push({ renderSeed: `${random()}`, item: `wall`, pos: { x: 0, y: i } });\r\n                //     board.push({ renderSeed: `${random()}`, item: `wall`, pos: { x: gridSize - 1, y: i } });\r\n                // }\r\n\r\n                const randomMoveDirection = (): MoveDirection => {\r\n                    const r = random();\r\n                    if (r > 0.75) { return `up`; }\r\n                    if (r > 0.5) { return `down`; }\r\n                    if (r > 0.25) { return `left`; }\r\n                    return `right`;\r\n                };\r\n                const randomMove = (): Move => {\r\n                    return {\r\n                        direction: randomMoveDirection(),\r\n                        distance: Math.floor(0 + gridSize * 0.75 * random()),\r\n                    };\r\n                };\r\n\r\n                const wallColorMaxCount = 16;\r\n                const wallColorCount = 4 + Math.floor(random() * (wallColorMaxCount - 4));\r\n                const wallColors = [...new Array(wallColorCount)].map(x => `${random()}`);\r\n                const getNextWallRandomSeed = () => {\r\n                    return wallColors[Math.floor(random() * wallColorCount)];\r\n                };\r\n\r\n                // Reversed moves to generate board\r\n                let lastReverseMove = {\r\n                    distance: 0,\r\n                    direction: `unknown`,\r\n                } as unknown as Move;\r\n\r\n                const calculatePlayerReverseMove = (reverseMove: Move): null | ActualMove => {\r\n                    let d = reverseMove.distance;\r\n                    let lastPos = { ...player.pos };\r\n\r\n                    const dir = reverseMove.direction;\r\n                    while (d > 0) {\r\n                        const pos = calculateNextPos(lastPos, dir);\r\n                        const nextPos = calculateNextPos(lastPos, dir);\r\n\r\n                        // Past edge - fail\r\n                        if (pos.x <= 0 || pos.x >= gridSize - 1\r\n                            || pos.y <= 0 || pos.y >= gridSize - 1) { return null; }\r\n\r\n                        // Hit existing wall - fail\r\n                        const itemAtPos = board.find(x => x.item !== `player` && x.pos.x === pos.x && x.pos.y === pos.y);\r\n                        if (itemAtPos?.item === `wall`) { return null; }\r\n\r\n                        // Already next wall - fail\r\n                        const itemAtNextPos = board.find(x => x.item !== `player` && x.pos.x === nextPos.x && x.pos.y === nextPos.y);\r\n                        if (itemAtNextPos?.item === `wall`) { return null; }\r\n\r\n                        d--;\r\n                        lastPos = { ...pos };\r\n                    }\r\n\r\n                    // If in line with any existing endmove, reject\r\n                    const inLineWithLastPos = state.moveSequence.find(m => m.endPosition.x === lastPos.x || m.endPosition.y === lastPos.y);\r\n                    if (inLineWithLastPos) { return null; }\r\n\r\n                    const actualDistance = reverseMove.distance - d;\r\n                    return {\r\n                        direction: oppositeDirection(reverseMove.direction),\r\n                        distance: actualDistance,\r\n                        endPosition: { ...player.pos },\r\n                        startPosition: lastPos,\r\n                    };\r\n                };\r\n\r\n                // Add outer wall\r\n                for (let i = 0; i < gridSize; i++) {\r\n                    board.push({ renderSeed: getNextWallRandomSeed(), item: `wall`, pos: { x: i, y: 0 } });\r\n                    board.push({ renderSeed: getNextWallRandomSeed(), item: `wall`, pos: { x: i, y: gridSize - 1 } });\r\n                    board.push({ renderSeed: getNextWallRandomSeed(), item: `wall`, pos: { x: 0, y: i } });\r\n                    board.push({ renderSeed: getNextWallRandomSeed(), item: `wall`, pos: { x: gridSize - 1, y: i } });\r\n                }\r\n\r\n                // Add game walls\r\n                for (let i = 0; i < maxMoveCount; i++) {\r\n\r\n                    // Reverse Move player\r\n                    let reverseMove = randomMove();\r\n                    while (reverseMove.direction === lastReverseMove.direction\r\n                        || reverseMove.direction === oppositeDirection(lastReverseMove.direction)) {\r\n                        reverseMove = randomMove();\r\n                    }\r\n\r\n                    // Calculate reverse move\r\n                    const actualMove = calculatePlayerReverseMove(reverseMove);\r\n                    if (!actualMove || actualMove.distance <= 0) {\r\n                        continue;\r\n                    }\r\n\r\n                    // Add wall which would have stopped the player (having made this move forward)\r\n                    if (state.moveSequence.length > 0) {\r\n                        const nextPos = calculateNextPos(player.pos, oppositeDirection(reverseMove.direction));\r\n                        board.push({\r\n                            item: `wall`,\r\n                            pos: nextPos,\r\n                            renderSeed: getNextWallRandomSeed(),\r\n                        });\r\n                    }\r\n\r\n                    // Move player\r\n                    player.pos = actualMove.startPosition;\r\n                    state.moveSequence.unshift(actualMove);\r\n                    lastReverseMove = actualMove;\r\n\r\n                    // Add board visits\r\n                    let p = actualMove.startPosition;\r\n                    state.boardVisits.push({ pos: { ...p } });\r\n                    while (p.x !== actualMove.endPosition.x\r\n                        || p.y !== actualMove.endPosition.y) {\r\n                        p = calculateNextPos(p, actualMove.direction);\r\n                        state.boardVisits.push({ pos: { ...p } });\r\n                    }\r\n\r\n                    console.log(`boardVisits`, { actualReverseMove: actualMove, boardVisits: [...state.boardVisits] });\r\n                }\r\n\r\n                // Add random walls\r\n                for (let x = 0; x < gridSize; x++) {\r\n                    for (let y = 0; y < gridSize; y++) {\r\n                        const isVisited = !!boardVisits.find(b => b.pos.x === x && b.pos.y === y);\r\n                        const item = !!board.find(b => b.pos.x === x && b.pos.y === y);\r\n\r\n                        if (isVisited || item) { continue; }\r\n\r\n                        if (random() > 0.75) {\r\n                            board.push({\r\n                                item: `wall`,\r\n                                pos: { x, y },\r\n                                renderSeed: getNextWallRandomSeed(),\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n                player.renderPos = getRenderPosition(player.pos);\r\n                state.board.forEach(x => drawPuzzleItem(x));\r\n            };\r\n\r\n            const getRenderPosition = (p: Vector2) => {\r\n                const x = gridAreaOffset + p.x * itemSize;\r\n                const y = gridAreaOffset + p.y * itemSize;\r\n                return { x, y };\r\n            };\r\n\r\n            const drawPuzzleItem = (item: typeof state.board[0]) => {\r\n                const { random } = createRandomGenerator(item.renderSeed);\r\n                const { a, b, c } = { a: 1 + Math.floor(57 * random()), b: 1 + Math.floor(213 * random()), c: 1 + Math.floor(115 * random()) };\r\n                const { cr, cg, cb, ca } = { cr: Math.floor(25 + 230 * random()), cg: Math.floor(25 + 230 * random()), cb: Math.floor(25 + 230 * random()), ca: Math.floor(25 + 125 * random()) };\r\n\r\n                const { x, y } = item.renderPos ?? getRenderPosition(item.pos);\r\n                s.fill(cr, cg, cb, ca);\r\n                s.stroke(cr, cg, cb, 255);\r\n                s.strokeWeight(1);\r\n\r\n                const gameWon = state.moveIndex >= state.moveSequence.length && !state.player.targetRenderPos;\r\n\r\n                const aOffset = tick / 100;\r\n                const tOffset = Math.abs(Math.floor(Math.sin((tick + a * c) / 1000) * canvasSize));\r\n                const alphaCycle = 100;\r\n\r\n                if (item.item === `player`) {\r\n                    if (gameWon) {\r\n                        s.stroke(0, 0, 0, 10);\r\n\r\n                        let mod = tick;\r\n                        for (let i = 0; i < 16; i++) {\r\n                            s.fill(cr, cg, (cb + i * c) % 255, Math.floor(Math.sin((tick + a * c) / alphaCycle) * 25 + 35));\r\n\r\n                            const j = 0;\r\n                            s.circle(200 - a / 2 + j % a, 200 - b / 2 + j % b, 270 - (i * 5) % c);\r\n                            s.translate(tOffset, tOffset);\r\n                            // s.rotate((a + b + c + tick * 0.001) % 2);\r\n                            s.rotate(((a + b + c + mod) * 0.001));\r\n                            s.translate(-tOffset, -tOffset);\r\n                            mod++;\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    s.fill(cr, cg, cb, 30);\r\n                    const circleCount = 4;\r\n                    const spiralRadius = 0.01 * (4 + state.moveSequence.length - state.moveIndex);\r\n                    // const spiralRadius = 0.1;\r\n                    for (let i = 0; i < circleCount; i++) {\r\n                        s.stroke(cr, cg, cb, Math.floor(255 * (i + 1) / (circleCount + 1)));\r\n\r\n                        s.circle(x + itemSize * (0.5 + spiralRadius * Math.cos(2 * Math.PI * (i / circleCount + tick / 100))), y + itemSize * (0.5 + spiralRadius * Math.sin(2 * Math.PI * (i / circleCount + tick / 100))), itemSize);\r\n                    }\r\n\r\n                    // s.circle(x + 0.5 * itemSize, y + 0.5 * itemSize, itemSize);\r\n                    return;\r\n                }\r\n\r\n                if (item.item === `exit`) {\r\n                    if (gameWon) {\r\n                        s.fill(cr, cg, cb, Math.floor(Math.sin((tick + a * c) / alphaCycle) * 25 + 35));\r\n                        s.stroke(0, 0, 0, 10);\r\n\r\n                        let angle = a;\r\n                        let trans = c;\r\n                        for (let i = 0; i < 32; i++) {\r\n\r\n                            // s.rect(x + itemSize * 0.25, y + itemSize * 0.25, itemSize * 0.5, itemSize * 0.5);\r\n                            s.translate(trans, trans);\r\n                            s.rotate(angle + aOffset);\r\n                            s.rect(x + itemSize * 0.25, y + itemSize * 0.25, c * x, c * y);\r\n                            s.rotate(-angle - aOffset);\r\n                            s.translate(-trans, -trans);\r\n                            angle += b;\r\n                            trans += c;\r\n                            trans %= 125;\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    // s.fill(cr, cg, cb, 200);\r\n                    s.fill(255, 255, 255);\r\n                    s.rect(x, y, itemSize, itemSize);\r\n                    s.fill(0, 0, 0);\r\n                    s.rect(x + itemSize * 0.25, y + itemSize * 0.25, itemSize * 0.5, itemSize * 0.5);\r\n                    return;\r\n                }\r\n\r\n                if (item.item === `wall-broken`) {\r\n                    if (!gameWon) { return; }\r\n\r\n                    s.fill(cr, cg, cb, Math.floor(Math.sin((tick + a * c) / alphaCycle) * 25 + 25));\r\n                    s.stroke(0, 0, 0, 10);\r\n\r\n                    let angle = a;\r\n                    const trans = c % (canvasSize * 0.5);\r\n                    for (let i = 0; i < 8; i++) {\r\n\r\n                        s.translate(-trans, -trans);\r\n                        s.rotate(angle + aOffset);\r\n                        s.rect(x, y, itemSize * x, itemSize * y);\r\n                        s.rotate(-angle - aOffset);\r\n                        s.translate(trans, trans);\r\n                        angle += b;\r\n                        // trans += c;\r\n                        // trans %= 3;\r\n                    }\r\n                    return;\r\n\r\n                    // s.rect(x + itemSize * 0.25, y + itemSize * 0.25, itemSize * 0.5, itemSize * 0.5);\r\n                    // s.rect(x, y, itemSize * x, itemSize * y);\r\n                    // return;\r\n                }\r\n\r\n                if (gameWon) {\r\n                    return;\r\n                    // s.fill(cr, cg, cb, Math.floor(Math.sin((tick + a * c) / alphaCycle) * 25 + 25));\r\n                    // s.rect(x, y, itemSize, itemSize);\r\n                    // return;\r\n                }\r\n                // s.rect(x, y, itemSize, itemSize);\r\n\r\n                s.fill(cr, cg, cb, 5);\r\n                const circleCount = 4;\r\n                const spiralRadius = 0.015 * (4 + state.moveSequence.length - state.moveIndex);\r\n                const iOffset = random();\r\n                for (let i = 0; i < circleCount; i++) {\r\n                    s.stroke(cr, cg, cb, Math.floor(255 * (i + 1) / (circleCount + 1)));\r\n                    s.rect(x + itemSize * (0 + spiralRadius * Math.cos(2 * Math.PI * ((iOffset + i) / circleCount + tick / 100))), y + itemSize * (0 + spiralRadius * Math.sin(2 * Math.PI * ((iOffset + i) / circleCount + tick / 100))), itemSize, itemSize);\r\n                }\r\n            };\r\n\r\n            let tick = 0;\r\n            s.draw = () => {\r\n                s.background(0);\r\n                // s.background(0, 0, 0, 5);\r\n\r\n                const drawMoveHistory = (m: typeof state.moveSequence[0]) => {\r\n                    s.noFill();\r\n                    s.stroke(255, 255, 255, 100);\r\n\r\n                    const x1 = gridAreaOffset + m.startPosition.x * itemSize + itemSize * 0.5;\r\n                    const y1 = gridAreaOffset + m.startPosition.y * itemSize + itemSize * 0.5;\r\n                    const x2 = gridAreaOffset + m.endPosition.x * itemSize + itemSize * 0.5;\r\n                    const y2 = gridAreaOffset + m.endPosition.y * itemSize + itemSize * 0.5;\r\n                    s.line(x1, y1, x2, y2);\r\n                    s.line(x1 + itemSize * 0.25, y1 + itemSize * 0.25, x2, y2);\r\n\r\n                    // s.text(`${i}`, x1,y1);\r\n                };\r\n\r\n                // state.board.forEach(x => drawPuzzleItem(x));\r\n                state.board.filter(x => x.item === `wall-broken`).forEach(x => drawPuzzleItem(x));\r\n                state.board.filter(x => x.item !== `wall-broken`).forEach(x => drawPuzzleItem(x));\r\n\r\n                drawPuzzleItem(state.player);\r\n\r\n                // Animate\r\n                if (state.player.activeMove && state.player.renderPos && state.player.targetRenderPos) {\r\n                    // state.player.renderPos = {\r\n                    //     x: 0.9 * state.player.renderPos.x + 0.1 * state.player.targetRenderPos.x,\r\n                    //     y: 0.9 * state.player.renderPos.y + 0.1 * state.player.targetRenderPos.y,\r\n                    // };\r\n\r\n                    const speed = 3;\r\n                    for (let i = 0; i < speed; i++) {\r\n                        state.player.renderPos = calculateNextPos(state.player.renderPos, state.player.activeMove.direction);\r\n\r\n                        const dist = Math.abs(state.player.renderPos.x - state.player.targetRenderPos.x)\r\n                            + Math.abs(state.player.renderPos.y - state.player.targetRenderPos.y);\r\n                        if (dist < 1) {\r\n                            state.player.renderPos = state.player.targetRenderPos;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // If player is done animating destroy wall\r\n                const { activeMove } = state.player;\r\n\r\n                const pPos = state.player.renderPos;\r\n                const tPos = state.player.targetRenderPos;\r\n                if (activeMove && pPos && tPos && pPos.x === tPos.x && pPos.y === tPos.y) {\r\n                    console.log(`Reached`, { activeMove, pPos, tPos });\r\n                    state.player.targetRenderPos = undefined;\r\n\r\n                    // Break any walls that have been reached\r\n                    for (const m of state.moveSequence.slice(0, state.moveIndex)) {\r\n                        const wallPos = calculateNextPos(m.endPosition, m.direction);\r\n                        const wall = state.board.find(x => x.pos.x === wallPos.x && x.pos.y === wallPos.y);\r\n                        if (!wall) { continue; }\r\n\r\n                        wall.item = `wall-broken`;\r\n                    }\r\n                }\r\n\r\n\r\n                // Debug\r\n                //  state.moveSequence.forEach(x => drawMoveHistory(x));\r\n                tick++;\r\n            };\r\n\r\n            s.keyPressed = () => {\r\n                const { key, keyCode } = s;\r\n\r\n                const getKeyDirection = (): null | MoveDirection => {\r\n                    switch (key) {\r\n                        case `w`: return `up`;\r\n                        case `a`: return `left`;\r\n                        case `s`: return `down`;\r\n                        case `d`: return `right`;\r\n                        default: break;\r\n                    }\r\n                    switch (keyCode) {\r\n                        case s.UP_ARROW: return `up`;\r\n                        case s.LEFT_ARROW: return `left`;\r\n                        case s.DOWN_ARROW: return `down`;\r\n                        case s.RIGHT_ARROW: return `right`;\r\n                        default: return null;\r\n                    }\r\n                };\r\n\r\n                const d = getKeyDirection();\r\n                if (!d) { return; }\r\n\r\n                // Move the player\r\n                const nextMove = state.moveSequence[state.moveIndex];\r\n                if (!nextMove) { return; }\r\n\r\n                if (nextMove.direction !== d) {\r\n                    state.moveIndex = 0;\r\n                    state.player.activeMove = undefined;\r\n                    state.player.renderPos = undefined;\r\n                    state.player.targetRenderPos = undefined;\r\n                    state.board.filter(x => x.item === `wall-broken`).forEach(x => { x.item = `wall`; });\r\n                    return;\r\n                }\r\n\r\n                state.player.activeMove = nextMove;\r\n                state.player.renderPos = getRenderPosition(nextMove.startPosition);\r\n                state.player.targetRenderPos = getRenderPosition(nextMove.endPosition);\r\n                state.moveIndex++;\r\n            };\r\n        }, hostElement);\r\n    },\r\n};\r\n","/* eslint-disable new-cap */\r\n/* eslint-disable no-new */\r\nimport p5 from 'p5';\r\nimport 'p5/lib/addons/p5.sound';\r\nimport { createRandomGenerator } from '../rando';\r\nimport { ArtWork } from '../artwork-type';\r\n\r\ntype Vector2 = { x: number, y: number };\r\ntype ColorHsb = {\r\n    /** 0-360 */\r\n    h: number;\r\n    /** 0-100 */\r\n    s: number;\r\n    /** 0-100 */\r\n    b: number;\r\n    /** 0-1 */\r\n    a: number;\r\n};\r\nconst drawGear = (g: p5,\r\n    options: {\r\n        position: Vector2;\r\n        radiusInner: number;\r\n        radiusOuter: number;\r\n        radiusAxis: number;\r\n        teeth: number;\r\n        rotationAngle: number;\r\n        color: ColorHsb;\r\n        randomSeed: string;\r\n    }) => {\r\n    g.colorMode(`hsl`);\r\n\r\n    const { position: { x, y }, radiusInner, radiusOuter, radiusAxis, teeth, rotationAngle, color, randomSeed } = options;\r\n\r\n    const angleRandomKs = 16;\r\n    // const angleRandomKs = 8;\r\n    const { random: randomConstant } = createRandomGenerator(`${randomSeed}`);\r\n    const { random } = createRandomGenerator(`${randomSeed}${Math.round(rotationAngle * angleRandomKs)}`);\r\n    const randomSym = () => 1 - 2 * random();\r\n\r\n    // g.fill(color.h, color.s, color.b, color.a);\r\n    // g.stroke(0, 0, 0, 1);\r\n    // g.stroke(0, 0, 0, color.a);\r\n    // g.stroke(0, 0, 0, 0);\r\n    // g.circle(x, y, radiusOuter * 2);\r\n    // g.circle(x, y, radius * 2);\r\n\r\n    g.stroke(color.h, color.s, color.b, color.a);\r\n    g.noFill();\r\n\r\n    // g.circle(x, y, radiusOuter * 2);\r\n\r\n    const toothAngle = g.TWO_PI / teeth;\r\n    const radI = radiusInner;\r\n    const radO = radiusOuter;\r\n    let jitterSize = 2.5;\r\n    const angle0 = rotationAngle;\r\n    const angle1 = angle0 + Math.PI * 2 * randomConstant();\r\n\r\n    jitterSize = radiusOuter * 0.5;\r\n    for (let j = 0; j < 4; j++) {\r\n\r\n        g.noStroke();\r\n        g.fill(color.h, color.s, color.b * 0.25, 0.4);\r\n        // g.fill(color.h, color.s, color.b, 0.25);\r\n        // g.fill(0, 0, 0);\r\n        g.curveTightness(0.9);\r\n        g.beginShape();\r\n        for (let i = 0; i <= teeth; i++) {\r\n            // g.curveVertex(x + diaI * g.cos((i + 0) * toothAngle), y + diaI * g.sin((i + 0) * toothAngle));\r\n            if (i !== 0) {\r\n                g.curveVertex(x + (radI - jitterSize * random()) * g.cos((i + 0.2) * toothAngle + angle0), y + (radI - jitterSize * random()) * g.sin((i + 0.2) * toothAngle + angle0));\r\n            }\r\n\r\n            g.curveVertex(x + (radO - jitterSize * random()) * g.cos((i + 0.3) * toothAngle + angle0), y + (radO - jitterSize * random()) * g.sin((i + 0.3) * toothAngle + angle0));\r\n            g.curveVertex(x + (radO - jitterSize * random()) * g.cos((i + 0.7) * toothAngle + angle0), y + (radO - jitterSize * random()) * g.sin((i + 0.7) * toothAngle + angle0));\r\n            g.curveVertex(x + (radI - jitterSize * random()) * g.cos((i + 0.8) * toothAngle + angle0), y + (radI - jitterSize * random()) * g.sin((i + 0.8) * toothAngle + angle0));\r\n            // g.curveVertex(x + diaI * g.cos((i + 1) * toothAngle), y + diaI * g.sin((i + 1) * toothAngle));\r\n            // g.arc(x, y, diaI, diaI, (i + 0) * toothAngle, (i + 0.5) * toothAngle);\r\n            // g.arc(x, y, diaO, diaO, (i + 0.5) * toothAngle, (i + 1) * toothAngle);\r\n        }\r\n        g.endShape();\r\n    }\r\n\r\n    jitterSize = 2.5;\r\n    g.noFill();\r\n    g.stroke(color.h, color.s, color.b, color.a);\r\n\r\n    // Draw face\r\n    const drawFace = randomConstant() > 0.5;\r\n    const faceType = random() > 0.5 ? `happy` as const : `creepy` as const;\r\n    if (drawFace) {\r\n        const radSmile = 0.5 * radI;\r\n        for (let j = 0; j < 4; j++) {\r\n\r\n            // Smile\r\n            if (faceType === `creepy`) {\r\n                jitterSize = 12;\r\n            }\r\n            g.noFill();\r\n            g.curveTightness(0.9);\r\n            g.beginShape();\r\n            for (let i = 0; i <= teeth / 3; i++) {\r\n                g.curveVertex(x + radSmile * g.cos((i + 0.2) * toothAngle + angle1) + jitterSize * randomSym(), y + radSmile * g.sin((i + 0.2) * toothAngle + angle1) + jitterSize * randomSym());\r\n            }\r\n            g.endShape();\r\n\r\n            // jitterSize = 2.5;\r\n\r\n            // Left Eye\r\n            for (let e = 0; e <= 1; e++) {\r\n                const r = e === 0 ? 1.1 : 1.6;\r\n                const ex = radSmile * Math.cos(r * Math.PI + angle1);\r\n                const ey = radSmile * Math.sin(r * Math.PI + angle1);\r\n                g.fill(0, 0, 0);\r\n                g.beginShape();\r\n                for (let i = 0; i <= teeth + 2; i++) {\r\n                    g.curveVertex(ex + x + radiusAxis * g.cos((i + 0.3) * toothAngle + angle1) + jitterSize * randomSym(), ey + y + radiusAxis * g.sin((i + 0.3) * toothAngle + angle1) + jitterSize * randomSym());\r\n                }\r\n                g.endShape();\r\n            }\r\n        }\r\n    }\r\n\r\n    if (drawFace && faceType === `creepy`) {\r\n        jitterSize = 5;\r\n    }\r\n\r\n    // jitterSize = 2.5;\r\n    for (let j = 0; j < 4; j++) {\r\n\r\n        g.noFill();\r\n        // g.fill(0, 0, 0, 0.1);\r\n        // g.fill(color.h, color.s, color.b, 0.05);\r\n        g.curveTightness(0.9);\r\n        g.beginShape();\r\n        for (let i = 0; i <= teeth; i++) {\r\n            // g.curveVertex(x + diaI * g.cos((i + 0) * toothAngle), y + diaI * g.sin((i + 0) * toothAngle));\r\n            if (i !== 0) {\r\n                g.curveVertex(x + radI * g.cos((i + 0.2) * toothAngle + angle0) + jitterSize * randomSym(), y + radI * g.sin((i + 0.2) * toothAngle + angle0) + jitterSize * randomSym());\r\n            }\r\n\r\n            g.curveVertex(x + radO * g.cos((i + 0.3) * toothAngle + angle0) + jitterSize * randomSym(), y + radO * g.sin((i + 0.3) * toothAngle + angle0) + jitterSize * randomSym());\r\n            g.curveVertex(x + radO * g.cos((i + 0.7) * toothAngle + angle0) + jitterSize * randomSym(), y + radO * g.sin((i + 0.7) * toothAngle + angle0) + jitterSize * randomSym());\r\n            g.curveVertex(x + radI * g.cos((i + 0.8) * toothAngle + angle0) + jitterSize * randomSym(), y + radI * g.sin((i + 0.8) * toothAngle + angle0) + jitterSize * randomSym());\r\n            // g.curveVertex(x + diaI * g.cos((i + 1) * toothAngle), y + diaI * g.sin((i + 1) * toothAngle));\r\n            // g.arc(x, y, diaI, diaI, (i + 0) * toothAngle, (i + 0.5) * toothAngle);\r\n            // g.arc(x, y, diaO, diaO, (i + 0.5) * toothAngle, (i + 1) * toothAngle);\r\n        }\r\n        g.endShape();\r\n\r\n        // Inner circle\r\n        g.fill(0, 0, 0);\r\n        g.beginShape();\r\n        for (let i = 0; i <= teeth + 2; i++) {\r\n            g.curveVertex(x + radiusAxis * g.cos((i + 0.3) * toothAngle + angle0) + jitterSize * randomSym(), y + radiusAxis * g.sin((i + 0.3) * toothAngle + angle0) + jitterSize * randomSym());\r\n        }\r\n        g.endShape();\r\n    }\r\n\r\n    return {\r\n        faceType: drawFace ? faceType : null,\r\n    };\r\n};\r\n\r\nexport const art_gears: ArtWork = {\r\n    key: `art-gears`,\r\n    title: `Gears`,\r\n    description: `Are the gears of conflict twisting our perceptions of others? (Press image to toggle sound)`,\r\n    artist: `Rick Love`,\r\n    getTokenDescription: (tokenId: string) => {\r\n        return null;\r\n    },\r\n    renderArt: (hostElement: HTMLElement, hash = `This is my hash!`) => {\r\n        const { random: randomMain } = createRandomGenerator(hash);\r\n\r\n        let tick = 0;\r\n\r\n        // const sat = 65 - 10 * Math.random();\r\n        const sat = 100;\r\n        const brightness = 60 - 20 * Math.random();\r\n\r\n        // const canvasSize = 300; const speed = 1 / (200 - 100 * randomMain());\r\n        const canvasSize = 600; const speed = 1 / (100 - 70 * randomMain());\r\n\r\n\r\n        const halfSize = canvasSize * 0.5;\r\n        const minGearRadius = canvasSize / 16;\r\n        const maxGearRadius = canvasSize / 3;\r\n        const minGearCount = 3;\r\n        const maxGearCount = 8;\r\n        const gearCount = Math.floor(minGearCount + (maxGearCount - minGearCount) * randomMain());\r\n\r\n        let lastGear = {\r\n            position: { x: canvasSize * randomMain(), y: canvasSize * randomMain() },\r\n            radius: minGearRadius,\r\n            // position: { x: canvasSize * randomMain(), y: canvasSize * randomMain() },\r\n            // size: minGearSize + (maxGearSize - minGearSize) * randomMain(),\r\n            randomSeed: `${randomMain()}`,\r\n            color: { h: 360 * randomMain(), s: 50, b: 50, a: 0.5 },\r\n        };\r\n        const gears = [...new Array(gearCount)].map(() => {\r\n\r\n            const targetRadius = minGearRadius + (maxGearRadius - minGearRadius) * randomMain();\r\n            const targetDistance = lastGear.radius + targetRadius;\r\n            const lastPos = lastGear.position;\r\n\r\n            // Try to bring back to center\r\n            const angleQuandrant = (lastPos.x > halfSize && lastPos.y > halfSize) ? (Math.PI * 1)\r\n                : (lastPos.x < halfSize && lastPos.y > halfSize) ? (Math.PI * 1.5)\r\n                    : (lastPos.x > halfSize && lastPos.y < halfSize) ? (Math.PI * 0.5)\r\n                        : 0;\r\n            // console.log(`angleQuandrant`, { angleQuandrant, lastPos, halfSize });\r\n            const targetAngle = Math.PI / 2 * randomMain() + angleQuandrant;\r\n\r\n            const posRaw = {\r\n                x: lastPos.x + targetDistance * Math.cos(targetAngle),\r\n                y: lastPos.y + targetDistance * Math.sin(targetAngle),\r\n            };\r\n            const pos = posRaw;\r\n            // const pos = {\r\n            //     x: 0.8 * posRaw.x + 0.2 * halfSize,\r\n            //     y: 0.8 * posRaw.y + 0.2 * halfSize,\r\n            // };\r\n\r\n            const xDelta = pos.x - lastPos.x;\r\n            const yDelta = pos.y - lastPos.y;\r\n            const actualRadius = Math.sqrt(xDelta * xDelta + yDelta * yDelta) - lastGear.radius;\r\n\r\n            // eslint-disable-next-line no-return-assign\r\n            return lastGear = {\r\n                position: pos,\r\n                radius: actualRadius,\r\n                randomSeed: `${randomMain()}`,\r\n                color: { h: 360 * randomMain(), s: sat, b: brightness, a: 0.5 },\r\n            };\r\n        });\r\n\r\n        let noise = null as null | p5.Noise;\r\n        let noiseDebounceTime = Date.now();\r\n\r\n        const toggleNoise = () => {\r\n            if (Date.now() < noiseDebounceTime + 500) { return; }\r\n            noiseDebounceTime = Date.now();\r\n\r\n            if (noise) {\r\n                noise.disconnect();\r\n                noise = null;\r\n                return;\r\n            }\r\n            noise = new p5.Noise(`white`);\r\n            noise.amp(0);\r\n            noise.start();\r\n        };\r\n\r\n        return new p5((s: p5) => {\r\n            s.setup = () => {\r\n                s.createCanvas(canvasSize, canvasSize);\r\n            };\r\n            s.mousePressed = () => { if (s.mouseX < 0 || s.mouseX > canvasSize || s.mouseY < 0 || s.mouseY > canvasSize) { return; } toggleNoise(); };\r\n            s.touchStarted = () => { const t = s.touches[0] as Vector2; if (t.x < 0 || t.x > canvasSize || t.y < 0 || t.y > canvasSize) { return; } toggleNoise(); };\r\n            // s.keyPressed = () => { toggleNoise(); };\r\n            s.draw = () => {\r\n                s.background(0);\r\n                // noise?.amp(0);\r\n\r\n                // s.background(10, 10, 10);\r\n                const g = s;\r\n                // const g = s.createGraphics(canvasSize * 2, canvasSize * 2);\r\n                // g.translate(canvasSize, canvasSize);\r\n                // g.scale(0.25);\r\n\r\n                let faceCount = 0;\r\n                let faceCreepyCount = 0;\r\n                for (const [i, gear] of gears.entries()) {\r\n                    const direction = i % 2 === 0 ? 1 : -1;\r\n                    const teethDepth = 5;\r\n                    const teeth = Math.ceil(gear.radius * Math.PI * 2 / (4 * teethDepth));\r\n                    const teethPassed = tick * speed * Math.pow(1.25, i + 1);\r\n                    const rotationAngle = s.TWO_PI * teethPassed / teeth;\r\n\r\n                    const result = drawGear(g, {\r\n                        position: gear.position,\r\n                        // radiusInner: gear.size * 0.93,\r\n                        // radiusOuter: gear.size * 1.07,\r\n                        radiusInner: gear.radius - teethDepth,\r\n                        radiusOuter: gear.radius + teethDepth,\r\n                        // radiusAxis: gear.radius * 0.15,\r\n                        radiusAxis: gear.radius * 0.1,\r\n                        // radiusAxis: teethDepth,\r\n                        teeth,\r\n                        color: gear.color,\r\n                        rotationAngle: direction * rotationAngle,\r\n                        randomSeed: gear.randomSeed,\r\n                    });\r\n\r\n                    if (result.faceType) {\r\n                        faceCount++;\r\n                    }\r\n                    if (result.faceType === `creepy`) {\r\n                        // Not actual position\r\n                        //  const distanceToCenterX = Math.abs(gear.position.x - halfSize);\r\n                        //  const distanceToCenterY = Math.abs(gear.position.y - halfSize);\r\n                        //  const distRatioToEdge = (halfSize - Math.sqrt(distanceToCenterX * distanceToCenterX + distanceToCenterY * distanceToCenterY)) / halfSize;\r\n                        // faceCreepyCount += Math.max(0, distRatioToEdge);\r\n                        faceCreepyCount++;\r\n                    }\r\n\r\n                    // Rotate slightly\r\n                    g.translate(gear.position.x, gear.position.y);\r\n                    g.rotate(s.TWO_PI * teethPassed / (teeth * 4));\r\n                    g.translate(-gear.position.x, -gear.position.y);\r\n                }\r\n                // s.image(g, 0, 0, canvasSize, canvasSize);\r\n\r\n                // console.log(`noiseLevel`, { level: faceCreepyCount / faceCount });\r\n                noise?.amp(faceCount > 0 ? faceCreepyCount / faceCount : 0);\r\n\r\n                // for (let i = 0; i < 10; i++) {\r\n                //     const color = s.color((cr * i) % 255, (cg * i) % 255, (cb * i) % 255, ca);\r\n                //     s.noFill();\r\n                //     s.stroke(color);\r\n                //     for (let j = 0; j < 36; j++) {\r\n                //         s.circle(200 - a / 2 + j % a, 200 - b / 2 + j % b, 270 - (i * 5) % c);\r\n                //     }\r\n                //     s.translate(200, 200);\r\n                //     // s.rotate((a + b + c + tick * 0.001) % 2);\r\n                //     s.rotate((a + b + c + tick * 0.001));\r\n                //     s.translate(-200, -200);\r\n                //     tick++;\r\n                // }\r\n\r\n                tick++;\r\n            };\r\n        }, hostElement);\r\n    },\r\n};\r\n","/* eslint-disable new-cap */\r\n/* eslint-disable no-new */\r\nimport p5 from 'p5';\r\nimport { createRandomGenerator } from '../../rando';\r\nimport { ArtWork } from '../../artwork-type';\r\n\r\nconst path = `/content/art/artwork/gpu-01/gpu-01`;\r\n\r\nexport const art_gpu_01: ArtWork = {\r\n    key: `art-gpu-01`,\r\n    title: `Gpu Example 01`,\r\n    description: `2015 - http://patriciogonzalezvivo.com\r\n\r\nThis is included as a great example of a gpu shader.\r\n    \r\nFrom: https://thebookofshaders.com/13/`,\r\n    artist: `@patriciogv`,\r\n    getTokenDescription: (tokenId: string) => {\r\n        return null;\r\n    },\r\n    // openSea: {\r\n    //     tokenAddress: `0x495f947276749ce646f68ac8c248420045cb7b5e`,\r\n    //     tokenId: `91242641486941084018191434774360347389366801368112854311223385694785434025985`,\r\n    // },\r\n    renderArt: (hostElement: HTMLElement, hash = `This is my hash!`) => {\r\n        // const { a, b, c } = { a: 57, b: 23, c: 15 };\r\n\r\n        const { random } = createRandomGenerator(hash);\r\n\r\n\r\n        // const { a, b, c } = { a: 1 + Math.floor(57 * random()), b: 1 + Math.floor(213 * random()), c: 1 + Math.floor(115 * random()) };\r\n        // const { cr, cg, cb, ca } = { cr: Math.floor(25 + 230 * random()), cg: Math.floor(25 + 230 * random()), cb: Math.floor(25 + 230 * random()), ca: Math.floor(25 + 25 * random()) };\r\n\r\n        const size = 600;\r\n        // const h = 200;\r\n        // const scale = size / 400;\r\n        // const speed = 0.5;\r\n\r\n        // let tick = 0;\r\n\r\n        let shaderInstance: null | p5.Shader = null;\r\n\r\n        return new p5((s: p5) => {\r\n            s.preload = () => {\r\n                shaderInstance = s.loadShader(`${path}.vert`, `${path}.frag`);\r\n            };\r\n            s.setup = () => {\r\n                s.createCanvas(size, size, s.WEBGL);\r\n                s.noStroke();\r\n            };\r\n            s.draw = () => {\r\n                if (!shaderInstance) { return; }\r\n\r\n                // send resolution of sketch into shader\r\n                shaderInstance.setUniform(`u_resolution`, [size, size]);\r\n                shaderInstance.setUniform(`u_time`, s.millis() / 1000);\r\n                shaderInstance.setUniform(`u_mouse`, [s.mouseX, s.map(s.mouseY, 0, size, size, 0)]);\r\n\r\n                // shader() sets the active shader with our shader\r\n                s.shader(shaderInstance);\r\n\r\n                // rect gives us some geometry on the screen\r\n                s.rect(0, 0, size, size);\r\n            };\r\n        }, hostElement);\r\n    },\r\n};\r\n","/* eslint-disable new-cap */\r\n/* eslint-disable no-new */\r\nimport p5 from 'p5';\r\nimport { createRandomGenerator } from '../../rando';\r\nimport { ArtWork } from '../../artwork-type';\r\n\r\nconst path = `/content/art/artwork/flying-colors/flying-colors`;\r\n\r\nexport const art_flyingColors: ArtWork = {\r\n    key: `art-flying-colors`,\r\n    title: `Flying Colors`,\r\n    description: `Mmmm, bright`,\r\n    artist: `Rick Love`,\r\n    getTokenDescription: (tokenId: string) => {\r\n        return null;\r\n    },\r\n    // openSea: {\r\n    //     tokenAddress: `0x495f947276749ce646f68ac8c248420045cb7b5e`,\r\n    //     tokenId: `91242641486941084018191434774360347389366801368112854311223385694785434025985`,\r\n    // },\r\n    renderArt: (hostElement: HTMLElement, hash = `This is my hash!`) => {\r\n        // const { a, b, c } = { a: 57, b: 23, c: 15 };\r\n\r\n        const { random } = createRandomGenerator(hash);\r\n        const seed = random();\r\n\r\n\r\n        // const { a, b, c } = { a: 1 + Math.floor(57 * random()), b: 1 + Math.floor(213 * random()), c: 1 + Math.floor(115 * random()) };\r\n        // const { cr, cg, cb, ca } = { cr: Math.floor(25 + 230 * random()), cg: Math.floor(25 + 230 * random()), cb: Math.floor(25 + 230 * random()), ca: Math.floor(25 + 25 * random()) };\r\n\r\n        const size = 600;\r\n        // const h = 200;\r\n        // const scale = size / 400;\r\n        // const speed = 0.5;\r\n\r\n        // let tick = 0;\r\n        let lastTimeMs = 0;\r\n        const gameTimeMs = 0;\r\n        const lastTimeModifier = 1;\r\n\r\n        let shaderInstance: null | p5.Shader = null;\r\n\r\n        return new p5((s: p5) => {\r\n            s.preload = () => {\r\n                shaderInstance = s.loadShader(`${path}.vert`, `${path}.frag`);\r\n            };\r\n            s.setup = () => {\r\n                s.createCanvas(size, size, s.WEBGL);\r\n                s.noStroke();\r\n            };\r\n            s.draw = () => {\r\n                if (!shaderInstance) { return; }\r\n\r\n                // send resolution of sketch into shader\r\n                const deltaTimeMs = lastTimeMs - s.millis();\r\n                lastTimeMs = s.millis();\r\n\r\n                // const timeModifier = 0.7 * (0.5 + 0.7 * Math.cos(s.millis() / (5 * 1000)));\r\n                // const timeModifier01 = lastTimeModifier + 0.25 * (0.5 - Math.random());\r\n                // const timeModifier02 = Math.min(1, Math.max(0, timeModifier01));\r\n                // const dampen = Math.pow(Math.abs(timeModifier02 - 0.5) * 2, 5);\r\n                // const timeModifier = dampen * 0.5 + (1 - dampen) * timeModifier02;\r\n\r\n                // const timeModifier01 = lastTimeModifier + 0.25 * (0.5 - Math.random());\r\n                // const timeModifier02 = Math.min(1, Math.max(0, timeModifier01));\r\n\r\n                // lastTimeModifier = timeModifier;\r\n                // gameTimeMs += deltaTimeMs * timeModifier;\r\n\r\n\r\n                // console.log(`draw`, { lastTimeModifier, seed, mouse: s.mouseX, gameTimeMs });\r\n\r\n                shaderInstance.setUniform(`u_resolution`, [size, size]);\r\n                shaderInstance.setUniform(`u_time`, lastTimeMs / 1000);\r\n                shaderInstance.setUniform(`u_mouse`, [s.mouseX, s.map(s.mouseY, 0, size, size, 0)]);\r\n                shaderInstance.setUniform(`u_seed`, seed);\r\n\r\n                // shader() sets the active shader with our shader\r\n                s.shader(shaderInstance);\r\n\r\n                // rect gives us some geometry on the screen\r\n                s.rect(0, 0, size, size);\r\n            };\r\n        }, hostElement);\r\n    },\r\n};\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport { C } from 'controls-react';\r\nimport { useDebounce } from 'utils-react/hooks';\r\nimport { theme } from 'themes/theme';\r\nimport { art_circles } from './artwork/circles';\r\nimport { art_layersOfTheOnionsSoul } from './artwork/layers-of-the-onions-soul';\r\nimport { art_121 } from './artwork/art-121';\r\nimport { P5Viewer } from './p5-viewer';\r\nimport { art_puzzle01 } from './artwork/puzzle/art-puzzle-01';\r\nimport { art_gears } from './artwork/gears';\r\nimport { ArtWork } from './artwork-type';\r\nimport { art_gpu_01 } from './artwork/gpu-01/gpu-01';\r\nimport { art_flyingColors } from './artwork/flying-colors/flying-colors';\r\n\r\nexport const ArtGallery = (props: {}) => {\r\n    const artItems: ArtWork[] = [\r\n        art_flyingColors,\r\n        art_gpu_01,\r\n        art_gears,\r\n        art_puzzle01,\r\n        art_121,\r\n        art_circles,\r\n        art_layersOfTheOnionsSoul,\r\n    ];\r\n\r\n    const art = useRef(artItems[0]);\r\n    const [showNavigation, setShowNavigation] = useState(true);\r\n    const [tokenId, setTokenId] = useState(`0`);\r\n\r\n    type ArtRender = {\r\n        kind: 'p5';\r\n        renderArt: (hostElement: HTMLDivElement) => { remove: () => void };\r\n        openSea?: ArtWork['openSea'];\r\n    } | {\r\n        kind: 'react';\r\n        ArtComponent: () => JSX.Element;\r\n        openSea?: ArtWork['openSea'];\r\n    };\r\n    const [artRenderer, setArtRenderer] = useState({\r\n        kind: `p5`,\r\n        renderArt: () => { return { remove: () => { } }; },\r\n    } as ArtRender);\r\n    const [tokenDescription, setTokenDescription] = useState(null as null | string);\r\n\r\n    const { debounce } = useDebounce(250);\r\n\r\n    useEffect(() => {\r\n        const queryParts = document.location.search.substr(1).split(`&`);\r\n        const artKey = queryParts.find(x => x.startsWith(`key`))?.split(`=`)[1];\r\n        if (!artKey) { changeTokenId(`0`); return; }\r\n        const artworkItem = artItems.find(x => x.key === artKey);\r\n        if (!artworkItem) { changeTokenId(`0`); return; }\r\n\r\n        art.current = artworkItem;\r\n        const newTokenId = queryParts.find(x => x.startsWith(`tokenId`))?.split(`=`)[1];\r\n\r\n        setShowNavigation(false);\r\n        changeTokenId(`${newTokenId || tokenId}`);\r\n    }, [document.location.search]);\r\n\r\n    const changeArt = (value: typeof artItems[0]) => {\r\n        art.current = value;\r\n        changeTokenId(tokenId);\r\n    };\r\n\r\n    const changeTokenId = (value: string) => {\r\n        setTokenId(value);\r\n\r\n        debounce(() => {\r\n            setTokenDescription(art.current.getTokenDescription(value));\r\n            setArtRenderer({\r\n                kind: `p5`,\r\n                renderArt: (hostElement) => art.current.renderArt(hostElement, value),\r\n                openSea: art.current.openSea,\r\n            });\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <C.View_Panel>\r\n                {showNavigation && (\r\n                    <C.View_Form>\r\n                        {artItems.map(x => (\r\n                            <React.Fragment key={x.title}>\r\n                                <div style={{ paddingBottom: 4 }}>\r\n                                    <C.Button_FormAction onPress={() => changeArt(x)}>{x.title}</C.Button_FormAction>\r\n                                </div>\r\n                            </React.Fragment>\r\n                        ))}\r\n                        <C.View_FieldRow>\r\n                            <C.Text_FormTitle>Enter a preview tokenId:</C.Text_FormTitle>\r\n                            <C.Input_Text value={tokenId} onChange={changeTokenId} />\r\n                        </C.View_FieldRow>\r\n                    </C.View_Form>\r\n                )}\r\n\r\n\r\n                <C.Text_FormTitle style={{ ...theme.text_formTitle, whiteSpace: `pre-wrap` }}>{art.current.title}</C.Text_FormTitle>\r\n                <C.Text_FormTitle style={{ ...theme.text_formTitle, whiteSpace: `pre-wrap` }}>{art.current.artist}</C.Text_FormTitle>\r\n                {artRenderer.kind === `p5` && (\r\n                    <P5Viewer renderArt={artRenderer.renderArt} openSea={artRenderer.openSea} />\r\n                )}\r\n                {artRenderer.kind === `react` && (\r\n                    <artRenderer.ArtComponent />\r\n                )}\r\n                {tokenDescription && (<C.Text_FormTitle style={{ ...theme.text_formTitle, background: `#EEEEEE`, padding: 8, whiteSpace: `pre-wrap` }}>{tokenDescription}</C.Text_FormTitle>)}\r\n                <C.Text_FormTitle style={{ ...theme.text_formTitle, whiteSpace: `pre-wrap` }}>{art.current.description}</C.Text_FormTitle>\r\n            </C.View_Panel>\r\n            {!showNavigation && (\r\n                <div style={{ padding: 16, fontSize: 16 }}>\r\n                    <a href='/art'>Other Art by Rick Love</a>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n","var $ = require('../internals/export');\n\nvar $hypot = Math.hypot;\nvar abs = Math.abs;\nvar sqrt = Math.sqrt;\n\n// Chrome 77 bug\n// https://bugs.chromium.org/p/v8/issues/detail?id=9546\nvar BUGGY = !!$hypot && $hypot(Infinity, NaN) !== Infinity;\n\n// `Math.hypot` method\n// https://tc39.es/ecma262/#sec-math.hypot\n$({ target: 'Math', stat: true, forced: BUGGY }, {\n  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars\n    var sum = 0;\n    var i = 0;\n    var aLen = arguments.length;\n    var larg = 0;\n    var arg, div;\n    while (i < aLen) {\n      arg = abs(arguments[i++]);\n      if (larg < arg) {\n        div = larg / arg;\n        sum = sum * div * div + 1;\n        larg = arg;\n      } else if (arg > 0) {\n        div = arg / larg;\n        sum += div * div;\n      } else sum += arg;\n    }\n    return larg === Infinity ? Infinity : larg * sqrt(sum);\n  }\n});\n"],"sourceRoot":""}