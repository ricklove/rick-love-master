{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/perception/timing-perception-test.tsx"],"names":["TimingPerceptionTestComponent","props","useState","delayTimeMs","setDelayTimeMs","target","setTarget","useEffect","timeoutId","setTimeout","setSuccess","clearTimeout","success","onClick","a","delay","Math","random","s","View_Panel","View_Form","View_FieldRow","style","background","Button_FieldInline","onPress","Text_FieldLabel"],"mappings":"2RAOaA,EAAgC,SAACC,GAAc,MAElBC,mBAAS,KAAxCC,EAFiD,KAEpCC,EAFoC,OAG5BF,oBAAS,GAA9BG,EAHiD,KAGzCC,EAHyC,KAKxDC,qBAAU,WACN,IAAMC,EAAYC,YAAW,WACzBH,GAAU,GACVI,EAAW,QACZ,KACH,OAAO,kBAAMC,aAAaH,MAC3B,CAACL,IAXoD,MAa1BD,mBAAS,MAAhCU,EAbiD,KAaxCF,EAbwC,KAelDG,EAAO,uCAAG,sBAAAC,EAAA,sEACNC,YAAMZ,GADA,OAEZG,GAAU,GACVI,EAAW,CAAEE,SAAS,EAAMT,gBAExBA,EAAc,GACdC,EAAe,KACRY,KAAKC,SAAW,GACvBb,GAAe,SAAAc,GAAC,OAAI,KAEpBd,GAAe,SAAAc,GAAC,OAAIA,EAAI,KAVhB,2CAAH,qDAcb,OACI,oCACI,kBAAC,IAAEC,WAAH,KACI,kBAAC,IAAEC,UAAH,KACI,kBAAC,IAAEC,cAAH,MAGA,kBAAC,IAAEA,cAAH,CAAiBC,MAAO,CAAEC,WAAYlB,EAAS,UAAH,YACxC,kBAAC,IAAEmB,mBAAH,CAAsBC,QAASZ,IAAcR,EAAS,GAAH,SAAnD,iBAEHO,GACG,kBAAC,IAAES,cAAH,CAAiBC,MAAO,CAAEC,WAAYX,EAAQA,QAAR,sBAClC,kBAAC,IAAEc,gBAAH,KAAuBd,EAAQA,QAAR,WAA6BA,EAAQT,YAArC","file":"38-a8ebae5e475b3a83a819.js","sourcesContent":["/* eslint-disable no-await-in-loop */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { C } from 'controls-react';\r\nimport { delay } from 'utils/delay';\r\n\r\nexport const TimingPerceptionTestComponent = (props: {}) => {\r\n\r\n    const [delayTimeMs, setDelayTimeMs] = useState(250);\r\n    const [target, setTarget] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const timeoutId = setTimeout(() => {\r\n            setTarget(true);\r\n            setSuccess(null);\r\n        }, 1000);\r\n        return () => clearTimeout(timeoutId);\r\n    }, [delayTimeMs]);\r\n\r\n    const [success, setSuccess] = useState(null as null | { success: boolean, delayTimeMs: number });\r\n\r\n    const onClick = async () => {\r\n        await delay(delayTimeMs);\r\n        setTarget(false);\r\n        setSuccess({ success: true, delayTimeMs });\r\n\r\n        if (delayTimeMs < 10) {\r\n            setDelayTimeMs(250);\r\n        } else if (Math.random() < 0.1) {\r\n            setDelayTimeMs(s => 0);\r\n        } else {\r\n            setDelayTimeMs(s => s + 1);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <C.View_Panel>\r\n                <C.View_Form>\r\n                    <C.View_FieldRow>\r\n                        {/* <C.Button_FieldInline onPress={sendInputToOutputs} >Send to Outputs test</C.Button_FieldInline> */}\r\n                    </C.View_FieldRow>\r\n                    <C.View_FieldRow style={{ background: target ? `#00FF00` : `#FF0000` }} >\r\n                        <C.Button_FieldInline onPress={onClick} >{`${target ? `` : `Don't`}Press Button`}</C.Button_FieldInline>\r\n                    </C.View_FieldRow>\r\n                    {success && (\r\n                        <C.View_FieldRow style={{ background: success.success ? `#00FF00` : `#FF0000` }} >\r\n                            <C.Text_FieldLabel>{`${success.success ? `Success ${success.delayTimeMs}` : `Fail`}`}</C.Text_FieldLabel>\r\n                        </C.View_FieldRow>\r\n                    )}\r\n                </C.View_Form>\r\n            </C.View_Panel>\r\n        </>\r\n    );\r\n};\r\n"],"sourceRoot":""}