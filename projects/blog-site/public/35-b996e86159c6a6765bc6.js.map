{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/games/console-simulator/console-simulator.tsx"],"names":["ConsoleSimulator","props","elementInput","useRef","focusOnInput","current","focus","useEffect","focusOnLoad","useState","isFocused","setIsFocused","command","setCommand","prompt","initialPrompt","lines","isExpanded","setConsoleState","handleResult","result","l","addDivider","push","text","output","split","map","x","trim","filter","forEach","prefix","Component","quit","s","setTimeout","rect","getBoundingClientRect","scrollTop","window","pageYOffset","document","documentElement","targetScroll","top","innerHeight","scrollTo","left","behavior","hitEnter","a","delay","onCommand","isExpandedActual","forceExpanded","className","style","display","onClick","i","key","backgroundColor","type","ref","opacity","autoCorrect","autoCapitalize","value","onFocus","onBlur","onChange","target","onKeyPress","e"],"mappings":"8QAYaA,EAAmB,SAACC,GAK3B,MACIC,EAAeC,iBAAO,MACtBC,EAAe,WAAM,MACvB,UAAAF,EAAaG,eAAb,SAAsBC,SAG1BC,qBAAU,WACFN,EAAMO,aACNJ,MAEL,CAACH,EAAMO,cAVR,MAYgCC,oBAAS,GAApCC,EAZL,KAYgBC,EAZhB,OAa4BF,mBAAS,IAAhCG,EAbL,KAacC,EAbd,OAkBoBJ,mBAAS,CAC3BK,OAAQb,EAAMc,cACdC,MAAO,GACPC,YAAY,IArBd,OAeEH,EAfF,EAeEA,OACAE,EAhBF,EAgBEA,MACAC,EAjBF,EAiBEA,WACDC,EAlBD,KAwBIC,EAAe,SAACC,GAA6B,MAEzCC,EAAIL,EAWV,GATII,EAAOE,YACPD,EAAEE,KAAK,CAAEC,KAAM,QAGnB,UAAAJ,EAAOK,cAAP,SAAeC,MAAf,MAA2BC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,UAAQC,QAAO,SAAAF,GAAC,OAAIA,KAAGG,SAAQ,SAAAH,GAAC,OAAIP,EAAEE,KAAK,CAAES,OAAQ,GAAIR,KAAMI,OAEjGR,EAAOa,WACPZ,EAAEE,KAAK,CAAEU,UAAWb,EAAOa,YAE3Bb,EAAOc,KAGP,OAFArB,EAAW,SACXK,GAAgB,SAAAiB,GAAC,MAAK,CAAErB,OAAQb,EAAMc,cAAeC,MAAO,GAAIC,YAAY,MAIhFC,GAAgB,SAAAiB,GAAC,8BAAUA,EAAV,CAAarB,OAAM,UAAEM,EAAON,cAAT,QAAmBqB,EAAErB,OAAQE,MAAOK,OACxEe,YAAW,WACP,GAAIlC,EAAaG,QAAS,CAGtB,IAAMgC,EAAOnC,EAAaG,QAAQiC,wBAC5BC,EAAYC,OAAOC,aAAeC,SAASC,gBAAgBJ,UAC3DK,EAAeP,EAAKQ,IAAMN,EAAiC,GAArBC,OAAOM,YAC/CF,EAAe,GACfJ,OAAOO,SAAS,CAAEC,KAAM,EAAGH,IAAKD,EAAcK,SAAU,cAGjE,KAGDC,EAAQ,uCAAG,8BAAAC,EAAA,6DACP9B,EAAIL,GACRO,KAAK,CAAES,OAAWlB,EAAL,IAAgBU,KAAMZ,IACrCC,EAAW,IACXK,GAAgB,SAAAiB,GAAC,wBAAUA,EAAV,CAAarB,OAAQ,GAAIE,MAAOK,EAAGJ,YAAY,OAJnD,SAMPmC,YAAM,KANC,uBAOQnD,EAAMoD,UAAUzC,EAASO,GAPjC,OAOPC,EAPO,OAQbD,EAAaC,GARA,4CAAH,qDAaRkC,EAAgB,UAAGrD,EAAMsD,qBAAT,QAA0BtC,EAChD,OACI,yBAAKuC,UAAU,oBAAoBC,MAAO,CAAEC,QAASJ,EAAmB,QAAH,gBAA+BK,QAASvD,GACxGkD,GAAoB,8BAjFV,UAkFVA,GAAqBtC,EAAMW,KAAI,SAACC,EAAGgC,GAAJ,OAC5B,yBAAKC,IAAKD,GACN,8BAAOhC,EAAEI,QACT,8BAAOJ,EAAEJ,MACRI,EAAEK,WAAc,8BAAM,kBAACL,EAAEK,UAAH,WAG/B,yBAAKwB,MAAO,CAAEC,QAASJ,EAAmB,QAAH,iBACnC,8BAAOxC,EAAP,KACA,8BAAOF,GACP,0BAAM4C,UAAU,2BAA2BC,MAAO/C,EAAY,GAAK,CAAEoD,gBAAiB,YAAtF,KACA,2BAAOC,KAAK,OACRC,IAAK9D,EACLuD,MAAO,CAAEQ,QAAS,GAClBC,YAAY,MAAMC,eAAe,OACjCC,MAAOxD,EACPyD,QAAS,kBAAM1D,GAAa,IAC5B2D,OAAQ,kBAAM3D,GAAa,IAC3B4D,SAAU,SAAA3C,GAAC,OAAIf,EAAWe,EAAE4C,OAAOJ,QACnCK,WAAY,SAAAC,GAAC,MAAI,UAAAA,EAAEb,KAAmBX","file":"35-b996e86159c6a6765bc6.js","sourcesContent":["/* eslint-disable react/no-array-index-key */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable no-use-before-define */\r\n/* eslint-disable @typescript-eslint/no-use-before-define */\r\nimport './console-simulator.css';\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport { ConCommandResult } from './types';\r\nimport { delay } from './utils';\r\n\r\nconst consoleVersion = `v1.1.0`;\r\n\r\nexport const ConsoleSimulator = (props: {\r\n    initialPrompt: string;\r\n    onCommand: (command: string, onMessage: (message: ConCommandResult) => void) => Promise<ConCommandResult>;\r\n    focusOnLoad?: boolean;\r\n    forceExpanded?: boolean;\r\n}) => {\r\n    const elementInput = useRef(null as null | HTMLInputElement);\r\n    const focusOnInput = () => {\r\n        elementInput.current?.focus();\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (props.focusOnLoad) {\r\n            focusOnInput();\r\n        }\r\n    }, [props.focusOnLoad]);\r\n\r\n    const [isFocused, setIsFocused] = useState(false);\r\n    const [command, setCommand] = useState(``);\r\n    const [{\r\n        prompt,\r\n        lines,\r\n        isExpanded,\r\n    }, setConsoleState] = useState({\r\n        prompt: props.initialPrompt,\r\n        lines: [] as { prefix?: string, text?: string, Component?: () => JSX.Element }[],\r\n        isExpanded: false,\r\n    });\r\n\r\n    const handleResult = (result: ConCommandResult) => {\r\n        // console.log(`handleResult`, { result });\r\n        const l = lines;\r\n\r\n        if (result.addDivider) {\r\n            l.push({ text: `---` });\r\n        }\r\n\r\n        result.output?.split(`\\n`).map(x => x.trim()).filter(x => x).forEach(x => l.push({ prefix: ``, text: x }));\r\n\r\n        if (result.Component) {\r\n            l.push({ Component: result.Component });\r\n        }\r\n        if (result.quit) {\r\n            setCommand(``);\r\n            setConsoleState(s => ({ prompt: props.initialPrompt, lines: [], isExpanded: false }));\r\n            return;\r\n        }\r\n\r\n        setConsoleState(s => ({ ...s, prompt: result.prompt ?? s.prompt, lines: l }));\r\n        setTimeout(() => {\r\n            if (elementInput.current) {\r\n                // elementInput.current.scrollIntoView({ behavior: `smooth`, block: `center`, inline: `center` });\r\n\r\n                const rect = elementInput.current.getBoundingClientRect();\r\n                const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\r\n                const targetScroll = rect.top + scrollTop - window.innerHeight * 0.5;\r\n                if (targetScroll > 0) {\r\n                    window.scrollTo({ left: 0, top: targetScroll, behavior: `smooth` });\r\n                }\r\n            }\r\n        }, 50);\r\n    };\r\n\r\n    const hitEnter = async () => {\r\n        const l = lines;\r\n        l.push({ prefix: `${prompt} `, text: command });\r\n        setCommand(``);\r\n        setConsoleState(s => ({ ...s, prompt: ``, lines: l, isExpanded: true }));\r\n\r\n        await delay(100);\r\n        const result = await props.onCommand(command, handleResult);\r\n        handleResult(result);\r\n    };\r\n\r\n\r\n    // Force Expanded\r\n    const isExpandedActual = props.forceExpanded ?? isExpanded;\r\n    return (\r\n        <div className='console-simulator' style={{ display: isExpandedActual ? `block` : `inline-block` }} onClick={focusOnInput}>\r\n            {isExpandedActual && <span>{consoleVersion}</span>}\r\n            {isExpandedActual && (lines.map((x, i) => (\r\n                <div key={i}>\r\n                    <span>{x.prefix}</span>\r\n                    <span>{x.text}</span>\r\n                    {x.Component && (<span><x.Component /></span>)}\r\n                </div>\r\n            )))}\r\n            <div style={{ display: isExpandedActual ? `block` : `inline-block` }}>\r\n                <span>{prompt} </span>\r\n                <span>{command}</span>\r\n                <span className='console-simulator-cursor' style={isFocused ? {} : { backgroundColor: `#000000` }}>&nbsp;</span>\r\n                <input type='text'\r\n                    ref={elementInput}\r\n                    style={{ opacity: 0 }}\r\n                    autoCorrect='off' autoCapitalize='none'\r\n                    value={command}\r\n                    onFocus={() => setIsFocused(true)}\r\n                    onBlur={() => setIsFocused(false)}\r\n                    onChange={x => setCommand(x.target.value)}\r\n                    onKeyPress={e => e.key === `Enter` && hitEnter()} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n"],"sourceRoot":""}