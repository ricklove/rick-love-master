{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/audio/web-midi-input.ts","webpack:///D:/Projects/rick-love-master/code/audio/midi-test.tsx"],"names":["MidiCommand","MidiError","message","data","Error","createMidiInput","a","onMidiMessage","navigator","requestMIDIAccess","midiAccess","inputs","values","onmidimessage","e","command","note","velocity","event","MidiTestComponent","props","useAutoLoadingError","loading","error","doWork","useState","messages","setMessages","View_Panel","Loading","ErrorBox","View_Form","View_FieldRow","Button_FieldInline","onPress","input","s","JSON","stringify","map","x","i","key","Text_FieldLabel"],"mappings":"u4EAAO,IAIKA,EAJCC,EAAb,Y,QACI,WAAmBC,EAAwBC,GAAgB,aAAE,sBAA1CD,UAAwC,EAAhBC,OAAgB,EAD/D,O,EAAA,G,EAAA,G,6EAAA,KAA+BC,S,SAInBJ,O,uBAAAA,I,sBAAAA,M,KAmBL,IAAMK,EAAe,e,EAAA,G,EAAA,UAAG,qCAAAC,EAAA,yDAC3BC,EAD2B,EAC3BA,cAKKC,UAAUC,kBANY,sBAOjB,IAAIR,EAAJ,4BAPiB,uBAUFO,UAAUC,oBAVR,OAa3B,IAHMC,EAVqB,OAWrBC,EAASD,EAAWC,OAAOC,SAEjC,IAAoBD,KAApB,aAA4B,QAClBE,cAAiB,SAAAC,GAAK,MACUA,EAAEX,KAA7BY,EADiB,KACRC,EADQ,KACFC,EADE,KAExBV,EAAc,CAAEQ,UAASC,OAAMC,WAAUC,MAAOJ,KAhB7B,0C,+KAAH,sD,siCCfrB,IAAMK,EAAoB,SAACC,GAAc,MAETC,cAA3BC,EAFoC,EAEpCA,QAASC,EAF2B,EAE3BA,MAAOC,EAFoB,EAEpBA,OAFoB,EAGZC,mBAAS,IAAlCC,EAHqC,KAG3BC,EAH2B,KA8B5C,OACI,oCACI,kBAAC,IAAEC,WAAH,KACI,kBAAC,IAAEC,QAAH,CAAWP,QAASA,IACpB,kBAAC,IAAEQ,SAAH,CAAYP,MAAOA,IACnB,kBAAC,IAAEQ,UAAH,KACI,kBAAC,IAAEC,cAAH,KACI,kBAAC,IAAEC,mBAAH,CAAsBC,QAjCvB,kBAAMV,EAAM,YAAC,sBAAAlB,EAAA,sEACtBD,EAAgB,CAClBE,cAAe,SAAC4B,GACZR,GAAY,SAAAS,GAAC,OAAKC,KAAKC,UAAUH,IAApB,SAA+BC,UAHxB,8CAiCZ,gBAGHV,EAASa,KAAI,SAACC,EAAGC,GAAJ,OACV,kBAAC,IAAET,cAAH,CAAiBU,IAAG,IAAKD,EAAI,EAAI,IAC7B,kBAAC,IAAEE,gBAAH,KAAoBH","file":"17-fa277e6af46d4a164c91.js","sourcesContent":["export class MidiError extends Error {\r\n    constructor(public message: string, public data?: unknown) { super(); }\r\n}\r\n\r\nexport enum MidiCommand {\r\n    NoteOff = 128,\r\n    NoteOn = 144,\r\n};\r\n\r\nexport type MidiInput = {\r\n    command: MidiCommand;\r\n\r\n    /** Note value from 0-127\r\n     * \r\n     * 88 Key Piano: 21=FirstKey, 108=LastKey, 60=MiddleC\r\n     */\r\n    note: number;\r\n\r\n    /** Stregth: 1=Softest, 127=Hardest, 0=NoteOff */\r\n    velocity: number;\r\n\r\n    event: MIDIMessageEvent;\r\n};\r\nexport const createMidiInput = async ({\r\n    onMidiMessage,\r\n}: {\r\n    onMidiMessage: (input: MidiInput) => void;\r\n}) => {\r\n\r\n    if (!navigator.requestMIDIAccess) {\r\n        throw new MidiError(`WebMIDI is not supported`);\r\n    }\r\n\r\n    const midiAccess = await navigator.requestMIDIAccess();\r\n    const inputs = midiAccess.inputs.values();\r\n\r\n    for (const input of inputs) {\r\n        input.onmidimessage = (e => {\r\n            const [command, note, velocity] = e.data;\r\n            onMidiMessage({ command, note, velocity, event: e });\r\n        });\r\n    }\r\n\r\n    // const outputs = midiAccess.outputs.values();\r\n    // // const o = outputs[0];\r\n    // // o.send();\r\n\r\n    // return {\r\n    //     outputs,\r\n    // };\r\n};\r\n","/* eslint-disable no-await-in-loop */\r\n/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\nimport React, { useState } from 'react';\r\nimport { C } from 'controls-react';\r\nimport { useAutoLoadingError } from 'utils-react/hooks';\r\nimport { createMidiInput } from './web-midi-input';\r\n\r\nexport const MidiTestComponent = (props: {}) => {\r\n\r\n    const { loading, error, doWork } = useAutoLoadingError();\r\n    const [messages, setMessages] = useState([] as string[]);\r\n    const enableMidi = () => doWork(async () => {\r\n        await createMidiInput({\r\n            onMidiMessage: (input) => {\r\n                setMessages(s => [JSON.stringify(input), ...s]);\r\n            },\r\n        });\r\n    });\r\n\r\n    // const sendInputToOutputs = () => doWork(async () => {\r\n    //     let sendOutput = async (data: [number, number, number]) => { };\r\n    //     const result = await createMidiInput({\r\n    //         onMidiMessage: (input) => {\r\n    //             (async () => { await sendOutput(input.event.data); })();\r\n    //             setMessages(s => [JSON.stringify(input), ...s]);\r\n    //         },\r\n    //     });\r\n\r\n    //     const { outputs } = result;\r\n    //     sendOutput = async (data) => {\r\n    //         for (const o of outputs) {\r\n    //             await delay(500);\r\n    //             o.send(data);\r\n    //         }\r\n    //     };\r\n    // });\r\n\r\n    return (\r\n        <>\r\n            <C.View_Panel>\r\n                <C.Loading loading={loading} />\r\n                <C.ErrorBox error={error} />\r\n                <C.View_Form>\r\n                    <C.View_FieldRow>\r\n                        <C.Button_FieldInline onPress={enableMidi} >Enable Midi</C.Button_FieldInline>\r\n                        {/* <C.Button_FieldInline onPress={sendInputToOutputs} >Send to Outputs test</C.Button_FieldInline> */}\r\n                    </C.View_FieldRow>\r\n                    {messages.map((x, i) => (\r\n                        <C.View_FieldRow key={`${i - 1 + 1}`}>\r\n                            <C.Text_FieldLabel>{x}</C.Text_FieldLabel>\r\n                        </C.View_FieldRow>\r\n                    ))}\r\n                </C.View_Form>\r\n            </C.View_Panel>\r\n        </>\r\n    );\r\n};\r\n"],"sourceRoot":""}