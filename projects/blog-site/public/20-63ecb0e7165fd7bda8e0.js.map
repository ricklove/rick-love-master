{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/utils/query.ts","webpack:///D:/Projects/rick-love-master/code/doodle/doodle-party-state.ts","webpack:///D:/Projects/rick-love-master/code/doodle/doodle-party-user-profile.tsx","webpack:///D:/Projects/rick-love-master/code/doodle/doodle-party-components.tsx","webpack:///D:/Projects/rick-love-master/code/doodle/doodle-party.tsx"],"names":["createClientStorage","clientStorage","load","JSON","parse","localStorage","getItem","save","value","setItem","stringify","createDefaultGameState","query","queryString","substr","split","pair","decodeURIComponent","parseQuery","window","location","search","client","_query","room","role","parseRole","clientPlayer","clientKey","Math","random","name","emoji","isReady","players","history","rounds","createNewAssigment","kind","prompt","chainKey","Date","now","floor","useDoodlePartyController","gameState","useRef","current","useState","loading","setLoading","renderId","setRenderId","refresh","s","messages","setMessages","events","setEvents","send","messageHandler","useEffect","isUser","connection","createWebsocketClient","websocketsApiUrl","websocketsApiConfig","connect","key","unsubMessages","subscribeMessages","message","console","log","syncResponseId","setTimeout","sendGameState","requestedClientKey","masterClientKey","timestamp","masterState","startTimestamp","clientStates","sendNewAssignmentsIfReady","some","x","assignment","doodle","missingAssignments","filter","length","forEach","lastRound","undefined","completed","map","push","old","firstPlayer","shift","i","p","oldAssigment","decodeDoodleDrawing","segments","flatMap","find","newAssignment","a","uploadApiWebClient","createUploadApiWebClient","uploadApiConfig","createUploadUrl","prefix","doodleStoragePaths","doodlePartyDrawingsPrefix","backupUrl","uploadUrl","backupUploader","createUploader","uploadData","setInterval","m","lastMessageTimestamp","aliveTimeout","toKeyValueArray","deadTimeout","droppedClientKey","randomIndex","handleMessage","players_after","assigment","playerAssignment","clearTimeout","clientState","Object","assign","createMessageHandler","receivedAtTimestamp","unsubEvents","subscribeConnectionEvents","event","isConnected","unsubscribe","sendClientPlayer","setClientPlayer","sendAssignment","_messages","_events","DoodlePartyProfileView","props","controller","userProfile","setUserProfile","usedEmojis","setUsedEmojis","View_Panel","Text_FormTitle","onUserProfileChange","View_FormActionRow","Button_FormAction","onPress","onDone","DoodlePartyPlayerList","style","flexDirection","alignItems","fontSize","width","userProfileEmojis","replace","trim","UserProfileView","availableEmojis","setAvailableEmojis","isShowingEmojiSelection","setIsShowingEmojiSelection","includes","View_Form","flexWrap","View_FieldRow","onNameChange","UserProfileName","setName","isEditing","setIsEditing","changeName","Input_Text","onChange","onSubmit","onFocus","Button_FieldInline","DoodlePartyStatusBar","padding","flex","PartyViewer","allItems","iRound","y","item","chains","groupItems","chain","items","sort","b","player","AssignmentView","height","color","backgroundColor","drawing","shouldAnimate","enableRedraw","DoodlePartyPlayView","text","setText","onDoneDescribe","margin","size","encodeDoodleDrawing","DoodlePartyView","DoodlePartyView_Inner","mode","setMode","DebugView","marginTop","background","whiteSpace"],"mappings":"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","file":"20-63ecb0e7165fd7bda8e0.js","sourcesContent":["export const parseQuery = (queryString: string): { [key: string]: undefined | string } => {\r\n    const query = {} as { [key: string]: string };\r\n    const pairs = (queryString[0] === `?` ? queryString.substr(1) : queryString).split(`&`);\r\n    for (const element of pairs) {\r\n        const pair = element.split(`=`);\r\n        query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || ``);\r\n    }\r\n    return query;\r\n};\r\n","import { useRef, useState, useEffect } from 'react';\r\nimport { parseQuery } from 'utils/query';\r\nimport { WebsocketConnectionEvent } from 'websockets-api/client/types';\r\nimport { createWebsocketClient } from 'websockets-api/client/websocket-client';\r\nimport { websocketsApiConfig } from 'websockets-api/client/config';\r\nimport { toKeyValueArray } from 'utils/objects';\r\nimport { randomIndex } from 'utils/random';\r\nimport { createSmartUploader, createUploader } from 'upload-api/client/uploader';\r\nimport { uploadApiConfig } from 'upload-api/client/config';\r\nimport { createUploadApiWebClient } from 'upload-api/client/web-client';\r\nimport { doodleStoragePaths } from './doodle-paths';\r\nimport { DoodleDataWithScore, DoodleData_Encoded, DoodleDrawingEncoded, decodeDoodleDrawing, DoodleUserDrawingDataJson } from './doodle';\r\n\r\ntype GameState = {\r\n    client: {\r\n        _query: { [key: string]: undefined | string };\r\n        room: string;\r\n        role: 'debug' | 'viewer' | 'player';\r\n\r\n        clientPlayer: PlayerState;\r\n    };\r\n    masterClientKey?: string;\r\n    players: PlayerState[];\r\n    history: GameHistory;\r\n    // doodles: DoodleDataWithScore[];\r\n};\r\nexport type Assignment = {\r\n    kind: 'doodle' | 'describe';\r\n    chainKey: string;\r\n    prompt?: string;\r\n    doodle?: DoodleDrawingEncoded;\r\n};\r\nexport type PlayerState = {\r\n    clientKey: string;\r\n    name: string;\r\n    emoji: string;\r\n    isReady: boolean;\r\n    isUser?: boolean;\r\n\r\n    assignment?: Assignment;\r\n};\r\ntype GameRound = { completed: PlayerState[] };\r\ntype GameHistory = { rounds: GameRound[] };\r\ntype PlayerProfile = {\r\n    clientKey: string;\r\n    name: string;\r\n    emoji: string;\r\n};\r\n\r\nconst createClientStorage = () => {\r\n    type ClientStorageData = {\r\n        clientPlayer: PlayerProfile;\r\n    };\r\n    const CLIENT_STORAGE_KEY = `_DoodleGameClient`;\r\n    const clientStorage = {\r\n        load: (): null | ClientStorageData => {\r\n            try {\r\n                return JSON.parse(localStorage.getItem(CLIENT_STORAGE_KEY) ?? `NULL!{}`) as unknown as ClientStorageData;\r\n            } catch{\r\n                return null;\r\n            }\r\n        },\r\n        save: (value: ClientStorageData): void => {\r\n            localStorage.setItem(CLIENT_STORAGE_KEY, JSON.stringify(value));\r\n        },\r\n    };\r\n    return {\r\n        clientStorage,\r\n    };\r\n};\r\nconst createDefaultGameState = (): GameState => {\r\n    const query = parseQuery(window.location.search);\r\n    const parseRoom = (value: undefined | string) => value ?? `UnknownRoom`;\r\n    const parseRole = (value: undefined | string): GameState['client']['role'] => {\r\n        switch (value) {\r\n            case `debug`: return `debug`;\r\n            case `viewer`: return `viewer`;\r\n            default: return `player`;\r\n        }\r\n    };\r\n\r\n    const gameState: GameState = {\r\n        client: {\r\n            _query: query,\r\n            room: parseRoom(query.room),\r\n            role: parseRole(query.role),\r\n\r\n            clientPlayer: {\r\n                clientKey: (`${Math.random()}`).substr(2),\r\n                name: ``,\r\n                emoji: `👤`,\r\n                isReady: false,\r\n            },\r\n        },\r\n        players: [],\r\n        history: { rounds: [] },\r\n    };\r\n\r\n    return gameState;\r\n};\r\n\r\ntype DoodlePartyMessage = {\r\n    timestamp: number;\r\n    clientKey: string;\r\n} & ({\r\n    kind: 'syncRequest';\r\n} | {\r\n    kind: 'syncResponse';\r\n    requestedClientKey: string;\r\n    gameState: {\r\n        masterClientKey: string;\r\n        players: PlayerState[];\r\n        history: GameHistory;\r\n    };\r\n} | {\r\n    kind: 'setPlayer';\r\n    clientPlayer: {\r\n        clientKey: string;\r\n        name: string;\r\n        emoji: string;\r\n        isReady: boolean;\r\n    };\r\n} | {\r\n    kind: 'aliveRequest';\r\n    requestedClientKey: string;\r\n} | {\r\n    kind: 'aliveResponse';\r\n} | {\r\n    kind: 'dropPlayer';\r\n    droppedClientKey: string;\r\n} | {\r\n    kind: 'assign';\r\n    players: PlayerState[];\r\n    lastRound?: GameRound;\r\n} | {\r\n    kind: 'completeAssignment';\r\n    playerAssignment: Assignment & { clientKey: string };\r\n});\r\nconst createNewAssigment = (): Assignment => {\r\n    return {\r\n        kind: `doodle`,\r\n        prompt: `Choose Your Own Word`,\r\n        chainKey: `${Date.now()}-${Math.floor(Math.random() * 999999)}`,\r\n    };\r\n};\r\nconst createMessageHandler = (gameState: GameState, refresh: () => void, send: (message: DoodlePartyMessage) => void) => {\r\n    console.log(`createMessageHandler`);\r\n    const { clientKey } = gameState.client.clientPlayer;\r\n\r\n    let syncResponseId = setTimeout(() => { });\r\n    const sendGameState = (requestedClientKey: string) => {\r\n        // Claim the master \r\n        gameState.masterClientKey = clientKey;\r\n        send({\r\n            kind: `syncResponse`,\r\n            requestedClientKey,\r\n            gameState: {\r\n                masterClientKey: gameState.masterClientKey,\r\n                players: gameState.players,\r\n                history: gameState.history,\r\n            },\r\n            clientKey,\r\n            timestamp: Date.now(),\r\n        });\r\n    };\r\n\r\n    const masterState = {\r\n        startTimestamp: Date.now(),\r\n        clientStates: {} as { [clientKey: string]: { lastMessageTimestamp: number } },\r\n    };\r\n\r\n    const sendNewAssignmentsIfReady = () => {\r\n        if (gameState.players.some(x => !x.isReady || (x.assignment && (!x.assignment.doodle || !x.assignment.prompt)))) {\r\n            // Add new player assignments\r\n            const missingAssignments = gameState.players.filter(x => x.isReady && !x.assignment);\r\n            if (missingAssignments.length > 0) {\r\n                missingAssignments.forEach(x => { x.assignment = createNewAssigment(); });\r\n\r\n                send({\r\n                    kind: `assign`,\r\n                    players: gameState.players,\r\n                    lastRound: undefined,\r\n                    clientKey,\r\n                    timestamp: Date.now(),\r\n                });\r\n                refresh();\r\n                return;\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Save Round\r\n        const lastRound = { completed: [...gameState.players.map(x => ({ ...x, assignment: x.assignment ? { ...x.assignment } : undefined }))] };\r\n        gameState.history.rounds.push(lastRound);\r\n\r\n        // Rotate next assignment\r\n        const old = gameState.players.map(x => x.assignment);\r\n\r\n        // Rotate Players\r\n        const firstPlayer = gameState.players.shift();\r\n        if (!firstPlayer) { return; }\r\n        gameState.players.push(firstPlayer);\r\n        for (let i = 0; i < gameState.players.length; i++) {\r\n            const p = gameState.players[i];\r\n\r\n            const oldAssigment = old[i];\r\n            const doodle = oldAssigment?.doodle;\r\n            const prompt = oldAssigment?.prompt;\r\n            if (!oldAssigment || !prompt || !doodle || decodeDoodleDrawing(doodle).segments.length <= 0\r\n                // Or if player has had to draw this prompt before (previous was describe)\r\n                || (oldAssigment.kind === `describe` && gameState.history.rounds.flatMap(x => x.completed).find(x => x.clientKey === p.clientKey && prompt === p.assignment?.prompt))\r\n            ) {\r\n                gameState.players[i].assignment = createNewAssigment();\r\n                continue;\r\n            }\r\n\r\n\r\n            const newAssignment = { ...oldAssigment };\r\n            // Switch assignment types\r\n            if (newAssignment.kind === `doodle`) {\r\n                newAssignment.kind = `describe`;\r\n                newAssignment.prompt = undefined;\r\n            } else {\r\n                newAssignment.kind = `doodle`;\r\n                newAssignment.doodle = undefined;\r\n            }\r\n\r\n            gameState.players[i].assignment = newAssignment;\r\n        }\r\n\r\n        send({\r\n            kind: `assign`,\r\n            players: gameState.players,\r\n            lastRound,\r\n            clientKey,\r\n            timestamp: Date.now(),\r\n        });\r\n\r\n        // Save to server (for data)\r\n        setTimeout(async () => {\r\n            const uploadApiWebClient = createUploadApiWebClient(uploadApiConfig);\r\n            const backupUrl = (await uploadApiWebClient.createUploadUrl({ prefix: `${doodleStoragePaths.doodlePartyDrawingsPrefix}/${Date.now()}` })).uploadUrl;\r\n            const backupUploader = createUploader(backupUrl);\r\n            await backupUploader.uploadData({\r\n                history: gameState.history,\r\n            });\r\n        });\r\n    };\r\n\r\n    const aliveTimeout = 15;\r\n    const deadTimeout = 30;\r\n\r\n    setInterval(() => {\r\n        const m = masterState.clientStates[gameState.masterClientKey ?? ``] ?? { lastMessageTimestamp: masterState.startTimestamp };\r\n        // console.log(`createMessageHandler`, { m, masterState });\r\n\r\n        // Clients - Detect Dead Master\r\n        if (gameState.masterClientKey !== clientKey) {\r\n            if (Date.now() > deadTimeout * 1000 + m.lastMessageTimestamp) {\r\n                console.log(`createMessageHandler - Master not responsive!`, { m, masterState });\r\n                // Master is not active, take over (send game state to self will work)\r\n                sendGameState(clientKey);\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Make sure assignments are out\r\n        sendNewAssignmentsIfReady();\r\n\r\n        // Keep Master Alive\r\n        if (Date.now() > aliveTimeout * 1000 + m.lastMessageTimestamp) {\r\n            // Master (self) is not being active - send a message before another client takes over\r\n            send({ kind: `aliveResponse`, clientKey, timestamp: Date.now() });\r\n        }\r\n\r\n        // Drop unresponsive players\r\n        toKeyValueArray(masterState.clientStates)\r\n            .filter(x => x.key !== clientKey)\r\n            .filter(x => Date.now() > aliveTimeout * 1000 + x.value.lastMessageTimestamp)\r\n            .map(x => send({\r\n                kind: `aliveRequest`,\r\n                requestedClientKey: x.key,\r\n                clientKey,\r\n                timestamp: Date.now(),\r\n            }));\r\n        toKeyValueArray(masterState.clientStates)\r\n            .filter(x => x.key !== clientKey)\r\n            .filter(x => Date.now() > deadTimeout * 1000 + x.value.lastMessageTimestamp)\r\n            .map(x => send({\r\n                kind: `dropPlayer`,\r\n                droppedClientKey: x.key,\r\n                clientKey,\r\n                timestamp: Date.now(),\r\n            }));\r\n\r\n    }, 3000 + randomIndex(3000));\r\n\r\n    const handleMessage = (message: DoodlePartyMessage) => {\r\n        masterState.clientStates[message.clientKey] = { lastMessageTimestamp: Date.now() };\r\n\r\n        if (message.kind === `setPlayer`) {\r\n            let p = gameState.players.find(x => x.clientKey === message.clientPlayer.clientKey);\r\n            if (!p) {\r\n                p = { ...message.clientPlayer };\r\n                gameState.players.push(p);\r\n            }\r\n            p.isUser = p.clientKey === clientKey;\r\n            p.name = message.clientPlayer.name;\r\n            p.emoji = message.clientPlayer.emoji;\r\n            p.isReady = message.clientPlayer.isReady;\r\n\r\n            // If master\r\n            if (clientKey === gameState.masterClientKey) {\r\n                setTimeout(() => {\r\n                    sendNewAssignmentsIfReady();\r\n                }, 3000);\r\n            }\r\n\r\n            refresh();\r\n            return;\r\n        }\r\n\r\n        if (message.kind === `dropPlayer`) {\r\n            gameState.players = gameState.players.filter(x => x.clientKey !== message.droppedClientKey);\r\n            console.log(`dropPlayer`, { players_after: [...gameState.players], message });\r\n            refresh();\r\n            return;\r\n        }\r\n\r\n        // Ignore own messages\r\n        if (message.clientKey === clientKey) { return; }\r\n\r\n        // Assigments\r\n        if (message.kind === `assign`) {\r\n            gameState.players = message.players;\r\n            if (message.lastRound) {\r\n                gameState.history.rounds.push(message.lastRound);\r\n            }\r\n            refresh();\r\n            return;\r\n        }\r\n        if (message.kind === `completeAssignment`) {\r\n            // Add Doodle, Prompt\r\n            const assigment = gameState.players.find(x => x.clientKey === message.clientKey)?.assignment;\r\n            if (!assigment) { return; }\r\n            assigment.prompt = message.playerAssignment.prompt;\r\n            assigment.doodle = message.playerAssignment.doodle;\r\n\r\n            // If master\r\n            if (clientKey === gameState.masterClientKey) {\r\n                sendNewAssignmentsIfReady();\r\n            }\r\n\r\n            refresh();\r\n            return;\r\n        }\r\n\r\n        // Alive Request\r\n        if (message.kind === `aliveRequest`) {\r\n            if (message.requestedClientKey !== clientKey) { return; }\r\n            send({ kind: `aliveResponse`, clientKey, timestamp: Date.now() });\r\n            return;\r\n        }\r\n\r\n        // Sync\r\n        if (message.kind === `syncRequest`) {\r\n            if (gameState.masterClientKey === clientKey) {\r\n                sendGameState(message.clientKey);\r\n                return;\r\n            }\r\n\r\n            clearTimeout(syncResponseId);\r\n            syncResponseId = setTimeout(() => {\r\n                // Master has not responded in a timely manner - claim it\r\n                sendGameState(message.clientKey);\r\n            }, 1000 + randomIndex(3000));\r\n        }\r\n        if (message.kind === `syncResponse`) {\r\n            clearTimeout(syncResponseId);\r\n\r\n            if (message.requestedClientKey !== clientKey) {\r\n                // Verify master is correct\r\n                if (message.gameState.players.length < gameState.players.length\r\n                    || message.gameState.history.rounds.length < gameState.history.rounds.length\r\n                ) {\r\n                    // The master is wrong - claim master and correct data\r\n                    sendGameState(message.clientKey);\r\n                    sendGameState(message.requestedClientKey);\r\n                    return;\r\n                }\r\n\r\n                // The master is right - accept the master\r\n                gameState.masterClientKey = message.gameState.masterClientKey;\r\n            }\r\n\r\n            // Use received state\r\n            const clientState = gameState.client;\r\n            Object.assign(gameState, message.gameState);\r\n            gameState.client = clientState;\r\n            gameState.players.forEach(x => { x.isUser = false; });\r\n            const p = gameState.players.find(x => x.clientKey === clientState.clientPlayer.clientKey);\r\n            if (p) { p.isUser = true; }\r\n        }\r\n    };\r\n\r\n\r\n    return {\r\n        handleMessage,\r\n    };\r\n};\r\ntype MessageHandler = ReturnType<typeof createMessageHandler>;\r\n\r\nexport const useDoodlePartyController = () => {\r\n    const gameStateRef = useRef(createDefaultGameState());\r\n    const gameState = gameStateRef.current;\r\n    const { clientKey } = gameState.client.clientPlayer;\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [renderId, setRenderId] = useState(0);\r\n    const refresh = () => {\r\n        setRenderId(s => s + 1);\r\n    };\r\n\r\n    const loadClientPlayerFromStorage = () => {\r\n        // Load Client Player\r\n        const { clientStorage } = createClientStorage();\r\n        const s = clientStorage.load();\r\n        if (s) {\r\n            gameState.client.clientPlayer = {\r\n                clientKey: s.clientPlayer.clientKey,\r\n                name: s.clientPlayer.name,\r\n                emoji: s.clientPlayer.emoji,\r\n                isReady: false,\r\n                isUser: true,\r\n            };\r\n        }\r\n        refresh();\r\n    };\r\n\r\n    const [messages, setMessages] = useState([] as (DoodlePartyMessage & { receivedAtTimestamp: number })[]);\r\n    const [events, setEvents] = useState([] as WebsocketConnectionEvent[]);\r\n    const send = useRef(null as null | ((message: DoodlePartyMessage) => void));\r\n    const messageHandler = useRef(null as null | MessageHandler);\r\n\r\n    useEffect(() => {\r\n        loadClientPlayerFromStorage();\r\n\r\n        const connection = createWebsocketClient({ websocketsApiUrl: websocketsApiConfig.websocketsApiUrl })\r\n            .connect<DoodlePartyMessage>({ key: gameState.client.room });\r\n\r\n        const unsubMessages = connection.subscribeMessages(message => {\r\n            if (!messageHandler.current) { messageHandler.current = createMessageHandler(gameState, refresh, (x) => send.current?.(x)); }\r\n            messageHandler.current.handleMessage(message);\r\n            setMessages(s => [...s, { ...message, receivedAtTimestamp: Date.now() }]);\r\n        });\r\n        const unsubEvents = connection.subscribeConnectionEvents(event => {\r\n            send.current = connection.isConnected() ? connection.send : null;\r\n            setEvents(s => [...s, event]);\r\n        });\r\n\r\n        setLoading(false);\r\n        return () => {\r\n            send.current = null;\r\n            unsubMessages.unsubscribe();\r\n            unsubEvents.unsubscribe();\r\n        };\r\n    }, []);\r\n\r\n    // const [messageText, setMessageText] = useState(``);\r\n    // const sendMessage = () => {\r\n    //     if (!send.current) { return; }\r\n    //     send.current?.({ text: messageText, timestamp: Date.now(), clientKey: clientKey });\r\n    //     setMessageText(``);\r\n    // };\r\n\r\n    const setClientPlayer = (value: { name: string, emoji: string, isReady: boolean }) => {\r\n        console.log(`useDoodlePartyController.setClientPlayer`, { value, send: send.current });\r\n        const { clientStorage } = createClientStorage();\r\n        gameState.client.clientPlayer = { ...gameState.client.clientPlayer, ...value };\r\n        clientStorage.save({\r\n            clientPlayer: gameState.client.clientPlayer,\r\n        });\r\n        sendClientPlayer();\r\n        refresh();\r\n    };\r\n    const sendClientPlayer = () => {\r\n        // Send to web socket on change\r\n        if (gameState.client.role !== `player`) { return; }\r\n\r\n        send.current?.({\r\n            kind: `setPlayer`,\r\n            clientPlayer: gameState.client.clientPlayer,\r\n            clientKey,\r\n            timestamp: Date.now(),\r\n        });\r\n    };\r\n    const sendAssignment = (assignment: Assignment) => {\r\n        // Send to web socket on change\r\n        if (gameState.client.role !== `player`) { return; }\r\n\r\n        send.current?.({\r\n            kind: `completeAssignment`,\r\n            playerAssignment: { ...assignment, clientKey },\r\n            clientKey,\r\n            timestamp: Date.now(),\r\n        });\r\n    };\r\n\r\n    // Sync game state (on connect)\r\n    useEffect(() => {\r\n        if (!send.current) { return; }\r\n\r\n        sendClientPlayer();\r\n\r\n        // Sync\r\n        send.current?.({\r\n            kind: `syncRequest`,\r\n            clientKey,\r\n            timestamp: Date.now(),\r\n        });\r\n\r\n    }, [send.current]);\r\n\r\n    return {\r\n        loading,\r\n        renderId,\r\n        gameState,\r\n        setClientPlayer,\r\n        sendAssignment,\r\n        _messages: messages,\r\n        _events: events,\r\n    };\r\n};\r\nexport type DoodlePartyController = ReturnType<typeof useDoodlePartyController>;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { C } from 'controls-react';\r\nimport { View, Text, TouchableOpacity } from 'react-native-lite';\r\nimport { DoodlePartyController, PlayerState } from './doodle-party-state';\r\n\r\nexport const DoodlePartyProfileView = (props: { controller: DoodlePartyController, onDone: () => void }) => {\r\n    const { clientPlayer } = props.controller.gameState.client;\r\n    const [userProfile, setUserProfile] = useState({ ...clientPlayer } as UserProfileData);\r\n    const [usedEmojis, setUsedEmojis] = useState(props.controller.gameState.players.filter(x => !x.isUser).map(x => x.emoji));\r\n\r\n    const changeUserProfile = (value: UserProfileData) => {\r\n        setUserProfile(value);\r\n        props.controller.setClientPlayer({ ...value, isReady: false });\r\n    };\r\n    const onDone = () => {\r\n        props.controller.setClientPlayer({ ...clientPlayer, isReady: true });\r\n        props.onDone();\r\n    };\r\n\r\n    useEffect(() => {\r\n        setUsedEmojis(props.controller.gameState.players.filter(x => !x.isUser).map(x => x.emoji));\r\n    }, [props.controller.renderId]);\r\n\r\n    // console.log(`DoodlePartyProfileView`, { userProfile, usedEmojis });\r\n    return (\r\n        <>\r\n            <C.View_Panel>\r\n                <C.Text_FormTitle >User</C.Text_FormTitle>\r\n                <UserProfileView\r\n                    userProfile={userProfile}\r\n                    onUserProfileChange={changeUserProfile}\r\n                    usedEmojis={usedEmojis}\r\n                />\r\n                <C.View_FormActionRow>\r\n                    <C.Button_FormAction onPress={onDone}>Ready</C.Button_FormAction>\r\n                </C.View_FormActionRow>\r\n            </C.View_Panel>\r\n            <DoodlePartyPlayerList {...props} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport const DoodlePartyPlayerList = (props: { controller: DoodlePartyController }) => {\r\n\r\n    const getPlayerIcon = (p: PlayerState) => {\r\n        if (!p.isReady) return `◻`;\r\n        if (p.assignment && (p.assignment && (!p.assignment.doodle)) && p.assignment.kind === `doodle`) return `🎨`;\r\n        if (p.assignment && (p.assignment && (!p.assignment.prompt)) && p.assignment.kind === `describe`) return `✏`;\r\n        return `✔`;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <View>\r\n                {props.controller.gameState.players.map(x => (\r\n                    <View key={x.clientKey} style={{ flexDirection: `row`, alignItems: `center` }}>\r\n                        <View>\r\n                            <Text style={{ fontSize: 24 }} >{getPlayerIcon(x)}</Text>\r\n                        </View>\r\n                        <View style={{ width: 48 }}>\r\n                            <Text style={{ fontSize: 32 }} >{x.emoji}</Text>\r\n                        </View>\r\n                        <View>\r\n                            <Text style={{ fontSize: 16 }}>{x.name}</Text>\r\n                        </View>\r\n                    </View>\r\n                ))}\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n\r\ntype UserProfileData = {\r\n    name: string;\r\n    emoji: string;\r\n};\r\n\r\nconst userProfileEmojis = `\r\n🐵 🐶 🐺 🐱 🦁 🐯 🦒 🦊 🦝 🐮 🐷 🐗 🐭 🐹 🐰 🐻 🐨 🐼 🐸 🦓 🐴 🦄 🐔 🐲 \r\n🤖 👽 👻 🍕 🍔 🌭 🥓 🌮 🍖 🥩 🍦 🍩 🍰 🧁 🥝 🥥 🍒 🍓 🍄 🥦 🥑 🥕 \r\n🚗 🚑 🚒 🚜 🦼 🚲 🚂 🛩 🚀 🛸 🛰 🪐 🧯 🧷  🪑 🛎 ☂ ⛄\r\n`.replace(/\\n/g, ``).split(` `).map(x => x.trim()).filter(x => x);\r\n\r\nconst UserProfileView = ({ userProfile, onUserProfileChange, usedEmojis }: { userProfile: UserProfileData, onUserProfileChange: (value: UserProfileData) => void, usedEmojis: string[] }) => {\r\n    const [availableEmojis, setAvailableEmojis] = useState(userProfileEmojis);\r\n    const [isShowingEmojiSelection, setIsShowingEmojiSelection] = useState(false);\r\n\r\n    const selectCharacter = (emoji: string) => {\r\n        setIsShowingEmojiSelection(false);\r\n        onUserProfileChange({ ...userProfile, emoji });\r\n    };\r\n\r\n    useEffect(() => {\r\n        setAvailableEmojis(userProfileEmojis.filter(x => !usedEmojis.includes(x)));\r\n    }, [usedEmojis]);\r\n\r\n    // console.log(`UserProfileView`, { usedEmojis });\r\n\r\n    if (isShowingEmojiSelection) {\r\n        return (\r\n            <>\r\n                <C.View_Form>\r\n                    <View style={{ flexDirection: `row`, flexWrap: `wrap` }}>\r\n                        {availableEmojis.map(x => (\r\n                            <TouchableOpacity key={x} onPress={() => selectCharacter(x)} >\r\n                                <View>\r\n                                    <Text style={{ fontSize: 32 }} >{x}</Text>\r\n                                </View>\r\n                            </TouchableOpacity>\r\n                        ))}\r\n                    </View>\r\n                </C.View_Form>\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <C.View_Form>\r\n                <C.View_FieldRow>\r\n                    <TouchableOpacity onPress={() => setIsShowingEmojiSelection(true)} >\r\n                        <View>\r\n                            <Text style={{ fontSize: 32 }} >{userProfile.emoji}</Text>\r\n                        </View>\r\n                    </TouchableOpacity>\r\n                    <UserProfileName userProfile={userProfile} onNameChange={(x) => onUserProfileChange({ ...userProfile, name: x })} />\r\n                </C.View_FieldRow>\r\n            </C.View_Form>\r\n        </>\r\n    );\r\n};\r\n\r\nconst UserProfileName = ({ userProfile, onNameChange }: { userProfile: UserProfileData, onNameChange: (value: string) => void }) => {\r\n    const [name, setName] = useState(userProfile.name || `Player`);\r\n    const [isEditing, setIsEditing] = useState(false);\r\n\r\n    const changeName = () => {\r\n        onNameChange(name);\r\n        setIsEditing(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <C.Input_Text value={name} onChange={setName} onSubmit={changeName} onFocus={() => { setName(``); setIsEditing(true); }} />\r\n            {isEditing && (\r\n                <C.Button_FieldInline onPress={changeName}>Set Name</C.Button_FieldInline>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n","/* eslint-disable react/no-array-index-key */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { View, Text, ActivityIndicator } from 'react-native-lite';\r\nimport { C } from 'controls-react';\r\nimport { groupItems } from 'utils/arrays';\r\nimport { toKeyValueArray } from 'utils/objects';\r\nimport { DoodlePartyController, PlayerState } from './doodle-party-state';\r\nimport { DoodlePartyPlayerList } from './doodle-party-user-profile';\r\nimport { DoodleGameView_DrawWord } from './doodle-components';\r\nimport { encodeDoodleDrawing, decodeDoodleDrawing } from './doodle';\r\nimport { DoodleDisplayView } from './doodle-view';\r\n\r\nexport const DoodlePartyStatusBar = (props: { controller: DoodlePartyController }) => {\r\n    const { gameState } = props.controller;\r\n    const { clientPlayer, role } = gameState.client;\r\n\r\n    return (\r\n        <>\r\n            <View key={clientPlayer.clientKey} style={{ padding: 4, flexDirection: `row`, alignItems: `center` }}>\r\n                {role === `player` && clientPlayer ? (\r\n                    <>\r\n                        <View style={{ width: 36 }}>\r\n                            <Text style={{ fontSize: 24 }} >{clientPlayer.emoji}</Text>\r\n                        </View>\r\n                        <View>\r\n                            <Text style={{ fontSize: 16 }}>{clientPlayer.name}</Text>\r\n                        </View>\r\n                    </>\r\n                ) : (\r\n                        <>\r\n                            <View>\r\n                                <Text style={{ fontSize: 16 }}>{role}</Text>\r\n                            </View>\r\n                        </>\r\n                    )}\r\n                <View style={{ flex: 1 }} />\r\n                {/* <View>\r\n                    <Text style={{ fontSize: 16 }}>{gameState.client.clientPlayer.clientKey}</Text>\r\n                </View> */}\r\n                <View>\r\n                    <Text style={{ fontSize: 16 }}>{gameState.masterClientKey === gameState.client.clientPlayer.clientKey ? `🟢` : ``}</Text>\r\n                </View>\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n\r\nexport const PartyViewer = (props: { controller: DoodlePartyController }) => {\r\n\r\n    const allItems = props.controller.gameState.history.rounds.flatMap((x, iRound) => x.completed.map(y => ({ iRound, item: y, chainKey: y.assignment?.chainKey })));\r\n    const chains = toKeyValueArray(groupItems(allItems, x => x.chainKey ?? ``)).map(x => ({ chain: x.key, items: x.value.sort((a, b) => a.iRound - b.iRound) }));\r\n\r\n    return (\r\n        <View>\r\n            <Text>Players</Text>\r\n            <DoodlePartyPlayerList controller={props.controller} />\r\n            <Text>Chains</Text>\r\n            {chains.map((x, i) => (\r\n                <View key={`${i}`} style={{ flexDirection: `row`, alignItems: `center` }}>\r\n                    {x.items.map(p => (\r\n                        <AssignmentView key={p.item.clientKey} player={p.item} />\r\n                    ))}\r\n                </View>\r\n            ))}\r\n            {/* <Text>Rounds</Text>\r\n            <Text>{`${props.controller.gameState.history.rounds.length}`}</Text>\r\n            {props.controller.gameState.history.rounds.map((x, i) => (\r\n                <View key={`${i}`} style={{ flexDirection: `row`, alignItems: `center` }}>\r\n                    {x.completed.map(p => (\r\n                        <AssignmentView key={p.clientKey} player={p} />\r\n                    ))}\r\n                </View>\r\n            ))} */}\r\n        </View>\r\n    );\r\n};\r\n\r\nconst AssignmentView = (props: { player: PlayerState }) => {\r\n    const p = props.player;\r\n    const { assignment } = props.player;\r\n    return (\r\n        <View style={{ flexDirection: `column`, alignItems: `center` }}>\r\n            <Text>{p.name}</Text>\r\n            <Text>{p.emoji}</Text>\r\n            {!!assignment?.doodle && (\r\n                <DoodleDisplayView style={{ width: 104, height: 104, color: `#FFFFFF`, backgroundColor: `#000000` }} drawing={decodeDoodleDrawing(assignment.doodle)} shouldAnimate enableRedraw />\r\n            )}\r\n            <Text>{assignment?.prompt ?? ``}</Text>\r\n        </View>\r\n    );\r\n};\r\n\r\nexport const DoodlePartyPlayView = (props: { controller: DoodlePartyController }) => {\r\n    const { gameState } = props.controller;\r\n    const { clientKey } = gameState.client.clientPlayer;\r\n    const assigment = gameState.players.find(x => x.clientKey === clientKey)?.assignment;\r\n    const [text, setText] = useState(``);\r\n\r\n    useEffect(() => {\r\n        setText(``);\r\n    }, [assigment]);\r\n\r\n    if (!assigment) {\r\n        return (\r\n            <>\r\n                <View style={{ padding: 8 }}>\r\n                    <Text>Please Wait Until Next Round</Text>\r\n                </View>\r\n                <PartyViewer controller={props.controller} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    if (assigment.kind === `describe` && assigment.doodle) {\r\n        const onDoneDescribe = () => {\r\n            assigment.prompt = text;\r\n            props.controller.sendAssignment(assigment);\r\n        };\r\n\r\n        return (\r\n            <>\r\n                <View style={{ flexDirection: `column`, alignItems: `center` }}>\r\n                    <Text style={{ fontSize: 20, margin: 8 }}>Describe</Text>\r\n                    <DoodleDisplayView style={{ width: 312, height: 312, color: `#FFFFFF`, backgroundColor: `#000000` }} drawing={decodeDoodleDrawing(assigment.doodle)} shouldAnimate enableRedraw />\r\n                    {!assigment.prompt && (\r\n                        <>\r\n                            <Text style={{ fontSize: 20, margin: 8, color: `#FFFF00` }}>What is this?</Text>\r\n                            <C.Input_Text value={text} onChange={setText} onSubmit={onDoneDescribe} />\r\n                            <C.Button_FieldInline onPress={onDoneDescribe}>Done</C.Button_FieldInline>\r\n                        </>\r\n                    )}\r\n                    {assigment.prompt && (\r\n                        <Text style={{ fontSize: 20, margin: 8, color: `#FFFF00` }}>{assigment.prompt}</Text>\r\n                    )}\r\n                </View>\r\n            </>\r\n        );\r\n    }\r\n\r\n    // Doodle\r\n    if (assigment.doodle) {\r\n        return (\r\n            <>\r\n                <View style={{ flexDirection: `column`, alignItems: `center` }}>\r\n                    <Text style={{ fontSize: 20, margin: 8 }}>Draw</Text>\r\n                    <DoodleDisplayView style={{ width: 312, height: 312, color: `#FFFFFF`, backgroundColor: `#000000` }} drawing={decodeDoodleDrawing(assigment.doodle)} shouldAnimate enableRedraw />\r\n                    <Text style={{ fontSize: 20, margin: 8, color: `#FFFF00` }}>Waiting for other players</Text>\r\n                    <ActivityIndicator size='large' color='#FFFF00' />\r\n                </View>\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Text style={{ fontSize: 20, margin: 8 }}>Draw</Text>\r\n            <DoodleGameView_DrawWord prompt={assigment.prompt ?? ``} onDone={(x) => {\r\n                assigment.doodle = encodeDoodleDrawing(x);\r\n                props.controller.sendAssignment(assigment);\r\n            }} />\r\n        </>\r\n    );\r\n};\r\n","/* eslint-disable react/no-array-index-key */\r\nimport React, { useState } from 'react';\r\nimport { View, Text, ActivityIndicator } from 'react-native-lite';\r\nimport { useDoodlePartyController, DoodlePartyController } from './doodle-party-state';\r\nimport { DoodlePartyProfileView } from './doodle-party-user-profile';\r\nimport { DoodlePartyStatusBar, DoodlePartyPlayView, PartyViewer } from './doodle-party-components';\r\n\r\nexport const DoodlePartyView = () => {\r\n\r\n    const controller = useDoodlePartyController();\r\n    return (\r\n        <>\r\n            <DoodlePartyStatusBar controller={controller} />\r\n            <DoodlePartyView_Inner controller={controller} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport const DoodlePartyView_Inner = ({ controller }: { controller: DoodlePartyController }) => {\r\n\r\n    const [mode, setMode] = useState(`profile` as 'profile' | 'play' | 'viewer');\r\n\r\n    const onProfileDone = () => {\r\n        // console.log(`onProfileDone`);\r\n        setMode(`play`);\r\n    };\r\n\r\n    if (controller.loading) {\r\n        return (\r\n            <ActivityIndicator size='large' color='#FFFF00' />\r\n        );\r\n    }\r\n\r\n    // Debug\r\n    if (controller.gameState.client.role === `debug`) {\r\n        return (\r\n            <DebugView controller={controller} />\r\n        );\r\n    }\r\n\r\n    // Viewer\r\n    if (controller.gameState.client.role === `viewer`) {\r\n        return (\r\n            <PartyViewer controller={controller} />\r\n        );\r\n    }\r\n\r\n    // Player\r\n\r\n    // Profile\r\n    if (mode === `profile`) {\r\n        // console.log(`DoodlePartyView profile`, { controller });\r\n        return (\r\n            <DoodlePartyProfileView controller={controller} onDone={onProfileDone} />\r\n        );\r\n    }\r\n\r\n    // // Waiting\r\n    // if (controller.gameState.players.some(x => !x.isReady)) {\r\n    //     return (\r\n    //         <PartyViewer controller={controller} />\r\n    //     );\r\n    // }\r\n\r\n    // Play View\r\n    return (\r\n        <DoodlePartyPlayView controller={controller} />\r\n    );\r\n};\r\n\r\nconst DebugView = (props: { controller: DoodlePartyController }) => {\r\n    const { gameState, _messages, _events } = props.controller;\r\n    return (\r\n        <>\r\n            <PartyViewer controller={props.controller} />\r\n            <View style={{ marginTop: 64, background: `#555555` }}>\r\n\r\n                <Text style={{ fontSize: 20 }}>Debug</Text>\r\n                <View>\r\n                    <Text>{`Query: ${JSON.stringify(gameState.client._query)}`}</Text>\r\n                    <Text>{`Room: ${gameState.client.room}`}</Text>\r\n                    <Text>{`Role: ${gameState.client.role}`}</Text>\r\n                </View>\r\n                <Text style={{ fontSize: 20 }}>Web Sockets</Text>\r\n                <View>\r\n                    <View style={{ padding: 4 }}>\r\n                        <Text style={{ whiteSpace: `pre-wrap`, fontSize: 18 }}>Events</Text>\r\n                        {_events.map((x, i) => (\r\n                            <Text key={i} style={{ whiteSpace: `pre-wrap`, fontSize: 14 }}>{JSON.stringify(x)}</Text>\r\n                        ))}\r\n                    </View>\r\n                    <View style={{ padding: 4 }}>\r\n                        <Text style={{ whiteSpace: `pre-wrap`, fontSize: 18 }}>Messages</Text>\r\n                        {_messages.map((x, i) => (\r\n                            <Text key={i} style={{ whiteSpace: `pre-wrap`, fontSize: 14 }}>{`${x.timestamp} ${x.receivedAtTimestamp - x.timestamp}: ${JSON.stringify(x)}`}</Text>\r\n                        ))}\r\n                    </View>\r\n                </View>\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n"],"sourceRoot":""}