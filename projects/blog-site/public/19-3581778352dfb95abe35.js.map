{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/art/artwork/circles.tsx"],"names":["art_circles","key","title","description","artist","getTokenDescription","tokenId","renderArt","hostElement","hash","recorder","random","createRandomGenerator","a","Math","floor","b","c","cr","cg","cb","ca","size","window","innerWidth","innerHeight","h","scale","tick","canvas","p5","s","setup","result","createCanvas","canvasId","id","document","getElementById","draw","isWaitingForFrame","console","log","getRecorder","addFrame","background","i","color","noFill","stroke","j","circle","translate","rotate"],"mappings":"6PAMaA,EAAuB,CAChCC,IAAK,UACLC,MAAO,UACPC,YAAa,2DACbC,OAAQ,YACRC,oBAAqB,SAACC,GAClB,OAAO,MAMXC,UAAW,SAACC,EAA0BC,EAA2BC,QAAa,IAAxCD,MAAwC,wBAIlEE,EAAWC,YAAsBH,GAAjCE,OAJkE,EAMtD,CAAEE,EAAG,EAAIC,KAAKC,MAAM,GAAKJ,KAAWK,EAAG,EAAIF,KAAKC,MAAM,IAAMJ,KAAWM,EAAG,EAAIH,KAAKC,MAAM,IAAMJ,MAA3GE,EANkE,EAMlEA,EAAGG,EAN+D,EAM/DA,EAAGC,EAN4D,EAM5DA,EAN4D,EAO/C,CAAEC,GAAIJ,KAAKC,MAAM,GAAK,IAAMJ,KAAWQ,GAAIL,KAAKC,MAAM,GAAK,IAAMJ,KAAWS,GAAIN,KAAKC,MAAM,GAAK,IAAMJ,KAAWU,GAAIP,KAAKC,MAAM,GAAK,GAAKJ,MAA7JO,EAPkE,EAOlEA,GAAIC,EAP8D,EAO9DA,GAAIC,EAP0D,EAO1DA,GAAIC,EAPsD,EAOtDA,GAIdC,EAAOC,OAAOC,WAFA,KAE4BD,OAAOE,YAFnC,QACD,IAGbC,EAAI,IACJC,EAAQL,EAAO,IAGjBM,EAAO,EACPC,EAAS,KAEb,OAAO,IAAIC,KAAG,SAACC,GACXA,EAAEC,MAAQ,WACN,IAAMC,EAASF,EAAEG,aAAaZ,EAAMA,GAC9Ba,EAAW,GAAGrB,KAAKH,SACzBsB,EAAOG,GAAGD,GACVN,EAASQ,SAASC,eAAeH,IAErCJ,EAAEQ,KAAO,WACL,GAAI7B,WAAU8B,qBAAuBX,EAGjC,OAFAY,QAAQC,IAAR,yCAAsD,SACtD,sBAAC,sBAAA7B,EAAA,sEAAkBH,EAASiC,cAAcC,SAASf,GAAlD,kFAAD,GAIJE,EAAEc,WAAW,GACbd,EAAEJ,MAAMA,GAER,IAAK,IAAImB,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IAAMC,EAAQhB,EAAEgB,MAAO7B,EAAK4B,EAAK,IAAM3B,EAAK2B,EAAK,IAAM1B,EAAK0B,EAAK,IAAKzB,GACtEU,EAAEiB,SACFjB,EAAEkB,OAAOF,GACT,IAAK,IAAIG,EAAI,EAAGA,EAAI,GAAIA,IACpBnB,EAAEoB,OAAOzB,EAAIb,EAAI,EAAIqC,EAAIrC,EAAGa,EAAIV,EAAI,EAAIkC,EAAIlC,EAAIU,IAAiB,EAAJoB,EAAS7B,GAE1Ec,EAAEqB,UAAU1B,EAAGA,GAEfK,EAAEsB,OAAQxC,EAAIG,EAAIC,EAAW,KAAPW,GACtBG,EAAEqB,WAAW1B,GAAIA,GACjBE,GAjCE,GAoCNA,OAELpB","file":"19-3581778352dfb95abe35.js","sourcesContent":["/* eslint-disable new-cap */\r\n/* eslint-disable no-new */\r\nimport p5 from 'p5';\r\nimport { createRandomGenerator } from '../rando';\r\nimport { ArtWork } from '../artwork-type';\r\n\r\nexport const art_circles: ArtWork = {\r\n    key: `circles`,\r\n    title: `Circles`,\r\n    description: `The circles we travel in life always bring us back home.`,\r\n    artist: `Rick Love`,\r\n    getTokenDescription: (tokenId: string) => {\r\n        return null;\r\n    },\r\n    // openSea: {\r\n    //     tokenAddress: `0x495f947276749ce646f68ac8c248420045cb7b5e`,\r\n    //     tokenId: `91242641486941084018191434774360347389366801368112854311223385694785434025985`,\r\n    // },\r\n    renderArt: (hostElement: HTMLElement, hash = `This is my hash!`, recorder) => {\r\n        // const { a, b, c } = { a: 57, b: 23, c: 15 };\r\n\r\n\r\n        const { random } = createRandomGenerator(hash);\r\n\r\n        const { a, b, c } = { a: 1 + Math.floor(57 * random()), b: 1 + Math.floor(213 * random()), c: 1 + Math.floor(115 * random()) };\r\n        const { cr, cg, cb, ca } = { cr: Math.floor(25 + 230 * random()), cg: Math.floor(25 + 230 * random()), cb: Math.floor(25 + 230 * random()), ca: Math.floor(25 + 25 * random()) };\r\n\r\n        const TARGET_SIZE = 600;\r\n        const SMALL_SIZE = 300;\r\n        const size = window.innerWidth > TARGET_SIZE && window.innerHeight > TARGET_SIZE ? TARGET_SIZE : SMALL_SIZE;\r\n\r\n        const h = 200;\r\n        const scale = size / 400;\r\n        const speed = 0.5;\r\n\r\n        let tick = 0;\r\n        let canvas = null as null | HTMLCanvasElement;\r\n\r\n        return new p5((s: p5) => {\r\n            s.setup = () => {\r\n                const result = s.createCanvas(size, size);\r\n                const canvasId = `${Math.random()}`;\r\n                result.id(canvasId);\r\n                canvas = document.getElementById(canvasId) as HTMLCanvasElement;\r\n            };\r\n            s.draw = () => {\r\n                if (recorder?.isWaitingForFrame() && canvas) {\r\n                    console.log(`game.update waitingForFrame - addFrame`, {});\r\n                    (async () => await recorder.getRecorder().addFrame(canvas))();\r\n                    return;\r\n                }\r\n\r\n                s.background(0);\r\n                s.scale(scale);\r\n\r\n                for (let i = 0; i < 10; i++) {\r\n                    const color = s.color((cr * i) % 255, (cg * i) % 255, (cb * i) % 255, ca);\r\n                    s.noFill();\r\n                    s.stroke(color);\r\n                    for (let j = 0; j < 36; j++) {\r\n                        s.circle(h - a / 2 + j % a, h - b / 2 + j % b, (h * 1.35) - (i * 5) % c);\r\n                    }\r\n                    s.translate(h, h);\r\n                    // s.rotate((a + b + c + tick * 0.001) % 2);\r\n                    s.rotate((a + b + c + tick * 0.001));\r\n                    s.translate(-h, -h);\r\n                    tick += speed;\r\n                }\r\n\r\n                tick++;\r\n            };\r\n        }, hostElement);\r\n    },\r\n};\r\n"],"sourceRoot":""}