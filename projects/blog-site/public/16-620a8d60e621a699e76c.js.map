{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/auth/test/auth-client.tsx","webpack:///D:/Projects/rick-love-master/code/auth/client/login.tsx","webpack:///D:/Projects/rick-love-master/code/auth/common/types.ts"],"names":["createAuthenticationClient_serverAccess","propsSystem","state","status","serverAccess","config","AuthenticationView","props","onAuthChange","useAutoLoadingError","loading","error","doWork","useEffect","stopIfObsolete","a","s","refreshStatus","result","useState","setRenderId","onAuthChangeInner","console","log","x","isAuthenticated","requiresPasswordReset","Loading","ErrorBox","label","requiresVerifiedPhone","requiresVerifiedEmail","UnauthenticatedView","tab","setTab","onNavigate","view","AuthenticatedView","onDone","navButtons","action","LoginForm","username","setUsername","password","setPassword","hasFailed","setHasFailed","login","View_Form","View_FormActionRow","Button_FormAction","styleAlt","onPress","View_FormFields","Text_FormTitle","View_FieldRow","Input_Username","placeholder","value","onChange","onSubmit","Input_Password","Button_FieldInline","ErrorMessage","CreateAccountForm","createAccount","minPasswordLength","onPasswordChange","ChangeUsernameForm","changeUsername","map","key","ChangePasswordForm","submit","pw","changePassword","newPassword","PasswordFields","password2","setPassword2","passwordError","setPasswordError","trim","length","onBlur","ForgotPasswordForm","requestCode","requestPhoneLoginCode","verifyCode","loginWithPhoneCode","defaultValue","toStandardPhoneNumber","InputComponent","p","Input_Phone","RegisterPhoneForm","registerPhoneAndSendVerification","verifyPhone","ChangePhoneForm","RegisterEmailForm","registerEmailAndSendVerification","verifyEmail","toEmailAddress","Input_Email","ChangeEmailForm","VerifyContactMethodForm","setValue","sentCode","setSentCode","code","setCode","codeError","setCodeError","editable","Input_Text","message","AccountInfoForm","phone","email","logout","AuthError","data","Error","mockServerState","phoneCode","emailCode","authClient","Math","floor","random","requestEmailLoginCode","loginWithEmailCode","AuthComponent","View_Panel"],"mappings":"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","file":"16-620a8d60e621a699e76c.js","sourcesContent":["/* eslint-disable no-console */\r\nimport React from 'react';\r\nimport { C } from 'controls-react';\r\nimport { createAuthenticationClient, createAuthenticationClient_serverAccess } from '../client/login';\r\nimport { AuthenticationStatus, AuthError } from '../common/types';\r\n\r\nconst mockServerState = {\r\n    username: `rick`,\r\n    password: `42`,\r\n    phone: ``,\r\n    phoneCode: ``,\r\n    email: ``,\r\n    emailCode: ``,\r\n\r\n    status: {\r\n        isAuthenticated: false,\r\n    } as AuthenticationStatus,\r\n};\r\nconst authClient = createAuthenticationClient_serverAccess({\r\n    serverAccess: {\r\n        refreshStatus: async () => ({ result: mockServerState.status }),\r\n        logout: async () => {\r\n            mockServerState.status = { isAuthenticated: false };\r\n            return { result: mockServerState.status };\r\n        },\r\n        createAccount: async (username, password) => {\r\n            mockServerState.username = username;\r\n            mockServerState.password = password;\r\n            mockServerState.status = { isAuthenticated: true, requiresVerifiedPhone: true, username };\r\n            return { result: mockServerState.status };\r\n        },\r\n        login: async (username, password) => {\r\n            if (username !== mockServerState.username\r\n                || password !== mockServerState.password) {\r\n                mockServerState.status = { isAuthenticated: false };\r\n                return { result: mockServerState.status };\r\n            }\r\n            mockServerState.status = { isAuthenticated: true, requiresVerifiedPhone: true, username };\r\n            return { result: mockServerState.status };\r\n        },\r\n        changeUsername: async (username) => {\r\n            mockServerState.username = username;\r\n            mockServerState.status = { ...mockServerState.status, username };\r\n            return { result: mockServerState.status };\r\n        },\r\n        changePassword: async (password) => {\r\n            mockServerState.password = password;\r\n            mockServerState.status = { ...mockServerState.status, requiresPasswordReset: false };\r\n            return { result: mockServerState.status };\r\n        },\r\n\r\n        // Phone\r\n        requestPhoneLoginCode: async (phone) => {\r\n            mockServerState.phoneCode = `${Math.floor(100000 + Math.random() * 899999)}`;\r\n            console.log(`phoneCode`, { phoneCode: mockServerState.phoneCode });\r\n        },\r\n        loginWithPhoneCode: async (phone, code) => {\r\n            if (mockServerState.phoneCode !== code) {\r\n                // mockServerState.status = { isAuthenticated: false };\r\n                // return { result: mockServerState.status };\r\n                throw new AuthError(`Invalid Login Code`);\r\n            }\r\n            mockServerState.phone = phone;\r\n            mockServerState.status = { isAuthenticated: true, requiresPasswordReset: true, username: mockServerState.username, phone };\r\n            return { result: mockServerState.status };\r\n        },\r\n        registerPhoneAndSendVerification: async (phone) => {\r\n            mockServerState.phoneCode = `${Math.floor(100000 + Math.random() * 899999)}`;\r\n            console.log(`phoneCode`, { phoneCode: mockServerState.phoneCode });\r\n            return { result: mockServerState.status };\r\n        },\r\n        verifyPhone: async (phone, code) => {\r\n            if (mockServerState.phoneCode !== code) {\r\n                throw new AuthError(`Invalid Verification Code`);\r\n                // return { result: mockServerState.status };\r\n            }\r\n            mockServerState.phone = phone;\r\n            mockServerState.status = { ...mockServerState.status, phone, requiresVerifiedPhone: false };\r\n            return { result: mockServerState.status };\r\n        },\r\n\r\n        // Email\r\n        requestEmailLoginCode: async (email) => {\r\n            mockServerState.emailCode = `${Math.floor(100000 + Math.random() * 899999)}`;\r\n            console.log(`emailCode`, { emailCode: mockServerState.emailCode });\r\n        },\r\n        loginWithEmailCode: async (email, code) => {\r\n            if (mockServerState.emailCode !== code) {\r\n                // mockServerState.status = { isAuthenticated: false };\r\n                // return { result: mockServerState.status };\r\n                throw new AuthError(`Invalid Login Code`);\r\n            }\r\n            mockServerState.email = email;\r\n            mockServerState.status = { isAuthenticated: true, requiresPasswordReset: true, username: mockServerState.username, email };\r\n            return { result: mockServerState.status };\r\n        },\r\n        registerEmailAndSendVerification: async (email) => {\r\n            mockServerState.emailCode = `${Math.floor(100000 + Math.random() * 899999)}`;\r\n            console.log(`emailCode`, { emailCode: mockServerState.emailCode });\r\n            return { result: mockServerState.status };\r\n        },\r\n        verifyEmail: async (email, code) => {\r\n            if (mockServerState.emailCode !== code) {\r\n                throw new AuthError(`Invalid Verification Code`);\r\n                // return { result: mockServerState.status };\r\n            }\r\n            mockServerState.email = email;\r\n            mockServerState.status = { ...mockServerState.status, email, requiresVerifiedEmail: false };\r\n            return { result: mockServerState.status };\r\n        },\r\n\r\n\r\n    },\r\n    config: {\r\n        minPasswordLength: 8,\r\n    },\r\n});\r\nexport const AuthComponent = () => {\r\n    return (\r\n        <C.View_Panel>\r\n            <authClient.AuthenticationView />\r\n        </C.View_Panel>\r\n    );\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { C } from 'controls-react';\r\nimport { useAutoLoadingError } from 'utils-react/hooks';\r\nimport { toStandardPhoneNumber, PhoneNumber } from 'utils/phone-number';\r\nimport { toEmailAddress, EmailAddress } from 'utils/email-address';\r\nimport { AuthenticationStatus, AuthClientApi } from '../common/types';\r\n\r\n\r\ntype AuthClientState = {\r\n    status: null | AuthenticationStatus;\r\n}\r\ntype AuthConfig = {\r\n    // requiresVerifiedPhone: boolean;\r\n    // requiresVerifiedEmail: boolean;\r\n    minPasswordLength: number;\r\n};\r\n// type AuthServerAccess = AuthClientApi;\r\nconst createAuthServerAccess = (authClientApi: AuthClientApi) => {\r\n    return {\r\n        refreshStatus: () => authClientApi.refreshStatus(),\r\n        logout: () => authClientApi.logout(),\r\n        login: (username: string, password: string) => authClientApi.login({ username, password }),\r\n        createAccount: (username: string, password: string) => authClientApi.createAccount({ username, password }),\r\n        changeUsername: (username: string) => authClientApi.changeUsername({ username }),\r\n        changePassword: (password: string) => authClientApi.changePassword({ password }),\r\n        registerPhoneAndSendVerification: (phone: PhoneNumber) => authClientApi.registerPhoneAndSendVerification({ phone }),\r\n        verifyPhone: (phone: PhoneNumber, code: string) => authClientApi.verifyPhone({ phone, code }),\r\n        requestPhoneLoginCode: (phone: PhoneNumber) => authClientApi.requestPhoneLoginCode({ phone }),\r\n        loginWithPhoneCode: (phone: PhoneNumber, code: string) => authClientApi.loginWithPhoneCode({ phone, code }),\r\n        registerEmailAndSendVerification: (email: EmailAddress) => authClientApi.registerEmailAndSendVerification({ email }),\r\n        verifyEmail: (email: EmailAddress, code: string) => authClientApi.verifyEmail({ email, code }),\r\n        requestEmailLoginCode: (email: EmailAddress) => authClientApi.requestEmailLoginCode({ email }),\r\n        loginWithEmailCode: (email: EmailAddress, code: string) => authClientApi.loginWithEmailCode({ email, code }),\r\n    };\r\n};\r\ntype AuthServerAccess = ReturnType<typeof createAuthServerAccess>;\r\n\r\nexport const createAuthenticationClient = ({ authClientApi, config }: { authClientApi: AuthClientApi, config: AuthConfig }) => {\r\n    return createAuthenticationClient_serverAccess({ serverAccess: createAuthServerAccess(authClientApi), config });\r\n};\r\nexport const createAuthenticationClient_serverAccess = ({ serverAccess, config }: { serverAccess: AuthServerAccess, config: AuthConfig }) => {\r\n    const state: AuthClientState = { status: null as null | AuthenticationStatus };\r\n    const propsSystem = { state, serverAccess, config };\r\n    return {\r\n        AuthenticationView: (props: { onAuthChange?: (status: AuthenticationStatus) => void }) => <AuthenticationView {...propsSystem} {...props} />,\r\n    };\r\n};\r\n\r\nconst AuthenticationView = ({ state, serverAccess, config, onAuthChange }: { state: AuthClientState, serverAccess: AuthServerAccess, config: AuthConfig, onAuthChange?: (status: AuthenticationStatus) => void }) => {\r\n\r\n    const { loading, error, doWork } = useAutoLoadingError();\r\n    useEffect(() => {\r\n        if (!state.status) {\r\n            doWork(async (stopIfObsolete) => {\r\n                const s = state;\r\n                s.status = (await serverAccess.refreshStatus()).result;\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    const [renderId, setRenderId] = useState(0);\r\n    const onAuthChangeInner = (status: AuthenticationStatus) => {\r\n        console.log(`onAuthChangeInner`, { status });\r\n\r\n        const s = state;\r\n        s.status = status;\r\n        onAuthChange?.(status);\r\n        setRenderId(x => x + 1);\r\n    };\r\n\r\n    if (!state.status) {\r\n        return (\r\n            <>\r\n                <C.Loading loading={loading} />\r\n                <C.ErrorBox error={error} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    if (!state.status.isAuthenticated) {\r\n        return (\r\n            <>\r\n                <C.Loading loading={loading} />\r\n                <C.ErrorBox error={error} />\r\n                <UnauthenticatedView serverAccess={serverAccess} config={config} onAuthChange={onAuthChangeInner} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    if (state.status.requiresPasswordReset) {\r\n        return (\r\n            <>\r\n                <C.Loading loading={loading} />\r\n                <C.ErrorBox error={error} />\r\n                <ChangePasswordForm serverAccess={serverAccess} config={config} onAuthChange={onAuthChangeInner} label='Reset Password' />\r\n            </>\r\n        );\r\n    }\r\n\r\n    if (state.status.requiresVerifiedPhone) {\r\n        return (\r\n            <>\r\n                <C.Loading loading={loading} />\r\n                <C.ErrorBox error={error} />\r\n                <RegisterPhoneForm serverAccess={serverAccess} onAuthChange={onAuthChangeInner} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    if (state.status.requiresVerifiedEmail) {\r\n        return (\r\n            <>\r\n                <C.Loading loading={loading} />\r\n                <C.ErrorBox error={error} />\r\n                <RegisterEmailForm serverAccess={serverAccess} onAuthChange={onAuthChangeInner} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <C.Loading loading={loading} />\r\n            <C.ErrorBox error={error} />\r\n            <AuthenticatedView serverAccess={serverAccess} config={config} status={state.status} onAuthChange={onAuthChangeInner} />\r\n        </>\r\n    );\r\n};\r\n\r\nconst UnauthenticatedView = ({ serverAccess, config, onAuthChange }: { serverAccess: AuthServerAccess, config: AuthConfig, onAuthChange: (status: AuthenticationStatus) => void }) => {\r\n\r\n    const [tab, setTab] = useState(`login` as 'login' | 'create-account' | 'forgot-password');\r\n    if (tab === `create-account`) {\r\n        return (\r\n            <CreateAccountForm serverAccess={serverAccess} config={config} onAuthChange={onAuthChange} onNavigate={(view) => setTab(view)} />\r\n        );\r\n    }\r\n    if (tab === `forgot-password`) {\r\n        return (\r\n            <ForgotPasswordForm serverAccess={serverAccess} onAuthChange={onAuthChange} onNavigate={(view) => setTab(view)} />\r\n        );\r\n    }\r\n    return (\r\n        <LoginForm serverAccess={serverAccess} onAuthChange={onAuthChange} onNavigate={(view) => setTab(view)} />\r\n    );\r\n};\r\n\r\nconst AuthenticatedView = ({ serverAccess, config, status, onAuthChange }: { serverAccess: AuthServerAccess, config: AuthConfig, status: AuthenticationStatus, onAuthChange: (status: AuthenticationStatus) => void }) => {\r\n\r\n    const [tab, setTab] = useState(`logout` as 'logout' | 'change-username' | 'change-password' | 'change-phone' | 'change-email');\r\n    if (tab === `change-username`) {\r\n        return (\r\n            <ChangeUsernameForm serverAccess={serverAccess} onAuthChange={onAuthChange} onDone={() => setTab(`logout`)} navButtons={[{ label: `Cancel`, action: () => setTab(`logout`) }]} />\r\n        );\r\n    }\r\n    if (tab === `change-password`) {\r\n        return (\r\n            <ChangePasswordForm serverAccess={serverAccess} config={config} onAuthChange={onAuthChange} onDone={() => setTab(`logout`)} navButtons={[{ label: `Cancel`, action: () => setTab(`logout`) }]} />\r\n        );\r\n    }\r\n    if (tab === `change-phone`) {\r\n        return (\r\n            <ChangePhoneForm serverAccess={serverAccess} onAuthChange={onAuthChange} onDone={() => setTab(`logout`)} />\r\n        );\r\n    }\r\n    if (tab === `change-email`) {\r\n        return (\r\n            <ChangeEmailForm serverAccess={serverAccess} onAuthChange={onAuthChange} onDone={() => setTab(`logout`)} />\r\n        );\r\n    }\r\n    return (\r\n        <AccountInfoForm serverAccess={serverAccess} status={status} onAuthChange={onAuthChange} onNavigate={(view) => setTab(view)} />\r\n    );\r\n};\r\n\r\nconst LoginForm = (props: { serverAccess: AuthServerAccess, onAuthChange: (status: AuthenticationStatus) => void, onNavigate: (view: 'create-account' | 'forgot-password') => void }) => {\r\n\r\n    const [username, setUsername] = useState(``);\r\n    const [password, setPassword] = useState(``);\r\n    const [hasFailed, setHasFailed] = useState(false);\r\n    const { loading, error, doWork } = useAutoLoadingError();\r\n\r\n    const login = () => {\r\n        doWork(async (stopIfObsolete) => {\r\n            setHasFailed(false);\r\n\r\n            const result = await props.serverAccess.login(username, password);\r\n            stopIfObsolete();\r\n\r\n            if (!result.result.isAuthenticated) {\r\n                setHasFailed(true);\r\n                return;\r\n            }\r\n\r\n            props.onAuthChange(result.result);\r\n        });\r\n\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <C.View_Form>\r\n                <C.View_FormActionRow>\r\n                    <C.Button_FormAction styleAlt onPress={() => props.onNavigate(`create-account`)}>Create Account</C.Button_FormAction>\r\n                </C.View_FormActionRow>\r\n                <C.View_FormFields>\r\n                    <C.Text_FormTitle>Login</C.Text_FormTitle>\r\n                    <C.Loading loading={loading} />\r\n                    <C.ErrorBox error={error} />\r\n                    <C.View_FieldRow>\r\n                        <C.Input_Username placeholder='Username' value={username} onChange={setUsername} onSubmit={login} />\r\n                    </C.View_FieldRow>\r\n                    <C.View_FieldRow>\r\n                        <C.Input_Password placeholder='Password' value={password} onChange={setPassword} onSubmit={login} />\r\n                        <C.Button_FieldInline styleAlt onPress={() => props.onNavigate(`forgot-password`)}>Forgot Password</C.Button_FieldInline>\r\n                    </C.View_FieldRow>\r\n                    {hasFailed && (<C.ErrorMessage>Incorrect username or password</C.ErrorMessage>)}\r\n                </C.View_FormFields>\r\n                <C.View_FormActionRow>\r\n                    <C.Button_FormAction onPress={login}>Login</C.Button_FormAction>\r\n                </C.View_FormActionRow>\r\n            </C.View_Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nconst CreateAccountForm = (props: { serverAccess: AuthServerAccess, config: AuthConfig, onAuthChange: (status: AuthenticationStatus) => void, onNavigate: (view: 'login') => void }) => {\r\n\r\n    const [username, setUsername] = useState(``);\r\n    const [password, setPassword] = useState(``);\r\n    const { loading, error, doWork } = useAutoLoadingError();\r\n\r\n    const createAccount = () => {\r\n        if (!username) {\r\n            return;\r\n        }\r\n        if (!password) {\r\n            return;\r\n        }\r\n\r\n        doWork(async (stopIfObsolete) => {\r\n            const result = await props.serverAccess.createAccount(username, password);\r\n            stopIfObsolete();\r\n\r\n            props.onAuthChange(result.result);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <C.View_Form>\r\n                <C.View_FormActionRow>\r\n                    <C.Button_FormAction styleAlt onPress={() => props.onNavigate(`login`)}> Login</C.Button_FormAction>\r\n                </C.View_FormActionRow>\r\n                <C.View_FormFields>\r\n                    <C.Text_FormTitle>Create Account</C.Text_FormTitle>\r\n                    <C.Loading loading={loading} />\r\n                    <C.ErrorBox error={error} />\r\n                    <C.View_FieldRow>\r\n                        <C.Input_Username placeholder='Username' value={username} onChange={setUsername} onSubmit={createAccount} />\r\n                    </C.View_FieldRow>\r\n                    <PasswordFields password={password} minPasswordLength={props.config.minPasswordLength} onPasswordChange={setPassword} onSubmit={createAccount} />\r\n                </C.View_FormFields>\r\n                <C.View_FormActionRow>\r\n                    <C.Button_FormAction onPress={createAccount}>Create Account</C.Button_FormAction>\r\n                </C.View_FormActionRow>\r\n            </C.View_Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nconst ChangeUsernameForm = (props: {\r\n    serverAccess: AuthServerAccess;\r\n    onAuthChange: (status: AuthenticationStatus) => void;\r\n    onDone?: () => void;\r\n    navButtons?: { label: string, action: () => void }[];\r\n}) => {\r\n\r\n    const [username, setUsername] = useState(``);\r\n    const { loading, error, doWork } = useAutoLoadingError();\r\n\r\n    const changeUsername = () => {\r\n        if (!username) {\r\n            return;\r\n        }\r\n\r\n        doWork(async (stopIfObsolete) => {\r\n            const result = await props.serverAccess.changeUsername(username);\r\n            stopIfObsolete();\r\n\r\n            props.onAuthChange(result.result);\r\n            props.onDone?.();\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <C.View_Form>\r\n                <C.View_FormActionRow>\r\n                    {props.navButtons?.map(x => (\r\n                        <C.Button_FormAction key={x.label} styleAlt onPress={x.action}>{x.label}</C.Button_FormAction>\r\n                    ))}\r\n                </C.View_FormActionRow>\r\n                <C.View_FormFields>\r\n                    <C.Text_FormTitle>Change Username</C.Text_FormTitle>\r\n                    <C.Loading loading={loading} />\r\n                    <C.ErrorBox error={error} />\r\n                    <C.View_FieldRow>\r\n                        <C.Input_Username placeholder='Username' value={username} onChange={setUsername} onSubmit={changeUsername} />\r\n                    </C.View_FieldRow>\r\n                </C.View_FormFields>\r\n                <C.View_FormActionRow>\r\n                    <C.Button_FormAction onPress={changeUsername}>Change Username</C.Button_FormAction>\r\n                </C.View_FormActionRow>\r\n            </C.View_Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nconst ChangePasswordForm = (props: {\r\n    serverAccess: AuthServerAccess;\r\n    config: AuthConfig;\r\n    onAuthChange: (status: AuthenticationStatus) => void;\r\n    label?: string;\r\n    onDone?: () => void;\r\n    navButtons?: { label: string, action: () => void }[];\r\n}) => {\r\n\r\n    const [password, setPassword] = useState(``);\r\n    const { loading, error, doWork } = useAutoLoadingError();\r\n\r\n    const changePassword = (newPassword?: string) => {\r\n        //  console.log(`changePassword`, { newPassword });\r\n        if (newPassword) {\r\n            setPassword(newPassword);\r\n        }\r\n    };\r\n\r\n    const submit = async () => {\r\n        const pw = password;\r\n        if (!pw) {\r\n            return;\r\n        }\r\n\r\n        doWork(async (stopIfObsolete) => {\r\n            const result = await props.serverAccess.changePassword(pw);\r\n            stopIfObsolete();\r\n\r\n            props.onAuthChange(result.result);\r\n            props.onDone?.();\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <C.View_Form>\r\n                <C.View_FormActionRow>\r\n                    {props.navButtons?.map(x => (\r\n                        <C.Button_FormAction key={x.label} styleAlt onPress={x.action}>{x.label}</C.Button_FormAction>\r\n                    ))}\r\n                </C.View_FormActionRow>\r\n                <C.View_FormFields>\r\n                    <C.Text_FormTitle>{props.label ?? `Change Password`}</C.Text_FormTitle>\r\n                    <C.Loading loading={loading} />\r\n                    <C.ErrorBox error={error} />\r\n                    <PasswordFields password={password} minPasswordLength={props.config.minPasswordLength} onPasswordChange={changePassword} onSubmit={submit} />\r\n                </C.View_FormFields>\r\n                <C.View_FormActionRow>\r\n                    <C.Button_FormAction onPress={submit}>{props.label ?? `Change Password`}</C.Button_FormAction>\r\n                </C.View_FormActionRow>\r\n            </C.View_Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nconst PasswordFields = (props: { password: string, minPasswordLength: number, onPasswordChange: (password: string) => void, onSubmit: () => void }) => {\r\n\r\n    const [password, setPassword] = useState(props.password);\r\n    const [password2, setPassword2] = useState(``);\r\n    const [passwordError, setPasswordError] = useState(null as null | 'missing' | 'short' | 'must-match');\r\n\r\n    const changePassword = () => {\r\n        if (password !== password.trim()) {\r\n            setPassword(password.trim());\r\n        }\r\n        if (password2 !== password2.trim()) {\r\n            setPassword2(password2.trim());\r\n        }\r\n        if (!password) {\r\n            setPasswordError(`missing`);\r\n            return;\r\n        }\r\n        if (password.length < props.minPasswordLength) {\r\n            setPasswordError(`short`);\r\n            return;\r\n        }\r\n        if (!password2) { return; }\r\n        if (password !== password2) {\r\n            setPasswordError(`must-match`);\r\n            return;\r\n        }\r\n        setPasswordError(null);\r\n\r\n        if (password !== props.password) {\r\n            props.onPasswordChange(password);\r\n        }\r\n    };\r\n\r\n    const submit = () => {\r\n        changePassword();\r\n        props.onSubmit();\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <C.View_FieldRow>\r\n                <C.Input_Password placeholder='Password' value={password} onChange={setPassword} onSubmit={submit} onBlur={changePassword} />\r\n            </C.View_FieldRow>\r\n            {passwordError === `missing` && (<C.ErrorMessage>Please Enter a Password</C.ErrorMessage>)}\r\n            {passwordError === `short` && (<C.ErrorMessage>{`The Password is too Short: (${props.minPasswordLength})`}</C.ErrorMessage>)}\r\n            <C.View_FieldRow>\r\n                <C.Input_Password placeholder='Confirm Password' value={password2} onChange={setPassword2} onSubmit={submit} onBlur={changePassword} />\r\n            </C.View_FieldRow>\r\n            {passwordError === `must-match` && (<C.ErrorMessage>Passwords Must Match</C.ErrorMessage>)}\r\n        </>\r\n    );\r\n};\r\n\r\nconst ForgotPasswordForm = (props: { serverAccess: AuthServerAccess, onNavigate: (view: 'login') => void, onAuthChange: (status: AuthenticationStatus) => void }) => {\r\n    return (\r\n        <VerifyContactMethodForm\r\n            requestCode={props.serverAccess.requestPhoneLoginCode}\r\n            verifyCode={props.serverAccess.loginWithPhoneCode}\r\n            onAuthChange={props.onAuthChange}\r\n            label='Forgot Password'\r\n            navButtons={[{ label: `Login`, action: () => props.onNavigate(`login`) }]}\r\n            defaultValue={toStandardPhoneNumber(``)}\r\n            InputComponent={(p) => <C.Input_Phone placeholder='Phone Number' {...p} />}\r\n        />\r\n    );\r\n};\r\n\r\nconst RegisterPhoneForm = (props: { serverAccess: AuthServerAccess, onAuthChange: (status: AuthenticationStatus) => void }) => {\r\n    return (\r\n        <VerifyContactMethodForm\r\n            requestCode={props.serverAccess.registerPhoneAndSendVerification}\r\n            verifyCode={props.serverAccess.verifyPhone}\r\n            onAuthChange={props.onAuthChange}\r\n            label='Register Phone'\r\n            defaultValue={toStandardPhoneNumber(``)}\r\n            InputComponent={(p) => <C.Input_Phone placeholder='Phone Number' {...p} />}\r\n        />\r\n    );\r\n};\r\n\r\nconst ChangePhoneForm = (props: { serverAccess: AuthServerAccess, onAuthChange: (status: AuthenticationStatus) => void, onDone: () => void }) => {\r\n    return (\r\n        <VerifyContactMethodForm\r\n            requestCode={props.serverAccess.registerPhoneAndSendVerification}\r\n            verifyCode={props.serverAccess.verifyPhone}\r\n            onAuthChange={props.onAuthChange}\r\n            onDone={props.onDone}\r\n            label='Change Phone'\r\n            navButtons={[{ label: `Cancel`, action: props.onDone }]}\r\n            defaultValue={toStandardPhoneNumber(``)}\r\n            InputComponent={(p) => <C.Input_Phone placeholder='Phone Number' {...p} />}\r\n        />\r\n    );\r\n};\r\n\r\nconst RegisterEmailForm = (props: { serverAccess: AuthServerAccess, onAuthChange: (status: AuthenticationStatus) => void }) => {\r\n    return (\r\n        <VerifyContactMethodForm\r\n            requestCode={props.serverAccess.registerEmailAndSendVerification}\r\n            verifyCode={props.serverAccess.verifyEmail}\r\n            onAuthChange={props.onAuthChange}\r\n            label='Register Email'\r\n            defaultValue={toEmailAddress(``)}\r\n            InputComponent={(p) => <C.Input_Email placeholder='Email' {...p} />}\r\n        />\r\n    );\r\n};\r\n\r\nconst ChangeEmailForm = (props: { serverAccess: AuthServerAccess, onAuthChange: (status: AuthenticationStatus) => void, onDone: () => void }) => {\r\n    return (\r\n        <VerifyContactMethodForm\r\n            requestCode={props.serverAccess.registerEmailAndSendVerification}\r\n            verifyCode={props.serverAccess.verifyEmail}\r\n            onAuthChange={props.onAuthChange}\r\n            onDone={props.onDone}\r\n            label='Change Email'\r\n            navButtons={[{ label: `Cancel`, action: props.onDone }]}\r\n            defaultValue={toEmailAddress(``)}\r\n            InputComponent={(p) => <C.Input_Email placeholder='Email' {...p} />}\r\n        />\r\n    );\r\n};\r\n\r\nconst VerifyContactMethodForm = <T extends string>(props: {\r\n    requestCode: (value: T) => Promise<void>;\r\n    verifyCode: (value: T, code: string) => Promise<{ result: AuthenticationStatus }>;\r\n    onAuthChange: (status: AuthenticationStatus) => void;\r\n    defaultValue: T;\r\n    InputComponent: (props: {\r\n        editable: boolean;\r\n        value: T;\r\n        onChange: (value: T) => void;\r\n        onSubmit: () => void;\r\n    }) => JSX.Element;\r\n    label?: string;\r\n    onDone?: () => void;\r\n    navButtons?: { label: string, action: () => void }[];\r\n}) => {\r\n\r\n    const [value, setValue] = useState(props.defaultValue);\r\n    const [sentCode, setSentCode] = useState(false);\r\n    const [code, setCode] = useState(``);\r\n    const [codeError, setCodeError] = useState(null as null | { message: string });\r\n    const { loading, error, doWork } = useAutoLoadingError();\r\n\r\n    const requestCode = () => {\r\n        doWork(async (stopIfObsolete) => {\r\n            await props.requestCode(value);\r\n            stopIfObsolete();\r\n\r\n            setSentCode(true);\r\n        });\r\n    };\r\n\r\n    const verifyCode = () => {\r\n        doWork(async (stopIfObsolete) => {\r\n            try {\r\n                setCodeError(null);\r\n\r\n                const result = await props.verifyCode(value, code);\r\n                stopIfObsolete();\r\n\r\n                props.onAuthChange(result.result);\r\n                props.onDone?.();\r\n            } catch (_error) {\r\n                setCodeError(_error);\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <C.View_Form>\r\n                <C.View_FormActionRow>\r\n                    {props.navButtons?.map(x => (\r\n                        <C.Button_FormAction key={x.label} styleAlt onPress={x.action}>{x.label}</C.Button_FormAction>\r\n                    ))}\r\n                </C.View_FormActionRow>\r\n                <C.View_FormFields>\r\n                    <C.Text_FormTitle>{props.label ?? `Change Phone`}</C.Text_FormTitle>\r\n                    <C.Loading loading={loading} />\r\n                    <C.ErrorBox error={error} />\r\n                    <C.View_FieldRow>\r\n                        <props.InputComponent editable={!sentCode} value={value} onChange={setValue} onSubmit={requestCode} />\r\n                    </C.View_FieldRow>\r\n                    {sentCode && (\r\n                        <C.View_FieldRow>\r\n                            <C.Input_Text placeholder='Verification Code' value={code} onChange={setCode} onSubmit={verifyCode} />\r\n                        </C.View_FieldRow>\r\n                    )}\r\n                    {codeError && (<C.ErrorMessage>{codeError.message ?? `Invalid Code`}</C.ErrorMessage>)}\r\n                </C.View_FormFields>\r\n                <C.View_FormActionRow>\r\n                    {!sentCode && <C.Button_FormAction onPress={requestCode}>Send Verification Code</C.Button_FormAction>}\r\n                    {sentCode && <C.Button_FormAction onPress={verifyCode}>Verify</C.Button_FormAction>}\r\n                </C.View_FormActionRow>\r\n            </C.View_Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nconst AccountInfoForm = (props: {\r\n    serverAccess: AuthServerAccess;\r\n    status: AuthenticationStatus;\r\n    onAuthChange: (status: AuthenticationStatus) => void;\r\n    onNavigate: (view: 'change-username' | 'change-password' | 'change-phone' | 'change-email') => void;\r\n}) => {\r\n\r\n    const { loading, error, doWork } = useAutoLoadingError();\r\n\r\n    const logout = () => {\r\n        doWork(async (stopIfObsolete) => {\r\n            const result = await props.serverAccess.logout();\r\n            stopIfObsolete();\r\n\r\n            props.onAuthChange(result.result);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <C.View_Form>\r\n                <C.View_FormFields>\r\n                    <C.Text_FormTitle>User Account</C.Text_FormTitle>\r\n                    <C.Loading loading={loading} />\r\n                    <C.ErrorBox error={error} />\r\n                    <C.View_FieldRow>\r\n                        <C.Input_Text editable={false} value={props.status.username ?? ``} onChange={() => { }} />\r\n                        <C.Button_FieldInline styleAlt onPress={() => props.onNavigate(`change-username`)}>Change Username</C.Button_FieldInline>\r\n                        <C.Button_FieldInline styleAlt onPress={() => props.onNavigate(`change-password`)}>Change Password</C.Button_FieldInline>\r\n                    </C.View_FieldRow>\r\n                    <C.View_FieldRow>\r\n                        <C.Input_Phone editable={false} value={props.status.phone ?? toStandardPhoneNumber(``)} onChange={() => { }} />\r\n                        <C.Button_FieldInline styleAlt onPress={() => props.onNavigate(`change-phone`)}>Change Phone</C.Button_FieldInline>\r\n                    </C.View_FieldRow>\r\n                    <C.View_FieldRow>\r\n                        <C.Input_Text editable={false} value={props.status.email ?? ``} onChange={() => { }} />\r\n                        <C.Button_FieldInline styleAlt onPress={() => props.onNavigate(`change-email`)}>Change Email</C.Button_FieldInline>\r\n                    </C.View_FieldRow>\r\n                </C.View_FormFields>\r\n                <C.View_FormActionRow>\r\n                    <C.Button_FormAction onPress={logout}>Log Out</C.Button_FormAction>\r\n                </C.View_FormActionRow>\r\n            </C.View_Form>\r\n        </>\r\n    );\r\n};\r\n","import { PhoneNumber } from 'utils/phone-number';\r\nimport { EmailAddress } from 'utils/email-address';\r\n\r\nexport type AuthenticationStatus = {\r\n    isAuthenticated: boolean;\r\n    requiresPasswordReset?: boolean;\r\n    requiresVerifiedPhone?: boolean;\r\n    requiresVerifiedEmail?: boolean;\r\n\r\n    username?: string;\r\n    phone?: PhoneNumber;\r\n    email?: EmailAddress;\r\n};\r\n\r\nexport type AuthClientApi = {\r\n\r\n    refreshStatus: () => Promise<{ result: AuthenticationStatus }>;\r\n\r\n    logout: () => Promise<{ result: AuthenticationStatus }>;\r\n\r\n    login: (params: { username: string, password: string }) => Promise<{ result: AuthenticationStatus }>;\r\n    createAccount: (params: { username: string, password: string }) => Promise<{ result: AuthenticationStatus }>;\r\n\r\n    changeUsername: (params: { username: string }) => Promise<{ result: AuthenticationStatus }>;\r\n    changePassword: (params: { password: string }) => Promise<{ result: AuthenticationStatus }>;\r\n\r\n    // Note: Use exponential backoff for multiple requests\r\n\r\n    // Phone\r\n\r\n    /** Register the phone with this account and send verification code\r\n     * \r\n     * Error if phone is already registered with another account\r\n     */\r\n    registerPhoneAndSendVerification: (params: { phone: PhoneNumber }) => Promise<{ result: { isAuthenticated: boolean } }>;\r\n    verifyPhone: (params: { phone: PhoneNumber, code: string }) => Promise<{ result: AuthenticationStatus }>;\r\n    requestPhoneLoginCode: (params: { phone: PhoneNumber }) => Promise<void>;\r\n    loginWithPhoneCode: (params: { phone: PhoneNumber, code: string }) => Promise<{ result: AuthenticationStatus }>;\r\n\r\n    // Email\r\n\r\n    /** Register the email with this account and send verification code\r\n    * \r\n    * Error if email is already registered with another account\r\n    */\r\n    registerEmailAndSendVerification: (params: { email: EmailAddress }) => Promise<{ result: { isAuthenticated: boolean } }>;\r\n    verifyEmail: (params: { email: EmailAddress, code: string }) => Promise<{ result: AuthenticationStatus }>;\r\n    requestEmailLoginCode: (params: { email: EmailAddress }) => Promise<void>;\r\n    loginWithEmailCode: (params: { email: EmailAddress, code: string }) => Promise<{ result: AuthenticationStatus }>;\r\n};\r\n\r\n\r\nexport class AuthError extends Error {\r\n    constructor(public message: string, public data?: unknown) { super(); }\r\n}\r\n"],"sourceRoot":""}