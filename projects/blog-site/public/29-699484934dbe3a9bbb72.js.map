{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/games/educational-games/star-blast-sideways-with-subjects/star-blast-spelling.tsx","webpack:///D:/Projects/rick-love-master/code/games/educational-games/problems/spelling/spelling-funny-response-problem-services.ts"],"names":["EducationalGame_StarBlastSideways_Spelling","props","speechService","useRef","createSpeechService","useState","Platform","OS","hasStarted","setHasStarted","problemService","useEffect","problemSource","speech","current","createAutoSavedProblemService","createReviewProblemService","createSpellingProblemService","recordAnswer","problem","answer","isCorrect","Math","random","speak","randomItem","answers","find","x","value","languange","onClick","style","height","alignSelf","alignItems","justifyContent","fontSize"],"mappings":"qUAaaA,EAA6C,SAACC,GACvD,IAAMC,EAAgBC,iBAAOC,eADwC,EAEjCC,mBAAS,QAAAC,IAASC,IAA/CC,EAF8D,KAElDC,EAFkD,KAG/DC,EAAiBP,iBAAO,MAe9B,GAbAQ,qBAAU,WCd4C,IAACC,EAA+BC,EDe7EX,EAAcY,UAEnBJ,EAAeI,QAAUC,YACrBC,aClB+CJ,EDoBvCK,YAA6B,CAAEf,cAAeA,EAAcY,UCpBUD,EDqBtEX,EAAcY,QCpBE,OAAH,UACtBF,EADsB,CAEzBM,aAAc,SAACC,EAASC,GAgCpB,OA9Bc,WAEV,GAAKA,EAAOC,UAeL,CACH,GAAIC,KAAKC,SAAW,GAAO,OAO3BV,EAAOW,MAAMC,YALG,CAAC,4CAAD,6CAlBG,SAanBZ,EAAOW,MAAMC,YAXG,CAAC,oCAAD,6MAYhBZ,EAAOW,MAAP,oBAAaL,EAAQO,QAAQC,MAAK,SAAAC,GAAC,OAAIA,EAAEP,oBAAzC,aAAa,EAAwCQ,aAArD,aAYRL,GAEOZ,EAAcM,aAAaC,EAASC,ODbvC,IAL8C,uBAOvD,CAAClB,EAAcY,WAGbN,IAAeE,EAAeI,QAAS,CAExC,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAcgB,UAAU,KAAK5B,cAAeA,EAAcY,UAC1D,yBAAKiB,QAAS,kBAJA7B,EAAcY,QAAQU,MAAtB,cAAsCf,GAAc,KAK9D,kBAAC,IAAD,CAAMuB,MAAO,CAAEC,OAAQ,IAAKC,UAAW,SAAUC,WAAY,SAAUC,eAAgB,WACnF,kBAAC,IAAD,CAAMJ,MAAO,CAAEK,SAAU,KAAzB,YAOpB,OAAO,kBAAC,oCAAD,CAAmC3B,eAAgBA,EAAeI","file":"29-699484934dbe3a9bbb72.js","sourcesContent":["/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\nimport React, { useRef, useState, useEffect } from 'react';\r\nimport { Text, View, Platform } from 'react-native-lite';\r\nimport { ProblemService } from '../problems/problems-service';\r\nimport { createFunnySpellingResponsesProblemService } from '../problems/spelling/spelling-funny-response-problem-services';\r\nimport { createSpeechService } from '../utils/speech';\r\nimport { EducationalGame_StarBlastSideways } from '../star-blast-sideways';\r\nimport { createReviewProblemService } from '../problems/problems-reviewer';\r\nimport { createSpellingProblemService } from '../problems/spelling/spelling-problem-service';\r\nimport { VoiceChooser } from '../utils/voice-chooser';\r\nimport { createAutoSavedProblemService } from '../problems/problem-state-storage';\r\n\r\nexport const EducationalGame_StarBlastSideways_Spelling = (props: {}) => {\r\n    const speechService = useRef(createSpeechService());\r\n    const [hasStarted, setHasStarted] = useState(Platform.OS !== `web`);\r\n    const problemService = useRef(null as null | ProblemService);\r\n\r\n    useEffect(() => {\r\n        if (!speechService.current) { return; }\r\n\r\n        problemService.current = createAutoSavedProblemService(\r\n            createReviewProblemService(\r\n                createFunnySpellingResponsesProblemService(\r\n                    createSpellingProblemService({ speechService: speechService.current }),\r\n                    speechService.current),\r\n                {}),\r\n            `ProblemsSpelling`);\r\n    }, [speechService.current]);\r\n\r\n    // Only web\r\n    if (!hasStarted || !problemService.current) {\r\n        const speak = () => { speechService.current.speak(`Start`); setHasStarted(true); };\r\n        return (\r\n            <View>\r\n                <VoiceChooser languange='en' speechService={speechService.current} />\r\n                <div onClick={() => speak()}>\r\n                    <View style={{ height: 300, alignSelf: `center`, alignItems: `center`, justifyContent: `center` }}>\r\n                        <Text style={{ fontSize: 36 }}>Start</Text>\r\n                    </View>\r\n                </div>\r\n            </View>\r\n        );\r\n    }\r\n\r\n    return <EducationalGame_StarBlastSideways problemService={problemService.current} />;\r\n};\r\n","import { randomItem } from 'utils/random';\r\nimport { SpeechService } from '../../utils/speech';\r\nimport { ProblemService } from '../problems-service';\r\n\r\nexport const createFunnySpellingResponsesProblemService = (problemSource: ProblemService, speech: SpeechService): ProblemService => {\r\n    const service: ProblemService = {\r\n        ...problemSource,\r\n        recordAnswer: (problem, answer) => {\r\n\r\n            const speak = () => {\r\n                // Responses\r\n                if (!answer.isCorrect) {\r\n                    // Demotivation!\r\n                    const phrases = [\r\n                        `I've got a dog that spells better`,\r\n                        `That was horrible`,\r\n                        `What are you trying to do?`,\r\n                        `That is not a word`,\r\n                        `No, select the correct answer`,\r\n                        `Absolutely Incorrect`,\r\n                        `Completely Wrong`,\r\n                        `This is supposed to be English`,\r\n                        `What does the fox say?`,\r\n                    ];\r\n                    speech.speak(randomItem(phrases));\r\n                    speech.speak(problem.answers.find(x => x.isCorrect)?.value ?? ``);\r\n                } else {\r\n                    if (Math.random() > 0.1) { return; }\r\n\r\n                    const phrases = [\r\n                        `Good job! Thank you for the alien skulls.`,\r\n                        `Great! That's a nice pile of bones.`,\r\n                        // `Amazing! Keep getting better`,\r\n                    ];\r\n                    speech.speak(randomItem(phrases));\r\n                }\r\n            };\r\n            speak();\r\n\r\n            return problemSource.recordAnswer(problem, answer);\r\n        },\r\n    };\r\n    return service;\r\n};\r\n"],"sourceRoot":""}