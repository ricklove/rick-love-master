{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/json-rpc/types.ts","webpack:///D:/Projects/rick-love-master/code/json-rpc/json-body.ts","webpack:///D:/Projects/rick-love-master/code/json-rpc/web/fetch-request.ts","webpack:///D:/Projects/rick-love-master/code/json-rpc/json-rpc-client-stack.ts","webpack:///D:/Projects/rick-love-master/code/payments/client/payment-react.tsx","webpack:///D:/Projects/rick-love-master/code/payments/test/full-stack-test-config.ts","webpack:///D:/Projects/rick-love-master/code/payments/test/full-stack-test-client.tsx"],"names":["JsonRpcError","message","data","innerError","Error","_nextId","encodeJsonRpcRequestBody","method","params","jsonrpc","id","FetchError","fetchWithTimeout","url","options","timeout","timeoutId","pTimeout","Promise","resolve","reject","setTimeout","errorInfo","isTimeout","error","details","pMain","a","fetch","catch","result","clearTimeout","race","fetchJsonPost","body","JSON","stringify","reqData","headers","length","credentials","cache","ok","json","status","responseStatus","request","resultObj","createJsonRpcClient","config","webClient","webRequest","serverUrl","reqBody","response","responseBodyObj","methodRequests","Object","keys","apiMethodNames","map","k","execute","inner","toKeyValueObject","x","key","value","createJsonRpcApiCoreClient","newRequests","promiseState","_resolve","_reject","prom","push","delay","batchRequests","batchRequest","batchResponses","forEach","req","res","find","createJsonRpcCoreBatchClient","batchData","sessionTokenStorage","getSessionToken","sessionToken","sessionRequest","newSessionToken","resetSessionToken","setSessionToken","createJsonRpcBatchSessionClient","sessionData","createJsonRpcSessionWebClient","createPaymentClientComponents_extra","comp","compStripe","createPaymentClientComponents_stripe","AppWrapperComponent","children","PaymentMethodEntryComponent","props","createPaymentClientComponents","compExtra","PaymentMethodView","serverAccess","title","PaymentHistoryView","useState","textPadding","elementPadding","buttonAlignment","borderRadius","borderColor","theme","colors","border","backgroundColor","background_field","textColor","text","buttonText","style","useAutoLoadingError","loading","doWork","paymentMethods","setPaymentMethods","populatePaymentMethods","getPaymentMethods","setupToken","setSetupToken","useEffect","View_Form","Text_FormTitle","Loading","ErrorBox","View_FormFields","View_FieldRow","Text_FieldLabel","expiration","month","padStart","year","Button_FieldInline","onPress","deletePaymentMethod","View_FormActionRow","Button_FormAction","stopIfObsolete","onSetupPayment","console","log","paymentMethodSetupToken","onPaymentMethodReady","paymentMethodToken","payments","setPayments","getPayments","created","formatDate","amount","usdCents","PaymentDebugView","purchaseAmount","setPurchaseAmount","Input_Currency","onChange","onMakePurchase","onPurchase","getFullStackTestConfig","fullStackTestConfig","PaymentFullStackTesterHost","setServerAccess","setConfig","c","server","setupSavedPaymentMethod","saveSavedPaymentMethod","getSavedPaymentMethods","deleteSavedPaymentMethod","debug_triggerPayment","access","providerName","token","paymentMethodClientToken","currency","Math","floor","PaymentFullStackTester","compDebug","stripePublicKey","setRefreshId","View_Panel","s"],"mappings":"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","file":"39-eeb5084321c0d9ba604d.js","sourcesContent":["import { JsonTyped } from 'utils/json';\r\n\r\nexport type JsonRpcRequestBody = {\r\n    jsonrpc: `2.0`;\r\n    id: string;\r\n    method: string;\r\n    params: unknown;\r\n};\r\n\r\nexport type JsonRpcResponseBody = {\r\n    jsonrpc: `2.0`;\r\n    id: string;\r\n    result?: unknown;\r\n    error?: unknown;\r\n};\r\n\r\nexport class JsonRpcError extends Error {\r\n    constructor(public message: string, public data?: unknown, public innerError?: Error) { super(); }\r\n}\r\n\r\n\r\n// Api Endpoints (used in app)\r\nexport type JsonRpcApiMethodNames<T> = { [K in keyof T]: T[K] extends (...args: infer PARAMS) => Promise<infer R> ? K : never };\r\nexport type JsonRpcApiMethods<T> = { [K in keyof T]: T[K] extends (...args: infer PARAMS) => Promise<infer R> ? (...args: PARAMS) => Promise<R> : never };\r\n\r\n// JsonRpc 2.0 Spec\r\nexport type JsonRpcCoreClient = {\r\n    request: (data: JsonRpcRequestBody) => Promise<JsonRpcResponseBody>;\r\n};\r\n\r\n// JsonRpc 2.0 Batching\r\nexport type JsonRpcBatchClient = {\r\n    batchRequest: (batchData: JsonRpcRequestBody[]) => Promise<JsonRpcResponseBody[]>;\r\n};\r\n\r\n// With Session (Credentials)\r\nexport type JsonRpcSessionClient = {\r\n    sessionRequest: (sessionData: JsonRpcSessionRequestBody) => Promise<JsonRpcSessionResponseBody>;\r\n}\r\n\r\nexport type JsonRpcSessionToken = unknown & { __type: 'JsonRpcSessionToken' };\r\nexport type JsonRpcSessionToken_New = undefined | null | JsonRpcSessionToken | 'reset';\r\n\r\nexport type JsonRpcSessionRequestBody = {\r\n    batchRequests: JsonRpcRequestBody[];\r\n    sessionToken?: JsonRpcSessionToken;\r\n};\r\n\r\nexport type JsonRpcSessionResponseBody = {\r\n    batchResponses: JsonRpcResponseBody[];\r\n    newSessionToken?: JsonRpcSessionToken_New;\r\n};\r\n\r\n// Web: Client => Server\r\nexport type JsonRpcWebClient = {\r\n    webRequest: (serverUrl: string, bodyObj: JsonRpcSessionRequestBody)\r\n        => Promise<{ responseBodyObj: JsonRpcSessionResponseBody }>;\r\n}\r\n\r\n// The cookies are an alternative storage for the sessionToken (HttpOnly, Secure)\r\nexport type JsonRpcWebJsonServer = {\r\n    respond: (requestBodyJson: JsonTyped<JsonRpcSessionRequestBody>, requestCookieJson?: JsonTyped<JsonRpcSessionToken>)\r\n        => Promise<{ responseBodyJson: JsonTyped<JsonRpcSessionResponseBody>, responseCookieJson?: JsonTyped<JsonRpcSessionToken>, responseCookieReset?: boolean }>;\r\n}\r\n\r\nexport type JsonRpcWebServer = {\r\n    respond: (requestBodyObj: JsonRpcSessionRequestBody, requestCookieObj?: JsonRpcSessionToken)\r\n        => Promise<{ responseBodyObj: JsonRpcSessionResponseBody, responseCookieObj?: JsonRpcSessionToken_New }>;\r\n}\r\n\r\nexport type JsonRpcSessionServer = {\r\n    respond: (sessionData: JsonRpcSessionRequestBody)\r\n        => Promise<JsonRpcSessionResponseBody>;\r\n}\r\n\r\nexport type JsonRpcBatchServer<TContext> = {\r\n    respond: (batchData: JsonRpcRequestBody[], context: TContext)\r\n        => Promise<{ responses: JsonRpcResponseBody[], newSessionToken?: JsonRpcSessionToken_New }>;\r\n}\r\n\r\nexport type JsonRpcCoreServer<TContext> = {\r\n    respond: (data: JsonRpcRequestBody, context: TContext)\r\n        => Promise<{ response: JsonRpcResponseBody, newSessionToken?: JsonRpcSessionToken_New }>;\r\n}\r\n\r\nexport type JsonRpcApiServer<TContext> = {\r\n    respond: (method: string, params: unknown, context: TContext)\r\n        => Promise<{ responseData: unknown, newSessionToken?: JsonRpcSessionToken_New }>;\r\n}\r\n","import { JsonRpcRequestBody, JsonRpcResponseBody } from './types';\r\n\r\nlet _nextId = 1000;\r\n\r\nexport const encodeJsonRpcRequestBody = (method: string, params: unknown): JsonRpcRequestBody => {\r\n    const id = `${_nextId++}`;\r\n    const data = {\r\n        jsonrpc: `2.0`,\r\n        method,\r\n        params,\r\n        id,\r\n    } as const;\r\n    return data;\r\n};\r\n\r\nexport const decodeJsonRpcRequestBody = <T>(body: {} & unknown): JsonRpcRequestBody => {\r\n    const data = body as {\r\n        jsonrpc: `2.0`;\r\n        method: string;\r\n        params: T;\r\n        id: string;\r\n    };\r\n    return data;\r\n};\r\n\r\nexport const encodeJsonRpcResponseData = (id: string, result: unknown): JsonRpcResponseBody => {\r\n    return {\r\n        jsonrpc: `2.0`,\r\n        id,\r\n        result: result ?? {},\r\n    };\r\n};\r\n\r\nexport const encodeJsonRpcResponseData_error = (id: string, error: unknown): JsonRpcResponseBody => {\r\n    return {\r\n        jsonrpc: `2.0`,\r\n        id,\r\n        error: error ?? {},\r\n    };\r\n};\r\n\r\nexport const decodeJsonRpcResponseBody = <T>(body: {} & unknown): JsonRpcResponseBody => {\r\n    const data = body as {\r\n        jsonrpc: `2.0`;\r\n        id: string;\r\n        result?: T;\r\n        error?: unknown;\r\n    };\r\n    return data;\r\n};\r\n","export class FetchError extends Error {\r\n    constructor(public message: string, public data?: unknown, public innerError?: Error) { super(); }\r\n}\r\n\r\nconst fetchWithTimeout = (url: string, options: RequestInit, timeout = 15000): Promise<Response> => {\r\n    let timeoutId = 0 as unknown as ReturnType<typeof setTimeout>;\r\n\r\n    const pTimeout: Promise<Response> = new Promise((resolve, reject) => {\r\n        timeoutId = setTimeout(() => {\r\n            const errorInfo = { isTimeout: true, message: `Web Api Timeout`, error: new FetchError(`Web Api Timeout`), details: { url, options } };\r\n            reject(errorInfo);\r\n        }, timeout);\r\n    });\r\n\r\n    const pMain = (async () => {\r\n        const result = await fetch(url, options)\r\n            .catch(error => {\r\n                throw new FetchError(`Fetch Error`, { url }, error);\r\n            });\r\n\r\n        clearTimeout(timeoutId);\r\n        return result;\r\n    })();\r\n\r\n    return Promise.race([pTimeout, pMain]);\r\n};\r\n\r\nexport const fetchJsonPost = async <TResponse extends {}>(url: string, data: unknown): Promise<TResponse> => {\r\n\r\n    const body = JSON.stringify(data);\r\n    const reqData: RequestInit = {\r\n        method: `POST`,\r\n        headers: {\r\n            'Accept': `application/json`,\r\n            'Content-Type': `application/json`,\r\n            'Content-Length': `${body.length}`,\r\n        },\r\n        body,\r\n        // Include Cookies\r\n        credentials: `include`,\r\n        // POST is always no-cache\r\n        cache: `no-cache`,\r\n    };\r\n\r\n    const result = await fetchWithTimeout(url, reqData)\r\n        .catch((error) => {\r\n            throw new FetchError(`Request Failure`, { url, data }, error);\r\n        });\r\n\r\n    if (!result.ok) {\r\n        throw new FetchError(`Api Error`, {\r\n            data: (await result.json().catch((error) => {/* Ignore */ })) ?? {},\r\n            responseStatus: result.status,\r\n            request: { url, data },\r\n        });\r\n    }\r\n    const resultObj = await result.json()\r\n        .catch((error) => {\r\n            throw new FetchError(`Request Parse Failure`, { url, data }, error);\r\n        });\r\n\r\n    return resultObj as TResponse;\r\n};\r\n","import { toKeyValueObject } from 'utils/objects';\r\nimport { delay } from 'utils/delay';\r\nimport { JsonRpcCoreClient, JsonRpcApiMethodNames, JsonRpcApiMethods, JsonRpcError, JsonRpcBatchClient, JsonRpcRequestBody, JsonRpcResponseBody, JsonRpcSessionClient, JsonRpcSessionToken, JsonRpcWebClient, JsonRpcSessionResponseBody } from './types';\r\nimport { encodeJsonRpcRequestBody, decodeJsonRpcResponseBody } from './json-body';\r\nimport { fetchJsonPost } from './web/fetch-request';\r\n\r\nconst createJsonRpcApiCoreClient = <T>(config: { inner: JsonRpcCoreClient, apiMethodNames: JsonRpcApiMethodNames<T> }): JsonRpcApiMethods<T> => {\r\n    const methodRequests = Object.keys(config.apiMethodNames).map(k => ({\r\n        method: k,\r\n        execute: async (params: unknown) => {\r\n            const data = encodeJsonRpcRequestBody(k, params);\r\n            const response = await config.inner.request(data);\r\n            const result = decodeJsonRpcResponseBody(response);\r\n\r\n            if (result.error) {\r\n                throw new JsonRpcError(`JsonRpcClient Request Failed`, { error: result.error });\r\n            }\r\n\r\n            return result.result;\r\n        },\r\n    }));\r\n\r\n    const methods = toKeyValueObject(methodRequests.map(x => ({ key: x.method, value: x.execute })));\r\n    return methods as JsonRpcApiMethods<T>;\r\n};\r\n\r\nconst createJsonRpcCoreBatchClient = (config: { inner: JsonRpcBatchClient }): JsonRpcCoreClient => {\r\n    const batchTimeMs = 50;\r\n    let newRequests = [] as {\r\n        data: JsonRpcRequestBody;\r\n        promiseState: {\r\n            _resolve: (value: JsonRpcResponseBody) => void;\r\n            _reject: (value: unknown) => void;\r\n        };\r\n    }[];\r\n\r\n    const coreClient: JsonRpcCoreClient = {\r\n        request: async (data) => {\r\n            const promiseState = {\r\n                _resolve: null as null | ((value: JsonRpcResponseBody) => void),\r\n                _reject: null as null | ((value: unknown) => void),\r\n            };\r\n            const prom = new Promise<JsonRpcResponseBody>((resolve, reject) => {\r\n                promiseState._resolve = resolve;\r\n                promiseState._reject = reject;\r\n            });\r\n\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            newRequests.push({ data, promiseState: { _resolve: promiseState._resolve!, _reject: promiseState._reject! } });\r\n            await delay(batchTimeMs);\r\n            if (newRequests.length <= 0) { return prom; }\r\n\r\n            const batchRequests = newRequests;\r\n            newRequests = [];\r\n\r\n            const result = await (async () => {\r\n                try {\r\n                    return {\r\n                        batchResponses: await config.inner.batchRequest(batchRequests.map(x => x.data)),\r\n                    };\r\n                } catch (error) {\r\n                    return {\r\n                        error,\r\n                    };\r\n                }\r\n            })();\r\n\r\n            if (result.error) {\r\n                batchRequests.forEach(req => {\r\n                    req.promiseState._reject(new JsonRpcError(`Request Failed`, { request: req.data, batchRequests }));\r\n                });\r\n                return prom;\r\n            }\r\n            for (const req of batchRequests) {\r\n                const { batchResponses } = result;\r\n                const res = batchResponses?.find(x => x.id === req.data.id);\r\n                if (!res) {\r\n                    req.promiseState._reject(new JsonRpcError(`Batch Response is Missing`, { request: req.data, batchRequests, batchResponses }));\r\n                    // throw new JsonRpcError(`Batch Response is Missing`, { request: req.data, batchRequests, batchResponses });\r\n                    continue;\r\n                }\r\n                req.promiseState._resolve(res);\r\n            }\r\n\r\n            return prom;\r\n        },\r\n    };\r\n    return coreClient;\r\n};\r\n\r\nexport type JsonRpcSessionStorage = {\r\n    getSessionToken: () => Promise<JsonRpcSessionToken>;\r\n    setSessionToken: (sessionToken: JsonRpcSessionToken) => Promise<void>;\r\n    resetSessionToken: () => Promise<void>;\r\n};\r\nconst createJsonRpcBatchSessionClient = (config: { inner: JsonRpcSessionClient, sessionTokenStorage?: JsonRpcSessionStorage }): JsonRpcBatchClient => {\r\n    const batchClient: JsonRpcBatchClient = {\r\n        batchRequest: async (batchData) => {\r\n            const sessionToken = await config.sessionTokenStorage?.getSessionToken();\r\n            const response = await config.inner.sessionRequest({ batchRequests: batchData, sessionToken });\r\n            if (config.sessionTokenStorage) {\r\n                if (response.newSessionToken === `reset`) {\r\n                    await config.sessionTokenStorage.resetSessionToken();\r\n                }\r\n                else if (response.newSessionToken) {\r\n                    await config.sessionTokenStorage.setSessionToken(response.newSessionToken);\r\n                }\r\n            }\r\n            return response.batchResponses;\r\n        },\r\n    };\r\n    return batchClient;\r\n};\r\n\r\nconst createJsonRpcSessionWebClient = (config: { inner: JsonRpcWebClient, serverUrl: string }): JsonRpcSessionClient => {\r\n    const sessionClient: JsonRpcSessionClient = {\r\n        sessionRequest: async (sessionData) => {\r\n            const response = await config.inner.webRequest(config.serverUrl, sessionData);\r\n            return response.responseBodyObj;\r\n        },\r\n    };\r\n    return sessionClient;\r\n};\r\n\r\nexport const createJsonRpcClient = <T>(config: { serverUrl: string, sessionTokenStorage?: JsonRpcSessionStorage, apiMethodNames: JsonRpcApiMethodNames<T> }) => {\r\n    const webClient: JsonRpcWebClient = {\r\n        webRequest: async (serverUrl: string, reqBody: unknown) => {\r\n            const response = await fetchJsonPost<JsonRpcSessionResponseBody>(serverUrl, reqBody);\r\n            return { responseBodyObj: response };\r\n        },\r\n    };\r\n    const sessionClient = createJsonRpcSessionWebClient({ serverUrl: config.serverUrl, inner: webClient });\r\n    const batchClient = createJsonRpcBatchSessionClient({ inner: sessionClient, sessionTokenStorage: config.sessionTokenStorage });\r\n    const coreClient = createJsonRpcCoreBatchClient({ inner: batchClient });\r\n    const apiClient = createJsonRpcApiCoreClient<T>({ inner: coreClient, apiMethodNames: config.apiMethodNames });\r\n    return apiClient;\r\n};\r\n","/* eslint-disable no-use-before-define */\r\n/* eslint-disable @typescript-eslint/no-use-before-define */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { theme } from 'themes/theme';\r\nimport { useAutoLoadingError } from 'utils-react/hooks';\r\nimport { C } from 'controls-react';\r\nimport { formatDate } from 'utils/dates';\r\nimport { PaymentMethodClientInfo, PaymentMethodStorageKey, PaymentProviderSavedPaymentMethodClientSetupToken, PaymentProviderSavedPaymentMethodClientToken, PaymentTransaction } from '../common/types';\r\nimport { createPaymentClientComponents_stripe } from '../providers/stripe/client/stripe-payment-react';\r\nimport { PaymentClientComponents, PaymentComponentStyle } from '../common/types-react';\r\n\r\nexport const createPaymentClientComponents = (params: { stripePublicKey: string }): PaymentClientComponents => {\r\n\r\n    const compStripe = createPaymentClientComponents_stripe(params);\r\n\r\n    const components: PaymentClientComponents = {\r\n        AppWrapperComponent: ({ children }) => {\r\n            if (!compStripe.AppWrapperComponent) { return (<>{children}</>); }\r\n            return (<compStripe.AppWrapperComponent>{children}</compStripe.AppWrapperComponent>);\r\n        },\r\n        PaymentMethodEntryComponent: (props) => {\r\n            return (\r\n                <compStripe.PaymentMethodEntryComponent {...props} />\r\n            );\r\n        },\r\n    };\r\n\r\n    return components;\r\n};\r\n\r\nexport type PaymentViewServerAccess = PaymentMethodViewServerAccess & PaymentHistoryViewServerAccess;\r\nexport const createPaymentClientComponents_extra = (params: { stripePublicKey: string, serverAccess: PaymentViewServerAccess }) => {\r\n    const comp = createPaymentClientComponents(params);\r\n    const compExtra = {\r\n        PaymentMethodView: (props: {}) => (<PaymentMethodView comp={comp} serverAccess={params.serverAccess} title='Payment Methods' />),\r\n        PaymentHistoryView: (props: {}) => (<PaymentHistoryView comp={comp} serverAccess={params.serverAccess} title='Payment History' />),\r\n    };\r\n\r\n    return {\r\n        ...comp,\r\n        ...compExtra,\r\n    };\r\n};\r\n\r\nexport type PaymentViewServerAccess_WithDebug = PaymentMethodViewServerAccess & PaymentHistoryViewServerAccess & PaymentDebugViewServerAccess;\r\nexport const createPaymentClientComponents_withDebug = (params: { stripePublicKey: string, serverAccess: PaymentViewServerAccess_WithDebug }) => {\r\n    const compExtra = createPaymentClientComponents_extra(params);\r\n    const compDebug = {\r\n        PaymentDebugView: (props: { onPurchase?: () => void }) => (<PaymentDebugView comp={compExtra} serverAccess={params.serverAccess} title='Payment Debug' onPurchase={props.onPurchase} />),\r\n    };\r\n\r\n    return {\r\n        ...compExtra,\r\n        ...compDebug,\r\n    };\r\n};\r\n\r\ntype PaymentMethodViewServerAccess = {\r\n    getPaymentMethods: () => Promise<PaymentMethodClientInfo[]>;\r\n    deletePaymentMethod: (key: PaymentMethodStorageKey) => Promise<void>;\r\n    onSetupPayment: () => Promise<PaymentProviderSavedPaymentMethodClientSetupToken>;\r\n    onPaymentMethodReady: (paymentMethodToken: PaymentProviderSavedPaymentMethodClientToken) => Promise<void>;\r\n};\r\nconst PaymentMethodView = (props: {\r\n    comp: PaymentClientComponents;\r\n    serverAccess: PaymentMethodViewServerAccess;\r\n    title: string;\r\n}) => {\r\n    const [style, setStyle] = useState({\r\n        textPadding: 4,\r\n        elementPadding: 4,\r\n        buttonAlignment: `right`,\r\n        borderRadius: 4,\r\n        borderColor: theme.colors.border,\r\n        backgroundColor: theme.colors.background_field,\r\n        textColor: theme.colors.text,\r\n        buttonText: `Save`,\r\n    } as PaymentComponentStyle);\r\n\r\n    const { loading, error, doWork } = useAutoLoadingError();\r\n\r\n    const [paymentMethods, setPaymentMethods] = useState(null as null | PaymentMethodClientInfo[]);\r\n    const populatePaymentMethods = () => doWork(async () => {\r\n        const result = await props.serverAccess.getPaymentMethods();\r\n        setPaymentMethods(result);\r\n    });\r\n\r\n    const deletePaymentMethod = (key: PaymentMethodStorageKey) => doWork(async () => {\r\n        await props.serverAccess.deletePaymentMethod(key);\r\n        populatePaymentMethods();\r\n    });\r\n\r\n    const [setupToken, setSetupToken] = useState(null as null | PaymentProviderSavedPaymentMethodClientSetupToken);\r\n    const setupPayment = () => doWork(async (stopIfObsolete) => {\r\n        const result = await props.serverAccess.onSetupPayment();\r\n        stopIfObsolete();\r\n        console.log(`setupPayment`, { result });\r\n        setSetupToken(result);\r\n    });\r\n\r\n    const onPaymentMethodReady = (paymentMethodToken: PaymentProviderSavedPaymentMethodClientToken) => doWork(async () => {\r\n        await props.serverAccess.onPaymentMethodReady(paymentMethodToken);\r\n        setSetupToken(null);\r\n        populatePaymentMethods();\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        populatePaymentMethods();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <C.View_Form>\r\n                <C.Text_FormTitle>{props.title}</C.Text_FormTitle>\r\n                <C.Loading loading={loading} />\r\n                <C.ErrorBox error={error} />\r\n\r\n                {paymentMethods && paymentMethods.length > 0 && (\r\n                    <C.View_FormFields>\r\n                        {paymentMethods.map(x => (\r\n                            <C.View_FieldRow key={x.key}>\r\n                                <C.Text_FieldLabel>{x.title}</C.Text_FieldLabel>\r\n                                <C.Text_FieldLabel>{`Expires: ${(`${x.expiration.month}`).padStart(2, `0`)}/${x.expiration.year}`}</C.Text_FieldLabel>\r\n                                <C.Button_FieldInline onPress={() => deletePaymentMethod(x.key)}>Remove</C.Button_FieldInline>\r\n                            </C.View_FieldRow>\r\n                        ))}\r\n                    </C.View_FormFields>\r\n                )}\r\n                {!setupToken && <C.View_FormActionRow><C.Button_FormAction onPress={setupPayment}>Add Payment Method</C.Button_FormAction></C.View_FormActionRow>}\r\n                {setupToken && <props.comp.PaymentMethodEntryComponent style={style} paymentMethodSetupToken={setupToken} onPaymentMethodReady={onPaymentMethodReady} />}\r\n            </C.View_Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\ntype PaymentHistoryViewServerAccess = {\r\n    getPayments: () => Promise<PaymentTransaction[]>;\r\n};\r\nconst PaymentHistoryView = (props: {\r\n    comp: PaymentClientComponents;\r\n    serverAccess: PaymentHistoryViewServerAccess;\r\n    title: string;\r\n}) => {\r\n    const { loading, error, doWork } = useAutoLoadingError();\r\n\r\n    const [payments, setPayments] = useState(null as null | PaymentTransaction[]);\r\n    const populatePayments = () => doWork(async (stopIfObsolete) => {\r\n        const result = await props.serverAccess.getPayments();\r\n        stopIfObsolete();\r\n        setPayments(result);\r\n    });\r\n\r\n    useEffect(() => {\r\n        populatePayments();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <C.View_Form>\r\n                <C.Text_FormTitle>{props.title}</C.Text_FormTitle>\r\n                <C.Loading loading={loading} />\r\n                <C.ErrorBox error={error} />\r\n                {payments && payments.length > 0 && (\r\n                    <C.View_FormFields>\r\n                        {payments.map(x => (\r\n                            <C.View_FieldRow key={`${x.created}`}>\r\n                                <C.Text_FieldLabel>{`Created: ${formatDate(x.created)}`}</C.Text_FieldLabel>\r\n                                <C.Text_FieldLabel>{`$${x.amount.usdCents / 100}`}</C.Text_FieldLabel>\r\n                            </C.View_FieldRow>\r\n                        ))}\r\n                    </C.View_FormFields>\r\n                )}\r\n            </C.View_Form>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\ntype PaymentDebugViewServerAccess = {\r\n    onMakePurchase: (amount: number) => Promise<void>;\r\n};\r\nconst PaymentDebugView = (props: {\r\n    comp: PaymentClientComponents;\r\n    serverAccess: PaymentDebugViewServerAccess;\r\n    title: string;\r\n    onPurchase?: () => void;\r\n}) => {\r\n    const { loading, error, doWork } = useAutoLoadingError();\r\n\r\n    const [purchaseAmount, setPurchaseAmount] = useState(100);\r\n    const makePurchase = () => doWork(async () => {\r\n        await props.serverAccess.onMakePurchase(purchaseAmount);\r\n        props.onPurchase?.();\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <C.View_Form>\r\n                <C.Text_FormTitle>Make Purchase</C.Text_FormTitle>\r\n                <C.Text_FormTitle>{props.title}</C.Text_FormTitle>\r\n                <C.Loading loading={loading} />\r\n                <C.ErrorBox error={error} />\r\n                <C.View_FormFields>\r\n                    <C.View_FieldRow>\r\n                        <C.Text_FieldLabel>Amount $</C.Text_FieldLabel>\r\n                        <C.Input_Currency value={purchaseAmount} onChange={(value) => setPurchaseAmount(value)} />\r\n                        <C.Button_FieldInline onPress={() => makePurchase()} >Purchase</C.Button_FieldInline>\r\n                    </C.View_FieldRow>\r\n                </C.View_FormFields>\r\n            </C.View_Form>\r\n        </>\r\n    );\r\n};\r\n","import { FullStackTestConfig } from './full-stack-test-config-types';\r\n\r\nexport const getFullStackTestConfig = async (): Promise<FullStackTestConfig> => {\r\n    const config = (await import(`./full-stack-test-config.secret`))?.fullStackTestConfig as FullStackTestConfig;\r\n    if (!config) {\r\n        throw new Error(`Create config file`);\r\n    }\r\n    return config;\r\n};\r\n","/* eslint-disable no-console */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { C } from 'controls-react';\r\nimport { createJsonRpcClient } from 'json-rpc/json-rpc-client-stack';\r\nimport { PaymentViewServerAccess_WithDebug, createPaymentClientComponents_withDebug } from '../client/payment-react';\r\nimport { PaymentProviderName, PaymentClientApi, PaymentMethodStorageKey } from '../common/types';\r\nimport { FullStackTestConfig } from './full-stack-test-config-types';\r\nimport { getFullStackTestConfig } from './full-stack-test-config';\r\n\r\nexport const PaymentFullStackTesterHost = (props: {}) => {\r\n\r\n    const [serverAccess, setServerAccess] = useState(null as null | PaymentViewServerAccess_WithDebug);\r\n    const [config, setConfig] = useState(null as null | FullStackTestConfig);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const c = await getFullStackTestConfig();\r\n            setConfig(c);\r\n            const server = createJsonRpcClient<PaymentClientApi>({\r\n                serverUrl: c.serverUrl,\r\n                // Use Cookies\r\n                // sessionTokenStorage: {\r\n                //     getSessionToken: async () => { try { return JSON.parse(localStorage.PaymentFullStackTesterHost_Credentials); } catch{ return null; } },\r\n                //     setSessionToken: async (value) => { localStorage.PaymentFullStackTesterHost_Credentials = JSON.stringify(value); },\r\n                //     resetSessionToken: async () => { localStorage.PaymentFullStackTesterHost_Credentials = undefined; },\r\n                // },\r\n                apiMethodNames: {\r\n                    setupSavedPaymentMethod: `setupSavedPaymentMethod`,\r\n                    saveSavedPaymentMethod: `saveSavedPaymentMethod`,\r\n                    getSavedPaymentMethods: `getSavedPaymentMethods`,\r\n                    deleteSavedPaymentMethod: `deleteSavedPaymentMethod`,\r\n                    debug_triggerPayment: `debug_triggerPayment`,\r\n                    getPayments: `getPayments`,\r\n                },\r\n            });\r\n\r\n            const providerName = `stripe` as PaymentProviderName;\r\n            const access: PaymentViewServerAccess_WithDebug = {\r\n                onSetupPayment: async () => {\r\n                    console.log(`onSetupPayment START`);\r\n                    const result = await server.setupSavedPaymentMethod({ providerName });\r\n                    console.log(`onSetupPayment END`, { result });\r\n                    return result;\r\n                },\r\n                onPaymentMethodReady: async (token) => {\r\n                    console.log(`onPaymentMethodReady START`);\r\n                    const result = await server.saveSavedPaymentMethod({ providerName, paymentMethodClientToken: token });\r\n                    console.log(`onPaymentMethodReady END`, { result });\r\n                    return result;\r\n                },\r\n                getPaymentMethods: async () => {\r\n                    console.log(`getPaymentMethods START`);\r\n                    const result = await server.getSavedPaymentMethods();\r\n                    console.log(`getPaymentMethods END`, { result });\r\n                    return result;\r\n                },\r\n                deletePaymentMethod: async (key: PaymentMethodStorageKey) => {\r\n                    console.log(`deletePaymentMethod`);\r\n                    await server.deleteSavedPaymentMethod({ key });\r\n                },\r\n                getPayments: async () => {\r\n                    console.log(`getPayments START`);\r\n                    const result = await server.getPayments();\r\n                    console.log(`getPayments END`, { result });\r\n                    return result;\r\n                },\r\n\r\n                // Debug\r\n                onMakePurchase: async (amount: number) => {\r\n                    console.log(`onMakePurchase`);\r\n                    await server.debug_triggerPayment({ amount: { currency: `usd`, usdCents: Math.floor(amount * 100) } });\r\n                },\r\n            };\r\n\r\n            setServerAccess(access);\r\n        })();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            {(!config || !serverAccess) && (<div>Loading...</div>)}\r\n            {config && serverAccess && <PaymentFullStackTester config={config} serverAccess={serverAccess} />}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const PaymentFullStackTester = (props: { config: FullStackTestConfig, serverAccess: PaymentViewServerAccess_WithDebug }) => {\r\n\r\n    const comp = createPaymentClientComponents_withDebug({ stripePublicKey: props.config.stripePublicKey, serverAccess: props.serverAccess });\r\n    const AppWrapperComponent = comp.AppWrapperComponent ?? (({ children }) => (<>{children}</>));\r\n\r\n    const [refreshId, setRefreshId] = useState(0);\r\n    const refresh = () => { setRefreshId(s => s + 1); };\r\n\r\n    return (\r\n        <AppWrapperComponent>\r\n            <C.View_Panel>\r\n                <C.View_Form>\r\n                    <C.Text_FormTitle>Page and Stuff...</C.Text_FormTitle>\r\n                </C.View_Form>\r\n                <comp.PaymentMethodView />\r\n                <comp.PaymentHistoryView />\r\n                <comp.PaymentDebugView onPurchase={refresh} />\r\n            </C.View_Panel>\r\n            {/* <TestControls /> */}\r\n        </AppWrapperComponent>\r\n    );\r\n};\r\n"],"sourceRoot":""}