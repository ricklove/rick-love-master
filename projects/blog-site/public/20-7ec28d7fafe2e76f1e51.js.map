{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/doodle/doodle-view.tsx"],"names":["emptyDrawing","width","height","segments","DoodleView","props","useState","doodle","setDoodle","DoodleSvg","style","color","backgroundColor","drawing","onChange","createLinePath","segment","points","length","x","y","slice","map","p","join","scale","setSegment","segmentClientStart","useRef","clientX","clientY","divHost","onPressIn","event","div","current","rect","getBoundingClientRect","Math","floor","onPressOut","s","onClientMove","pos","onMove","ref","onMouseDown","onMouseUp","onMouseMove","onMouseLeave","onTouchStart","touches","onTouchEnd","onTouchCancel","onTouchMove","onTouchEndCapture","viewBox","preserveAspectRatio","xmlns","d","stroke","fill"],"mappings":"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","file":"20-7ec28d7fafe2e76f1e51.js","sourcesContent":["/* eslint-disable jsx-a11y/no-static-element-interactions */\r\nimport React, { useState, useRef } from 'react';\r\n\r\ntype DoodleDrawing = {\r\n    width: number;\r\n    height: number;\r\n    segments: DoodleSegment[];\r\n};\r\ntype DoodleSegment = {\r\n    points: { x: number, y: number }[];\r\n};\r\n\r\n// const sampleDrawing: DoodleDrawing = {\r\n//     width: 128,\r\n//     height: 128,\r\n//     segments: [{\r\n//         points: [\r\n//             { x: 10, y: 10 },\r\n//             { x: 50, y: 10 },\r\n//             { x: 50, y: 50 },\r\n//             { x: 10, y: 50 },\r\n//             { x: 10, y: 10 },\r\n//         ],\r\n//     }],\r\n// };\r\n\r\nconst emptyDrawing: DoodleDrawing = {\r\n    width: 128,\r\n    height: 128,\r\n    segments: [],\r\n};\r\n\r\nexport const DoodleView = (props: {}) => {\r\n\r\n    const [doodle, setDoodle] = useState(emptyDrawing);\r\n\r\n    return (\r\n        <>\r\n            <DoodleSvg style={{ width: 256, height: 256, color: `#FFFFFF`, backgroundColor: `#000000` }} drawing={doodle} onChange={setDoodle} />\r\n        </>\r\n    );\r\n};\r\n\r\n// const createBezierCurvePath = (segment: DoodleSegment) => {\r\n//     const delta1 = {\r\n//         x: segment.points[2].x - segment.points[1].x,\r\n//         y: segment.points[2].y - segment.points[1].y,\r\n//     };\r\n//     const controlPoint = {\r\n//         x: segment.points[1].x - delta1.x * 0.5,\r\n//         y: segment.points[1].y - delta1.y * 0.5,\r\n//     };\r\n//     return `M${segment.points[0].x} ${segment.points[0].y} Q${controlPoint.x} ${controlPoint.y} ${segment.points[1].x} ${segment.points[1].y}T${segment.points.slice(2, -1).map(p => `${p.x} ${p.y}`).join(` `)}`;\r\n// };\r\n\r\nconst createLinePath = (segment: DoodleSegment) => {\r\n    if (segment.points.length <= 0) { return ``; }\r\n    if (segment.points.length === 1) { return `M${segment.points[0].x} ${segment.points[0].y} L${segment.points[0].x} ${segment.points[0].y}`; }\r\n\r\n    return `M${segment.points[0].x} ${segment.points[0].y} L${segment.points.slice(1).map(p => `${p.x} ${p.y}`).join(` `)}`;\r\n};\r\n\r\nconst DoodleSvg = (props: { style: { width: number, height: number, color: string, backgroundColor: string }, drawing: DoodleDrawing, onChange: (drawing: DoodleDrawing) => void }) => {\r\n    const { style, drawing, onChange } = props;\r\n    const scale = style.width / drawing.width;\r\n\r\n    const [segment, setSegment] = useState(null as null | DoodleSegment);\r\n    const segmentClientStart = useRef({ clientX: 0, clientY: 0, x: 0, y: 0 });\r\n    const divHost = useRef(null as null | HTMLDivElement);\r\n\r\n    const onPressIn = (event: { clientX: number, clientY: number }) => {\r\n        const div = divHost.current;\r\n        if (!div) { return; }\r\n\r\n        const rect = div.getBoundingClientRect();\r\n\r\n        setSegment({ points: [] });\r\n        segmentClientStart.current = {\r\n            clientX: event.clientX,\r\n            clientY: event.clientY,\r\n            x: Math.floor((event.clientX - rect.x) / scale),\r\n            y: Math.floor((event.clientY - rect.y) / scale),\r\n        };\r\n    };\r\n    const onPressOut = () => {\r\n        const s = segment;\r\n        if (!s) { return; }\r\n\r\n        onChange({\r\n            ...drawing,\r\n            segments: [...drawing.segments, s],\r\n        });\r\n        setSegment(null);\r\n    };\r\n    const onMove = (pos: { x: number, y: number }) => {\r\n        setSegment(s => {\r\n            if (!s) { return null; }\r\n            return { points: [...s.points, pos] };\r\n        });\r\n    };\r\n    const onClientMove = (event: { clientX: number, clientY: number }) => {\r\n        const pos = {\r\n            x: Math.floor((event.clientX - segmentClientStart.current.clientX) / scale) + segmentClientStart.current.x,\r\n            y: Math.floor((event.clientY - segmentClientStart.current.clientY) / scale) + segmentClientStart.current.y,\r\n        };\r\n\r\n        onMove(pos);\r\n    };\r\n\r\n    return (\r\n        <div ref={divHost} style={{ width: style.width, height: style.height, backgroundColor: style.backgroundColor }}\r\n            onMouseDown={onPressIn}\r\n            onMouseUp={onPressOut}\r\n            onMouseMove={onClientMove}\r\n            onMouseLeave={onPressOut}\r\n            onTouchStart={x => onPressIn(x.touches[0])}\r\n            onTouchEnd={onPressOut}\r\n            onTouchCancel={onPressOut}\r\n            onTouchMove={x => onClientMove(x.touches[0])}\r\n            onTouchEndCapture={onPressOut}>\r\n            <svg style={{ width: style.width, height: style.height }} viewBox={`0 0 ${drawing.width} ${drawing.height}`} preserveAspectRatio='none' xmlns='http://www.w3.org/2000/svg'>\r\n                {drawing.segments.map(x => (\r\n                    <path d={createLinePath(x)} stroke={style.color} fill='transparent' />\r\n                ))}\r\n                {segment && (\r\n                    <path d={createLinePath(segment)} stroke={style.color} fill='transparent' />\r\n                )}\r\n            </svg>\r\n        </div>\r\n    );\r\n};\r\n"],"sourceRoot":""}