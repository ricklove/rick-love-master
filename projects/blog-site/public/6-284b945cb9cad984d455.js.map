{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/games/educational-games/multiples-counting.tsx"],"names":["leaderboardService","createLeaderboard","storageKey","sortKey","x","timeMs","sortDescending","scoreColumns","name","getValue","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","mistakes","EducationalGame_MultiplesCounting","props","useState","key","startTime","Date","now","gameWonTime","gameScore","setGameScore","createDefaultGameBoardState","gameBoard","setGameBoard","gameInput","setGameInput","lastGameBoard","useRef","leaderboard","useLeaderboard","getScore","onGameWon","s","onCorrect","value","PetService","get","feed","newGameBoard","current","col","columns","find","multiple","maxTimesCorrect","times","setTimeout","nextInputState","onWrong","game","gameInputState","createGameInputState","useEffect","style","marginTop","marginBottom","padding","alignItems","width","GameScore","GameBoard","focus","GameInput","LeaderboardArea","gameOver","onScoreSaved","size","rows","Array","map","i","styles","cellView","height","backgroundColor","borderWidth","borderColor","borderStyle","justifyContent","focusCellView","cellHeaderView","focusCellHeaderView","cellText","fontFamily","fontSize","cellHeaderText","color","focusCellHeaderText","boardTick","setboardTick","id","setInterval","clearInterval","getBoardTickResult","flexDirection","r","c","borderLeftColor","borderRightColor","borderTopColor","borderBottomColor","includes","row","nextColumn","filter","buttons","m","t","correctValue","wrongValues","distinct","Math","round","random","slice","answers","shuffle","text","onPress","button","wasAnsweredWrong","onAnswer","inputStyles","outerContainer","container","margin","buttonView","buttonText","buttonText_wrong","y","setY","max","transform","scoreStyles","flex","mistakesText","timeMessage","setTimeMessage","mistakesMessage","setMistakesMessage"],"mappings":"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","file":"6-284b945cb9cad984d455.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { View, Text, TouchableOpacity } from 'react-native-lite';\r\nimport { distinct, shuffle } from 'utils/arrays';\r\nimport { createLeaderboard } from './components/leaderboard';\r\nimport { PetService } from './pet/pet-service';\r\n\r\n\r\nconst leaderboardService = createLeaderboard<{\r\n    mistakes: number;\r\n    timeMs: number;\r\n}>({\r\n    storageKey: `MultiplesCountingLeaderboard`,\r\n    sortKey: x => x.timeMs,\r\n    sortDescending: true,\r\n    scoreColumns: [\r\n        { name: `Time`, getValue: x => `${(x.timeMs / 1000).toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 })}` },\r\n        { name: `Mistakes`, getValue: x => `${x.mistakes}` },\r\n    ],\r\n});\r\n\r\nexport const EducationalGame_MultiplesCounting = (props: {}) => {\r\n\r\n    const [gameScore, setGameScore] = useState({ key: 0, startTime: Date.now(), gameWonTime: undefined, mistakes: 0 } as GameScoreState & { key: number });\r\n    const [gameBoard, setGameBoard] = useState(createDefaultGameBoardState());\r\n    const [gameInput, setGameInput] = useState(null as null | GameInputState);\r\n    const lastGameBoard = useRef(gameBoard);\r\n\r\n    const leaderboard = leaderboardService.useLeaderboard({\r\n        getScore: () => ({ mistakes: gameScore.mistakes, timeMs: (gameScore.gameWonTime ?? Date.now()) - gameScore.startTime }),\r\n    });\r\n\r\n    const onGameWon = () => {\r\n        setGameScore(s => ({ ...s, gameWonTime: Date.now(), key: s.key + 1 }));\r\n    };\r\n\r\n    const onScoreSaved = () => {\r\n        // Restart Game\r\n        const newGameBoard = createDefaultGameBoardState();\r\n        setGameScore({ key: 0, startTime: Date.now(), gameWonTime: undefined, mistakes: 0 });\r\n        setGameBoard(newGameBoard);\r\n        nextInputState(newGameBoard);\r\n    };\r\n\r\n    const onCorrect = (value: { multiple: number, times: number }) => {\r\n        PetService.get().feed();\r\n\r\n        const newGameBoard = { ...lastGameBoard.current };\r\n        const col = newGameBoard.columns.find(x => x.multiple === value.multiple);\r\n        if (col) {\r\n            col.maxTimesCorrect = value.times;\r\n        };\r\n\r\n        setGameBoard(newGameBoard);\r\n        // setGameInput(null);\r\n\r\n        setTimeout(() => {\r\n            nextInputState(newGameBoard);\r\n        }, 100);\r\n    };\r\n    const onWrong = (value: { multiple: number, times: number }) => {\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        setGameInput(s => ({ ...s! }));\r\n\r\n        setGameScore(s => ({ ...s, mistakes: s.mistakes + 1, key: s.key + 1 }));\r\n\r\n        // Reset column\r\n        // const newGameBoard = ({ ...gameBoard, columns: gameBoard.columns.map(x => x.multiple === value.multiple ? { maxTimesCorrect: 0, multiple: x.multiple } : x) });\r\n\r\n        // setGameBoard(newGameBoard);\r\n        // setGameInput(null);\r\n\r\n        // setTimeout(() => {\r\n        //     nextInputState(newGameBoard);\r\n        // }, 500);\r\n    };\r\n\r\n    const nextInputState = (game: GameBoardState) => {\r\n        const gameInputState = createGameInputState(game, onGameWon, onCorrect, onWrong);\r\n        setGameInput(gameInputState);\r\n    };\r\n\r\n    useEffect(() => {\r\n        nextInputState(gameBoard);\r\n    }, []);\r\n\r\n    lastGameBoard.current = gameBoard;\r\n\r\n    return (\r\n        <>\r\n            <View style={{ marginTop: 50, marginBottom: 150, padding: 2, alignItems: `center` }} >\r\n                <View style={{ width: 24 * 12 + 4 }}>\r\n                    <GameScore gameScore={gameScore} />\r\n                    <GameBoard gameBoard={gameBoard} focus={gameInput?.focus ?? { multiple: 0, times: 0 }} />\r\n                    {gameInput && !gameScore.gameWonTime && <GameInput gameInput={gameInput} />}\r\n                    <leaderboard.LeaderboardArea gameOver={!!gameScore.gameWonTime} onScoreSaved={onScoreSaved} />\r\n                </View>\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\ntype GameBoardState = {\r\n    size: number;\r\n    rows: { times: number }[];\r\n    columns: {\r\n        multiple: number;\r\n        maxTimesCorrect: number;\r\n    }[];\r\n};\r\n\r\nconst createDefaultGameBoardState = (): GameBoardState => {\r\n    const size = 12;\r\n    const gameBoard: GameBoardState = {\r\n        size,\r\n        rows: [...new Array(size)].map((x, i) => ({ times: i + 1 })),\r\n        columns: [...new Array(size)].map((x, i) => ({ multiple: i + 1, maxTimesCorrect: 0 })),\r\n    };\r\n\r\n    return gameBoard;\r\n};\r\n\r\nconst styles = {\r\n    cellView: {\r\n        width: 24,\r\n        height: 24,\r\n        backgroundColor: `rgba(0,0,0,0.75)`,\r\n        borderWidth: 1,\r\n        borderColor: `#111133`,\r\n        borderStyle: `solid`,\r\n        justifyContent: `center`,\r\n        alignItems: `center`,\r\n    },\r\n    focusCellView: {\r\n        width: 24,\r\n        height: 24,\r\n        borderWidth: 1,\r\n        borderColor: `#66FF66`,\r\n        borderStyle: `solid`,\r\n        justifyContent: `center`,\r\n        alignItems: `center`,\r\n    },\r\n    cellHeaderView: {\r\n        width: 24,\r\n        height: 24,\r\n        backgroundColor: `rgba(0,0,0,0.5)`,\r\n        borderWidth: 1,\r\n        borderColor: `#111133`,\r\n        borderStyle: `solid`,\r\n        justifyContent: `center`,\r\n        alignItems: `center`,\r\n    },\r\n    focusCellHeaderView: {\r\n        width: 24,\r\n        height: 24,\r\n        backgroundColor: `rgba(0,0,0,0.5)`,\r\n        borderWidth: 1,\r\n        borderColor: `#111133`,\r\n        borderStyle: `solid`,\r\n        justifyContent: `center`,\r\n        alignItems: `center`,\r\n    },\r\n    cellText: {\r\n        fontFamily: `\"Lucida Console\", Monaco, monospace`,\r\n        fontSize: 12,\r\n    },\r\n    cellHeaderText: {\r\n        fontFamily: `\"Lucida Console\", Monaco, monospace`,\r\n        fontSize: 12,\r\n        color: `#333300`,\r\n    },\r\n    focusCellHeaderText: {\r\n        fontFamily: `\"Lucida Console\", Monaco, monospace`,\r\n        fontSize: 12,\r\n        color: `#FFFF00`,\r\n    },\r\n} as const;\r\n\r\nconst GameBoard = ({ gameBoard, focus }: { gameBoard: GameBoardState, focus: { multiple: number, times: number } }) => {\r\n\r\n    const [boardTick, setboardTick] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setboardTick(0);\r\n        const id = setInterval(() => {\r\n            setboardTick(s => s + 1);\r\n        }, 1000);\r\n        return () => clearInterval(id);\r\n    }, [/* Keep Going */]);\r\n\r\n    const getBoardTickResult = () => {\r\n        return boardTick % 5 === 0 ? `row` :\r\n            boardTick % 5 === 1 ? `col` :\r\n                `both`;\r\n    };\r\n\r\n    const getBorderStyle = () => {\r\n        const s = getBoardTickResult();\r\n\r\n        if (s === `both`) {\r\n            return {\r\n                borderLeftColor: styles.focusCellView.borderColor,\r\n                borderRightColor: styles.focusCellView.borderColor,\r\n                borderTopColor: styles.focusCellView.borderColor,\r\n                borderBottomColor: styles.focusCellView.borderColor,\r\n            } as const;\r\n        }\r\n\r\n        return {\r\n            borderLeftColor: !s.includes(`col`) ? `rgba(0,0,0,0.15)` : `#000000`,\r\n            borderRightColor: !s.includes(`col`) ? `rgba(0,0,0,0.15)` : `#000000`,\r\n            borderTopColor: !s.includes(`row`) ? `rgba(0,0,0,0.15)` : `#000000`,\r\n            borderBottomColor: !s.includes(`row`) ? `rgba(0,0,0,0.15)` : `#000000`,\r\n        } as const;\r\n    };\r\n\r\n    const getCellText = (col: number, row: number) => {\r\n        const s = getBoardTickResult();\r\n\r\n        if (s === `both`) {\r\n            return `${col * row}`;\r\n        }\r\n\r\n        return ``;\r\n        // if (s === `row`) {\r\n        //     return `${col}`;\r\n        // }\r\n\r\n        // return `${row}`;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <View style={{ flexDirection: `row` }} >\r\n                <View style={{ flexDirection: `column-reverse` }} >\r\n                    <View style={styles.focusCellHeaderView} >\r\n                        <Text style={styles.focusCellHeaderText} >x</Text>\r\n                    </View>\r\n                    {gameBoard.rows.map((r) => (\r\n                        <View key={r.times} style={focus.times === r.times ? styles.focusCellHeaderView : styles.cellHeaderView} >\r\n                            <Text style={focus.times === r.times ? styles.focusCellHeaderText : styles.cellHeaderText}>{`${r.times}`}</Text>\r\n                        </View>\r\n                    ))}\r\n                </View>\r\n\r\n                {gameBoard.columns.map((c) => (\r\n                    <View key={c.multiple} style={{ flexDirection: `column-reverse` }} >\r\n                        <View style={focus.multiple === c.multiple ? styles.focusCellHeaderView : styles.cellHeaderView} >\r\n                            <Text style={focus.multiple === c.multiple ? styles.focusCellHeaderText : styles.cellHeaderText}>{`${c.multiple}`}</Text>\r\n                        </View>\r\n                        {gameBoard.rows.map((r) => (\r\n                            <View key={r.times} style={focus.times >= r.times && focus.multiple >= c.multiple ? [styles.focusCellView, getBorderStyle()] : styles.cellView} >\r\n                                {c.maxTimesCorrect >= r.times ? (\r\n                                    <Text style={styles.cellText}>{`${getCellText(c.multiple, r.times)}`}</Text>\r\n                                ) : (\r\n                                        <Text style={styles.cellText} />\r\n                                    )}\r\n                            </View>\r\n                        ))}\r\n                    </View>\r\n                ))}\r\n\r\n            </View>\r\n        </>\r\n    );\r\n};\r\ntype GameInputState = {\r\n    key: string;\r\n    focus: { multiple: number, times: number };\r\n    buttons: {\r\n        value: number;\r\n        text: string;\r\n        onPress: () => void;\r\n        wasAnsweredWrong: boolean;\r\n    }[];\r\n};\r\n\r\nconst createGameInputState = (gameBoard: GameBoardState, onGameWon: () => void, onCorrect: (value: { multiple: number, times: number }) => void, onWrong: (value: { multiple: number, times: number }) => void): GameInputState => {\r\n    const nextColumn = gameBoard.columns.filter(x => x.maxTimesCorrect < gameBoard.size)[0];\r\n    if (!nextColumn) {\r\n        // Win state - All Complete\r\n        onGameWon();\r\n        return { key: ``, focus: { multiple: 0, times: 0 }, buttons: [] };\r\n    }\r\n\r\n    const m = nextColumn.multiple;\r\n    const t = nextColumn.maxTimesCorrect + 1;\r\n\r\n    const correctValue = m * t;\r\n    const wrongAnswerCount = 4;\r\n    const wrongValues =\r\n        distinct(\r\n            [...new Array(100)].map(() =>\r\n                Math.round(m + 1 - 2 * Math.random())\r\n                * Math.round(t + 1 - 2 * Math.random())\r\n                + Math.round(2 - 4 * Math.random()))\r\n                .filter(x => x !== correctValue)\r\n                .filter(x => x > 0),\r\n        ).slice(0, wrongAnswerCount);\r\n\r\n    const answers = shuffle([correctValue, ...wrongValues]);\r\n\r\n    const onAnswer = (value: number) => {\r\n        if (value === correctValue) {\r\n            onCorrect({ multiple: m, times: t });\r\n            return;\r\n        }\r\n\r\n        const button = buttons.find(x => x.value === value);\r\n        if (!button) { return; }\r\n        button.wasAnsweredWrong = true;\r\n        onWrong({ multiple: m, times: t });\r\n    };\r\n\r\n    const buttons = answers.map(x => ({\r\n        value: x,\r\n        text: `${x}`,\r\n        onPress: () => onAnswer(x),\r\n        wasAnsweredWrong: false,\r\n    }));\r\n\r\n    return {\r\n        key: `${m}*${t}`,\r\n        focus: { multiple: m, times: t },\r\n        buttons,\r\n    };\r\n};\r\n\r\nconst inputStyles = {\r\n    outerContainer: {\r\n        height: 150,\r\n    },\r\n    container: {\r\n        flexDirection: `row`,\r\n        justifyContent: `space-around`,\r\n        margin: 16,\r\n    },\r\n    buttonView: {\r\n        width: 48,\r\n        height: 48,\r\n        borderWidth: 2,\r\n        borderColor: `#6666FF`,\r\n        borderStyle: `solid`,\r\n        justifyContent: `center`,\r\n        alignItems: `center`,\r\n    },\r\n    buttonText: {\r\n        fontFamily: `\"Lucida Console\", Monaco, monospace`,\r\n        fontSize: 24,\r\n        color: `#FFFFFF`,\r\n    },\r\n    buttonText_wrong: {\r\n        fontFamily: `\"Lucida Console\", Monaco, monospace`,\r\n        fontSize: 24,\r\n        color: `#FF6666`,\r\n    },\r\n} as const;\r\n\r\nconst GameInput = ({ gameInput }: { gameInput: GameInputState }) => {\r\n\r\n    const [y, setY] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setY(100);\r\n        const id = setInterval(() => {\r\n            setY(s => Math.max(0, s - 1));\r\n        }, 50);\r\n        return () => clearInterval(id);\r\n    }, [gameInput.key]);\r\n\r\n    // // Auto answer\r\n    // useEffect(() => {\r\n    //     const id = setInterval(() => {\r\n    //         gameInput.buttons[randomIndex(gameInput.buttons.length)].onPress();\r\n    //     }, 50);\r\n    //     return () => clearInterval(id);\r\n    // }, [gameInput.key]);\r\n\r\n    return (\r\n        <>\r\n            <View style={inputStyles.outerContainer}>\r\n                <View style={[inputStyles.container, { transform: `translate(0px,${y}px)` }]}>\r\n                    {gameInput.buttons.map(x => (\r\n                        <TouchableOpacity key={x.text + gameInput.key} onPress={x.wasAnsweredWrong ? () => {/* Ignore */ } : x.onPress}>\r\n                            <View style={inputStyles.buttonView}>\r\n                                <Text style={x.wasAnsweredWrong ? inputStyles.buttonText_wrong : inputStyles.buttonText}>{x.text}</Text>\r\n                            </View>\r\n                        </TouchableOpacity>))}\r\n                </View>\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nconst scoreStyles = {\r\n    container: {\r\n        flex: 1,\r\n        alignItems: `center`,\r\n        margin: 16,\r\n    },\r\n    text: {\r\n        fontFamily: `\"Lucida Console\", Monaco, monospace`,\r\n        fontSize: 14,\r\n        color: `#FFFF00`,\r\n    },\r\n    mistakesText: {\r\n        fontFamily: `\"Lucida Console\", Monaco, monospace`,\r\n        fontSize: 14,\r\n        color: `#FF6666`,\r\n    },\r\n} as const;\r\n\r\ntype GameScoreState = {\r\n    startTime: number;\r\n    gameWonTime?: number;\r\n    mistakes: number;\r\n};\r\n\r\nconst GameScore = ({ gameScore }: { gameScore: GameScoreState }) => {\r\n\r\n    const [timeMessage, setTimeMessage] = useState(``);\r\n    const [mistakesMessage, setMistakesMessage] = useState(``);\r\n\r\n    useEffect(() => {\r\n        const id = setInterval(() => {\r\n            setMistakesMessage(gameScore.mistakes ? `${gameScore.mistakes ?? 0} Mistakes` : ``);\r\n\r\n            if (gameScore.gameWonTime) {\r\n                const timeMs = gameScore.gameWonTime - gameScore.startTime;\r\n                setTimeMessage(s => `${(timeMs / 1000).toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 })} seconds`);\r\n                return;\r\n            }\r\n\r\n            const timeMs = Date.now() - gameScore.startTime;\r\n            setTimeMessage(s => `${(timeMs / 1000).toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 })} seconds`);\r\n        }, 100);\r\n        return () => clearInterval(id);\r\n    }, [gameScore]);\r\n\r\n    // console.log(`GameInput`);\r\n    return (\r\n        <>\r\n            <View style={scoreStyles.container}>\r\n                <View>\r\n                    <Text style={scoreStyles.text}>{timeMessage}</Text>\r\n                </View>\r\n                <View>\r\n                    <Text style={scoreStyles.mistakesText}>{mistakesMessage}</Text>\r\n                </View>\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n"],"sourceRoot":""}