{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/code-training/lesson-player/lesson-module-player-loader.tsx"],"names":["styles","container","background","containerPanel","buttonView","alignSelf","padding","margin","buttonText","fontSize","color","LessonModulePlayerLoader","props","useAutoLoadingError","loading","error","doWork","useState","lessonModule","setLessonModule","useEffect","stopIfObsolete","a","fetch","lesson","lessonJsonUrl","json","lessonModuleResult","setProjectState","projectState","iFrameUrl","lessonBuildRootUrl","filesHashCode","style","module"],"mappings":"0TAQMA,EAAS,CACXC,UAAW,CACPC,WAAY,WAEhBC,eAAgB,CACZD,WAAY,WAEhBE,WAAY,CACRF,WAAY,UACZG,UAAW,aACXC,QAAS,EACTC,OAAQ,GAEZC,WAAY,CACRC,SAAU,GACVC,MAAO,aAQFC,EAA2B,SAACC,GAAkC,MAEpCC,cAA3BC,EAF+D,EAE/DA,QAASC,EAFsD,EAEtDA,MAAOC,EAF+C,EAE/CA,OAF+C,EAG/BC,mBAAS,MAA1CC,EAHgE,KAGlDC,EAHkD,KAIvEC,qBAAU,WACNJ,EAAM,uCAAC,WAAOK,GAAP,eAAAC,EAAA,sEACqCC,MAAMX,EAAMY,OAAOC,eADxD,8BACwEC,OADxE,OACGC,EADH,OAEHR,EAAgBQ,GAFb,2CAAD,yDAIP,CAACf,EAAMY,SAEV,IAAMI,EAAgC,uCAAG,WAAOC,GAAP,SAAAP,EAAA,+EAC9B,CAAEQ,UAAclB,EAAMY,OAAOO,mBAAlB,kBAAsDF,EAAaG,gBADhD,2CAAH,sDAItC,OACI,oCACI,kBAAC,IAAD,CAAMC,MAAOjC,EAAOC,WAChB,kBAAC,IAAD,CAASa,QAASA,IAClB,kBAAC,IAAD,CAAUC,MAAOA,IAChBG,GACG,kBAAC,IAAD,CAAoBgB,OAAQhB,EAAcU,gBAAiBA","file":"21-cc57ed9181c588e416f5.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { TouchableOpacity, View, Text, TextInput } from 'react-native-lite';\r\nimport { ErrorBox } from 'controls-react/error-box';\r\nimport { Loading } from 'controls-react/loading';\r\nimport { useAutoLoadingError } from 'utils-react/hooks';\r\nimport { LessonModule, LessonProjectState, SetProjectState } from '../common/lesson-types';\r\nimport { LessonModulePlayer } from './lesson-module-player';\r\n\r\nconst styles = {\r\n    container: {\r\n        background: `#111111`,\r\n    },\r\n    containerPanel: {\r\n        background: `#292a2d`,\r\n    },\r\n    buttonView: {\r\n        background: `#1e1e1e`,\r\n        alignSelf: `flex-start`,\r\n        padding: 8,\r\n        margin: 1,\r\n    },\r\n    buttonText: {\r\n        fontSize: 14,\r\n        color: `#FFFFFFF`,\r\n    },\r\n} as const;\r\n\r\ntype LessonInfo = {\r\n    lessonJsonUrl: string;\r\n    lessonBuildRootUrl: string;\r\n};\r\nexport const LessonModulePlayerLoader = (props: { lesson: LessonInfo }) => {\r\n\r\n    const { loading, error, doWork } = useAutoLoadingError();\r\n    const [lessonModule, setLessonModule] = useState(null as null | LessonModule);\r\n    useEffect(() => {\r\n        doWork(async (stopIfObsolete) => {\r\n            const lessonModuleResult = await (await fetch(props.lesson.lessonJsonUrl)).json() as LessonModule;\r\n            setLessonModule(lessonModuleResult);\r\n        });\r\n    }, [props.lesson]);\r\n\r\n    const setProjectState: SetProjectState = async (projectState: LessonProjectState) => {\r\n        return { iFrameUrl: `${props.lesson.lessonBuildRootUrl}?filesHashCode=${projectState.filesHashCode}` };\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <View style={styles.container}>\r\n                <Loading loading={loading} />\r\n                <ErrorBox error={error} />\r\n                {lessonModule && (\r\n                    <LessonModulePlayer module={lessonModule} setProjectState={setProjectState} />\r\n                )}\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n"],"sourceRoot":""}