{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/networking/web-mesh/web-mesh-client-test.tsx"],"names":["key","Date","now","Math","random","WebMeshClientTestView","props","useState","webSocketHistory","setWebSocketHistory","meshState","setMeshState","clientKey","setClientKey","send","useRef","useEffect","webMeshClient","createWebMeshClient","channelKey","initialState","history","clients","reduceState","prev","m","receivedTimestamp","reduceClientsState","sub","subscribe","current","sendMessage","refreshWebsocketHistory","setInterval","messages","_webSocket","events","unsubscribe","close","clearInterval","messageText","setMessageText","text","timestamp","senderKey","style","padding","whiteSpace","fontSize","map","x","i","JSON","stringify","flexDirection","alignItems","flex","paddingRight","value","onChange","keyboardType","autoCompleteType","onSubmitEditing","onPress","lastActivityTimestamp"],"mappings":"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","file":"31-f2ac469b4753a2b9faf8.js","sourcesContent":["/* eslint-disable react/no-array-index-key */\r\nimport React, { useRef, useState, useEffect } from 'react';\r\nimport { View, Text, TouchableOpacity, TextInput } from 'react-native-lite';\r\nimport { createWebMeshClient } from './web-mesh-client';\r\n\r\nconst key = `${Date.now()}${Math.random()}`;\r\n\r\nexport const WebMeshClientTestView = (props: {}) => {\r\n\r\n    type TestMessage = {\r\n        text?: string;\r\n        timestamp: number;\r\n        receivedTimestamp?: number;\r\n        senderKey: string;\r\n    };\r\n    type TestState = {\r\n        history: TestMessage[];\r\n        clients: { key: string, lastActivityTimestamp: number }[];\r\n    };\r\n\r\n    const [webSocketHistory, setWebSocketHistory] = useState(null as null | { history: { messages: unknown[], events: unknown[] } });\r\n    const [meshState, setMeshState] = useState(null as null | TestState);\r\n    const [clientKey, setClientKey] = useState(null as null | string);\r\n    const send = useRef(null as null | ((message: TestMessage) => void));\r\n\r\n    useEffect(() => {\r\n        const webMeshClient = createWebMeshClient<TestState, TestMessage>({\r\n            channelKey: `test`,\r\n            initialState: { history: [], clients: [] },\r\n            reduceState: (prev, m) => ({ ...prev, history: [...prev.history, { ...m, receivedTimestamp: Date.now() }] }),\r\n            reduceClientsState: (prev, clients) => ({ ...prev, clients }),\r\n        });\r\n        setClientKey(webMeshClient.clientKey);\r\n        const sub = webMeshClient.subscribe((m) => {\r\n            setMeshState(m);\r\n        });\r\n\r\n        send.current = webMeshClient.sendMessage;\r\n\r\n        const refreshWebsocketHistory = setInterval(() => {\r\n            setWebSocketHistory({\r\n                history: {\r\n                    messages: [...webMeshClient._webSocket.history.messages],\r\n                    events: [...webMeshClient._webSocket.history.events],\r\n                },\r\n            });\r\n        }, 1000);\r\n\r\n        return () => {\r\n            sub.unsubscribe();\r\n            webMeshClient.close();\r\n            clearInterval(refreshWebsocketHistory);\r\n        };\r\n    }, []);\r\n\r\n    const [messageText, setMessageText] = useState(``);\r\n    const sendMessage = () => {\r\n        if (!send.current) { return; }\r\n        send.current?.({ text: messageText, timestamp: Date.now(), senderKey: key });\r\n        setMessageText(``);\r\n    };\r\n\r\n    return (\r\n        <View style={{ padding: 4 }}>\r\n            <View style={{ padding: 4 }}>\r\n                <Text style={{ whiteSpace: `pre-wrap`, fontSize: 18 }}>Messages</Text>\r\n                {meshState?.history.map((x, i) => (\r\n                    <View style={{ padding: 4 }}>\r\n                        <Text key={i} style={{ whiteSpace: `pre-wrap`, fontSize: 14 }}>{`${x.timestamp} ${(x?.receivedTimestamp ?? x.timestamp) - x.timestamp}: ${x.text ?? JSON.stringify(x)}`}</Text>\r\n                    </View>\r\n                ))}\r\n            </View>\r\n            <View style={{ padding: 4 }}>\r\n                <Text style={{ whiteSpace: `pre-wrap`, fontSize: 18 }}>Send Message</Text>\r\n                <View style={{ flexDirection: `row`, alignItems: `center` }}>\r\n                    <View style={{ flex: 1, paddingRight: 4 }}>\r\n                        <TextInput style={{ fontSize: 16 }} value={messageText} onChange={setMessageText} keyboardType='default' autoCompleteType='off' onSubmitEditing={sendMessage} />\r\n                    </View>\r\n                    <TouchableOpacity onPress={sendMessage} >\r\n                        <Text style={{ whiteSpace: `pre-wrap`, fontSize: 18 }}>Send</Text>\r\n                    </TouchableOpacity>\r\n                </View>\r\n            </View>\r\n\r\n            <View style={{ padding: 4 }}>\r\n                <Text style={{ whiteSpace: `pre-wrap`, fontSize: 18 }}>Client Key</Text>\r\n                <View style={{ padding: 4 }}>\r\n                    <Text style={{ whiteSpace: `pre-wrap`, fontSize: 14 }}>{`${clientKey}`}</Text>\r\n                </View>\r\n                <Text style={{ whiteSpace: `pre-wrap`, fontSize: 18 }}>Clients</Text>\r\n                {meshState?.clients.map((x, i) => (\r\n                    <View style={{ padding: 4 }}>\r\n                        <Text key={i} style={{ whiteSpace: `pre-wrap`, fontSize: 14 }}>{`${x.key} @ ${x.lastActivityTimestamp}`}</Text>\r\n                    </View>\r\n                ))}\r\n            </View>\r\n\r\n            <View style={{ padding: 4 }}>\r\n                <Text style={{ whiteSpace: `pre-wrap`, fontSize: 18 }}>WebSocket Events</Text>\r\n                {webSocketHistory?.history.events.map((x, i) => (\r\n                    <View style={{ padding: 4 }}>\r\n                        <Text key={i} style={{ whiteSpace: `pre-wrap`, fontSize: 14 }}>{`${JSON.stringify(x)}`}</Text>\r\n                    </View>\r\n                ))}\r\n            </View>\r\n            <View style={{ padding: 4 }}>\r\n                <Text style={{ whiteSpace: `pre-wrap`, fontSize: 18 }}>WebSocket Messages</Text>\r\n                {webSocketHistory?.history.messages.map((x, i) => (\r\n                    <View style={{ padding: 4 }}>\r\n                        <Text key={i} style={{ whiteSpace: `pre-wrap`, fontSize: 14 }}>{`${JSON.stringify(x)}`}</Text>\r\n                    </View>\r\n                ))}\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n"],"sourceRoot":""}