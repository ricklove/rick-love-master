{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/games/educational-games/problems/spelling/spelling-problem-service.ts","webpack:///D:/Projects/rick-love-master/code/games/educational-games/star-blast-sideways-with-subjects/star-blast-spelling.tsx"],"names":["createSpellingProblemService","speechService","maxAnswers","speech","spellingEntries","getSpellingEntries","sectionCount","Math","ceil","length","nextIndex","getSections","Array","map","x","i","gotoSection","name","parts","split","v","a","Number","parseInt","getNextProblem","p","correctValue","word","wrongAnswerCount","wrongValues","shuffle","distinct","mispellings","slice","key","question","onQuestion","speak","answers","value","isCorrect","isLastOfSection","isLastOfSubject","recordAnswer","console","log","random","randomItem","find","EducationalGame_StarBlastSideways_Spelling","props","useRef","createSpeechService","useState","Platform","OS","hasStarted","setHasStarted","languange","current","onClick","style","height","alignSelf","alignItems","justifyContent","fontSize","problemService","createReviewProblemService"],"mappings":"uqCAMO,IAAMA,EAA+B,SAAC,GAA6G,IAA3GC,EAA2G,EAA3GA,cAA2G,IAA5FC,kBAA4F,MAA/E,EAA+E,EAChJC,EAASF,EACTG,EAAkBC,cAElBC,EAAeC,KAAKC,KAAKJ,EAAgBK,OAD3B,IAGhBC,EAAY,EAEhB,MAAO,CACHC,YAAa,kBAAM,EAAI,IAAIC,MAAMN,IAAeO,KAAI,SAACC,EAAGC,GAAJ,mBAAsBA,EAAI,OAC9EC,YAAa,SAACC,GACV,IAAMC,EAAQD,EAAKE,MAAL,KACRC,EAAIF,EAAMA,EAAMT,OAAS,GACzBY,EAAIC,OAAOC,SAASH,EAAG,IAC7BV,EAXY,IAWCW,EAAI,IAErBG,eAAgB,WACRd,GAAaN,EAAgBK,SAC7BC,EAAY,GAGhB,IAAMK,EAAIL,EACVA,IAEA,IAAMe,EAAIrB,EAAgBW,GACpBW,EAAeD,EAAEE,KACjBC,EAAmB1B,EAAa,EAChC2B,EACFC,YAAQC,YAASN,EAAEO,cAAcC,MAAM,EAAGL,GAM9C,MAAO,CACHM,IAAK,IAAGnB,EAAI,GACZoB,SAAU,SAAQpB,EAAI,GACtBqB,WAAY,WAAQjC,EAAOkC,MAAMX,IACjCY,QAR6BR,YAAQ,GAAD,SAAKD,EAAYhB,KAAI,SAAAC,GAAC,MAAK,CAAEyB,MAAO,GAAGzB,EAAK0B,WAAW,OAAvD,CAAkE,CAAED,MAAO,GAAGb,EAAgBc,WAAW,MAAS3B,KAAI,SAAAC,GAAC,sCAAUA,GAAV,IAAaoB,IAAKpB,EAAEyB,WAS/KE,iBAPqB1B,EAAI,GA7BjB,IA6BsC,EAQ9C2B,gBAPoB3B,IAAMX,EAAgBK,OAAS,IAU3DkC,aAAc,SAAClB,EAAGJ,GACd,GAAKA,EAAEmB,UAcA,CAEH,GADAI,QAAQC,IAAR,wBACItC,KAAKuC,SAAW,GAAO,OAM3B3C,EAAOkC,MAAMU,YALG,CAAC,4CAAD,6CAjBF,SAYd5C,EAAOkC,MAAMU,YAVG,CAAC,oCAAD,oLAWhB5C,EAAOkC,MAAP,oBAAaZ,EAAEa,QAAQU,MAAK,SAAAlC,GAAC,OAAIA,EAAE0B,oBAAnC,aAAa,EAAkCD,aAA/C,gB,YCrDHU,EAA6C,SAACC,GACvD,IAAMjD,EAAgBkD,iBAAOC,eADwC,EAEjCC,mBAAS,QAAAC,IAASC,IAA/CC,EAF8D,KAElDC,EAFkD,KAKrE,IAAKD,EAAY,CAEb,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAcE,UAAU,KAAKzD,cAAeA,EAAc0D,UAC1D,yBAAKC,QAAS,kBAJA3D,EAAc0D,QAAQtB,MAAtB,cAAsCoB,GAAc,KAK9D,kBAAC,IAAD,CAAMI,MAAO,CAAEC,OAAQ,IAAKC,UAAW,SAAUC,WAAY,SAAUC,eAAgB,WACnF,kBAAC,IAAD,CAAMJ,MAAO,CAAEK,SAAU,KAAzB,YAOpB,OAAO,kBAAC,oCAAD,CAAmCC,eAAgBC,YAA2BpE,EAA6B,CAAEC,cAAeA,EAAc0D,UAAY","file":"25-a6224f30163f803eb5b7.js","sourcesContent":["import { distinct, shuffle } from 'utils/arrays';\r\nimport { randomItem } from 'utils/random';\r\nimport { SpeechService } from '../../utils/speech';\r\nimport { ProblemService, ProblemAnswer } from '../problems-service';\r\nimport { getSpellingEntries } from './spelling-entries';\r\n\r\nexport const createSpellingProblemService = ({ speechService, maxAnswers = 4 }: { speechService: SpeechService, maxAnswers?: number }): ProblemService => {\r\n    const speech = speechService;\r\n    const spellingEntries = getSpellingEntries();\r\n    const sectionSize = 25;\r\n    const sectionCount = Math.ceil(spellingEntries.length / sectionSize);\r\n\r\n    let nextIndex = 0;\r\n\r\n    return {\r\n        getSections: () => [...new Array(sectionCount)].map((x, i) => `Spelling ${i + 1}`),\r\n        gotoSection: (name: string) => {\r\n            const parts = name.split(` `);\r\n            const v = parts[parts.length - 1];\r\n            const a = Number.parseInt(v, 10);\r\n            nextIndex = (a - 1) * sectionSize;\r\n        },\r\n        getNextProblem: () => {\r\n            if (nextIndex >= spellingEntries.length) {\r\n                nextIndex = 0;\r\n            }\r\n\r\n            const i = nextIndex;\r\n            nextIndex++;\r\n\r\n            const p = spellingEntries[i];\r\n            const correctValue = p.word;\r\n            const wrongAnswerCount = maxAnswers - 1;\r\n            const wrongValues =\r\n                shuffle(distinct(p.mispellings)).slice(0, wrongAnswerCount);\r\n\r\n            const answers: ProblemAnswer[] = shuffle([...wrongValues.map(x => ({ value: `${x}`, isCorrect: false })), { value: `${correctValue}`, isCorrect: true }]).map(x => ({ ...x, key: x.value }));\r\n\r\n            const isLastOfSection = (i + 1) % sectionSize === 0;\r\n            const isLastOfSubject = i === spellingEntries.length - 1;\r\n            return {\r\n                key: `${i + 1}`,\r\n                question: `Word ${i + 1}`,\r\n                onQuestion: () => { speech.speak(correctValue); },\r\n                answers,\r\n                isLastOfSection,\r\n                isLastOfSubject,\r\n            };\r\n        },\r\n        recordAnswer: (p, a) => {\r\n            if (!a.isCorrect) {\r\n                // Demotivation!\r\n                const phrases = [\r\n                    `I've got a dog that spells better`,\r\n                    `That was horrible`,\r\n                    `What are you trying to do?`,\r\n                    `That is not a word`,\r\n                    `No, select the correct answer`,\r\n                    `Absolutely Incorrect`,\r\n                    `Completely Wrong`,\r\n                    `This is supposed to be English`,\r\n                ];\r\n                speech.speak(randomItem(phrases));\r\n                speech.speak(p.answers.find(x => x.isCorrect)?.value ?? ``);\r\n            } else {\r\n                console.log(`recordAnswer correct`);\r\n                if (Math.random() > 0.1) { return; }\r\n                const phrases = [\r\n                    `Good job! Thank you for the alien skulls.`,\r\n                    `Great! That's a nice pile of bones.`,\r\n                    // `Amazing! Keep getting better`,\r\n                ];\r\n                speech.speak(randomItem(phrases));\r\n            }\r\n        },\r\n    };\r\n};\r\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\nimport React, { useRef, useState } from 'react';\r\nimport { Text, View, Platform } from 'react-native-lite';\r\nimport { createSpeechService } from '../utils/speech';\r\nimport { EducationalGame_StarBlastSideways } from '../star-blast-sideways';\r\nimport { createReviewProblemService } from '../problems/problems-reviewer';\r\nimport { createSpellingProblemService } from '../problems/spelling/spelling-problem-service';\r\nimport { VoiceChooser } from './voice-chooser';\r\n\r\nexport const EducationalGame_StarBlastSideways_Spelling = (props: {}) => {\r\n    const speechService = useRef(createSpeechService());\r\n    const [hasStarted, setHasStarted] = useState(Platform.OS !== `web`);\r\n\r\n    // Only web\r\n    if (!hasStarted) {\r\n        const speak = () => { speechService.current.speak(`Start`); setHasStarted(true); };\r\n        return (\r\n            <View>\r\n                <VoiceChooser languange='en' speechService={speechService.current} />\r\n                <div onClick={() => speak()}>\r\n                    <View style={{ height: 300, alignSelf: `center`, alignItems: `center`, justifyContent: `center` }}>\r\n                        <Text style={{ fontSize: 36 }}>Start</Text>\r\n                    </View>\r\n                </div>\r\n            </View>\r\n        );\r\n    }\r\n\r\n    return <EducationalGame_StarBlastSideways problemService={createReviewProblemService(createSpellingProblemService({ speechService: speechService.current }), {})} />;\r\n};\r\n"],"sourceRoot":""}