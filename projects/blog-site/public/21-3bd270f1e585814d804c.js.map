{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/art/artwork/games/utils.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/games/event-provider.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/games/art-game.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/games/debug-drawing-tools.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/games/snake/snake.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/music/music-notes.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/music/beat.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/example-PavelDoGreat-fluid-simulation/fluid-snake.tsx","webpack:///D:/Projects/rick-love-master/code/utils/clamp.ts"],"names":["Vector2","add","a","b","x","y","subtract","divide","scale","lengthSq","distanceSq","equal","margin","Rect2","sizeRatio","Math","abs","position","size","scaleByPixelRatio","input","pixelRatio","window","devicePixelRatio","floor","createEventProvider","canvas","windowSubs","canvasSubs","clientToGamePosition","item","rectCached","rect","getBoundingClientRect","canvasPos","clientX","left","clientY","top","width","height","windowAddEventListener","name","handler","options","push","addEventListener","canvasAddEventListener","tools","getMouseGamePosition","e","getTouchPositions","pos","touches","i","length","touch","destroy","forEach","removeEventListener","createDebugGameView","game","gameCanvas","eventProvider","console","log","debugRenderer","debugState","getOrCreateState","document","createElement","parentElement","appendChild","style","pointerEvents","opacity","context","getContext","Error","getDisplaySize","getDebugColor","color","r","g","getPosition","uvPos","getSize","drawX","gamePosition","gameSize","undefined","strokeStyle","beginPath","moveTo","lineTo","stroke","drawBox","drawArrow","fromGamePos","toGamePos","fromPos","toPos","drawLabel","text","fillStyle","fillRect","font","fillText","createDebugDrawingTools","renderArgs","statsState","frameLast","time","Date","now","updateFrameTick","renderFrameTick","frame125","frame250","isVisible","autoResizeCanvas","clientWidth","clientHeight","setup","s","key","render","gameInstance","stats","frameA","frameB","toFixed","padStart","remove","entries","noteMap","snakeGame","createGame","timeProvider","environmentProvider","destroyed","state","environment","timeLast","timeMsStart","timeDelta","tick","gridSize","u","d","l","pointer","lastTime","player","id","targetGridPosition","targetPosition","velocity","sizeInit","color1","color2","color2Stength","segments","playerState","deadAtTime","restartAtTime","wasHitThisFrame","ateThisFrame","wasThisFrameOnBeat","beatIndex","timeNextTurn","nextDirection","food","foodState","toPositionFromGridPosition","gridPosition","adjustGridPositionForWall","addPlayerSegment","isStill","updatePlayer","random","ratio","gridUnitPerSec","pow","timePerUnit","deltaSegment","f","foodDelta","nextPlayerPosition_noTurn","turnNone","turnA","turnB","nextPlayerPosition_turnA","nextPlayerPosition_turnB","nextFoodDelta","turnAFoodDelta","turnBFoodDelta","willHitWall_turnA","willHitWall_turnB","willHit_turnA","some","willHit_turnB","updateAutoPilot","delta","moveDelta","entity","every","setPointerPosition","timeMs","preventDefault","subscribeEvents","update","error","isPaused","max","minTickTimeMs","gridUnitSize","splice","updateObstacles","displaySize","args","obstacles","renderEntity","kind","onPlayerReward","onPlayerHit","onBeat","positions","map","filter","removeEntity","data","p","setBackgroundVelocity","musicNotes","split","noteText","frequencyText","notes","frequency","parseFloat","Map","n","set","createAudio","voiceCount","audioContext","AudioContext","webkitAudioContext","compressor","finalMixNode","createDynamicsCompressor","connect","destination","mainFilterNode","createBiquadFilter","Q","value","type","sampleRate","mainGainNode","createGain","gain","mixNode","voices","Array","oscNode","createOscillator","gainNode","filterNode","createVoice","createBeatPlayer","createSong","replace","note","has","get","song1A","song1","song3","createRandomSong","mainNotes","mainOctave","randomItem","sSongSource","join","substr","audio","isStarted","iBeat","timePerBeat","timeLastBeat","shape","songs","scheduleNote","iVoice","timeOffset","timeForNote","audioTime","currentTime","freq","setValueAtTime","timeStart","timePlay","timePlayEnd","timeStop","linearRampToValueAtTime","start","v","beat","voiceLength","real","Float32Array","imag","wave","createPeriodicWave","disableNormalization","setPeriodicWave","updateWaveform","min","art_fluidSnakeGame","title","description","artist","getTokenDescription","tokenId","renderArt","hostElement","hash","recorder","sim","runFluidSimulator","disableGui","disableInput","disableStartupSplats","gameSource","beatPlayer","debugViewer","config","COLORFUL","CURL","resetBloomAtTimeMs","darkenAtTimeMs","darkenUntilTimeMs","frameTick","isDestroyed","BLOOM_INTENSITY","SUNRAYS_WEIGHT","getFrameTick","splat","MOTION_X","MOTION_Y","isWaitingForFrame","getRecorder","addFrame","requestAnimationFrame","setTimeout","close"],"mappings":"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","file":"21-3bd270f1e585814d804c.js","sourcesContent":["export type ColorRgb = { r: number, g: number, b: number };\r\nexport type Vector2 = { x: number, y: number };\r\nexport type Size2 = { width: number, height: number };\r\nexport type Rect2 = { position: Vector2, size: Vector2 };\r\n\r\nexport const Vector2 = {\r\n    add: (a: Vector2, b: Vector2) => {\r\n        return {\r\n            x: a.x + b.x,\r\n            y: a.y + b.y,\r\n        };\r\n    },\r\n    subtract: (a: Vector2, b: Vector2) => {\r\n        return {\r\n            x: a.x - b.x,\r\n            y: a.y - b.y,\r\n        };\r\n    },\r\n    divide: (a: Vector2, b: Vector2) => {\r\n        return {\r\n            x: a.x / b.x,\r\n            y: a.y / b.y,\r\n        };\r\n    },\r\n    scale: (a: number, b: Vector2) => {\r\n        return {\r\n            x: a * b.x,\r\n            y: a * b.y,\r\n        };\r\n    },\r\n    lengthSq: (a: Vector2) => {\r\n        return a.x * a.x + a.y * a.y;\r\n    },\r\n    distanceSq: (a: Vector2, b: Vector2) => {\r\n        return Vector2.lengthSq(Vector2.subtract(a,b));\r\n    },\r\n    equal: (a: Vector2, b: Vector2, margin = 0.0001) => {\r\n        return Vector2.distanceSq(a,b) <= margin;\r\n    },\r\n};\r\n\r\nexport const Rect2 = {\r\n    collidesRectangle: (a: Rect2, b: Rect2, sizeRatio = 1) => {\r\n        return Math.abs(a.position.x - b.position.x) < sizeRatio * 0.5 * (a.size.x + b.size.x)\r\n            && Math.abs(a.position.y - b.position.y) < sizeRatio * 0.5 * (a.size.y + b.size.y);\r\n    },\r\n};\r\n\r\nexport function scaleByPixelRatio(input: number) {\r\n    const pixelRatio = window.devicePixelRatio || 1;\r\n    return Math.floor(input * pixelRatio);\r\n}\r\n","import { scaleByPixelRatio, Vector2 } from './utils';\r\n\r\nexport type EventProvider = {\r\n    windowAddEventListener: Window['addEventListener'];\r\n    canvasAddEventListener: HTMLCanvasElement['addEventListener'];\r\n    tools: {\r\n        getMouseGamePosition: (e: MouseEvent) => Vector2;\r\n        getTouchPositions: (e: TouchEvent) => Vector2[];\r\n    };\r\n    destroy: () => void;\r\n};\r\n\r\nexport const createEventProvider = (canvas: HTMLCanvasElement): EventProvider => {\r\n    const windowSubs = [] as { name: string, handler: () => void }[];\r\n    const windowAddEventListener = ((name: string, handler: () => void, options?: boolean | AddEventListenerOptions) => {\r\n        windowSubs.push({ name, handler });\r\n        return window.addEventListener(name, handler, options);\r\n    }) as typeof window.addEventListener;\r\n    const windowEventListenersDestroy = () => {\r\n        windowSubs.forEach(({ name, handler }) => {\r\n            window.removeEventListener(name, handler);\r\n        });\r\n    };\r\n    const canvasSubs = [] as { name: string, handler: () => void }[];\r\n    const canvasAddEventListener = ((name: string, handler: () => void, options: boolean | AddEventListenerOptions) => {\r\n        if (!canvas) { return null; }\r\n\r\n        canvasSubs.push({ name, handler });\r\n        return canvas.addEventListener(name, handler, options);\r\n    }) as HTMLCanvasElement['addEventListener'];\r\n    const canvasEventListenersDestroy = () => {\r\n        canvasSubs.forEach(({ name, handler }) => {\r\n            canvas.removeEventListener(name, handler);\r\n        });\r\n    };\r\n\r\n    const clientToGamePosition = (item: { clientX: number, clientY: number }, rectCached?: DOMRect) => {\r\n        const rect = rectCached ?? canvas.getBoundingClientRect();\r\n        const canvasPos = {\r\n            x: item.clientX - rect.left,\r\n            y: item.clientY - rect.top,\r\n        };\r\n\r\n        const gamePos = {\r\n            x: scaleByPixelRatio(canvasPos.x) / canvas.width,\r\n            y: 1 - (scaleByPixelRatio(canvasPos.y) / canvas.height),\r\n        };\r\n        return gamePos;\r\n    };\r\n\r\n    return {\r\n        windowAddEventListener,\r\n        canvasAddEventListener,\r\n        tools: {\r\n            getMouseGamePosition: (e) => clientToGamePosition(e),\r\n            getTouchPositions: (e) => {\r\n                const rect = canvas.getBoundingClientRect();\r\n                const pos = [] as Vector2[];\r\n                const { touches } = e;\r\n                for (let i = 0; i < touches.length; i++) {\r\n                    const touch = touches.item(i);\r\n                    if (!touch) { continue; }\r\n\r\n                    pos.push(clientToGamePosition(touch, rect));\r\n                }\r\n                return pos;\r\n            },\r\n        },\r\n        destroy: () => {\r\n            windowEventListenersDestroy();\r\n            canvasEventListenersDestroy();\r\n        },\r\n    };\r\n};\r\n","import { EventProvider } from './event-provider';\r\nimport { createDebugDrawingTools, DebugDrawingTools } from './debug-drawing-tools';\r\nimport { TimeProvider } from '../../time-provider';\r\nimport { Vector2, Size2, scaleByPixelRatio } from './utils';\r\n\r\nexport type ArtGame<TRenderArgs> = {\r\n    name: string;\r\n    createGame: (\r\n        timeProvider: TimeProvider,\r\n        environmentProvider: { getDisplaySize: () => Size2 }\r\n    ) => {\r\n        setup: (eventProvider: EventProvider) => void;\r\n        update: () => void;\r\n        render: (renderCallbacks: TRenderArgs) => void;\r\n        destroy: () => void;\r\n    };\r\n    debugRenderer?: (tools: DebugDrawingTools, context: CanvasRenderingContext2D, canvas: HTMLCanvasElement,) => TRenderArgs;\r\n};\r\n\r\nexport const createDebugGameView = <TRenderArgs>(\r\n    game: ArtGame<TRenderArgs>,\r\n    gameCanvas: HTMLCanvasElement,\r\n    eventProvider: EventProvider,\r\n) => {\r\n    console.log(`createDebugGameView`, { game, gameCanvas });\r\n\r\n    if (!game.debugRenderer) { return null; }\r\n\r\n    const setup = () => {\r\n        if (!game.debugRenderer) { return null; }\r\n\r\n        const canvas = document.createElement(`canvas`);\r\n        gameCanvas.parentElement?.appendChild(canvas);\r\n        canvas.style.pointerEvents = `none`;\r\n        canvas.style.position = `absolute`;\r\n        canvas.style.left = `0`;\r\n        canvas.style.top = `0`;\r\n        canvas.style.opacity = `0.5`;\r\n        // canvas.style.backgroundColor = `#00FF0022`;\r\n\r\n        const autoResizeCanvas = () => {\r\n            const width = scaleByPixelRatio(gameCanvas.clientWidth);\r\n            const height = scaleByPixelRatio(gameCanvas.clientHeight);\r\n            if (canvas.width !== width || canvas.height !== height) {\r\n                canvas.width = width;\r\n                canvas.height = height;\r\n\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n\r\n        const context = canvas.getContext(`2d`);\r\n        if (!context) { throw new Error(`createDebugCanvas: Could not get context`); }\r\n\r\n        const tools = createDebugDrawingTools(context, () => ({ width: canvas.width, height: canvas.height }));\r\n        const renderArgs = game.debugRenderer(tools, context, canvas);\r\n        const statsState = {\r\n            frameLast: {\r\n                time: Date.now(),\r\n                updateFrameTick: 0,\r\n                renderFrameTick: 0,\r\n            },\r\n            frame125: {\r\n                time: Date.now(),\r\n                updateFrameTick: 0,\r\n                renderFrameTick: 0,\r\n            },\r\n            frame250: {\r\n                time: Date.now(),\r\n                updateFrameTick: 0,\r\n                renderFrameTick: 0,\r\n            },\r\n        };\r\n\r\n        return {\r\n            isVisible: false,\r\n            canvas,\r\n            context,\r\n            tools,\r\n            renderArgs,\r\n            statsState,\r\n            autoResizeCanvas,\r\n        };\r\n    };\r\n\r\n    let debugState = null as null | ReturnType<typeof setup>;\r\n    const getOrCreateState = () => {\r\n        if (!debugState) {\r\n            debugState = setup();\r\n        }\r\n        return debugState;\r\n    };\r\n\r\n    eventProvider.windowAddEventListener(`keydown`, e => {\r\n        const s = getOrCreateState();\r\n        if (!s) { return; }\r\n        if (e.key === `t`) {\r\n            // toggle debug\r\n            s.isVisible = !s.isVisible;\r\n            s.canvas.style.opacity = s.isVisible ? `0.5` : `0`;\r\n        }\r\n    });\r\n\r\n    return {\r\n        render: (gameInstance: { render: (renderCallbacks: TRenderArgs) => void }, stats: { updateFrameTick: number, renderFrameTick: number }) => {\r\n            if (!debugState) { return; }\r\n\r\n            const s = getOrCreateState();\r\n            if (!s) { return; }\r\n            if (!s.isVisible) { return; }\r\n\r\n            const {\r\n                canvas,\r\n                context,\r\n                tools,\r\n                renderArgs,\r\n                statsState,\r\n                autoResizeCanvas,\r\n            } = s;\r\n\r\n            // Stats\r\n            if (Date.now() > statsState.frame250.time + 250) {\r\n                statsState.frame250 = statsState.frame125;\r\n            }\r\n            if (Date.now() > statsState.frame125.time + 125) {\r\n                statsState.frame125 = statsState.frameLast;\r\n            }\r\n            statsState.frameLast = {\r\n                time: Date.now(),\r\n                renderFrameTick: stats.renderFrameTick,\r\n                updateFrameTick: stats.updateFrameTick,\r\n            };\r\n\r\n            // console.log(`DebugGameView render`, { game, gameInstance });\r\n            autoResizeCanvas();\r\n\r\n            // Erode\r\n            context.beginPath();\r\n            context.fillStyle = `#00000010`;\r\n            context.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n            tools.drawBox({ x: 0.5, y: 0.5 }, { x: 0.1, y: 0.1 }, `#00FF008`);\r\n            gameInstance.render(renderArgs);\r\n\r\n            const frameA = statsState.frame125;\r\n            const frameB = statsState.frame250;\r\n\r\n            tools.drawLabel({ x: 0, y: 0.1 }, `render fps: ${((frameA.renderFrameTick - frameB.renderFrameTick) * 1000 / (frameA.time - frameB.time)).toFixed(1).padStart(8, ` `)}`);\r\n            tools.drawLabel({ x: 0, y: 0.2 }, `update fps: ${((frameA.updateFrameTick - frameB.updateFrameTick) * 1000 / (frameA.time - frameB.time)).toFixed(1).padStart(8, ` `)}`);\r\n        },\r\n        destroy: () => {\r\n            if (!debugState) { return; }\r\n            debugState.canvas.remove();\r\n        },\r\n    };\r\n};\r\n","import { ColorRgb, Size2, Vector2 } from './utils';\r\n\r\nexport const createDebugDrawingTools = (context: CanvasRenderingContext2D, getDisplaySize: () => Size2) => {\r\n\r\n    const getDebugColor = (color: undefined | null | string | ColorRgb) =>\r\n        !color ? `#00FF00`\r\n            : typeof color === `string` ? color\r\n                : `rgb(${color.r},${color.g},${color.b})`;\r\n\r\n    const getPosition = (uvPos: Vector2) => {\r\n        const size = getDisplaySize();\r\n        return {\r\n            x: uvPos.x * size.width,\r\n            y: (1 - uvPos.y) * size.height,\r\n        };\r\n    };\r\n    const getSize = (uvPos: Vector2) => {\r\n        const size = getDisplaySize();\r\n        return {\r\n            x: uvPos.x * size.width,\r\n            y: uvPos.y * size.height,\r\n        };\r\n    };\r\n\r\n    const tools = {\r\n        drawX: (gamePosition: Vector2, gameSize?: Vector2, color?: string | ColorRgb) => {\r\n            const position = getPosition(gamePosition);\r\n            const size = gameSize ? getSize(gameSize) : undefined;\r\n            context.strokeStyle = getDebugColor(color);\r\n\r\n            const r = size ? { x: size.x / 2, y: size.y / 2 } : { x: 2, y: 2 };\r\n\r\n            context.beginPath();\r\n            context.moveTo(position.x - r.x, position.y - r.y);\r\n            context.lineTo(position.x + r.x, position.y + r.y);\r\n            context.moveTo(position.x - r.x, position.y + r.y);\r\n            context.lineTo(position.x + r.x, position.y - r.y);\r\n            context.stroke();\r\n        },\r\n        drawBox: (gamePosition: Vector2, gameSize?: Vector2, color?: string | ColorRgb) => {\r\n            const position = getPosition(gamePosition);\r\n            const size = gameSize ? getSize(gameSize) : undefined;\r\n            context.strokeStyle = getDebugColor(color);\r\n\r\n            const r = size ? { x: size.x / 2, y: size.y / 2 } : { x: 2, y: 2 };\r\n\r\n            context.beginPath();\r\n            context.moveTo(position.x - r.x, position.y - r.y);\r\n            context.lineTo(position.x - r.x, position.y + r.y);\r\n            context.lineTo(position.x + r.x, position.y + r.y);\r\n            context.lineTo(position.x + r.x, position.y - r.y);\r\n            context.lineTo(position.x - r.x, position.y - r.y);\r\n            context.stroke();\r\n        },\r\n        drawArrow: (fromGamePos: Vector2, toGamePos: Vector2, color?: string | ColorRgb) => {\r\n            const fromPos = getPosition(fromGamePos);\r\n            const toPos = getPosition(toGamePos);\r\n            context.strokeStyle = getDebugColor(color);\r\n\r\n            context.beginPath();\r\n            context.moveTo(fromPos.x, fromPos.y);\r\n            context.lineTo(toPos.x, toPos.y);\r\n            context.stroke();\r\n\r\n            tools.drawX(toGamePos, { x: 0.01, y: 0.01 }, color);\r\n        },\r\n        drawLabel: (gamePosition: Vector2, text: string, color?: string | ColorRgb) => {\r\n            const position = getPosition(gamePosition);\r\n\r\n            context.fillStyle = `#000000`;\r\n            context.fillRect(position.x, position.y - 24, 8 * text.length, 32);\r\n\r\n            context.fillStyle = getDebugColor(color);\r\n\r\n            context.beginPath();\r\n            context.font = `14px monospace`;\r\n            context.fillText(text, position.x, position.y);\r\n        },\r\n    };\r\n\r\n    return tools;\r\n};\r\nexport type DebugDrawingTools = ReturnType<typeof createDebugDrawingTools>;\r\n","import { ArtGame } from '../art-game';\r\nimport { EventProvider } from '../event-provider';\r\nimport { ColorRgb, Vector2, scaleByPixelRatio, Rect2 } from '../utils';\r\n\r\ntype EntityRenderData = {\r\n    id: number;\r\n    kind: 'player' | 'obstacle' | 'obstacle-still';\r\n    position: Vector2;\r\n    velocity: Vector2;\r\n    size: Vector2;\r\n    color: ColorRgb;\r\n};\r\ntype RenderArgs = {\r\n    onPlayerHit: (data: { position: Vector2 }) => void;\r\n    onPlayerReward: (data: { position: Vector2 }) => void;\r\n    onBeat: (data: { beatIndex: number, positions: Vector2[] }) => void;\r\n    renderEntity: (data: EntityRenderData) => void;\r\n    removeEntity: (id: number) => void;\r\n    setBackgroundVelocity: (data: { velocity: Vector2 }) => void;\r\n};\r\nexport const snakeGame: ArtGame<RenderArgs> = {\r\n    name: `Snake`,\r\n    createGame: (timeProvider, environmentProvider) => {\r\n\r\n        let destroyed = false;\r\n\r\n        const MOTION_X = -0.1;\r\n        const MOTION_Y = -0.025;\r\n\r\n        const COLOR_STRENGTH = 1;\r\n\r\n        type Entity = {\r\n            id: number;\r\n            color: ColorRgb;\r\n            position: Vector2;\r\n            velocity: Vector2;\r\n            size: Vector2;\r\n            isStill: boolean;\r\n        };\r\n        type Segment = Entity & {\r\n            targetPosition: Vector2;\r\n        };\r\n        const state = {\r\n            environment: {\r\n                time: 0,\r\n                timeLast: timeProvider.now(),\r\n                timeMsStart: timeProvider.now(),\r\n                timeDelta: 0,\r\n                tick: 0,\r\n                size: { x: 600, y: 600 },\r\n                gridSize: { x: 16, y: 9 },\r\n            },\r\n            input: {\r\n                u: false,\r\n                d: false,\r\n                l: false,\r\n                r: false,\r\n                pointer: null as null | {\r\n                    position: Vector2;\r\n                    timeMs: number;\r\n                },\r\n                lastTime: -1000,\r\n            },\r\n            player: {\r\n                id: 42,\r\n                position: { x: 0.5, y: 0.5 },\r\n                targetGridPosition: { x: 10, y: 10 },\r\n                targetPosition: { x: 0.5, y: 0.5 },\r\n                velocity: { x: 0, y: 0 },\r\n                size: { x: 0.01, y: 0.01 },\r\n                sizeInit: { x: 0.01, y: 0.01 },\r\n                color: { r: COLOR_STRENGTH, g: COLOR_STRENGTH, b: COLOR_STRENGTH },\r\n                color1: { r: COLOR_STRENGTH, g: COLOR_STRENGTH, b: COLOR_STRENGTH },\r\n                color2: { r: COLOR_STRENGTH, g: COLOR_STRENGTH, b: COLOR_STRENGTH },\r\n                color2Stength: 0.5,\r\n                segments: [] as Segment[],\r\n            },\r\n            playerState: {\r\n                deadAtTime: null as null | number,\r\n                restartAtTime: null as null | number,\r\n                wasHitThisFrame: false,\r\n                ateThisFrame: false,\r\n                wasThisFrameOnBeat: false,\r\n                beatIndex: 0,\r\n                timeNextTurn: 0,\r\n                nextDirection: { x: 1, y: 0 },\r\n            },\r\n            food: [] as Entity[],\r\n            foodState: {},\r\n        };\r\n\r\n        const toPositionFromGridPosition = (gridPosition: Vector2) => {\r\n            return Vector2.divide(\r\n                Vector2.add(gridPosition, { x: 0.5, y: 0.5 }),\r\n                Vector2.add(state.environment.gridSize, { x: 1, y: 1 }));\r\n        };\r\n\r\n        const adjustGridPositionForWall = (gridPosition: Vector2) => {\r\n            const g = { ...gridPosition };\r\n            const s = state.environment.gridSize;\r\n            if (g.x < 0) { g.x = 0; }\r\n            if (g.y < 0) { g.y = 0; }\r\n            if (g.x > s.x) { g.x = s.x; }\r\n            if (g.y > s.y) { g.y = s.y; }\r\n\r\n            return g;\r\n        };\r\n\r\n        const updateAutoPilot = () => {\r\n            const { player, playerState, input, environment: { time, timeDelta, size } } = state;\r\n\r\n            if (time < state.input.lastTime + 15) { return; }\r\n\r\n            // Turn toward the food\r\n            const f = state.food[0];\r\n            if (!f){ return; }\r\n\r\n            const foodDelta = Vector2.subtract(f.position, player.position);\r\n            const nextPlayerPosition_noTurn = toPositionFromGridPosition(Vector2.add(player.targetGridPosition, playerState.nextDirection));\r\n\r\n            const turnNone = playerState.nextDirection;\r\n            const turnA = {\r\n                x: playerState.nextDirection.y,\r\n                y: playerState.nextDirection.x,\r\n            };\r\n            const turnB = {\r\n                x: -playerState.nextDirection.y,\r\n                y: -playerState.nextDirection.x,\r\n            };\r\n            const nextPlayerPosition_turnA = toPositionFromGridPosition(Vector2.add(player.targetGridPosition, turnA));\r\n            const nextPlayerPosition_turnB = toPositionFromGridPosition(Vector2.add(player.targetGridPosition, turnB));\r\n\r\n            // Turn to food\r\n            const nextFoodDelta = Vector2.subtract(f.position, nextPlayerPosition_noTurn);\r\n            const isGoingTowardsFood = Vector2.lengthSq(nextFoodDelta) < Vector2.lengthSq(foodDelta);\r\n\r\n            if (!isGoingTowardsFood && Math.random() < 0.75){\r\n\r\n                const turnAFoodDelta = Vector2.subtract(f.position, nextPlayerPosition_turnA);\r\n                const turnBFoodDelta = Vector2.subtract(f.position, nextPlayerPosition_turnB);\r\n\r\n                if (Vector2.lengthSq(turnAFoodDelta) < Vector2.lengthSq(turnBFoodDelta)){\r\n                    playerState.nextDirection = turnA;\r\n                } else {\r\n                    playerState.nextDirection = turnB;\r\n                }\r\n            }\r\n\r\n            // Avoid hit\r\n            const willHitWall_turnA = !Vector2.equal(nextPlayerPosition_turnA, adjustGridPositionForWall(nextPlayerPosition_turnA));\r\n            const willHitWall_turnB = !Vector2.equal(nextPlayerPosition_turnB, adjustGridPositionForWall(nextPlayerPosition_turnB));\r\n\r\n            const willHit_turnA = willHitWall_turnA || player.segments.some(x => Vector2.equal(x.targetPosition, nextPlayerPosition_turnA));\r\n            const willHit_turnB = willHitWall_turnB || player.segments.some(x => Vector2.equal(x.targetPosition, nextPlayerPosition_turnB));\r\n            if (willHit_turnA && willHit_turnB){\r\n                playerState.nextDirection = turnNone;\r\n                return;\r\n            }\r\n            if (willHit_turnA){\r\n                playerState.nextDirection = turnB;\r\n                return;\r\n            }\r\n            if (willHit_turnB){\r\n                playerState.nextDirection = turnA;\r\n                return;\r\n            }\r\n        };\r\n\r\n        const addPlayerSegment = () => {\r\n            const { player } = state;\r\n            const s = player.segments[player.segments.length - 1] ?? player;\r\n\r\n            player.segments.push({\r\n                id: 1000 + player.segments.length,\r\n                isStill: false,\r\n                color: { ...player.color },\r\n                position: { ...s.position },\r\n                velocity: { ...s.velocity },\r\n                size: { ...s.size },\r\n                targetPosition: Vector2.add({ ...s.targetPosition }, { x: 0.001, y: 0 }),\r\n            });\r\n\r\n            const GROWTH_SCALE = 1.01;\r\n            player.size = Vector2.scale(GROWTH_SCALE, player.size);\r\n            player.segments.forEach(x => {x.size = Vector2.scale(GROWTH_SCALE, x.size); });\r\n        };\r\n\r\n        const updatePlayer = () => {\r\n            const { player, playerState, input, environment: { time, timeDelta, size } } = state;\r\n\r\n            // Player color\r\n            player.color2Stength += timeDelta * 1;\r\n            if (player.color2Stength > 1) {\r\n                player.color1 = player.color2;\r\n                player.color2 = {\r\n                    r: 1 * COLOR_STRENGTH * 0.5 * Math.random(),\r\n                    g: 1 * COLOR_STRENGTH * 0.5 * Math.random(),\r\n                    b: 1 * COLOR_STRENGTH * 0.5 * Math.random(),\r\n                };\r\n                player.color2Stength = 0;\r\n            }\r\n\r\n\r\n            const ratio = player.color2Stength;\r\n            player.color = {\r\n                r: (1 - ratio) * player.color1.r + ratio * player.color2.r,\r\n                g: (1 - ratio) * player.color1.g + ratio * player.color2.g,\r\n                b: (1 - ratio) * player.color1.b + ratio * player.color2.b,\r\n            };\r\n\r\n            // Player motion\r\n            if (input.l){ playerState.nextDirection = { x: -1, y: +0 }; }\r\n            if (input.r){ playerState.nextDirection = { x: +1, y: +0 }; }\r\n            if (input.u){ playerState.nextDirection = { x: +0, y: +1 }; }\r\n            if (input.d){ playerState.nextDirection = { x: +0, y: -1 }; }\r\n\r\n            const gridUnitPerSec = 3 * Math.pow(1.01, player.segments.length);\r\n            const timePerUnit = 1 / gridUnitPerSec;\r\n\r\n            // Change directions\r\n            if (time > playerState.timeNextTurn){\r\n                playerState.timeNextTurn = time + timePerUnit;\r\n                playerState.wasThisFrameOnBeat = true;\r\n\r\n                // Segments\r\n                for (let i = player.segments.length - 1; i >= 0; i--){\r\n                    player.segments[i].targetPosition = player.segments[i - 1]?.targetPosition ?? player.targetPosition;\r\n                    const deltaSegment = Vector2.subtract(player.segments[i].targetPosition, player.segments[i].position);\r\n                    player.segments[i].velocity = {\r\n                        x: deltaSegment.x * gridUnitPerSec,\r\n                        y: deltaSegment.y * gridUnitPerSec,\r\n                    };\r\n                }\r\n\r\n                // If autopilot\r\n                updateAutoPilot();\r\n\r\n                player.targetGridPosition = playerState.deadAtTime ? player.targetGridPosition\r\n                    : Vector2.add(player.targetGridPosition, playerState.nextDirection);\r\n\r\n                // Block\r\n                player.targetGridPosition = adjustGridPositionForWall(player.targetGridPosition);\r\n\r\n                player.targetPosition = toPositionFromGridPosition(player.targetGridPosition);\r\n                const delta = Vector2.subtract(player.targetPosition, player.position);\r\n                player.velocity = {\r\n                    x: delta.x * gridUnitPerSec,\r\n                    y: delta.y * gridUnitPerSec,\r\n                };\r\n\r\n                // // TEST\r\n                // if( Math.random() < 0.25 ){\r\n                //     addPlayerSegment();\r\n                // }\r\n\r\n            }\r\n\r\n            // const speedX = 0.9;\r\n            // const speedY = speedX * size.x / size.y;\r\n\r\n            // Smooth movement\r\n            // player.position.x += timeDelta * player.velocity.x;\r\n            // player.position.y += timeDelta * player.velocity.y;\r\n\r\n            // Jumpy movement\r\n            const moveDelta = Vector2.scale(0.2, Vector2.subtract(player.targetPosition, player.position));\r\n            player.position.x += moveDelta.x;\r\n            player.position.y += moveDelta.y;\r\n\r\n            // Segments\r\n            for (const s of player.segments){\r\n                s.position.x += timeDelta * s.velocity.x;\r\n                s.position.y += timeDelta * s.velocity.y;\r\n            }\r\n\r\n            // Wrap\r\n            // if (player.position.x < 0) { player.position.x = 1; player.targetPosition = player.position; }\r\n            // if (player.position.x > 1) { player.position.x = 0; player.targetPosition = player.position; }\r\n            // if (player.position.y < 0) { player.position.y = 1; player.targetPosition = player.position; }\r\n            // if (player.position.y > 1) { player.position.y = 0; player.targetPosition = player.position; }\r\n\r\n            // Collisions\r\n            for (const entity of player.segments) {\r\n                if (Vector2.distanceSq(entity.targetPosition, player.targetPosition) <= 0) {\r\n                    state.playerState.wasHitThisFrame = true;\r\n                    state.playerState.deadAtTime = time;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Reset player if all segments have been smashed\r\n            if (state.playerState.deadAtTime && !state.playerState.restartAtTime){\r\n                const allAtPlayer = player.segments.every(x => Vector2.distanceSq(x.targetPosition, player.targetPosition) <= 0.01);\r\n                if (allAtPlayer){\r\n                    playerState.restartAtTime = time + 3;\r\n                }\r\n            }\r\n            if (state.playerState.restartAtTime && time > state.playerState.restartAtTime){\r\n                player.segments = [];\r\n                playerState.deadAtTime = null;\r\n                playerState.restartAtTime = null;\r\n                player.size = { ...player.sizeInit };\r\n            }\r\n        };\r\n\r\n        const updateObstacles = () => {\r\n            const { player, food, foodState, environment: { time, timeDelta } } = state;\r\n            const gridUnitSize = Vector2.divide({ x: 1, y: 1 }, state.environment.gridSize);\r\n\r\n            if (food.length <= 0){\r\n                food.push({\r\n                    id: 10000 + food.length,\r\n                    color: player.color,\r\n                    isStill: true,\r\n                    position: { x: 0.1 + 0.8 * Math.random(), y: 0.1 + 0.8 * Math.random() },\r\n                    size: gridUnitSize,\r\n                    velocity: { x: 0, y: 0 },\r\n                });\r\n            }\r\n            // if (time > obstaclesState.timeNextObstacle) {\r\n            //     obstaclesState.timeNextObstacle = time + 1.5;\r\n\r\n            //     let freeObstacle = obstacles.find(x => x.position.x < -0.25);\r\n            //     if (!freeObstacle) {\r\n            //         freeObstacle = {\r\n            //             id: obstacles.length + 1000,\r\n            //             position: { x: 1.25, y: 0.1 },\r\n            //             velocity: { x: -0.125, y: 0 },\r\n            //             color: { r: 0.01, g: 0, b: 0 },\r\n            //             size: { x: 0.05, y: 0.05 },\r\n            //             isStill: false,\r\n            //         };\r\n            //         // Add an obstacle\r\n            //         obstacles.push(freeObstacle);\r\n            //     }\r\n\r\n            //     freeObstacle.color = { r: COLOR_STRENGTH * Math.random(), g: COLOR_STRENGTH * Math.random(), b: COLOR_STRENGTH * Math.random() };\r\n\r\n            //     const motionSignX = Math.sign(MOTION_X);\r\n\r\n            //     freeObstacle.position = { x: motionSignX * -1.05, y: Math.random() };\r\n            //     freeObstacle.velocity = {\r\n            //         x: motionSignX * (0.05 + 0.25 * Math.random()),\r\n            //         y: (0.2 + 0.1 - 0.2 * Math.random()),\r\n            //     };\r\n            //     freeObstacle.isStill = Math.random() < 0.1;\r\n\r\n            //     freeObstacle.size = { x: 0.05 + 0.01 * Math.random(), y: 0.05 + 0.01 * Math.random() };\r\n            // }\r\n\r\n            // for (const entity of obstacles) {\r\n            //     if (entity.isStill) {\r\n            //         entity.velocity = { x: MOTION_X, y: MOTION_Y };\r\n            //     }\r\n\r\n            //     entity.position.x += entity.velocity.x * timeDelta;\r\n            //     entity.position.y += entity.velocity.y * timeDelta;\r\n\r\n            //     // Gravity\r\n            //     entity.velocity.y -= timeDelta * 0.1;\r\n            // }\r\n\r\n            // Collisions\r\n            for (const [i, entity] of food.entries()) {\r\n                if (Rect2.collidesRectangle(entity, player, 0.8)) {\r\n                    state.playerState.ateThisFrame = true;\r\n                    addPlayerSegment();\r\n\r\n                    food.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n\r\n        };\r\n\r\n        const minTickTimeMs = 16;\r\n        const update = () => {\r\n            // console.log(`game.update START`, {});\r\n\r\n            if (destroyed) {\r\n                console.error(`game.update DESTROYED`, {});\r\n                return;\r\n            }\r\n\r\n            if (timeProvider.isPaused()) {\r\n                console.log(`game.update timeProvider.PAUSED`, {});\r\n                return;\r\n            }\r\n\r\n\r\n            const size = environmentProvider.getDisplaySize();\r\n            state.environment.size = { x: size.width, y: size.height };\r\n            state.environment.timeLast = state.environment.time;\r\n            state.environment.time = 0.001 * (timeProvider.now() - state.environment.timeMsStart);\r\n            state.environment.timeDelta = Math.max(minTickTimeMs * 0.001 * 0.5, state.environment.time - state.environment.timeLast);\r\n            // console.log(`gameInverval`, { environment: state.environment });\r\n\r\n            state.playerState.ateThisFrame = false;\r\n            state.playerState.wasHitThisFrame = false;\r\n            state.playerState.wasThisFrameOnBeat = false;\r\n            updatePlayer();\r\n            updateObstacles();\r\n\r\n            // Fix sizes\r\n            const displaySize = environmentProvider.getDisplaySize();\r\n            for (const x of [state.player, ...state.food]) {\r\n                x.size.y = x.size.x * displaySize.width / displaySize.height;\r\n            }\r\n\r\n            state.environment.tick++;\r\n\r\n            // console.log(`game.update DONE`, {});\r\n        };\r\n\r\n        const render = (args: RenderArgs) => {\r\n            const { player, playerState, food: obstacles } = state;\r\n\r\n            // args.setBackgroundVelocity({\r\n            //     velocity: {\r\n            //         x: MOTION_X,\r\n            //         y: MOTION_Y,\r\n            //     },\r\n            // });\r\n\r\n            // Render Player\r\n            args.renderEntity({\r\n                id: player.id,\r\n                kind: `player`,\r\n                position: player.position,\r\n                velocity: player.velocity,\r\n                size: player.size,\r\n                color: player.color,\r\n            });\r\n\r\n            if (playerState.ateThisFrame) {\r\n                args.onPlayerReward({ position: player.segments[player.segments.length - 1].position });\r\n            }\r\n\r\n            if (playerState.wasHitThisFrame) {\r\n                args.onPlayerHit({ position: player.position });\r\n            }\r\n\r\n            if (playerState.wasThisFrameOnBeat) {\r\n                args.onBeat({\r\n                    beatIndex: playerState.beatIndex,\r\n                    positions: [player.position, ...player.segments.map(x => x.position)\r\n                        .filter(x => !Vector2.equal(x, player.position))],\r\n                });\r\n                playerState.beatIndex++;\r\n            }\r\n\r\n            // Render player segments\r\n            for (const s of player.segments) {\r\n                args.renderEntity({\r\n                    id: s.id,\r\n                    kind: `obstacle`,\r\n                    position: s.position,\r\n                    velocity: s.velocity,\r\n                    size: s.size,\r\n                    color: s.color,\r\n                });\r\n            }\r\n\r\n            // Render Entities\r\n            for (const entity of obstacles) {\r\n\r\n                const isHidden = entity.position.x < -0.25\r\n                    || entity.position.x > 1.25\r\n                    || entity.position.y < -0.25\r\n                    || entity.position.y > 1.25;\r\n\r\n                if (isHidden) {\r\n                    args.removeEntity(entity.id);\r\n                    continue;\r\n                }\r\n\r\n                if (entity.isStill) {\r\n                    args.renderEntity({\r\n                        id: entity.id,\r\n                        kind: `obstacle-still`,\r\n                        position: entity.position,\r\n                        velocity: { x: 0, y: 0 },\r\n                        size: entity.size,\r\n                        color: entity.color,\r\n                    });\r\n                    continue;\r\n                }\r\n\r\n                args.renderEntity({\r\n                    id: entity.id,\r\n                    kind: `obstacle`,\r\n                    position: entity.position,\r\n                    velocity: entity.velocity,\r\n                    size: entity.size,\r\n                    color: entity.color,\r\n                });\r\n            }\r\n        };\r\n\r\n\r\n        const subscribeEvents = ({ windowAddEventListener, canvasAddEventListener, tools }: EventProvider) => {\r\n            windowAddEventListener(`keydown`, e => {\r\n                if (e.key === `w` || e.key === `ArrowUp`) { state.input.u = true; state.input.lastTime = state.environment.time; }\r\n                if (e.key === `a` || e.key === `ArrowLeft`) { state.input.l = true; state.input.lastTime = state.environment.time; }\r\n                if (e.key === `s` || e.key === `ArrowDown`) { state.input.d = true; state.input.lastTime = state.environment.time; }\r\n                if (e.key === `d` || e.key === `ArrowRight`) { state.input.r = true; state.input.lastTime = state.environment.time; }\r\n            });\r\n            windowAddEventListener(`keyup`, e => {\r\n                if (e.key === `w` || e.key === `ArrowUp`) { state.input.u = false; state.input.lastTime = state.environment.time; }\r\n                if (e.key === `a` || e.key === `ArrowLeft`) { state.input.l = false; state.input.lastTime = state.environment.time; }\r\n                if (e.key === `s` || e.key === `ArrowDown`) { state.input.d = false; state.input.lastTime = state.environment.time; }\r\n                if (e.key === `d` || e.key === `ArrowRight`) { state.input.r = false; state.input.lastTime = state.environment.time; }\r\n            });\r\n\r\n            const setPointerPosition = (gamePosition: Vector2) => {\r\n                state.input.pointer = {\r\n                    position: gamePosition,\r\n                    timeMs: timeProvider.now(),\r\n                };\r\n            };\r\n\r\n            canvasAddEventListener(`mousedown`, e => {\r\n                setPointerPosition(tools.getMouseGamePosition(e));\r\n            });\r\n\r\n            canvasAddEventListener(`mousemove`, e => {\r\n\r\n                // Check if mouse active\r\n                if (!state.input.pointer\r\n                    || timeProvider.now() > state.input.pointer.timeMs + 1000) { return; }\r\n\r\n                setPointerPosition(tools.getMouseGamePosition(e));\r\n            });\r\n\r\n            canvasAddEventListener(`touchstart`, e => {\r\n                setPointerPosition(tools.getTouchPositions(e)[0]);\r\n                e.preventDefault();\r\n                return false;\r\n            });\r\n\r\n            canvasAddEventListener(`touchmove`, e => {\r\n                setPointerPosition(tools.getTouchPositions(e)[0]);\r\n                e.preventDefault();\r\n                return false;\r\n            }, false);\r\n        };\r\n\r\n        return {\r\n            setup: (eventProvider) => {\r\n                subscribeEvents(eventProvider);\r\n            },\r\n            update,\r\n            render,\r\n            destroy: () => {\r\n                destroyed = true;\r\n            },\r\n        };\r\n    },\r\n    debugRenderer: (tools) => {\r\n        return {\r\n            onPlayerHit: (data) => {\r\n                tools.drawX(data.position, { x: 0.1, y: 0.1 }, `#FF0000`);\r\n            },\r\n            onPlayerReward: (data) => {\r\n                tools.drawX(data.position, { x: 0.1, y: 0.1 }, `#0000FF`);\r\n            },\r\n            onBeat: (data) => {\r\n                data.positions.forEach(p => {\r\n                    tools.drawX(p, { x: 0.1, y: 0.1 }, `#00FFFF`);\r\n                });\r\n            },\r\n            renderEntity: (data) => {\r\n                tools.drawBox(data.position, data.size, data.kind === `player` ? `#0000FF` : undefined);\r\n                tools.drawArrow(data.position, Vector2.add(data.position, data.velocity), data.kind === `player` ? `#0000FF` : undefined);\r\n            },\r\n            removeEntity: (id) => {\r\n                // tools.drawBox(data.position, data.size, `#FF000000`);\r\n            },\r\n            setBackgroundVelocity: (data) => {\r\n                tools.drawArrow({ x: 0.5, y: 0.5 }, Vector2.add({ x: 0.5, y: 0.5 }, data.velocity), `#FFFF00`);\r\n            },\r\n        };\r\n    },\r\n};\r\n","const parseMusicNotes = (doc: string) => {\r\n    const lines = doc\r\n        .split(`\\n`)\r\n        .filter(x => x);\r\n\r\n    const entries = lines.map(l => {\r\n        const [noteText, frequencyText] = l.split(` `).filter(x => x);\r\n        const notes = noteText.split(`/`).filter(y => y).map(y => y as NoteName);\r\n        return {\r\n            notes,\r\n            frequency: parseFloat(frequencyText),\r\n        };\r\n    });\r\n    const noteMap = new Map<NoteName, number>();\r\n    entries.forEach(x => x.notes.forEach(n => noteMap.set(n, x.frequency)));\r\n    return noteMap;\r\n};\r\n\r\ntype NoteKey =\r\n| 'C'\r\n| 'C#' | 'Db'\r\n| 'D'\r\n| 'D#' | 'Eb'\r\n| 'E'\r\n| 'F'\r\n| 'F#' | 'Gb'\r\n| 'G'\r\n| 'G#' | 'Ab'\r\n| 'A'\r\n| 'A#' | 'Bb'\r\n| 'B'\r\n    ;\r\ntype NoteOctave =\r\n| '0'\r\n| '1'\r\n| '2'\r\n| '3'\r\n| '4'\r\n| '5'\r\n| '6'\r\n| '7'\r\n| '8'\r\n;\r\nexport type NoteName = `${NoteKey}${NoteOctave}`;\r\n\r\nexport const musicNotes = parseMusicNotes(`\r\nC0        16.35                 \r\nC#0/Db0   17.32                         \r\nD0        18.35                 \r\nD#0/Eb0   19.45                         \r\nE0        20.60                 \r\nF0        21.83                 \r\nF#0/Gb0   23.12                         \r\nG0        24.50                 \r\nG#0/Ab0   25.96                         \r\nA0        27.50                 \r\nA#0/Bb0   29.14                         \r\nB0        30.87                 \r\nC1        32.70                 \r\nC#1/Db1   34.65                         \r\nD1        36.71                 \r\nD#1/Eb1   38.89                         \r\nE1        41.20                 \r\nF1        43.65                 \r\nF#1/Gb1   46.25                         \r\nG1        49.00                 \r\nG#1/Ab1   51.91                         \r\nA1        55.00                 \r\nA#1/Bb1   58.27                         \r\nB1        61.74                 \r\nC2        65.41                 \r\nC#2/Db2   69.30                         \r\nD2        73.42                 \r\nD#2/Eb2   77.78                         \r\nE2        82.41                 \r\nF2        87.31                 \r\nF#2/Gb2   92.50                         \r\nG2        98.00                 \r\nG#2/Ab2   103.83                         \r\nA2        110.00                 \r\nA#2/Bb2   116.54                         \r\nB2        123.47                 \r\nC3        130.81                 \r\nC#3/Db3   138.59                         \r\nD3        146.83                 \r\nD#3/Eb3   155.56                         \r\nE3        164.81                 \r\nF3        174.61                 \r\nF#3/Gb3   185.00                         \r\nG3        196.00                 \r\nG#3/Ab3   207.65                         \r\nA3        220.00                 \r\nA#3/Bb3   233.08                         \r\nB3        246.94                 \r\nC4        261.63                 \r\nC#4/Db4   277.18                         \r\nD4        293.66                 \r\nD#4/Eb4   311.13                         \r\nE4        329.63                 \r\nF4        349.23                 \r\nF#4/Gb4   369.99                         \r\nG4        392.00                 \r\nG#4/Ab4   415.30                         \r\nA4        440.00                 \r\nA#4/Bb4   466.16                         \r\nB4        493.88                 \r\nC5        523.25                 \r\nC#5/Db5   554.37                         \r\nD5        587.33                 \r\nD#5/Eb5   622.25                         \r\nE5        659.25                 \r\nF5        698.46                 \r\nF#5/Gb5   739.99                         \r\nG5        783.99                 \r\nG#5/Ab5   830.61                         \r\nA5        880.00                 \r\nA#5/Bb5   932.33                         \r\nB5        987.77                 \r\nC6        1046.50                 \r\nC#6/Db6   1108.73                         \r\nD6        1174.66                 \r\nD#6/Eb6   1244.51                         \r\nE6        1318.51                 \r\nF6        1396.91                 \r\nF#6/Gb6   1479.98                         \r\nG6        1567.98                 \r\nG#6/Ab6   1661.22                         \r\nA6        1760.00                 \r\nA#6/Bb6   1864.66                         \r\nB6        1975.53                 \r\nC7        2093.00                 \r\nC#7/Db7   2217.46                         \r\nD7        2349.32                 \r\nD#7/Eb7   2489.02                         \r\nE7        2637.02                 \r\nF7        2793.83                 \r\nF#7/Gb7   2959.96                         \r\nG7        3135.96                 \r\nG#7/Ab7   3322.44                         \r\nA7        3520.00                 \r\nA#7/Bb7   3729.31                         \r\nB7        3951.07                 \r\nC8        4186.01                 \r\nC#8/Db8   4434.92                         \r\nD8        4698.63                 \r\nD#8/Eb8   4978.03                         \r\nE8        5274.04                 \r\nF8        5587.65                 \r\nF#8/Gb8   5919.91                         \r\nG8        6271.93                 \r\nG#8/Ab8   6644.88                         \r\nA8        7040.00                 \r\nA#8/Bb8   7458.62                         \r\nB8        7902.13                 \r\n`);\r\n","import { randomItem, randomOrder } from 'utils/random';\r\nimport { Vector2 } from '../games/utils';\r\nimport { musicNotes, NoteName } from './music-notes';\r\n\r\nconst createAudio = (voiceCount: number) => {\r\n    const audioContext = (() => {\r\n        try {\r\n            const AudioContext = (window.AudioContext || (window as unknown as { webkitAudioContext: AudioContext }).webkitAudioContext);\r\n            return new AudioContext();\r\n        } catch {\r\n            console.error(`The Web Audio API is apparently not supported in this browser.`);\r\n            return null;\r\n        }\r\n    })();\r\n    if (!audioContext){ return null; }\r\n\r\n    const finalMixNode = !audioContext.createDynamicsCompressor ? audioContext.destination\r\n        : (() => {\r\n            const compressor = audioContext.createDynamicsCompressor();\r\n            compressor.connect(audioContext.destination);\r\n            return compressor;\r\n        })();\r\n\r\n    const mainFilterNode = audioContext.createBiquadFilter();\r\n    mainFilterNode.Q.value = 1;\r\n    mainFilterNode.type = `lowpass`;\r\n    mainFilterNode.frequency.value = 0.5 * audioContext.sampleRate;\r\n    mainFilterNode.connect(finalMixNode);\r\n\r\n    // Create master volume.\r\n    const mainGainNode = audioContext.createGain();\r\n    mainGainNode.gain.value = 0.7; // reduce overall volume to avoid clipping\r\n    mainGainNode.connect(mainFilterNode);\r\n\r\n    const mixNode = mainGainNode;\r\n\r\n    const createVoice = () => {\r\n        const oscNode = audioContext.createOscillator();\r\n        oscNode.frequency.value = 0;\r\n\r\n        const gainNode = audioContext.createGain();\r\n        gainNode.gain.value = 0;\r\n\r\n        const filterNode = audioContext.createBiquadFilter();\r\n        filterNode.Q.value = 1;\r\n        filterNode.type = `bandpass`;\r\n\r\n        // Connect nodes\r\n        const enableFilter = true;\r\n        if (enableFilter){\r\n            oscNode.connect(filterNode);\r\n            filterNode.connect(gainNode);\r\n        } else {\r\n            oscNode.connect(gainNode);\r\n        }\r\n        gainNode.connect(mixNode);\r\n\r\n        return {\r\n            oscNode,\r\n            filterNode,\r\n            gainNode,\r\n        };\r\n    };\r\n\r\n\r\n    // oscNode.type = `custom`;\r\n\r\n    // const periodicWave = audioContext.createPeriodicWave()\r\n\r\n    // oscNode.type = `triangle`;\r\n    // oscNode.type = `sine`;\r\n\r\n    // const isMobile = (navigator.userAgent.includes(`Android`))||(navigator.userAgent.includes(`iPad`))||(navigator.userAgent.includes(`iPhone`));\r\n\r\n    // // set up the master effects chain for all voices to connect to.\r\n    // // const effectChain = audioContext.createGain();\r\n    // // const waveshaper = new WaveShaper( audioContext );\r\n    // // effectChain.connect( waveshaper.input );\r\n    // // onUpdateDrive( currentDrive );\r\n\r\n    // const revNode =  !isMobile ? audioContext.createConvolver() : audioContext.createGain();\r\n    // const revGain = audioContext.createGain();\r\n    // const revBypassGain = audioContext.createGain();\r\n    // const volNode = audioContext.createGain();\r\n    // volNode.gain.value = 75;\r\n    // const compressor = audioContext.createDynamicsCompressor();\r\n    // // waveshaper.output.connect( revNode );\r\n    // // waveshaper.output.connect( revBypassGain );\r\n    // revNode.connect( revGain );\r\n    // revGain.connect( volNode );\r\n    // revBypassGain.connect( volNode );\r\n    // // onUpdateReverb( {currentTarget:{value:currentRev}} );\r\n\r\n    // volNode.connect( compressor );\r\n    // compressor.connect(    audioContext.destination );\r\n    // // onUpdateVolume( {currentTarget:{value:currentVol}} );\r\n\r\n    // // if (!isMobile) {\r\n    // //       const irRRequest = new XMLHttpRequest();\r\n    // //     irRRequest.open(`GET`, `sounds/irRoom.wav`, true);\r\n    // //     irRRequest.responseType = `arraybuffer`;\r\n    // //     irRRequest.addEventListener(`load`, function() {\r\n    // //           audioContext.decodeAudioData(irRRequest.response,\r\n    // //               function(buffer) { if (revNode) revNode.buffer = buffer; else console.log(`no revNode ready!`);});\r\n    // //     });\r\n    // //     irRRequest.send();\r\n    // // }\r\n\r\n    // }\r\n\r\n    return {\r\n        audioContext,\r\n        voices: [... new Array(voiceCount)].map(() => createVoice()),\r\n    };\r\n\r\n};\r\n\r\nexport const createBeatPlayer = () => {\r\n    const getNote = (note: string) => {\r\n        if (!musicNotes.has(note as NoteName)){ return 0;}\r\n        return musicNotes.get(note as NoteName);\r\n    };\r\n    const createSong = (notes: string) => notes.replace(/\\s/g, ` `).split(` `).filter(x => x).map(x => getNote(x));\r\n\r\n    const song1A = createSong(`\r\n    A2 A2 A2 .\r\n    A2 A2 A2 A4\r\n    `);\r\n\r\n    // const song1 = createSong(`A2 A2 A2 A4 . B2 C3 A4`);\r\n    const song1 = createSong(`\r\n    C2 D2 E2 G2\r\n    D2 E2 G2 A2\r\n    E2 G2 A2 C3\r\n    `);\r\n\r\n    const song2 = createSong(`\r\n    C2 E2 D2 G2\r\n    E2 A2 G2 C3\r\n    A2 D3 C3 E3\r\n\r\n    D3 G3 E3 A3 \r\n    G3 C4 A3 D4 \r\n    C4 .  .  .\r\n    `);\r\n\r\n    // const song3Dis = createSong(`\r\n    // F#2 G#3 D#3 A#2\r\n    // F#2 G#3 D#3 .\r\n    // `);\r\n\r\n    const song3 = createSong(`\r\n    C4 A3 G3 E3\r\n    A3 G3 E3 .\r\n    G3 E3 D3 C3\r\n    E3 D3 C3 .\r\n    D3 C3 A2 G2\r\n    C3 A2 G2 .\r\n    A2 G2 E2 D2\r\n    G2 E2 D2 .\r\n    `);\r\n\r\n    // const song2 = createSong(`\r\n    //  . B2 C3 D3\r\n    // F2 C3 D3 A3\r\n    // C3 .  E3 D3\r\n    // A2 E2 G2 A3\r\n    // `);\r\n\r\n    // const song3 = createSong(`\r\n    //  . B2 C3  .\r\n    // F2 C3 D3 A4\r\n    // C3 .  E3 D4\r\n    // A2 E2 G4 A4\r\n    // `);\r\n\r\n    // const song4 = createSong(`\r\n    //  . C3 A3 A3\r\n    // F3 G3 A3 .\r\n    // F3 A3 F3 B3\r\n    // G3 A3 B3 .\r\n    // G3 C4 B3 A3\r\n    // `);\r\n\r\n    // const song5 = createSong(`\r\n    //  . A2 .  F1\r\n    // E2 E1 D1 .\r\n    //  . F2 E1 A2\r\n    // B2 A2 F1 .\r\n    // `);\r\n\r\n    // const song = createSong(`C3 A3 B3 C3 . A3 C3 A3 A3 F3 G3 A3 . F3 A3 F3 B3 G3 A3 B3 . G3 B3 A3 G3 G3 G3 G3`);\r\n    // const song = createSong(`A3 C3 A3 A3 F3 G3 A3 . F3 A3 F3 B3 G3 A3 B3 . G3 C4 B3 A3 .`);\r\n    // const song = createSong(`aabcd aabcd aabcd ffe`);\r\n\r\n    const createRandomSong = () => {\r\n\r\n        if (Math.random() < 0.25){\r\n            const mainNotes = `CDEGACDEGA.`.split(``);\r\n            const mainOctave = randomItem([2, 3]);\r\n\r\n            const sSongSource = [...new Array(4 * (2 + Math.floor(4 * Math.random())))]\r\n                .map(() => `${randomItem(mainNotes)}${mainOctave} `)\r\n                .join(``);\r\n            const sSong = createSong(sSongSource.substr(1) + `C${mainOctave + 1}`);\r\n            return sSong;\r\n        }\r\n\r\n        //const sSong = randomItem([song1A, song1, song2, song3]);\r\n        const sSong = randomItem([song1A, song1, song3]);\r\n        // const sSong = randomItem([song1, song2, song3, song4, song5]);\r\n        // return sSong;\r\n        // return [...new Array(2 + 4 * Math.floor(4 * Math.random()))]\r\n        //     .map((_, i) => (i % 4 === 3) ? sSong[0] : randomItem(sSong));\r\n        // return randomOrder(sSong);\r\n\r\n        // if (Math.random() < 0.25){\r\n        //     return randomOrder(sSong);\r\n        // }\r\n\r\n        return sSong;\r\n    };\r\n\r\n    const state = {\r\n        audio: null as null | ReturnType<typeof createAudio>,\r\n        isStarted: false,\r\n        iBeat: 0,\r\n        timePerBeat: 0.25,\r\n        timeLastBeat: 0,\r\n        positions: [] as Vector2[],\r\n        shape: null as null | PeriodicWave,\r\n        songs: [createRandomSong()],\r\n    };\r\n\r\n    const updateWaveform = (iVoice: number, positions: Vector2[]) => {\r\n        const { audio } = state;\r\n        if (!audio){ return; }\r\n        if (positions.length === 0){ return; }\r\n        console.log(`updateWaveform`, { iVoice, positions });\r\n\r\n        const real = new Float32Array(2 + positions.length);\r\n        const imag = new Float32Array(2 + positions.length);\r\n        real[0] = 0;\r\n        imag[0] = 0;\r\n        real[positions.length - 1] = 1;\r\n        imag[positions.length - 1] = 0;\r\n\r\n        for (const [i, p] of positions.entries()){\r\n            real[i + 1] = p.x;\r\n            imag[i + 1] = p.y;\r\n        }\r\n\r\n        const wave = audio.audioContext.createPeriodicWave(real, imag, { disableNormalization: true });\r\n        audio.voices[iVoice].oscNode.setPeriodicWave(wave);\r\n    };\r\n\r\n    const scheduleNote = (iVoice: number, iBeat: number, timeOffset: number, timeForNote: number) => {\r\n        const { audio } = state;\r\n        if (!audio){ return; }\r\n        if (state.positions.length === 0){ return; }\r\n\r\n        // Play song\r\n        const audioTime = audio.audioContext.currentTime + timeOffset;\r\n\r\n        const freq = state.songs[iVoice][iBeat] ?? 0;\r\n        audio.voices[iVoice].oscNode.frequency.setValueAtTime(freq, audioTime);\r\n        audio.voices[iVoice].filterNode.frequency.setValueAtTime(freq, audioTime);\r\n        // audio.filterNode.frequency.setValueAtTime(800 + freq * 0.1, audioTime);\r\n        if (!freq){ return;}\r\n\r\n        // Note length\r\n        const timeToDelaySec = 0.01 * timeForNote;\r\n        const timeToStartSec = 0.1 * timeForNote;\r\n        const timeToStopSec = 0.1 * timeForNote;\r\n        const timeToPlaySec = timeForNote;\r\n        const timeStart = audioTime + timeToDelaySec;\r\n        const timePlay = timeStart + timeToStartSec;\r\n        const timePlayEnd = timePlay + timeToPlaySec;\r\n        const timeStop = timePlayEnd + timeToStopSec;\r\n\r\n        audio.voices[iVoice].gainNode.gain.setValueAtTime(0, timeStart);\r\n        audio.voices[iVoice].gainNode.gain.linearRampToValueAtTime(1, timePlay);\r\n        audio.voices[iVoice].gainNode.gain.setValueAtTime(1, timePlayEnd);\r\n        audio.voices[iVoice].gainNode.gain.linearRampToValueAtTime(0, timeStop);\r\n\r\n        // audio.voices[iVoice].gainNode.gain.setValueAtTime(1, audioTime);\r\n    };\r\n\r\n    return {\r\n        /** This must be done after user UI */\r\n        start: () => {\r\n            if (state.isStarted) { return; }\r\n            state.isStarted = true;\r\n\r\n            state.audio = createAudio(2);\r\n            state.audio?.voices.forEach(v => v.oscNode.start(0));\r\n        },\r\n        beat: (data: { beatIndex: number, positions: Vector2[] }) => {\r\n            if (!state.audio){ return; }\r\n            if (!state.isStarted) { return; }\r\n\r\n            state.timePerBeat = state.audio.audioContext.currentTime - state.timeLastBeat;\r\n            state.timeLastBeat = state.audio.audioContext.currentTime;\r\n\r\n            const chunkSize = 4;\r\n            if (data.beatIndex % chunkSize !== 0){ return;}\r\n            state.iBeat += chunkSize;\r\n\r\n\r\n            state.positions = data.positions;\r\n            const voiceLength = state.audio.voices.length;\r\n            for (let v = 0; v < voiceLength; v++){\r\n                if (v >= state.positions.length){ continue;}\r\n\r\n                if (!state.songs[v]\r\n                    || (data.beatIndex % state.songs[v].length === 0\r\n                    && Math.random() < 0.15)){\r\n                    state.songs[v] = createRandomSong();\r\n                    state.iBeat = 0;\r\n                }\r\n\r\n                // state.audio.voices[v].oscNode.type = `custom`;\r\n                const positions = state.positions.filter((x, i) => i % voiceLength === v);\r\n                updateWaveform(v, positions);\r\n\r\n                for (let i = 0; i < chunkSize; i++){\r\n                    const timeForNote = state.timePerBeat\r\n                        / Math.min(1 + state.positions.length, state.audio.voices.length);\r\n                    scheduleNote(v,\r\n                        (state.iBeat + i) % state.songs[v].length,\r\n                        i * state.timePerBeat + v * timeForNote,\r\n                        timeForNote);\r\n\r\n                    // const timeForNote = 0.25 * state.timePerBeat;\r\n                    // scheduleNote(v,\r\n                    //     (state.iBeat + i) % state.songs[v].length,\r\n                    //     i * state.timePerBeat,\r\n                    //     timeForNote);\r\n                }\r\n            }\r\n\r\n            // console.log(`beat`, { iBeat: state.iBeat });\r\n        },\r\n    };\r\n};\r\n","/* eslint-disable new-cap */\r\n/* eslint-disable no-new */\r\nimport { clamp } from 'utils/clamp';\r\nimport { ArtWork } from '../../artwork-type';\r\nimport { runFluidSimulator } from './src/run';\r\nimport { createEventProvider } from '../games/event-provider';\r\nimport { createDebugGameView } from '../games/art-game';\r\nimport { snakeGame } from '../games/snake/snake';\r\nimport { createBeatPlayer } from '../music/beat';\r\n\r\nconst contentPath = `/content/art/artwork/example-PavelDoGreat-fluid-simulation/src`;\r\n\r\nexport const art_fluidSnakeGame: ArtWork = {\r\n    key: `fluid-snake-game`,\r\n    title: `Fluid Snake Game`,\r\n    description: `Snake with Fluid Simulator Renderer and Procedural Music\r\nMusic is procedurally generated using waveforms shaped like the snake's current body and position.\r\nFluid Renderer is based on Fluid Simulator by Pavel Dobryakov: https://paveldogreat.github.io/WebGL-Fluid-Simulation/`,\r\n    artist: `Rick Love`,\r\n    getTokenDescription: (tokenId: string) => {\r\n        return null;\r\n    },\r\n    // openSea: {\r\n    //     tokenAddress: `0x495f947276749ce646f68ac8c248420045cb7b5e`,\r\n    //     tokenId: `91242641486941084018191434774360347389366801368112854311223385694785434025985`,\r\n    // },\r\n    renderArt: (hostElement, hash, recorder) => {\r\n        const sim = runFluidSimulator(hostElement, contentPath, { width: `100%`, height: `100%` }, {\r\n            disableGui: true, disableInput: true, disableStartupSplats: true,\r\n            timeProvider: recorder?.timeProvider,\r\n        });\r\n        if (!sim) { return { remove: () => { /* Ignore */ } }; }\r\n\r\n        const timeProvider = recorder?.timeProvider ?? { now: () => Date.now(), isPaused: () => false };\r\n        const eventProvider = createEventProvider(sim.canvas);\r\n\r\n        // const game = flappyDodgeGame.createGame(\r\n        const gameSource = snakeGame;\r\n        const game = gameSource.createGame(\r\n            timeProvider,\r\n            { getDisplaySize: () => ({ width: sim.canvas.width, height: sim.canvas.height }) });\r\n\r\n        game.setup(eventProvider);\r\n\r\n        const beatPlayer = createBeatPlayer();\r\n        eventProvider.canvasAddEventListener(`touchdown`, () => {\r\n            beatPlayer.start();\r\n        });\r\n        eventProvider.canvasAddEventListener(`mousedown`, () => {\r\n            beatPlayer.start();\r\n        });\r\n        eventProvider.canvasAddEventListener(`keydown`, () => {\r\n            beatPlayer.start();\r\n        });\r\n\r\n        // Debug\r\n        const debugViewer = createDebugGameView(gameSource, sim.canvas, eventProvider);\r\n\r\n        const { config } = sim;\r\n\r\n        if (config) {\r\n            // config.SPLAT_RADIUS = 0.001;\r\n\r\n            config.COLORFUL = false;\r\n            config.CURL = 10;\r\n            // config.BLOOM = false;\r\n        }\r\n\r\n        const VEL_MULT = 0.0005;\r\n        const SIZE_MULT_OBSTACLE = 4;\r\n        const SIZE_MULT_PLAYER = 4;\r\n        const COLOR_STRENGTH = 0.06;\r\n        // const CURL_BASE_VALUE = 30;\r\n\r\n        const state = {\r\n            resetBloomAtTimeMs: 0,\r\n            darkenAtTimeMs: 0,\r\n            darkenUntilTimeMs: 0,\r\n        };\r\n\r\n        let frameTick = 0;\r\n        const updateGame = () => {\r\n            config.BLOOM_INTENSITY = clamp(0.001 * (state.resetBloomAtTimeMs - timeProvider.now()), 0, 2);\r\n            config.SUNRAYS_WEIGHT = timeProvider.now() > state.darkenAtTimeMs && timeProvider.now() < state.darkenUntilTimeMs ? 0 : 1;\r\n\r\n            game.update();\r\n            debugViewer?.render(game, { updateFrameTick: frameTick, renderFrameTick: sim.getFrameTick() });\r\n\r\n            game.render({\r\n                onPlayerHit: () => {\r\n                    // console.log(`onPlayerHit`, {});\r\n\r\n                    // config.BLOOM = true;\r\n                    // sim.updateConfig();\r\n\r\n                    state.resetBloomAtTimeMs = timeProvider.now() + 3000;\r\n                },\r\n                onPlayerReward: (data) => {\r\n                    // console.log(`onPlayerHit`, {});\r\n\r\n                    // config.BLOOM = true;\r\n                    // sim.updateConfig();\r\n\r\n                    state.resetBloomAtTimeMs = timeProvider.now() + 500;\r\n                },\r\n                onBeat: (data) => {\r\n                    beatPlayer.beat(data);\r\n                    if (data.beatIndex % 4 === 3){\r\n                        state.darkenAtTimeMs = timeProvider.now() + 0;\r\n                        state.darkenUntilTimeMs = timeProvider.now() + 50;\r\n                    }\r\n                },\r\n                renderEntity: (data) => {\r\n\r\n                    // if (data.kind === `player`) {\r\n                    //     console.log(`player`, { data, config });\r\n\r\n                    //     // // Adjust vorticity based on player speed\r\n                    //     // const curl = CURL_BASE_VALUE * clamp((1 + 0.1 * data.velocity.x), 0.5, 2);\r\n                    //     // config.CURL = curl;\r\n\r\n                    //     // if (Math.abs(data.velocity.x) > 0.25) {\r\n                    //     //     config.BLOOM = true;\r\n                    //     //     state.resetBloomAtTime = timeProvider.now() + 5;\r\n                    //     // }\r\n                    // }\r\n\r\n                    sim.splat(data.id,\r\n                        true,\r\n                        data.position.x, data.position.y,\r\n                        VEL_MULT * data.velocity.x,\r\n                        VEL_MULT * data.velocity.y,\r\n                        {\r\n                            x: data.size.x * (data.kind === `player` ? SIZE_MULT_PLAYER : SIZE_MULT_OBSTACLE),\r\n                            y: data.size.y * (data.kind === `player` ? SIZE_MULT_PLAYER : SIZE_MULT_OBSTACLE),\r\n                        },\r\n                        {\r\n                            r: data.color.r * COLOR_STRENGTH,\r\n                            g: data.color.g * COLOR_STRENGTH,\r\n                            b: data.color.b * COLOR_STRENGTH,\r\n                        });\r\n                },\r\n                removeEntity: (id) => {\r\n                    sim.splat(id, false, 0, 0, 0, 0);\r\n                },\r\n                setBackgroundVelocity: (data) => {\r\n                    config.MOTION_X = data.velocity.x;\r\n                    config.MOTION_Y = data.velocity.y;\r\n                },\r\n            });\r\n\r\n            frameTick++;\r\n        };\r\n\r\n        let isDestroyed = false;\r\n        const update = async () => {\r\n            if (isDestroyed) { return; }\r\n\r\n            if (!timeProvider.isPaused()) {\r\n                updateGame();\r\n            }\r\n\r\n            if (recorder?.isWaitingForFrame()) {\r\n                console.log(`game.update waitingForFrame - addFrame`, {});\r\n                await recorder.getRecorder().addFrame(sim.canvas);\r\n            }\r\n\r\n            return requestAnimationFrame(() => {void update();});\r\n        };\r\n\r\n\r\n        // Start\r\n        setTimeout(() => {\r\n            (async () => { await update(); })();\r\n            sim.start();\r\n        }, 250);\r\n\r\n        return {\r\n            remove: () => {\r\n                isDestroyed = true;\r\n                eventProvider.destroy();\r\n                game.destroy();\r\n                debugViewer?.destroy();\r\n                sim?.close();\r\n            },\r\n        };\r\n    },\r\n};\r\n","export const clamp = (value: number, min: number, max: number) => {\r\n    return value < min ? min\r\n        : value > max ? max\r\n            : value;\r\n};\r\n"],"sourceRoot":""}