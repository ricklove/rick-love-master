{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/utils/query.ts","webpack:///D:/Projects/rick-love-master/code/games/doodle/doodle-party-state.ts","webpack:///D:/Projects/rick-love-master/code/games/doodle/doodle-party-user-profile.tsx","webpack:///D:/Projects/rick-love-master/code/games/doodle/doodle-party-components.tsx","webpack:///D:/Projects/rick-love-master/code/games/doodle/doodle-party.tsx"],"names":["createClientStorage","clientStorage","load","JSON","parse","localStorage","getItem","save","value","setItem","stringify","createClientState","query","queryString","substr","split","pair","decodeURIComponent","parseQuery","window","location","search","client","_query","room","role","parseRole","clientPlayer","isActive","clientKey","name","emoji","isReady","createPlayerAssignment","meshState","playerClientKey","previousAssigments","createNewAssigment","kind","prompt","chainKey","Date","now","Math","floor","random","p","players","find","x","playerRounds","history","rounds","flatMap","completed","filter","lastPlayerRound","length","undefined","lastKind","assignment","playerPrompts","Set","map","toLowerCase","trim","iRemaining","findIndex","has","oldAssigment","splice","newAssignment","doodle","reduceState","previousState","message","console","log","hostClientKey","push","lastRound","roundKey","assigment","playerAssignment","reduceClientsState","clients","forEach","c","key","distinct","useDoodlePartyController","clientState","useRef","current","useState","loading","setLoading","renderId","setRenderId","refresh","s","send","webSocketHistory","useEffect","webMeshClient","createWebMeshClient","channelKey","initialState","sub","subscribe","m","_webSocket","sendMessage","hostIntervalId","setInterval","mState","toKeyValueArray","groupItems","some","missingAssignments","decodeDoodleDrawing","segments","i","setTimeout","a","uploadApiWebClient","createUploadApiWebClient","uploadApiConfig","createUploadUrl","prefix","doodleStoragePaths","doodlePartyDrawingsPrefix","backupUrl","uploadUrl","backupUploader","createUploader","uploadData","sendNewAssignmentsIfReady","unsubscribe","close","clearInterval","setClientPlayer","sendAssignment","_messages","messages","_events","events","DoodlePartyProfileView","props","controller","userProfile","setUserProfile","usedEmojis","setUsedEmojis","View_Panel","Text_FormTitle","onUserProfileChange","View_FormActionRow","Button_FormAction","onPress","onDone","DoodlePartyPlayerList","hideInactive","style","flexDirection","alignItems","fontSize","width","userProfileEmojis","replace","UserProfileView","availableEmojis","setAvailableEmojis","isShowingEmojiSelection","setIsShowingEmojiSelection","includes","View_Form","flexWrap","View_FieldRow","onNameChange","UserProfileName","setName","isEditing","setIsEditing","changeName","Input_Text","onChange","onSubmit","onFocus","Button_FieldInline","DoodlePartyStatusBar","padding","flex","PartyViewer","allItems","iRound","y","item","chains","chain","items","sort","b","margin","background","player","AssignmentView","color","whiteSpace","height","backgroundColor","drawing","shouldAnimate","enableRedraw","DoodlePartyPlayView","text","setText","onDoneDescribe","size","encodeDoodleDrawing","DoodlePartyView","DoodlePartyView_Inner","mode","setMode","DebugView","intervalId","marginTop","t","_r"],"mappings":"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","file":"21-0a631106b13343357951.js","sourcesContent":["export const parseQuery = (queryString: string): { [key: string]: undefined | string } => {\r\n    const query = {} as { [key: string]: string };\r\n    const pairs = (queryString[0] === `?` ? queryString.substr(1) : queryString).split(`&`);\r\n    for (const element of pairs) {\r\n        const pair = element.split(`=`);\r\n        query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || ``);\r\n    }\r\n    return query;\r\n};\r\n","import { useRef, useState, useEffect } from 'react';\r\nimport { parseQuery } from 'utils/query';\r\nimport { createUploader } from 'upload-api/client/uploader';\r\nimport { uploadApiConfig } from 'upload-api/client/config';\r\nimport { createUploadApiWebClient } from 'upload-api/client/web-client';\r\nimport { createWebMeshClient, WebMeshClientWebSocketHistory } from 'web-mesh/web-mesh-client';\r\nimport { distinct_key, groupItems, distinct } from 'utils/arrays';\r\nimport { toKeyValueArray } from 'utils/objects';\r\nimport { doodleStoragePaths } from './doodle-paths';\r\nimport { DoodleDrawingEncoded, decodeDoodleDrawing } from './doodle';\r\n\r\n\r\ntype ClientState = {\r\n    client: {\r\n        _query: { [key: string]: undefined | string };\r\n        room: string;\r\n        role: 'debug' | 'viewer' | 'player';\r\n\r\n        clientPlayer: PlayerState;\r\n    };\r\n};\r\ntype MeshState = {\r\n    hostClientKey: string;\r\n    clients: { key: string, isActive: boolean }[];\r\n    players: PlayerState[];\r\n    history: GameHistory;\r\n};\r\nexport type Assignment = {\r\n    kind: 'doodle' | 'describe';\r\n    chainKey: string;\r\n    prompt?: string;\r\n    doodle?: DoodleDrawingEncoded;\r\n};\r\nexport type PlayerState = {\r\n    isActive: boolean;\r\n    clientKey: string;\r\n    name: string;\r\n    emoji: string;\r\n    isReady: boolean;\r\n    assignment?: Assignment;\r\n};\r\ntype GameRound = {\r\n    roundKey: string;\r\n    completed: PlayerState[];\r\n};\r\ntype GameHistory = { rounds: GameRound[] };\r\ntype PlayerProfile = {\r\n    name: string;\r\n    emoji: string;\r\n};\r\n\r\nconst createClientStorage = () => {\r\n    type ClientStorageData = {\r\n        clientPlayer: PlayerProfile;\r\n    };\r\n    const CLIENT_STORAGE_KEY = `_DoodleGameClient`;\r\n    const clientStorage = {\r\n        load: (): null | ClientStorageData => {\r\n            try {\r\n                return JSON.parse(localStorage.getItem(CLIENT_STORAGE_KEY) ?? `NULL!{}`) as unknown as ClientStorageData;\r\n            } catch{\r\n                return null;\r\n            }\r\n        },\r\n        save: (value: ClientStorageData): void => {\r\n            localStorage.setItem(CLIENT_STORAGE_KEY, JSON.stringify(value));\r\n        },\r\n    };\r\n    return {\r\n        clientStorage,\r\n    };\r\n};\r\n\r\nconst createClientState = (): ClientState => {\r\n    const query = parseQuery(window.location.search);\r\n    const parseRoom = (value: undefined | string) => value ?? `UnknownRoom`;\r\n    const parseRole = (value: undefined | string): ClientState['client']['role'] => {\r\n        switch (value) {\r\n            case `debug`: return `debug`;\r\n            case `viewer`: return `viewer`;\r\n            default: return `player`;\r\n        }\r\n    };\r\n    const clientState: ClientState = {\r\n        client: {\r\n            _query: query,\r\n            room: parseRoom(query.room),\r\n            role: parseRole(query.role),\r\n\r\n            clientPlayer: {\r\n                isActive: true,\r\n                clientKey: ``,\r\n                name: ``,\r\n                emoji: `👤`,\r\n                isReady: false,\r\n            },\r\n        },\r\n    };\r\n\r\n    return clientState;\r\n};\r\n\r\ntype DoodlePartyMessage = {\r\n    kind: 'start';\r\n} | {\r\n    kind: 'setHost';\r\n    hostClientKey: string;\r\n} | {\r\n    kind: 'setPlayer';\r\n    clientPlayer: {\r\n        clientKey: string;\r\n        name: string;\r\n        emoji: string;\r\n        isReady: boolean;\r\n    };\r\n} | {\r\n    kind: 'assign';\r\n    players: PlayerState[];\r\n    lastRound?: GameRound;\r\n} | {\r\n    kind: 'completeAssignment';\r\n    playerAssignment: Assignment & { clientKey: string };\r\n};\r\n\r\nconst createPlayerAssignment = (meshState: MeshState, playerClientKey: string, previousAssigments: Assignment[]) => {\r\n    const DEFAULT_PROMPT = `Choose Your Own Word`;\r\n    const createNewAssigment = (): Assignment => {\r\n        return {\r\n            kind: `doodle`,\r\n            prompt: DEFAULT_PROMPT,\r\n            chainKey: `${Date.now()}-${Math.floor(Math.random() * 999999)}`,\r\n        };\r\n    };\r\n\r\n    const p = meshState.players.find(x => x.clientKey === playerClientKey);\r\n    if (!p) { return createNewAssigment(); }\r\n\r\n    const playerRounds = meshState.history.rounds.flatMap(x => x.completed).filter(x => x.clientKey === p.clientKey);\r\n    const lastPlayerRound = playerRounds[playerRounds.length - 1] ?? undefined;\r\n    const lastKind = lastPlayerRound?.assignment?.kind ?? `doodle`;\r\n\r\n    // const playerChains = new Set(meshState.history.rounds.flatMap(x => x.completed).filter(x => x.clientKey === p.clientKey).map(x => x.assignment?.chainKey ?? ``));\r\n    const playerPrompts = new Set(meshState.history.rounds\r\n        .flatMap(x => x.completed)\r\n        .filter(x => x.clientKey === p.clientKey)\r\n        .filter(x => x.assignment?.prompt !== DEFAULT_PROMPT)\r\n        .map(x => x.assignment?.prompt?.toLowerCase().trim() ?? ``));\r\n\r\n    const iRemaining = previousAssigments.findIndex(x =>\r\n        // New prompt for player\r\n        !playerPrompts.has(x.prompt?.toLowerCase().trim() ?? ``)\r\n        // Same type as last round (so swap will be correct)\r\n        && (x.kind === lastKind));\r\n\r\n    if (iRemaining < 0) {\r\n        return createNewAssigment();\r\n    }\r\n\r\n    const oldAssigment = previousAssigments.splice(iRemaining, 1)[0];\r\n    const newAssignment = { ...oldAssigment };\r\n\r\n    // Switch assignment types\r\n    if (newAssignment.kind === `doodle`) {\r\n        newAssignment.kind = `describe`;\r\n        newAssignment.prompt = undefined;\r\n    } else {\r\n        newAssignment.kind = `doodle`;\r\n        newAssignment.doodle = undefined;\r\n    }\r\n\r\n    return newAssignment;\r\n};\r\n\r\nconst sendNewAssignmentsIfReady = (meshState: MeshState, send: (message: DoodlePartyMessage) => void) => {\r\n    if (meshState.players.filter(x => x.isActive && x.isReady).length <= 0) { return; }\r\n\r\n    // Assign Next Item in Chain\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    const chains = toKeyValueArray(groupItems(meshState.history.rounds.flatMap(x => x.completed).map(x => x.assignment).filter(x => x).map(x => x!), x => x?.chainKey ?? ``));\r\n    const previousAssigments = chains.map(x => x.value[x.value.length - 1]);\r\n\r\n    // If some players aren't done yet\r\n    if (meshState.players.some(x => x.isActive && x.isReady && x.assignment && (!x.assignment.doodle || !x.assignment.prompt))) {\r\n\r\n        // Add new player assignments\r\n        const missingAssignments = meshState.players.filter(x => !x.assignment);\r\n        if (missingAssignments.length > 0) {\r\n            missingAssignments.forEach(x => { x.assignment = createPlayerAssignment(meshState, x.clientKey, previousAssigments); });\r\n\r\n            send({\r\n                kind: `assign`,\r\n                players: meshState.players,\r\n                lastRound: undefined,\r\n            });\r\n            return;\r\n        }\r\n        return;\r\n    }\r\n\r\n    // Save Round (when all players are done)\r\n    const completed = [...meshState.players\r\n        .filter(x => x.assignment && x.assignment.doodle && x.assignment.prompt && decodeDoodleDrawing(x.assignment.doodle).segments.length > 0)\r\n        .map(x => ({ ...x, assignment: x.assignment ? { ...x.assignment } : undefined }))];\r\n    const lastRound = {\r\n        roundKey: `${Date.now()}`,\r\n        completed,\r\n    };\r\n    meshState.history.rounds.push(lastRound);\r\n\r\n\r\n    // Assign Players to new chain\r\n    for (let i = 0; i < meshState.players.length; i++) {\r\n        meshState.players[i].assignment = createPlayerAssignment(meshState, meshState.players[i].clientKey, previousAssigments);\r\n    }\r\n\r\n    send({\r\n        kind: `assign`,\r\n        players: meshState.players,\r\n        lastRound,\r\n    });\r\n\r\n    // Save to server (for data)\r\n    setTimeout(async () => {\r\n        const uploadApiWebClient = createUploadApiWebClient(uploadApiConfig);\r\n        const backupUrl = (await uploadApiWebClient.createUploadUrl({ prefix: `${doodleStoragePaths.doodlePartyDrawingsPrefix}/${Date.now()}` })).uploadUrl;\r\n        const backupUploader = createUploader(backupUrl);\r\n        await backupUploader.uploadData({\r\n            history: meshState.history,\r\n        });\r\n    });\r\n};\r\n\r\nconst reduceState = (previousState: MeshState, message: DoodlePartyMessage): MeshState => {\r\n    console.log(`reduceState`, { message });\r\n\r\n    if (message.kind === `setHost`) {\r\n        previousState.hostClientKey = message.hostClientKey;\r\n        return previousState;\r\n    }\r\n\r\n    if (message.kind === `setPlayer`) {\r\n        let p = previousState.players.find(x => x.clientKey === message.clientPlayer.clientKey);\r\n        if (!p) {\r\n            p = { ...message.clientPlayer, isActive: true };\r\n            previousState.players.push(p);\r\n        }\r\n        p.name = message.clientPlayer.name;\r\n        p.emoji = message.clientPlayer.emoji;\r\n        p.isReady = message.clientPlayer.isReady;\r\n\r\n        return previousState;\r\n    }\r\n\r\n    // Assigments\r\n    if (message.kind === `assign`) {\r\n        previousState.players = message.players;\r\n        if (message.lastRound && message.lastRound.completed.length > 0) {\r\n            if (!previousState.history.rounds.find(x => x.roundKey === message.lastRound?.roundKey)) {\r\n                previousState.history.rounds.push(message.lastRound);\r\n            }\r\n        }\r\n        return previousState;\r\n    }\r\n\r\n    if (message.kind === `completeAssignment`) {\r\n        // Add Doodle, Prompt\r\n        const assigment = previousState.players.find(x => x.clientKey === message.playerAssignment.clientKey)?.assignment;\r\n        if (!assigment) { return previousState; }\r\n\r\n        assigment.prompt = message.playerAssignment.prompt;\r\n        assigment.doodle = message.playerAssignment.doodle;\r\n\r\n        return previousState;\r\n    }\r\n\r\n    return previousState;\r\n};\r\n\r\nconst reduceClientsState = (previousState: MeshState, clients: { key: string, lastActivityTimestamp: number }[]): MeshState => {\r\n    console.log(`reduceClientsState`, { clients });\r\n\r\n    previousState.players.forEach(x => {\r\n        x.isActive = !!clients.find(c => c.key === x.clientKey);\r\n    });\r\n    previousState.clients = distinct([...previousState.clients, ...clients].map(x => x.key)).map(x => ({ key: x, isActive: !!clients.find(c => c.key === x) }));\r\n\r\n    return previousState;\r\n};\r\n\r\n\r\nexport const useDoodlePartyController = () => {\r\n    const clientStateRef = useRef(createClientState());\r\n    const clientState = clientStateRef.current;\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [renderId, setRenderId] = useState(0);\r\n    const refresh = () => {\r\n        setRenderId(s => s + 1);\r\n    };\r\n\r\n    const loadClientPlayerFromStorage = () => {\r\n        // Load Client Player\r\n        const { clientStorage } = createClientStorage();\r\n        const s = clientStorage.load();\r\n        if (s) {\r\n            clientState.client.clientPlayer = {\r\n                clientKey: ``,\r\n                name: s.clientPlayer.name,\r\n                emoji: s.clientPlayer.emoji,\r\n                isReady: false,\r\n                isActive: true,\r\n            };\r\n        }\r\n        refresh();\r\n    };\r\n\r\n    const meshState = useRef(null as null | MeshState);\r\n    const send = useRef(null as null | ((message: DoodlePartyMessage) => void));\r\n    const webSocketHistory = useRef(null as null | { history: WebMeshClientWebSocketHistory });\r\n\r\n    useEffect(() => {\r\n\r\n        // Setup Web Mesh\r\n        const webMeshClient = createWebMeshClient<MeshState, DoodlePartyMessage>({\r\n            channelKey: `doodle_${clientState.client.room}`,\r\n            initialState: {\r\n                hostClientKey: ``,\r\n                clients: [],\r\n                players: [],\r\n                history: { rounds: [] },\r\n            },\r\n            reduceState,\r\n            reduceClientsState,\r\n        });\r\n        const sub = webMeshClient.subscribe((m) => {\r\n            meshState.current = m;\r\n            refresh();\r\n        });\r\n\r\n        webSocketHistory.current = ({ history: webMeshClient._webSocket.history });\r\n        send.current = webMeshClient.sendMessage;\r\n\r\n        // Setup Client State\r\n        loadClientPlayerFromStorage();\r\n        clientState.client.clientPlayer.clientKey = webMeshClient.clientKey;\r\n\r\n        // Host\r\n        const hostIntervalId = setInterval(() => {\r\n            const mState = meshState.current;\r\n            if (!mState) {\r\n                // webMeshClient.sendMessage({\r\n                //     kind: `start`,\r\n                // });\r\n                return;\r\n            }\r\n\r\n            const hasActiveHost = mState.clients.find(x => x.key === mState.hostClientKey)?.isActive;\r\n            if (!hasActiveHost) {\r\n                webMeshClient.sendMessage({\r\n                    kind: `setHost`,\r\n                    hostClientKey: webMeshClient.clientKey,\r\n                });\r\n                return;\r\n            }\r\n\r\n            if (mState.hostClientKey !== webMeshClient.clientKey) { return; }\r\n\r\n            // Act as host\r\n            sendNewAssignmentsIfReady(mState, webMeshClient.sendMessage);\r\n\r\n        }, 3000 + Math.floor(3000 * Math.random()));\r\n\r\n\r\n        setLoading(false);\r\n\r\n        return () => {\r\n            sub.unsubscribe();\r\n            webMeshClient.close();\r\n            clearInterval(hostIntervalId);\r\n        };\r\n    }, []);\r\n\r\n    // Send Messages\r\n    const sendClientPlayer = () => {\r\n        // Send to web socket on change\r\n        if (clientState.client.role !== `player`) { return; }\r\n\r\n        send.current?.({\r\n            kind: `setPlayer`,\r\n            clientPlayer: clientState.client.clientPlayer,\r\n        });\r\n    };\r\n    const setClientPlayer = (value: { name: string, emoji: string, isReady: boolean }) => {\r\n        // console.log(`useDoodlePartyController.setClientPlayer`, { value, send: send.current });\r\n        const { clientStorage } = createClientStorage();\r\n        clientState.client.clientPlayer = { ...clientState.client.clientPlayer, ...value };\r\n        clientStorage.save({\r\n            clientPlayer: clientState.client.clientPlayer,\r\n        });\r\n        sendClientPlayer();\r\n        refresh();\r\n    };\r\n\r\n    const sendAssignment = (assignment: Assignment) => {\r\n        // Send to web socket on change\r\n        if (clientState.client.role !== `player`) { return; }\r\n\r\n        send.current?.({\r\n            kind: `completeAssignment`,\r\n            playerAssignment: { ...assignment, clientKey: clientState.client.clientPlayer.clientKey },\r\n        });\r\n    };\r\n\r\n    return {\r\n        loading,\r\n        renderId,\r\n        clientState,\r\n        meshState: meshState.current,\r\n        setClientPlayer,\r\n        sendAssignment,\r\n        _messages: webSocketHistory.current?.history.messages ?? [],\r\n        _events: webSocketHistory.current?.history.events ?? [],\r\n    };\r\n};\r\nexport type DoodlePartyController = ReturnType<typeof useDoodlePartyController>;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { C } from 'controls-react';\r\nimport { View, Text, TouchableOpacity } from 'react-native-lite';\r\nimport { DoodlePartyController, PlayerState } from './doodle-party-state';\r\n\r\nexport const DoodlePartyProfileView = (props: { controller: DoodlePartyController, onDone: () => void }) => {\r\n    const { clientPlayer } = props.controller.clientState.client;\r\n    const [userProfile, setUserProfile] = useState({ ...clientPlayer } as UserProfileData);\r\n    const [usedEmojis, setUsedEmojis] = useState(props.controller.meshState?.players.filter(x => x.clientKey !== clientPlayer.clientKey).map(x => x.emoji) ?? []);\r\n\r\n    const changeUserProfile = (value: UserProfileData) => {\r\n        setUserProfile(value);\r\n        props.controller.setClientPlayer({ ...value, isReady: false });\r\n    };\r\n    const onDone = () => {\r\n        props.controller.setClientPlayer({ ...clientPlayer, isReady: true });\r\n        props.onDone();\r\n    };\r\n\r\n    useEffect(() => {\r\n        setUsedEmojis(props.controller.meshState?.players.filter(x => x.clientKey !== clientPlayer.clientKey).map(x => x.emoji) ?? []);\r\n    }, [props.controller.renderId]);\r\n\r\n    // console.log(`DoodlePartyProfileView`, { userProfile, usedEmojis });\r\n    return (\r\n        <>\r\n            <C.View_Panel>\r\n                <C.Text_FormTitle >User</C.Text_FormTitle>\r\n                <UserProfileView\r\n                    userProfile={userProfile}\r\n                    onUserProfileChange={changeUserProfile}\r\n                    usedEmojis={usedEmojis}\r\n                />\r\n                <C.View_FormActionRow>\r\n                    <C.Button_FormAction onPress={onDone}>Ready</C.Button_FormAction>\r\n                </C.View_FormActionRow>\r\n            </C.View_Panel>\r\n            <DoodlePartyPlayerList {...props} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport const DoodlePartyPlayerList = (props: { controller: DoodlePartyController, hideInactive?: boolean }) => {\r\n\r\n    const getPlayerIcon = (p: PlayerState) => {\r\n        if (!p.isActive) return `❌`;\r\n        if (!p.isReady) return `◻`;\r\n        if (p.assignment && (p.assignment && (!p.assignment.doodle)) && p.assignment.kind === `doodle`) return `🎨`;\r\n        if (p.assignment && (p.assignment && (!p.assignment.prompt)) && p.assignment.kind === `describe`) return `✏`;\r\n        return `✔`;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <View>\r\n                {props.controller.meshState?.players.filter(x => !props.hideInactive || x.isActive).map(x => (\r\n                    <View key={x.clientKey} style={{ flexDirection: `row`, alignItems: `center` }}>\r\n                        <View>\r\n                            <Text style={{ fontSize: 24 }} >{getPlayerIcon(x)}</Text>\r\n                        </View>\r\n                        <View style={{ width: 48 }}>\r\n                            <Text style={{ fontSize: 32 }} >{x.emoji}</Text>\r\n                        </View>\r\n                        <View>\r\n                            <Text style={{ fontSize: 16 }}>{x.name}</Text>\r\n                        </View>\r\n                    </View>\r\n                ))}\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n\r\ntype UserProfileData = {\r\n    name: string;\r\n    emoji: string;\r\n};\r\n\r\nconst userProfileEmojis = `\r\n🐵 🐶 🐺 🐱 🦁 🐯 🦒 🦊 🦝 🐮 🐷 🐗 🐭 🐹 🐰 🐻 🐨 🐼 🐸 🦓 🐴 🦄 🐔 🐲 \r\n🤖 👽 👻 🍕 🍔 🌭 🥓 🌮 🍖 🥩 🍦 🍩 🍰 🧁 🥝 🥥 🍒 🍓 🍄 🥦 🥑 🥕 \r\n🚗 🚑 🚒 🚜 🦼 🚲 🚂 🛩 🚀 🛸 🛰 🪐 🧯 🧷  🪑 🛎 ☂ ⛄\r\n`.replace(/\\n/g, ``).split(` `).map(x => x.trim()).filter(x => x);\r\n\r\nconst UserProfileView = ({ userProfile, onUserProfileChange, usedEmojis }: { userProfile: UserProfileData, onUserProfileChange: (value: UserProfileData) => void, usedEmojis: string[] }) => {\r\n    const [availableEmojis, setAvailableEmojis] = useState(userProfileEmojis);\r\n    const [isShowingEmojiSelection, setIsShowingEmojiSelection] = useState(false);\r\n\r\n    const selectCharacter = (emoji: string) => {\r\n        setIsShowingEmojiSelection(false);\r\n        onUserProfileChange({ ...userProfile, emoji });\r\n    };\r\n\r\n    useEffect(() => {\r\n        setAvailableEmojis(userProfileEmojis.filter(x => !usedEmojis.includes(x)));\r\n    }, [usedEmojis]);\r\n\r\n    // console.log(`UserProfileView`, { usedEmojis });\r\n\r\n    if (isShowingEmojiSelection) {\r\n        return (\r\n            <>\r\n                <C.View_Form>\r\n                    <View style={{ flexDirection: `row`, flexWrap: `wrap` }}>\r\n                        {availableEmojis.map(x => (\r\n                            <TouchableOpacity key={x} onPress={() => selectCharacter(x)} >\r\n                                <View>\r\n                                    <Text style={{ fontSize: 32 }} >{x}</Text>\r\n                                </View>\r\n                            </TouchableOpacity>\r\n                        ))}\r\n                    </View>\r\n                </C.View_Form>\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <C.View_Form>\r\n                <C.View_FieldRow>\r\n                    <TouchableOpacity onPress={() => setIsShowingEmojiSelection(true)} >\r\n                        <View>\r\n                            <Text style={{ fontSize: 32 }} >{userProfile.emoji}</Text>\r\n                        </View>\r\n                    </TouchableOpacity>\r\n                    <UserProfileName userProfile={userProfile} onNameChange={(x) => onUserProfileChange({ ...userProfile, name: x })} />\r\n                </C.View_FieldRow>\r\n            </C.View_Form>\r\n        </>\r\n    );\r\n};\r\n\r\nconst UserProfileName = ({ userProfile, onNameChange }: { userProfile: UserProfileData, onNameChange: (value: string) => void }) => {\r\n    const [name, setName] = useState(userProfile.name || `Player`);\r\n    const [isEditing, setIsEditing] = useState(false);\r\n\r\n    const changeName = () => {\r\n        onNameChange(name);\r\n        setIsEditing(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <C.Input_Text value={name} onChange={setName} onSubmit={changeName} onFocus={() => { setName(``); setIsEditing(true); }} />\r\n            {isEditing && (\r\n                <C.Button_FieldInline onPress={changeName}>Set Name</C.Button_FieldInline>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n","/* eslint-disable react/no-array-index-key */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { View, Text, ActivityIndicator } from 'react-native-lite';\r\nimport { C } from 'controls-react';\r\nimport { groupItems } from 'utils/arrays';\r\nimport { toKeyValueArray } from 'utils/objects';\r\nimport { DoodlePartyController, PlayerState } from './doodle-party-state';\r\nimport { DoodlePartyPlayerList } from './doodle-party-user-profile';\r\nimport { DoodleGameView_DrawWord } from './doodle-components';\r\nimport { encodeDoodleDrawing, decodeDoodleDrawing } from './doodle';\r\nimport { DoodleDisplayView } from './doodle-view';\r\n\r\nexport const DoodlePartyStatusBar = (props: { controller: DoodlePartyController }) => {\r\n    const { clientState, meshState } = props.controller;\r\n    const { clientPlayer, role } = clientState.client;\r\n\r\n    return (\r\n        <>\r\n            <View key={clientPlayer.clientKey} style={{ padding: 4, flexDirection: `row`, alignItems: `center` }}>\r\n                {role === `player` && clientPlayer ? (\r\n                    <>\r\n                        <View style={{ width: 36 }}>\r\n                            <Text style={{ fontSize: 24 }} >{clientPlayer.emoji}</Text>\r\n                        </View>\r\n                        <View>\r\n                            <Text style={{ fontSize: 16 }}>{clientPlayer.name}</Text>\r\n                        </View>\r\n                    </>\r\n                ) : (\r\n                        <>\r\n                            <View>\r\n                                <Text style={{ fontSize: 16 }}>{role}</Text>\r\n                            </View>\r\n                        </>\r\n                    )}\r\n                <View style={{ flex: 1 }} />\r\n                {/* <View>\r\n                    <Text style={{ fontSize: 16 }}>{gameState.client.clientPlayer.clientKey}</Text>\r\n                </View> */}\r\n                <View>\r\n                    <Text style={{ fontSize: 16 }}>{meshState?.hostClientKey === clientState.client.clientPlayer.clientKey ? `🟢` : ``}</Text>\r\n                </View>\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n\r\nexport const PartyViewer = (props: { controller: DoodlePartyController }) => {\r\n\r\n    const allItems = props.controller.meshState?.history.rounds.flatMap((x, iRound) => x.completed.map(y => ({ iRound, item: y, chainKey: y.assignment?.chainKey }))) ?? [];\r\n    const chains = toKeyValueArray(groupItems(allItems, x => x.chainKey ?? ``)).map(x => ({ chain: x.key, items: x.value.sort((a, b) => a.iRound - b.iRound) }));\r\n\r\n    return (\r\n        <View>\r\n            <Text>Players</Text>\r\n            <DoodlePartyPlayerList controller={props.controller} />\r\n            <Text>Rounds</Text>\r\n            <Text>{`${props.controller.meshState?.history.rounds.length ?? 0}`}</Text>\r\n            {/* {props.controller.gameState.history.rounds.map((x, i) => (\r\n                <View key={`${i}`} style={{ flexDirection: `row`, alignItems: `center` }}>\r\n                    {x.completed.map(p => (\r\n                        <AssignmentView key={p.clientKey} player={p} />\r\n                    ))}\r\n                </View>\r\n            ))} */}\r\n            <Text>Chains</Text>\r\n            <View>\r\n                {chains.map((x, i) => (\r\n                    <View style={{ margin: 4, padding: 4, background: `#444444` }}>\r\n                        <View key={`${i}`} style={{ flexDirection: `row`, alignItems: `center`, flexWrap: `wrap` }}>\r\n                            {x.items.map(p => (\r\n                                <View style={{ padding: 4 }}>\r\n                                    <AssignmentView key={p.item.clientKey} player={p.item} />\r\n                                </View>\r\n                            ))}\r\n                        </View>\r\n                    </View>\r\n                ))}\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n\r\nconst AssignmentView = (props: { player: PlayerState }) => {\r\n    const p = props.player;\r\n    const { assignment } = props.player;\r\n    return (\r\n        <View style={{ flexDirection: `column`, alignItems: `center`, width: 104 }}>\r\n            <Text>{p.name}</Text>\r\n            <Text>{p.emoji}</Text>\r\n            <Text style={{ color: `#FFFF00`, whiteSpace: `pre-wrap` }}>{assignment?.kind === `doodle` ? assignment?.prompt ?? `` : ``}</Text>\r\n            {!!assignment?.doodle && (\r\n                <DoodleDisplayView style={{ width: 104, height: 104, color: `#FFFFFF`, backgroundColor: `#000000` }} drawing={decodeDoodleDrawing(assignment.doodle)} shouldAnimate enableRedraw />\r\n            )}\r\n            <Text style={{ color: `#FFFF00`, whiteSpace: `pre-wrap` }}>{assignment?.kind === `describe` ? assignment?.prompt ?? `` : ``}</Text>\r\n        </View>\r\n    );\r\n};\r\n\r\nexport const DoodlePartyPlayView = (props: { controller: DoodlePartyController }) => {\r\n    const { clientState, meshState } = props.controller;\r\n    const { clientKey } = clientState.client.clientPlayer;\r\n    const assigment = meshState?.players.find(x => x.clientKey === clientKey)?.assignment;\r\n    const [text, setText] = useState(``);\r\n\r\n    useEffect(() => {\r\n        setText(``);\r\n    }, [assigment]);\r\n\r\n    if (!assigment) {\r\n        return (\r\n            <>\r\n                <View style={{ padding: 8 }}>\r\n                    <Text>Please Wait Until Next Round</Text>\r\n                </View>\r\n                <PartyViewer controller={props.controller} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    if (assigment.kind === `describe` && assigment.doodle) {\r\n        const onDoneDescribe = () => {\r\n            assigment.prompt = text;\r\n            props.controller.sendAssignment(assigment);\r\n        };\r\n\r\n        return (\r\n            <>\r\n                <View style={{ flexDirection: `column`, alignItems: `center` }}>\r\n                    <Text style={{ fontSize: 20, margin: 8 }}>Describe</Text>\r\n                    <DoodleDisplayView style={{ width: 312, height: 312, color: `#FFFFFF`, backgroundColor: `#000000` }} drawing={decodeDoodleDrawing(assigment.doodle)} shouldAnimate enableRedraw />\r\n                    {!assigment.prompt && (\r\n                        <>\r\n                            <Text style={{ fontSize: 20, margin: 8, color: `#FFFF00` }}>What is this?</Text>\r\n                            <C.Input_Text value={text} onChange={setText} onSubmit={onDoneDescribe} />\r\n                            <C.Button_FieldInline onPress={onDoneDescribe}>Done</C.Button_FieldInline>\r\n                        </>\r\n                    )}\r\n                    {assigment.prompt && (\r\n                        <>\r\n                            <Text style={{ fontSize: 20, margin: 8, color: `#FFFF00` }}>{assigment.prompt}</Text>\r\n                            <Text style={{ fontSize: 20, margin: 8, color: `#FFFF00` }}>Waiting for other players</Text>\r\n                            <DoodlePartyPlayerList controller={props.controller} hideInactive />\r\n                            <View style={{ padding: 8 }}>\r\n                                <ActivityIndicator size='large' color='#FFFF00' />\r\n                            </View>\r\n                        </>\r\n                    )}\r\n                </View>\r\n            </>\r\n        );\r\n    }\r\n\r\n    // Doodle\r\n    if (assigment.doodle) {\r\n        return (\r\n            <>\r\n                <View style={{ flexDirection: `column`, alignItems: `center` }}>\r\n                    <Text style={{ fontSize: 20, margin: 8 }}>Draw</Text>\r\n                    <DoodleDisplayView style={{ width: 312, height: 312, color: `#FFFFFF`, backgroundColor: `#000000` }} drawing={decodeDoodleDrawing(assigment.doodle)} shouldAnimate enableRedraw />\r\n                    <Text style={{ fontSize: 20, margin: 8, color: `#FFFF00` }}>Waiting for other players</Text>\r\n                    <DoodlePartyPlayerList controller={props.controller} hideInactive />\r\n                    <View style={{ padding: 8 }}>\r\n                        <ActivityIndicator size='large' color='#FFFF00' />\r\n                    </View>\r\n                </View>\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Text style={{ fontSize: 20, margin: 8 }}>Draw</Text>\r\n            <DoodleGameView_DrawWord prompt={assigment.prompt ?? ``} onDone={(x) => {\r\n                assigment.doodle = encodeDoodleDrawing(x);\r\n                props.controller.sendAssignment(assigment);\r\n            }} />\r\n        </>\r\n    );\r\n};\r\n","/* eslint-disable react/no-array-index-key */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { View, Text, ActivityIndicator } from 'react-native-lite';\r\nimport { useDoodlePartyController, DoodlePartyController } from './doodle-party-state';\r\nimport { DoodlePartyProfileView } from './doodle-party-user-profile';\r\nimport { DoodlePartyStatusBar, DoodlePartyPlayView, PartyViewer } from './doodle-party-components';\r\n\r\nexport const DoodlePartyView = () => {\r\n\r\n    const controller = useDoodlePartyController();\r\n    return (\r\n        <>\r\n            <DoodlePartyStatusBar controller={controller} />\r\n            <DoodlePartyView_Inner controller={controller} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport const DoodlePartyView_Inner = ({ controller }: { controller: DoodlePartyController }) => {\r\n\r\n    const [mode, setMode] = useState(`profile` as 'profile' | 'play' | 'viewer');\r\n\r\n    const onProfileDone = () => {\r\n        // console.log(`onProfileDone`);\r\n        setMode(`play`);\r\n    };\r\n\r\n    if (controller.loading) {\r\n        return (\r\n            <ActivityIndicator size='large' color='#FFFF00' />\r\n        );\r\n    }\r\n\r\n    // Debug\r\n    if (controller.clientState.client.role === `debug`) {\r\n        return (\r\n            <DebugView controller={controller} />\r\n        );\r\n    }\r\n\r\n    // Viewer\r\n    if (controller.clientState.client.role === `viewer`) {\r\n        return (\r\n            <PartyViewer controller={controller} />\r\n        );\r\n    }\r\n\r\n    // Player\r\n\r\n    // Profile\r\n    if (mode === `profile`) {\r\n        // console.log(`DoodlePartyView profile`, { controller });\r\n        return (\r\n            <DoodlePartyProfileView controller={controller} onDone={onProfileDone} />\r\n        );\r\n    }\r\n\r\n    // // Waiting\r\n    // if (controller.gameState.players.some(x => !x.isReady)) {\r\n    //     return (\r\n    //         <PartyViewer controller={controller} />\r\n    //     );\r\n    // }\r\n\r\n    // Play View\r\n    return (\r\n        <DoodlePartyPlayView controller={controller} />\r\n    );\r\n};\r\n\r\nconst DebugView = (props: { controller: DoodlePartyController }) => {\r\n    const { clientState, meshState, _events, _messages } = props.controller;\r\n\r\n    const [renderId, setRenderId] = useState(0);\r\n    useEffect(() => {\r\n        const intervalId = setInterval(() => { setRenderId(s => s + 1); }, 1000);\r\n        return () => {\r\n            clearInterval(intervalId);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <PartyViewer controller={props.controller} />\r\n            <View style={{ marginTop: 64, background: `#555555` }}>\r\n\r\n                <Text style={{ fontSize: 20 }}>Debug</Text>\r\n                <View>\r\n                    <Text>{`Query: ${JSON.stringify(clientState.client._query)}`}</Text>\r\n                    <Text>{`Room: ${clientState.client.room}`}</Text>\r\n                    <Text>{`Role: ${clientState.client.role}`}</Text>\r\n                </View>\r\n\r\n                <View style={{ padding: 4 }}>\r\n                    <Text style={{ whiteSpace: `pre-wrap`, fontSize: 18 }}>Host</Text>\r\n                    <Text style={{ whiteSpace: `pre-wrap`, fontSize: 14 }}>{`'${meshState?.hostClientKey ?? ``}'`}</Text>\r\n\r\n                    <Text style={{ whiteSpace: `pre-wrap`, fontSize: 18 }}>Players</Text>\r\n                    {meshState?.players.map((x, i) => (\r\n                        <Text key={i} style={{ whiteSpace: `pre-wrap`, fontSize: 14 }}>{JSON.stringify(x)}</Text>\r\n                    ))}\r\n                </View>\r\n\r\n                <Text style={{ fontSize: 20 }}>Web Sockets</Text>\r\n                <View>\r\n                    <View style={{ padding: 4 }}>\r\n                        <Text style={{ whiteSpace: `pre-wrap`, fontSize: 18 }}>Events</Text>\r\n                        {_events.map((x, i) => (\r\n                            <Text key={i} style={{ whiteSpace: `pre-wrap`, fontSize: 14 }}>{JSON.stringify(x)}</Text>\r\n                        ))}\r\n                    </View>\r\n                    <View style={{ padding: 4 }}>\r\n                        <Text style={{ whiteSpace: `pre-wrap`, fontSize: 18 }}>Messages</Text>\r\n                        {_messages.map((x, i) => (\r\n                            <Text key={i} style={{ whiteSpace: `pre-wrap`, fontSize: 14 }}>{`${x.t} ${x._r - x.t}: ${JSON.stringify(x)}`}</Text>\r\n                        ))}\r\n                    </View>\r\n                </View>\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n"],"sourceRoot":""}