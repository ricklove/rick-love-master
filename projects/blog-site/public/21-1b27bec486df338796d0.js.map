{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/games/educational-games/doodle.tsx","webpack:///D:/Projects/rick-love-master/code/games/educational-games/doodle-subjects/doodle-storage.ts","webpack:///D:/Projects/rick-love-master/code/games/educational-games/doodle-subjects/doodle-spelling.tsx"],"names":["styles","container","alignItems","drawing","width","height","color","backgroundColor","drawingChoicesView","maxWidth","flexDirection","flexWrap","drawingChoiceWrapper","padding","drawingChoice","promptView","justifyContent","promptText","fontSize","buttonView","buttonText","EducationalGame_Doodle","props","useState","problemSourceKey","setProblemSourceKey","problemService","onOpen","onClose","onSubjectNavigation","s","EducationalGame_Doodle_Inner","problem","setProblem","mode","setMode","drawings","setDrawings","prompt","answers","find","x","isCorrect","value","gotoNextProblem","p","getNextProblem","question","onQuestion","useEffect","useAutoLoadingError","doWork","loading","error","onChooseBest","onDone","stopIfObsolete","a","segments","length","drawingStorage","saveDrawing","getDrawings","result","DoodleGameView_DrawWord","defaultDoodleDrawing","setDrawing","style","onChange","onPress","DoodleGameView_ChooseBest","map","storageAccess","JSON","parse","localStorage","getItem","setItem","stringify","EducationalGame_Doodle_Spelling","memory","speechService","useRef","createSpeechService","Platform","OS","hasStarted","setHasStarted","languange","current","onClick","speak","alignSelf","createAutoSavedProblemService","createReviewProblemService","createSpellingProblemService","push","options","includeOtherPrompts","maxCount","samePromptDrawings","filter","otherPromptDrawings","allDrawings","randomItem","shuffle","slice"],"mappings":"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","file":"21-1b27bec486df338796d0.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { DoodleDisplayView, DoodleDrawerView } from 'doodle/doodle-view';\r\nimport { defaultDoodleDrawing, DoodleDrawing, DoodleWithPrompt } from 'doodle/doodle';\r\nimport { View, Text, TouchableOpacity } from 'react-native-lite';\r\nimport { useAutoLoadingError } from 'utils-react/hooks';\r\nimport { ProblemService, Problem } from './problems/problems-service';\r\nimport { SubjectNavigator } from './utils/subject-navigator';\r\n\r\nexport const styles = {\r\n    container: {\r\n        alignItems: `center`,\r\n    },\r\n    drawing: {\r\n        width: 312,\r\n        height: 312,\r\n        color: `#FFFFFF`,\r\n        backgroundColor: `#000000`,\r\n    },\r\n    drawingChoicesView: {\r\n        maxWidth: 312 + 4 * 4 + 4,\r\n        flexDirection: `row`,\r\n        flexWrap: `wrap`,\r\n    },\r\n    drawingChoiceWrapper: {\r\n        padding: 4,\r\n    },\r\n    drawingChoice: {\r\n        width: 78,\r\n        height: 78,\r\n        color: `#FFFFFF`,\r\n        backgroundColor: `#000000`,\r\n    },\r\n    promptView: {\r\n        justifyContent: `center`,\r\n        alignItems: `center`,\r\n    },\r\n    promptText: {\r\n        fontSize: 20,\r\n    },\r\n    buttonView: {\r\n        padding: 8,\r\n        backgroundColor: `#111111`,\r\n    },\r\n    buttonText: {\r\n        fontSize: 20,\r\n        color: `#FFFF00`,\r\n    },\r\n} as const;\r\n\r\n\r\nexport type DoodleDrawingStorageService = {\r\n    saveDrawing: (drawing: DoodleDrawing, prompt: string) => Promise<void>;\r\n    getDrawings: (prompt: string, options?: { includeOtherPrompts?: boolean, maxCount?: number }) => Promise<{ drawings: DoodleWithPrompt[] }>;\r\n    // saveSelection: (drawing:DoodleDrawing)\r\n};\r\n\r\nexport const EducationalGame_Doodle = (props: { problemService: ProblemService, drawingStorage: DoodleDrawingStorageService }) => {\r\n    const [problemSourceKey, setProblemSourceKey] = useState(0);\r\n\r\n    return (<>\r\n        <EducationalGame_Doodle_Inner {...props} problemSourceKey={problemSourceKey} />\r\n        <SubjectNavigator problemService={props.problemService}\r\n            onOpen={() => { }}\r\n            onClose={() => { }}\r\n            onSubjectNavigation={() => { setProblemSourceKey(s => s + 1); }}\r\n        />\r\n    </>);\r\n};\r\n\r\nexport const EducationalGame_Doodle_Inner = (props: { problemService: ProblemService, drawingStorage: DoodleDrawingStorageService, problemSourceKey: number }) => {\r\n\r\n    const [problem, setProblem] = useState(null as null | Problem);\r\n    const [mode, setMode] = useState(`drawPrompt` as 'drawPrompt' | 'chooseCorrect' | 'chooseBest');\r\n    const [drawings, setDrawings] = useState(null as null | DoodleWithPrompt[]);\r\n    const prompt = problem?.answers.find(x => x.isCorrect)?.value ?? ``;\r\n\r\n    const gotoNextProblem = () => {\r\n        const p = props.problemService.getNextProblem();\r\n        if (!p.question) { return; }\r\n        setProblem(p);\r\n        setMode(`drawPrompt`);\r\n        p.onQuestion?.();\r\n    };\r\n\r\n    useEffect(() => {\r\n        gotoNextProblem();\r\n    }, [props.problemSourceKey]);\r\n\r\n    const { loading, error, doWork } = useAutoLoadingError();\r\n\r\n    const onDrawingDone = (drawing: DoodleDrawing) => {\r\n        // props.onDone(drawing);\r\n\r\n        // Save drawing with word prompt\r\n        doWork(async (stopIfObsolete) => {\r\n            if (drawing.segments.length > 0) {\r\n                await props.drawingStorage.saveDrawing(drawing, prompt);\r\n            }\r\n            stopIfObsolete();\r\n\r\n            const result = await props.drawingStorage.getDrawings(prompt);\r\n\r\n            if (result.drawings.length <= 1) {\r\n                gotoNextProblem();\r\n                return;\r\n            }\r\n\r\n            setDrawings(result.drawings);\r\n            setMode(`chooseBest`);\r\n        });\r\n    };\r\n\r\n    const onChooseBest = (value: DoodleWithPrompt) => {\r\n        gotoNextProblem();\r\n    };\r\n\r\n    if (!problem) {\r\n        return (\r\n            <>\r\n            </>\r\n        );\r\n    }\r\n\r\n    if (mode === `chooseBest` && drawings) {\r\n        return (\r\n            <>\r\n                <DoodleGameView_ChooseBest prompt={prompt} drawings={drawings} onChooseBest={onChooseBest} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <DoodleGameView_DrawWord prompt={prompt} onDone={onDrawingDone} />\r\n            {/* <DoodleDisplayView style={styles.drawing} drawing={defaultDoodleDrawing()} /> */}\r\n        </>\r\n    );\r\n};\r\n\r\nexport const DoodleGameView_DrawWord = (props: { prompt: string, onDone: (drawing: DoodleDrawing) => void }) => {\r\n    const [drawing, setDrawing] = useState(defaultDoodleDrawing());\r\n    const changeDoodle = (value: DoodleDrawing) => {\r\n        setDrawing(value);\r\n    };\r\n\r\n    const done = () => {\r\n        props.onDone(drawing);\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Reset problem when prompt changes\r\n        setDrawing(defaultDoodleDrawing());\r\n    }, [props.prompt]);\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <DoodleDrawerView style={styles.drawing} drawing={drawing} onChange={changeDoodle} />\r\n            <View style={styles.promptView}>\r\n                <Text style={styles.promptText}>{props.prompt}</Text>\r\n            </View>\r\n            <TouchableOpacity onPress={done}>\r\n                <View style={styles.buttonView}>\r\n                    <Text style={styles.buttonText}>Done</Text>\r\n                </View>\r\n            </TouchableOpacity>\r\n        </View>\r\n    );\r\n};\r\n\r\nexport const DoodleGameView_ChooseBest = (props: { prompt: string, drawings: DoodleWithPrompt[], onChooseBest: (drawing: DoodleWithPrompt) => void }) => {\r\n    return (\r\n        <View style={styles.container}>\r\n            <View style={styles.promptView}>\r\n                <Text style={styles.promptText}>{props.prompt}</Text>\r\n            </View>\r\n            <View style={styles.drawingChoicesView} >\r\n                {props.drawings.map(x => (\r\n                    <TouchableOpacity onPress={() => props.onChooseBest(x)}>\r\n                        <View style={styles.drawingChoiceWrapper} >\r\n                            <DoodleDisplayView style={styles.drawingChoice} drawing={x.drawing} />\r\n                        </View>\r\n                    </TouchableOpacity>\r\n                ))}\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n","import { DoodleDrawing, DoodleWithPrompt } from 'doodle/doodle';\r\nimport { randomIndex, randomItem } from 'utils/random';\r\nimport { shuffle } from 'utils/arrays';\r\nimport { DoodleDrawingStorageService } from '../doodle';\r\n\r\nconst storageAccess = {\r\n    load: (): DoodleWithPrompt[] => {\r\n        try {\r\n            return JSON.parse(localStorage.getItem(`_doodleDrawings`) ?? `NULL!{}`);\r\n        } catch{ return []; }\r\n    },\r\n    save: (value: DoodleWithPrompt[]) => {\r\n        localStorage.setItem(`_doodleDrawings`, JSON.stringify(value));\r\n    },\r\n};\r\n\r\nexport const createDoodleDrawingStorageService = () => {\r\n\r\n    const memory = {\r\n        drawings: [] as DoodleWithPrompt[],\r\n    };\r\n    memory.drawings = storageAccess.load();\r\n\r\n    const service: DoodleDrawingStorageService = {\r\n        saveDrawing: async (drawing, prompt) => {\r\n            memory.drawings.push({ drawing, prompt });\r\n            storageAccess.save(memory.drawings);\r\n        },\r\n        getDrawings: async (prompt, options) => {\r\n            const {\r\n                includeOtherPrompts = false,\r\n                maxCount = 4,\r\n            } = options ?? {};\r\n\r\n            const samePromptDrawings = memory.drawings.filter(x => x.prompt === prompt);\r\n            const otherPromptDrawings = includeOtherPrompts ? memory.drawings.filter(x => x.prompt !== prompt) : [];\r\n            const allDrawings = includeOtherPrompts\r\n                ? [randomItem(samePromptDrawings), ...shuffle(otherPromptDrawings).slice(0, maxCount - 1)]\r\n                : samePromptDrawings;\r\n            const drawings = shuffle(allDrawings).slice(0, maxCount);\r\n            return { drawings };\r\n        },\r\n    };\r\n\r\n    return service;\r\n};\r\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\nimport React, { useRef, useState } from 'react';\r\nimport { Text, View, Platform } from 'react-native-lite';\r\nimport { EducationalGame_Doodle } from '../doodle';\r\nimport { createSpeechService } from '../utils/speech';\r\nimport { createReviewProblemService } from '../problems/problems-reviewer';\r\nimport { createSpellingProblemService } from '../problems/spelling/spelling-problem-service';\r\nimport { VoiceChooser } from '../utils/voice-chooser';\r\nimport { createAutoSavedProblemService } from '../problems/problem-state-storage';\r\nimport { createDoodleDrawingStorageService } from './doodle-storage';\r\n\r\nexport const EducationalGame_Doodle_Spelling = (props: {}) => {\r\n    const speechService = useRef(createSpeechService());\r\n    const [hasStarted, setHasStarted] = useState(Platform.OS !== `web`);\r\n\r\n    // Only web\r\n    if (!hasStarted) {\r\n        const speak = () => { speechService.current.speak(`Start`); setHasStarted(true); };\r\n        return (\r\n            <View>\r\n                <VoiceChooser languange='en' speechService={speechService.current} />\r\n                <div onClick={() => speak()}>\r\n                    <View style={{ height: 300, alignSelf: `center`, alignItems: `center`, justifyContent: `center` }}>\r\n                        <Text style={{ fontSize: 36 }}>Start</Text>\r\n                    </View>\r\n                </div>\r\n            </View>\r\n        );\r\n    }\r\n\r\n    return <EducationalGame_Doodle\r\n        problemService={createAutoSavedProblemService(createReviewProblemService(createSpellingProblemService({ speechService: speechService.current }), {}), `ProblemsSpelling`)}\r\n        drawingStorage={createDoodleDrawingStorageService()}\r\n    />;\r\n};\r\n"],"sourceRoot":""}