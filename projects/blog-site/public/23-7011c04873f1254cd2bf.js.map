{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/games/educational-games/doodle-game.tsx","webpack:///D:/Projects/rick-love-master/code/games/educational-games/doodle-subjects/doodle-spelling.tsx"],"names":["EducationalGame_Doodle","props","useState","problemSourceKey","setProblemSourceKey","isNavigatorOpen","setIsNavigatorOpen","problemService","onOpen","onClose","onSubjectNavigation","s","EducationalGame_Doodle_Inner","problem","setProblem","mode","setMode","drawings","setDrawings","prompt","useRef","current","gotoNextProblem","p","getNextProblem","setTimeout","gotoTypeMode","speakPrompt","useEffect","useAutoLoadingError","doWork","loading","error","stopIfObsolete","a","drawingStorage","getDrawings","maxCount","includeOtherPrompts","result","doodles","gotoDrawPromptMode","gotoChooseBestMode","length","onDone","sayAgain","onChooseBest","value","saveBestDrawingSelection","hint","drawing","segments","saveDrawing","onSkip","EducationalGame_Doodle_Spelling","speechService","createSpeechService","Platform","OS","hasStarted","setHasStarted","createDoodleDrawingStorageService","inner","createProgressGameProblemService","createAutoSavedProblemService","createSpellingProblemService","sectionSize","lastProblem","getSections","gotoSection","recordAnswer","answers","find","x","isCorrect","question","onQuestion","languange","onClick","speak","style","height","alignSelf","alignItems","justifyContent","fontSize","size","color"],"mappings":"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","file":"23-7011c04873f1254cd2bf.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { DoodleDrawing, DoodleData, DoodleDrawingStorageService } from 'doodle/doodle';\r\nimport { useAutoLoadingError } from 'utils-react/hooks';\r\nimport { DoodleGameView_TypeExpected, DoodleGameView_ChooseBest, DoodleGameView_DrawWord } from 'doodle/doodle-components';\r\nimport { SubjectNavigator } from './utils/subject-navigator';\r\n\r\nexport const styles = {\r\n    container: {\r\n        alignItems: `center`,\r\n    },\r\n    drawing: {\r\n        width: 312,\r\n        height: 312,\r\n        color: `#FFFFFF`,\r\n        backgroundColor: `#000000`,\r\n    },\r\n    drawingChoicesView: {\r\n        maxWidth: 312 + 4 * 4 + 4,\r\n        flexDirection: `row`,\r\n        flexWrap: `wrap`,\r\n    },\r\n    drawingChoiceWrapper: {\r\n        padding: 4,\r\n    },\r\n    drawingChoice: {\r\n        width: 78,\r\n        height: 78,\r\n        color: `#FFFFFF`,\r\n        backgroundColor: `#000000`,\r\n    },\r\n    titleView: {\r\n        justifyContent: `center`,\r\n        alignItems: `center`,\r\n    },\r\n    titleText: {\r\n        fontSize: 20,\r\n        color: `#FFFFFF`,\r\n    },\r\n    promptView: {\r\n        justifyContent: `center`,\r\n        alignItems: `center`,\r\n    },\r\n    promptText: {\r\n        fontSize: 20,\r\n        color: `#FFFF00`,\r\n    },\r\n    hintText: {\r\n        fontSize: 14,\r\n        color: `#FFFF00`,\r\n    },\r\n    buttonRowView: {\r\n        flexDirection: `row`,\r\n    },\r\n    buttonView: {\r\n        margin: 4,\r\n        padding: 8,\r\n        backgroundColor: `#111111`,\r\n    },\r\n    buttonText: {\r\n        fontSize: 20,\r\n        color: `#FFFF00`,\r\n    },\r\n} as const;\r\n\r\nexport type DoodleProblemService = {\r\n    getSections: () => { key: string, name: string, isComplete: boolean }[];\r\n    gotoSection: (section: { key: string }) => void;\r\n    getNextProblem: () => DoodleProblem | null;\r\n};\r\ntype DoodleProblem = {\r\n    prompt: string;\r\n    hint?: string;\r\n    speakPrompt?: () => void;\r\n};\r\n\r\nexport const EducationalGame_Doodle = (props: { problemService: DoodleProblemService, drawingStorage: DoodleDrawingStorageService }) => {\r\n    const [problemSourceKey, setProblemSourceKey] = useState(0);\r\n    const [isNavigatorOpen, setIsNavigatorOpen] = useState(false);\r\n\r\n    return (<>\r\n        {!isNavigatorOpen && (<EducationalGame_Doodle_Inner {...props} problemSourceKey={problemSourceKey} />)}\r\n        <SubjectNavigator problemService={props.problemService}\r\n            onOpen={() => setIsNavigatorOpen(true)}\r\n            onClose={() => setIsNavigatorOpen(false)}\r\n            onSubjectNavigation={() => setProblemSourceKey(s => s + 1)}\r\n        />\r\n    </>);\r\n};\r\n\r\nexport const EducationalGame_Doodle_Inner = (props: { problemService: DoodleProblemService, drawingStorage: DoodleDrawingStorageService, problemSourceKey: number }) => {\r\n\r\n    const [problem, setProblem] = useState(null as null | DoodleProblem);\r\n    const [mode, setMode] = useState(`type` as 'type' | 'drawPrompt' | 'chooseCorrect' | 'chooseBest');\r\n    const [drawings, setDrawings] = useState(null as null | DoodleData[]);\r\n    const prompt = useRef(problem?.prompt ?? ``);\r\n    prompt.current = problem?.prompt ?? ``;\r\n\r\n    const gotoNextProblem = () => {\r\n        const p = props.problemService.getNextProblem();\r\n        if (!p) { return; }\r\n        setProblem(p);\r\n        setTimeout(gotoTypeMode);\r\n        p.speakPrompt?.();\r\n    };\r\n\r\n    useEffect(() => {\r\n        gotoNextProblem();\r\n    }, [props.problemSourceKey]);\r\n\r\n    const { loading, error, doWork } = useAutoLoadingError();\r\n\r\n    const gotoTypeMode = () => {\r\n        doWork(async (stopIfObsolete) => {\r\n            const result = await props.drawingStorage.getDrawings(prompt.current, { maxCount: 1, includeOtherPrompts: false });\r\n            setDrawings(result.doodles);\r\n            setMode(`type`);\r\n        });\r\n    };\r\n\r\n    const onTypeDone = () => {\r\n        doWork(async (stopIfObsolete) => {\r\n            setTimeout(gotoDrawPromptMode);\r\n        });\r\n    };\r\n\r\n    const sayAgain = () => {\r\n        problem?.speakPrompt?.();\r\n    };\r\n\r\n    const gotoDrawPromptMode = () => {\r\n        setMode(`drawPrompt`);\r\n    };\r\n\r\n    const onDrawingDone = (drawing: DoodleDrawing) => {\r\n        // props.onDone(drawing);\r\n\r\n        // Save drawing with word prompt\r\n        doWork(async (stopIfObsolete) => {\r\n            if (drawing.segments.length > 0) {\r\n                await props.drawingStorage.saveDrawing(prompt.current, drawing);\r\n            }\r\n            stopIfObsolete();\r\n            setTimeout(gotoChooseBestMode);\r\n        });\r\n    };\r\n    const onDrawingSkip = () => {\r\n        setTimeout(gotoChooseBestMode);\r\n    };\r\n\r\n    const gotoChooseBestMode = () => {\r\n        doWork(async (stopIfObsolete) => {\r\n            const result = await props.drawingStorage.getDrawings(prompt.current);\r\n            stopIfObsolete();\r\n\r\n            if (result.doodles.length <= 1) {\r\n                gotoNextProblem();\r\n                return;\r\n            }\r\n\r\n            setDrawings(result.doodles);\r\n            setMode(`chooseBest`);\r\n        });\r\n    };\r\n\r\n    const onChooseBest = (value: DoodleData) => {\r\n        doWork(async (stopIfObsolete) => {\r\n            await props.drawingStorage.saveBestDrawingSelection(value);\r\n            stopIfObsolete();\r\n            gotoNextProblem();\r\n        });\r\n    };\r\n\r\n\r\n    if (!problem) {\r\n        return (\r\n            <>\r\n            </>\r\n        );\r\n    }\r\n\r\n    if (mode === `type`) {\r\n        return (\r\n            <>\r\n                <DoodleGameView_TypeExpected prompt={prompt.current} drawings={drawings ?? []} onDone={onTypeDone} sayAgain={sayAgain} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    if (mode === `chooseBest` && drawings) {\r\n        return (\r\n            <>\r\n                <DoodleGameView_ChooseBest prompt={prompt.current} drawings={drawings} onChooseBest={onChooseBest} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <DoodleGameView_DrawWord prompt={prompt.current} hint={problem.hint} onDone={onDrawingDone} onSkip={onDrawingSkip} />\r\n            {/* <DoodleDisplayView style={styles.drawing} drawing={defaultDoodleDrawing()} /> */}\r\n        </>\r\n    );\r\n};\r\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\nimport React, { useRef, useState, useEffect } from 'react';\r\nimport { Text, View, Platform, ActivityIndicator } from 'react-native-lite';\r\nimport { createDoodleDrawingStorageService } from 'doodle/doodle-storage';\r\nimport { DoodleDrawingStorageService } from 'doodle/doodle';\r\nimport { useAutoLoadingError } from 'utils-react/hooks';\r\nimport { Problem } from '../problems/problems-service';\r\nimport { EducationalGame_Doodle, DoodleProblemService } from '../doodle-game';\r\nimport { createSpeechService } from '../utils/speech';\r\nimport { createSpellingProblemService } from '../problems/spelling/spelling-problem-service';\r\nimport { VoiceChooser } from '../utils/voice-chooser';\r\nimport { createAutoSavedProblemService } from '../problems/problem-state-storage';\r\nimport { createProgressGameProblemService } from '../progress-games/progress-game';\r\n\r\nexport const EducationalGame_Doodle_Spelling = (props: {}) => {\r\n    const speechService = useRef(createSpeechService());\r\n    const [hasStarted, setHasStarted] = useState(Platform.OS !== `web`);\r\n\r\n    const { loading, error, doWork } = useAutoLoadingError();\r\n    const drawingStorage = useRef(null as null | DoodleDrawingStorageService);\r\n    const problemService = useRef(null as null | DoodleProblemService);\r\n    useEffect(() => {\r\n        doWork(async (stopIfObsolete) => {\r\n            drawingStorage.current = await createDoodleDrawingStorageService();\r\n            stopIfObsolete();\r\n\r\n            const inner = createProgressGameProblemService(\r\n                createAutoSavedProblemService(createSpellingProblemService({ speechService: speechService.current, sectionSize: 8 })\r\n                    , `ProblemsSpellingDoodle`));\r\n\r\n            let lastProblem = null as null | Problem;\r\n            problemService.current = {\r\n                getSections: inner.getSections,\r\n                gotoSection: inner.gotoSection,\r\n                getNextProblem: () => {\r\n                    if (lastProblem) {\r\n                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                        inner.recordAnswer(lastProblem, lastProblem.answers.find(x => x.isCorrect)!);\r\n                    }\r\n\r\n                    const p = inner.getNextProblem();\r\n                    if (!p.question) { return null; }\r\n                    lastProblem = p;\r\n\r\n                    return {\r\n                        prompt: p.answers.find(x => x.isCorrect)?.value ?? ``,\r\n                        // hint: p.question,\r\n                        speakPrompt: p.onQuestion,\r\n                    };\r\n                },\r\n            };\r\n        });\r\n    }, []);\r\n\r\n    // Only web\r\n    if (!hasStarted) {\r\n        const speak = () => { speechService.current.speak(`Start`); setHasStarted(true); };\r\n        return (\r\n            <View>\r\n                <VoiceChooser languange='en' speechService={speechService.current} />\r\n                <div onClick={() => speak()}>\r\n                    <View style={{ height: 300, alignSelf: `center`, alignItems: `center`, justifyContent: `center` }}>\r\n                        <Text style={{ fontSize: 36 }}>Start</Text>\r\n                    </View>\r\n                </div>\r\n            </View>\r\n        );\r\n    }\r\n\r\n    if (loading || !drawingStorage.current || !problemService.current) {\r\n        return (\r\n            <>\r\n                <ActivityIndicator size='large' color='#FFFF00' />\r\n            </>\r\n        );\r\n    }\r\n\r\n    return <EducationalGame_Doodle\r\n        problemService={problemService.current}\r\n        drawingStorage={drawingStorage.current}\r\n    />;\r\n};\r\n"],"sourceRoot":""}