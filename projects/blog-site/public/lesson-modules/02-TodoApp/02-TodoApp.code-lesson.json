{"key":"02-TodoApp","title":"Todo App","lessons":[{"key":"Lesson-1603290297949-5436281969026002","projectState":{"files":[{"path":"app.tsx","content":"import React from 'react';\nimport { TodoList } from './todo';\n\nexport const App = (props: {}) => {\n    return (\n        <TodoList />\n    );\n};","language":"tsx"},{"path":"todo.tsx","content":"import React from 'react';\n\nexport const TodoList = (props: {}) => {\n    return (\n        <span>Todo List!</span>\n    );\n};","language":"tsx"}],"filesHashCode":"7384702426061779"},"focus":{"filePath":"todo.tsx","index":28,"length":95},"title":"TodoList Component","objective":"Create a Todo List Component","explanation":"We will create a new todo list component in a separate file.","task":"Type the code for a component called TodoList that contains a span which displays \"Todo List!\"","descriptions":["The TodoList component will display the entire task list.","The export keyword allows other files or modules to use the component."],"experiments":[{"replacements":[{"selection":{"filePath":"app.tsx","index":0,"length":63},"content":"import React from 'react';\n\n"},{"selection":{"filePath":"app.tsx","index":140,"length":0},"content":"};\n\nconst TodoList = (props: {}) => {\n    return (\n        <span>Todo List!</span>\n    );\n"},{"selection":{"filePath":"todo.tsx","index":28,"length":95},"content":"// Change to app.tsx to see the code"}],"comment":"It's possible to put this in the main app file.","filesHashCode":"7384702426061779"},{"replacements":[{"selection":{"filePath":"todo.tsx","index":91,"length":5},"content":"div>\n            <"},{"selection":{"filePath":"todo.tsx","index":100,"length":12},"content":"Item text='A' />\n            <TodoItem text='B' />\n        </div>\n    );\n};\n\nconst TodoItem = (props: { text: string }) => {\n    return (\n        <div>{props.text}</div"}],"comment":"However, it's better to keep related components in their own file.","filesHashCode":"7384702426061779"}]},{"key":"Lesson-1603291463724-7611764834859949","projectState":{"files":[{"path":"app.tsx","content":"import React from 'react';\nimport { TodoList } from './todo';\n\nexport const App = (props: {}) => {\n    return (\n        <TodoList />\n    );\n};","language":"tsx"},{"path":"todo.tsx","content":"import React from 'react';\n\nexport const TodoList = (props: {}) => {\n    return (\n        <span>Todo List!</span>\n    );\n};","language":"tsx"}],"filesHashCode":"7384702426061779"},"focus":{"filePath":"app.tsx","index":63,"length":79},"title":"Use the TodoList Component","objective":"Use the TodoList component as the main component of the app.","explanation":"We will use the TodoList component in the App component.","task":"Type the tag for the TodoList component.","descriptions":["The App contains only the TodoList component.","It's good to keep the main App component simple."],"experiments":[{"replacements":[{"selection":{"filePath":"app.tsx","index":63,"length":79},"content":"export const App = () => <TodoList />;"}],"comment":"This could be simplified","filesHashCode":"7384702426061779"}]},{"key":"Lesson-1603294014492-2447908444392355","projectState":{"files":[{"path":"app.tsx","content":"import React from 'react';\nimport { TodoList } from './todo';\n\nexport const App = (props: {}) => {\n    return (\n        <TodoList />\n    );\n};","language":"tsx"},{"path":"todo.tsx","content":"import React from 'react';\n\nexport const TodoList = (props: {}) => {\n    return (\n        <span>Todo List!</span>\n    );\n};","language":"tsx"}],"filesHashCode":"7384702426061779"},"focus":{"filePath":"app.tsx","index":27,"length":34},"title":"Import the TodoList Component","objective":"Import the TodoList component to use it in this file.","explanation":"We need to import the TodoList component in order to use it. (This was already done for you in the last step.)","task":"Type the import statement ","descriptions":["The Todo List is imported from the ./todo path.","A path that starts with a single period like './todo' means that the file is in the same directory.","If the import path starts with two periods, it means the file is in a parent directory ../parent-folder.","The imported TodoList component is wrapped in { } because it is a single item that is exported from the target file.","The import React statement does not use { } because it is using a default export."],"experiments":[{"replacements":[{"selection":{"filePath":"app.tsx","index":63,"length":79},"content":"export const App = () => <TodoList />;"}],"comment":"This could be simplified","filesHashCode":"7384702426061779"}]},{"key":"Lesson-1603295534206-9406149260265009","projectState":{"files":[{"path":"app.tsx","content":"import React from 'react';\nimport { TodoList } from './todo';\n\nexport const App = (props: {}) => {\n    return (\n        <TodoList />\n    );\n};","language":"tsx"},{"path":"todo.tsx","content":"import React from 'react';\n\nexport const TodoList = (props: {}) => {\n    return (\n        <div>\n            <TodoItem text='A' />\n            <TodoItem text='B' />\n            <TodoItem text='C' />\n        </div>\n    );\n};\n\nconst TodoItem = (props: { text: string }) => {\n    return (\n        <div>{props.text}</div>\n    );\n};","language":"tsx"}],"filesHashCode":"2080572345776395"},"focus":{"filePath":"todo.tsx","index":224,"length":14},"title":"TodoItem Component","objective":"Create a TodoItem Component","explanation":"We need to create another TodoItem component.","task":"Type the declaration for the TodoItem","descriptions":["The TodoItem component is declared as a const variable."],"experiments":[{"replacements":[{"selection":{"filePath":"todo.tsx","index":224,"length":48},"content":"export const TodoItem = (props: { text: string }) => {\n"}],"comment":"The TodoItem could be exported also, but it shouldn't be since it is only a part of the TodoList.","filesHashCode":"2080572345776395"}]},{"key":"Lesson-1603295955027-1635328705472774","projectState":{"files":[{"path":"app.tsx","content":"import React from 'react';\nimport { TodoList } from './todo';\n\nexport const App = (props: {}) => {\n    return (\n        <TodoList />\n    );\n};","language":"tsx"},{"path":"todo.tsx","content":"import React from 'react';\n\nexport const TodoList = (props: {}) => {\n    return (\n        <div>\n            <TodoItem text='A' />\n            <TodoItem text='B' />\n            <TodoItem text='C' />\n        </div>\n    );\n};\n\nconst TodoItem = (props: { text: string }) => {\n    return (\n        <div>{props.text}</div>\n    );\n};","language":"tsx"}],"filesHashCode":"2080572345776395"},"focus":{"filePath":"todo.tsx","index":241,"length":25},"title":"TodoItem props","objective":"Declare the props and it's type.","explanation":"We need to define the props type.","task":"Type the props parameter that is an object type with a string text field.","descriptions":["The text field is a string type.","The props component parameter is an object that has a text field."],"experiments":[{"replacements":[{"selection":{"filePath":"todo.tsx","index":130,"length":34},"content":"            <TodoItem />\n"},{"selection":{"filePath":"todo.tsx","index":224,"length":48},"content":"const TodoItem = (props: { text?: string }) => {\n"},{"selection":{"filePath":"todo.tsx","index":285,"length":32},"content":"        <div>{props.text ?? 'Default Text'}</div>\n"}],"comment":"It's possible to use an optional component parameter which would use a default value when missing.","filesHashCode":"2080572345776395"}]},{"key":"Lesson-1603296325479-4259289229902028","projectState":{"files":[{"path":"app.tsx","content":"import React from 'react';\nimport { TodoList } from './todo';\n\nexport const App = (props: {}) => {\n    return (\n        <TodoList />\n    );\n};","language":"tsx"},{"path":"todo.tsx","content":"import React from 'react';\n\nexport const TodoList = (props: {}) => {\n    return (\n        <div>\n            <TodoItem text='A' />\n            <TodoItem text='B' />\n            <TodoItem text='C' />\n        </div>\n    );\n};\n\nconst TodoItem = (props: { text: string }) => {\n    return (\n        <div>{props.text}</div>\n    );\n};","language":"tsx"}],"filesHashCode":"2080572345776395"},"focus":{"filePath":"todo.tsx","index":270,"length":56},"title":"TodoItem Body","objective":"Define the body of the TodoItem component.","explanation":"We need display the text value from the props.","task":"Type the component body that returns a div tag which contains the text of the props.","descriptions":["In jsx, the { } symbols are used to switch back to the javascript code context where the props variable exists.","The props object has a text field that is a string.","This component will render the text inside a div element."],"experiments":[{"replacements":[{"selection":{"filePath":"todo.tsx","index":285,"length":32},"content":"        <div>{'💡 ' + props.text}</div>\n"}],"comment":"It's possible to modify the string as needed.","filesHashCode":"2080572345776395"}]},{"key":"Lesson-1603296991693-1872015659438575","projectState":{"files":[{"path":"app.tsx","content":"import React from 'react';\nimport { TodoList } from './todo';\n\nexport const App = (props: {}) => {\n    return (\n        <TodoList />\n    );\n};","language":"tsx"},{"path":"todo.tsx","content":"import React from 'react';\n\nexport const TodoList = (props: {}) => {\n    return (\n        <div>\n            <TodoItem text='A' />\n            <TodoItem text='B' />\n            <TodoItem text='C' />\n        </div>\n    );\n};\n\nconst TodoItem = (props: { text: string }) => {\n    return (\n        <div>{props.text}</div>\n    );\n};","language":"tsx"}],"filesHashCode":"2080572345776395"},"focus":{"filePath":"todo.tsx","index":90,"length":122},"title":"TodoItem Usage","objective":"Use the TodoItem component","explanation":"Now we need to use the TodoItem component.","task":"Type a div element that has 3 TodoItems that say A, B, and C.","descriptions":["The div element will group the list of TodoItem components.","The TodoItem needs a text attribute with a string value."],"experiments":[{"replacements":[{"selection":{"filePath":"todo.tsx","index":124,"length":1},"content":"Feed the cats"},{"selection":{"filePath":"todo.tsx","index":158,"length":1},"content":"Feed the kids"},{"selection":{"filePath":"todo.tsx","index":192,"length":1},"content":"Feed the bots"}],"comment":"We can manually hard code some tasks, but that's not quite useful yet.","filesHashCode":"2080572345776395"}]},{"key":"Lesson-1603303598991-03332768627722893","projectState":{"files":[{"path":"app.tsx","content":"import React from 'react';\nimport { TodoList } from './todo';\n\nexport const App = (props: {}) => {\n    return (\n        <TodoList />\n    );\n};","language":"tsx"},{"path":"todo.tsx","content":"import React, { useState } from 'react';\n\nconst styles = {\n    container: {\n        padding: 4,\n        backgroundColor: `#000000`,\n        color: `#FFFFFF`,\n    },\n    itemContainer: {\n        margin: 4,\n        padding: 4,\n        backgroundColor: `#333333`,\n        color: `#FFFFFF`,\n    },\n    row: {\n        display: `flex`,\n        flex: 1,\n        flexDirection: `row`,\n        alignItems: `center`,\n    },\n    flex1: {\n        display: `flex`,\n        flex: 1,\n    },\n    button: {\n        margin: 4,\n        padding: 8,\n        backgroundColor: `#111111`,\n    },\n} as const;\n\nconst getUniqueKey = () => {\n    return `${Date.now()}:${Math.random()}`;\n};\nconst createNewTodoItem = () => {\n    return { key: getUniqueKey(), text: `New Task`, isDone: false };\n};\n\nexport const TodoList = (props: {}) => {\n\n    const [items, setItems] = useState([createNewTodoItem()] as TodoItemData[]);\n    const changeItem = (value: TodoItemData) => {\n        setItems(s => s.map(x => x.key === value.key ? value : x));\n    };\n    const addItem = () => {\n        setItems(s => [...s, createNewTodoItem()]);\n    };\n    const deleteItem = (value: TodoItemData) => {\n        setItems(s => s.filter(x => x.key !== value.key));\n    };\n\n    return (\n        <div style={styles.container}>\n            {items.map(x => (\n                <TodoItem key={x.key} item={x} onChange={changeItem} onDelete={deleteItem} />\n            ))}\n            <div style={styles.row}>\n                <div style={styles.button} onClick={addItem} >\n                    <span>{`➕ Add`}</span>\n                </div>\n            </div>\n        </div>\n    );\n};\n\ntype TodoItemData = {\n    key: string;\n    text: string;\n    isDone: boolean;\n};\nconst TodoItem = (props: { item: TodoItemData, onChange: (value: TodoItemData) => void, onDelete: (value: TodoItemData) => void }) => {\n\n    const [isEditing, setIsEditing] = useState(false);\n    const [itemText, setItemText] = useState(props.item.text);\n    const changeText = () => {\n        setIsEditing(false);\n        props.onChange({ ...props.item, text: itemText });\n    };\n    const toggleDone = () => {\n        props.onChange({ ...props.item, isDone: !props.item.isDone });\n    };\n\n    return (\n        <div style={styles.itemContainer}>\n            {!isEditing && (\n                <div style={styles.row} onClick={toggleDone}>\n                    <div>\n                        <span>{props.item.isDone ? `✔ 🐱‍🏍 ` : `◻ 😾 `}</span>\n                    </div>\n                    <div style={styles.flex1}>\n                        <span>{itemText}</span>\n                    </div>\n                    <div style={styles.button}\n                        onClick={(e) => { e.preventDefault(); setIsEditing(true); }}\n                    >\n                        <span>{`✏ Edit`}</span>\n                    </div>\n                    <div style={styles.button}\n                        onClick={(e) => { e.preventDefault(); props.onDelete(props.item); }}\n                    >\n                        <span>{`❌ Delete`}</span>\n                    </div>\n                </div>\n            )}\n            {isEditing && (\n                <div style={styles.row}>\n                    <input style={styles.flex1} type='text' value={itemText}\n                        autoFocus\n                        onChange={e => setItemText(e.target.value)}\n                        onBlur={e => { e.preventDefault(); changeText(); }}\n                        onKeyDown={e => { if (e.key === `Enter`) { e.preventDefault(); changeText(); } }}\n                    />\n                    <div style={styles.button} onClick={changeText}>\n                        <span>{`✔ Done`}</span>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n","language":"tsx"}],"filesHashCode":"8514048322244247"},"focus":{"filePath":"todo.tsx","index":1319,"length":77},"title":"TodoItem Final (with local state)","objective":"Use the TodoItem component","explanation":"Now we need to use the TodoItem component.","task":"Type a div element that has 3 TodoItems that say A, B, and C.","descriptions":["The div element will group the list of TodoItem components.","The TodoItem needs a text attribute with a string value."],"experiments":[]},{"key":"Lesson-1604318547256-5401855559646771","projectState":{"files":[{"path":"app.tsx","content":"import React from 'react';\nimport { TodoList } from './todo';\n\nexport const App = (props: {}) => {\n    return (\n        <TodoList />\n    );\n};","language":"tsx"},{"path":"todo.tsx","content":"import React, { useEffect, useRef, useState } from 'react';\nimport { apiService } from './service';\nimport { TodoItemData } from './types';\n\nconst styles = {\n    container: {\n        padding: 4,\n        backgroundColor: `#000000`,\n        color: `#FFFFFF`,\n    },\n    itemContainer: {\n        margin: 4,\n        padding: 4,\n        backgroundColor: `#333333`,\n        color: `#FFFFFF`,\n    },\n    row: {\n        display: `flex`,\n        flex: 1,\n        flexDirection: `row`,\n        alignItems: `center`,\n    },\n    flex1: {\n        display: `flex`,\n        flex: 1,\n    },\n    button: {\n        margin: 4,\n        padding: 8,\n        backgroundColor: `#111111`,\n    },\n} as const;\n\nconst getUniqueKey = () => {\n    return `${Date.now()}:${Math.random()}`;\n};\nconst createNewTodoItem = () => {\n    return { key: getUniqueKey(), text: `New Task`, isDone: false };\n};\n\nexport const TodoList = (props: {}) => {\n\n    const [items, setItems] = useState([] as TodoItemData[]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null as null | { message: string });\n\n    const isMounted = useRef(true);\n\n    useEffect(() => {\n        (async () => await loadData())();\n\n        return () => {\n            isMounted.current = false;\n        };\n    }, []);\n\n    const loadData = async () => {\n        setLoading(true);\n        try {\n            const result = await apiService.loadData();\n            if (!isMounted.current) { return; }\n            setItems(result?.items ?? [createNewTodoItem()]);\n            setLoading(false);\n        } catch {\n            setError({ message: `Failed to load data` });\n        }\n    };\n\n    const saveData = async () => {\n        if (!items) { return; }\n        setLoading(true);\n        try {\n            await apiService.saveData({ items });\n            if (!isMounted.current) { return; }\n            setLoading(false);\n        } catch {\n            setError({ message: `Failed to load data` });\n        }\n    };\n\n    const changeItem = (value: TodoItemData) => {\n        setItems(s => s.map(x => x.key === value.key ? value : x));\n    };\n    const addItem = () => {\n        setItems(s => [...s, createNewTodoItem()]);\n    };\n    const deleteItem = (value: TodoItemData) => {\n        setItems(s => s.filter(x => x.key !== value.key));\n    };\n\n    if (error) {\n        return (\n            <div style={styles.container}>\n                <div style={styles.row}>\n                    <span>{`❗ ${error.message}`}</span>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div style={styles.container}>\n            {loading && (\n                <div style={styles.row}>\n                    <span>{`🕒 Loading`}</span>\n                </div>\n            )}\n            <div style={styles.row}>\n                <div style={styles.flex1} />\n                <div style={styles.button} onClick={loadData} >\n                    <span>{`💽 Reload`}</span>\n                </div>\n                <div style={styles.button} onClick={saveData} >\n                    <span>{`💾 Save`}</span>\n                </div>\n            </div>\n            {items.map(x => (\n                <TodoItem key={x.key} item={x} onChange={changeItem} onDelete={deleteItem} />\n            ))}\n            <div style={styles.row}>\n                <div style={styles.button} onClick={addItem} >\n                    <span>{`➕ Add`}</span>\n                </div>\n            </div>\n        </div>\n    );\n};\n\n\nconst TodoItem = (props: { item: TodoItemData, onChange: (value: TodoItemData) => void, onDelete: (value: TodoItemData) => void }) => {\n\n    const [isEditing, setIsEditing] = useState(false);\n    const [itemText, setItemText] = useState(props.item.text);\n    const changeText = () => {\n        setIsEditing(false);\n        props.onChange({ ...props.item, text: itemText });\n    };\n    const toggleDone = () => {\n        props.onChange({ ...props.item, isDone: !props.item.isDone });\n    };\n\n    return (\n        <div style={styles.itemContainer}>\n            {!isEditing && (\n                <div style={styles.row} onClick={toggleDone}>\n                    <div>\n                        <span>{props.item.isDone ? `✔ 🐱‍🏍 ` : `◻ 😾 `}</span>\n                    </div>\n                    <div style={styles.flex1}>\n                        <span>{itemText}</span>\n                    </div>\n                    <div style={styles.button}\n                        onClick={(e) => { e.preventDefault(); setIsEditing(true); }}\n                    >\n                        <span>{`✏ Edit`}</span>\n                    </div>\n                    <div style={styles.button}\n                        onClick={(e) => { e.preventDefault(); props.onDelete(props.item); }}\n                    >\n                        <span>{`❌ Delete`}</span>\n                    </div>\n                </div>\n            )}\n            {isEditing && (\n                <div style={styles.row}>\n                    <input style={styles.flex1} type='text' value={itemText}\n                        autoFocus\n                        onChange={e => setItemText(e.target.value)}\n                        onBlur={e => { e.preventDefault(); changeText(); }}\n                        onKeyDown={e => { if (e.key === `Enter`) { e.preventDefault(); changeText(); } }}\n                    />\n                    <div style={styles.button} onClick={changeText}>\n                        <span>{`✔ Done`}</span>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n","language":"tsx"},{"path":"types.ts","content":"export type TodoData = {\n    items: TodoItemData[];\n};\n\nexport type TodoItemData = {\n    key: string;\n    text: string;\n    isDone: boolean;\n};\n","language":"tsx"},{"path":"service.ts","content":"import { TodoData } from './types';\n\nconst delay = (timeMs = 0) => {\n    return new Promise<void>((resolve) => {\n        setTimeout(resolve, timeMs);\n    });\n};\n\nconst simulateNetwork = async () => {\n    await delay(250);\n};\n\n/** Create a mock api service that uses localStorage and simulates a network delay */\nconst createApiService = () => {\n\n    const DATA_KEY = `todo`;\n\n    const service = {\n        loadData: async () => {\n            await simulateNetwork();\n            try {\n                const json = localStorage.getItem(DATA_KEY);\n                if (!json) { return null; }\n                return JSON.parse(json) as TodoData;\n            } catch {\n                return null;\n            }\n        },\n        saveData: async (data: TodoData) => {\n            await simulateNetwork();\n            localStorage.setItem(DATA_KEY, JSON.stringify(data));\n        },\n    };\n    return service;\n};\n\nexport const apiService = createApiService();\n","language":"tsx"}],"filesHashCode":"291301600535366"},"focus":{"filePath":"todo.tsx","index":3164,"length":77},"title":"TodoItem Final (with apiService)","objective":"Use the TodoItem component","explanation":"Now we need to use the TodoItem component.","task":"Type a div element that has 3 TodoItems that say A, B, and C.","descriptions":["The div element will group the list of TodoItem components.","The TodoItem needs a text attribute with a string value."],"experiments":[]}]}