{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/doodle/doodle-paths.ts","webpack:///D:/Projects/rick-love-master/code/doodle/doodle-storage.ts","webpack:///D:/Projects/rick-love-master/code/games/educational-games/utils/keyboard-simplified.tsx","webpack:///D:/Projects/rick-love-master/code/games/educational-games/doodle-game.tsx","webpack:///D:/Projects/rick-love-master/code/games/educational-games/doodle-subjects/doodle-spelling.tsx"],"names":["doodleStoragePaths","storageAccess","JSON","parse","localStorage","getItem","value","setItem","stringify","createDoodleDrawingStorageService","a","remoteDoodle","createSmartUploader","getUploadUrl","doodleUploadUrl","setUploadUrl","x","uploadApiUrl","uploadApiConfig","uploadUrlPrefix","remoteVotes","scoresUploadUrl","getSummaryData","uploadUrl","uploadApiWebClient","createUploadApiWebClient","createUploadUrl","serverUrl","getUrl","replace","relativePath","summaryUrl","console","log","downloadData","summaryDataRaw","summaryData","doodles","map","key","k","prompt","p","timestamp","t","drawing","decodeDoodleDrawing","d","score","s","memory","doodleScores","doodleVotes","load","voteTotals","forEach","toKeyValueArray","doodleKey","service","saveDrawing","doodle","substr","Date","now","Math","floor","random","push","setTimeout","save","encodeDoodleDrawing","saveBestDrawingSelection","find","getDrawings","options","includeOtherPrompts","maxCount","allDoodles","distinct_key","samePromptDrawings","filter","sort","b","otherPromptDrawings","allDrawings","randomItem","shuffle","slice","drawings","englishKeyboard","rows","keys","split","styles","container","rowView","flex","flexDirection","keyView","margin","padding","width","height","backgroundColor","justifyContent","alignItems","keyView_disabled","opacity","keyText","fontSize","keyText_wrong","color","KeyboardSimplified","expectedCharacter","showHints","onExpectedKeyPress","keyboard","useState","hintKeys","setHintKeys","wrongKeys","setWrongKeys","useEffect","hints","flatMap","trim","style","row","iRow","i","outline","onPress","includes","drawingChoicesView","maxWidth","flexWrap","drawingChoiceWrapper","drawingChoice","titleView","titleText","promptView","promptText","hintText","buttonRowView","buttonView","buttonText","EducationalGame_Doodle","props","problemSourceKey","setProblemSourceKey","problemService","onOpen","onClose","onSubjectNavigation","EducationalGame_Doodle_Inner","problem","setProblem","mode","setMode","setDrawings","useRef","current","gotoNextProblem","getNextProblem","gotoTypeMode","speakPrompt","useAutoLoadingError","doWork","loading","error","stopIfObsolete","drawingStorage","result","gotoDrawPromptMode","gotoChooseBestMode","length","onDone","onChooseBest","hint","segments","onSkip","DoodleGameView_DrawWord","defaultDoodleDrawing","setDrawing","onChange","DoodleGameView_ChooseBest","typeStyles","completedText","DoodleGameView_Type","completed","remaining","status","setStatus","nextChar","EducationalGame_Doodle_Spelling","speechService","createSpeechService","Platform","OS","hasStarted","setHasStarted","inner","createAutoSavedProblemService","createSpellingProblemService","sectionSize","lastProblem","getSections","gotoSection","recordAnswer","answers","isCorrect","question","onQuestion","languange","onClick","speak","alignSelf","size"],"mappings":"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","file":"21-6527eae43a785d045c78.js","sourcesContent":["export const doodleStoragePaths = {\r\n    doodleSummary: `doodle/summary`,\r\n    doodleDrawingsPrefix: `doodle/drawings`,\r\n    doodleVotesPrefix: `doodle/votes`,\r\n} as const;\r\n","import { randomItem } from 'utils/random';\r\nimport { shuffle, distinct_key } from 'utils/arrays';\r\nimport { UploadUrl } from 'upload-api/client/types';\r\nimport { uploadApiConfig } from 'upload-api/client/config';\r\nimport { createSmartUploader, downloadData } from 'upload-api/client/uploader';\r\nimport { toKeyValueArray } from 'utils/objects';\r\nimport { createUploadApiWebClient } from 'upload-api/client/web-client';\r\nimport { DoodleDrawingStorageService, DoodleData, decodeDoodleDrawing, encodeDoodleDrawing, DoodleScoreVote, DoodleScore, DoodleUserDrawingDataJson, DoodleUserVotesDataJson, DoodleSummaryDataJson } from './doodle';\r\nimport { doodleStoragePaths } from './doodle-paths';\r\n\r\ntype DoodleStorageData = {\r\n    doodleUploadUrl?: UploadUrl;\r\n    scoresUploadUrl?: UploadUrl;\r\n};\r\n\r\nconst storageAccess = {\r\n    load: (): null | DoodleStorageData => {\r\n        try {\r\n            return JSON.parse(localStorage.getItem(`doodleStorage.v2`) ?? `NULL!{}`);\r\n        } catch{ return null; }\r\n    },\r\n    save: (value: DoodleStorageData) => {\r\n        localStorage.setItem(`doodleStorage.v2`, JSON.stringify(value));\r\n    },\r\n};\r\n\r\n\r\nexport const createDoodleDrawingStorageService = async () => {\r\n\r\n    const remoteDoodle = createSmartUploader<DoodleUserDrawingDataJson>({\r\n        getUploadUrl: async () => storageAccess.load()?.doodleUploadUrl ?? null,\r\n        setUploadUrl: async (x) => storageAccess.save({ ...(storageAccess.load() ?? {}), doodleUploadUrl: x }),\r\n        uploadApiUrl: uploadApiConfig.uploadApiUrl,\r\n        uploadUrlPrefix: doodleStoragePaths.doodleDrawingsPrefix,\r\n    });\r\n    const remoteVotes = createSmartUploader<DoodleUserVotesDataJson>({\r\n        getUploadUrl: async () => storageAccess.load()?.scoresUploadUrl ?? null,\r\n        setUploadUrl: async (x) => storageAccess.save({ ...(storageAccess.load() ?? {}), scoresUploadUrl: x }),\r\n        uploadApiUrl: uploadApiConfig.uploadApiUrl,\r\n        uploadUrlPrefix: doodleStoragePaths.doodleVotesPrefix,\r\n    });\r\n\r\n    const getSummaryData = async () => {\r\n        try {\r\n            let uploadUrl = storageAccess.load()?.doodleUploadUrl;\r\n\r\n            if (!uploadUrl) {\r\n                const uploadApiWebClient = createUploadApiWebClient(uploadApiConfig);\r\n                uploadUrl = (await uploadApiWebClient.createUploadUrl({})).uploadUrl;\r\n            }\r\n\r\n            const serverUrl = uploadUrl?.getUrl.replace(uploadUrl.relativePath, ``);\r\n            const summaryUrl = `${serverUrl}${doodleStoragePaths.doodleSummary}`;\r\n            console.log(`getSummaryData`, { uploadUrl, serverUrl, summaryUrl });\r\n\r\n            const summaryDataRaw = await downloadData(summaryUrl) as DoodleSummaryDataJson;\r\n            const summaryData = {\r\n                doodles: summaryDataRaw.doodles.map(x => ({\r\n                    key: x.k,\r\n                    prompt: x.p,\r\n                    timestamp: x.t,\r\n                    drawing: decodeDoodleDrawing(x.d),\r\n                    score: x.s,\r\n                })),\r\n            };\r\n            return summaryData;\r\n        } catch{\r\n            return { doodles: [] };\r\n        }\r\n    };\r\n    const summaryData = await getSummaryData();\r\n\r\n    const memory = {\r\n        doodles: [] as DoodleData[],\r\n        doodleScores: [] as DoodleScore[],\r\n        doodleVotes: [] as DoodleScoreVote[],\r\n    };\r\n\r\n\r\n    // Load from server\r\n    memory.doodles = (await remoteDoodle.load())?.doodles.map(x => ({\r\n        key: x.k,\r\n        prompt: x.p,\r\n        timestamp: x.t,\r\n        drawing: x.d ? decodeDoodleDrawing(x.d) : (x as unknown as DoodleData).drawing,\r\n    })) ?? [];\r\n    memory.doodleVotes = (await remoteVotes.load())?.doodleVotes ?? [];\r\n\r\n    const voteTotals = {} as { [key: string]: number };\r\n    // memory.doodleVotes.forEach(x => { voteTotals[x.k] = (voteTotals[x.k] ?? 0) + 1; });\r\n    summaryData.doodles.forEach(x => { voteTotals[x.key] = (voteTotals[x.key] ?? 0) + x.score; });\r\n    memory.doodleScores = toKeyValueArray(voteTotals).map(x => ({\r\n        doodleKey: x.key,\r\n        score: x.value,\r\n    }));\r\n\r\n    const service: DoodleDrawingStorageService = {\r\n        saveDrawing: async (prompt, drawing) => {\r\n            const doodle = { key: `${prompt.substr(0, 8)}:${Date.now()}:${Math.floor(Math.random() * 999999)}`, drawing, prompt, timestamp: Date.now() };\r\n            memory.doodles.push(doodle);\r\n\r\n            // Save to server\r\n            setTimeout(async () => {\r\n                await remoteDoodle.save({\r\n                    doodles: memory.doodles.map(x => ({\r\n                        k: x.key,\r\n                        p: x.prompt,\r\n                        t: x.timestamp,\r\n                        d: encodeDoodleDrawing(x.drawing),\r\n                    })),\r\n                });\r\n            });\r\n        },\r\n        saveBestDrawingSelection: async (doodle) => {\r\n            memory.doodleVotes.push({\r\n                k: doodle.key,\r\n                t: Date.now(),\r\n            });\r\n\r\n            let d = memory.doodleScores.find(x => x.doodleKey === doodle.key);\r\n            if (!d) {\r\n                d = {\r\n                    doodleKey: doodle.key,\r\n                    score: 0,\r\n                };\r\n                memory.doodleScores.push(d);\r\n            }\r\n            d.score = (d.score ?? 0) + 1;\r\n\r\n            // Save to server\r\n            setTimeout(async () => {\r\n                await remoteVotes.save({\r\n                    doodleVotes: memory.doodleVotes,\r\n                });\r\n            });\r\n        },\r\n        getDrawings: async (prompt, options) => {\r\n            const {\r\n                includeOtherPrompts = false,\r\n                maxCount = 4,\r\n            } = options ?? {};\r\n\r\n            const allDoodles = distinct_key([...summaryData.doodles, ...memory.doodles.map(x => ({ ...x, score: memory.doodleScores.find(s => s.doodleKey === x.key)?.score ?? 0 }))], x => x.key);\r\n\r\n            const samePromptDrawings = allDoodles.filter(x => x.prompt === prompt).sort((a, b) => -(a.score - b.score));\r\n            console.log(`getDrawings`, { samePromptDrawings });\r\n\r\n            const otherPromptDrawings = includeOtherPrompts ? allDoodles.filter(x => x.prompt !== prompt) : [];\r\n            const allDrawings =\r\n                includeOtherPrompts ? [randomItem(samePromptDrawings), ...shuffle(otherPromptDrawings).slice(0, maxCount - 1)]\r\n                    : samePromptDrawings;\r\n            const drawings = shuffle(allDrawings).slice(0, maxCount);\r\n            return { doodles: drawings };\r\n        },\r\n    };\r\n\r\n    return service;\r\n};\r\n","/* eslint-disable react/no-array-index-key */\r\nimport React, { useEffect, useState } from 'react';\r\nimport { View, Text, TouchableOpacity } from 'react-native-lite';\r\nimport { shuffle } from 'utils/arrays';\r\n\r\nconst englishKeyboard = {\r\n    rows: [\r\n        { keys: `qwertyuiop`.split(``) },\r\n        { keys: ` asdfghjkl`.split(``) },\r\n        { keys: `  zxcvbnm `.split(``) },\r\n    ],\r\n};\r\n\r\nconst styles = {\r\n    container: {},\r\n    rowView: { flex: 1, flexDirection: `row` },\r\n    keyView: {\r\n        margin: 2,\r\n        padding: 2,\r\n        width: 20,\r\n        height: 20,\r\n        backgroundColor: `#111111`,\r\n        justifyContent: `center`,\r\n        alignItems: `center`,\r\n    },\r\n    keyView_disabled: { opacity: 0.5 },\r\n    keyText: {\r\n        fontSize: 16,\r\n    },\r\n    keyText_wrong: {\r\n        fontSize: 16,\r\n        color: `#FF0000`,\r\n    },\r\n} as const;\r\n\r\nexport const KeyboardSimplified = ({ expectedCharacter, showHints, onExpectedKeyPress }: { expectedCharacter: string, showHints: boolean, onExpectedKeyPress: () => void }) => {\r\n    const keyboard = englishKeyboard;\r\n\r\n    const [hintKeys, setHintKeys] = useState(null as null | string[]);\r\n    const [wrongKeys, setWrongKeys] = useState([] as string[]);\r\n    useEffect(() => {\r\n        if (!showHints) { setHintKeys(null); }\r\n\r\n        const hints = [expectedCharacter, ...shuffle(keyboard.rows.flatMap(x => x.keys).map(x => x.trim()).filter(x => x)).slice(0, 3)];\r\n        setHintKeys(hints);\r\n        setWrongKeys([]);\r\n    }, [expectedCharacter, showHints]);\r\n\r\n    const onKeyPress = (key: string) => {\r\n        if (key === expectedCharacter) {\r\n            onExpectedKeyPress();\r\n            return;\r\n        }\r\n        // Remove from choices\r\n        if (showHints) {\r\n            setHintKeys(s => (s ?? []).filter(x => x !== key));\r\n            setWrongKeys(s => [...s, key]);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <View style={styles.container}>\r\n                {keyboard.rows.map((row, iRow) => (\r\n                    <View style={styles.rowView} key={`${iRow}`} >\r\n                        {row.keys.map((k, i) => (\r\n                            <TouchableOpacity key={`${k}${i}`} style={{ outline: `none` }} onPress={() => onKeyPress(k)}>\r\n                                <View style={!hintKeys || hintKeys.includes(k) ? {} : styles.keyView_disabled} >\r\n                                    <View style={styles.keyView}>\r\n                                        <Text style={wrongKeys.includes(k) ? styles.keyText_wrong : styles.keyText}>{k}</Text>\r\n                                    </View>\r\n                                </View>\r\n                            </TouchableOpacity>\r\n                        ))}\r\n                    </View>\r\n                ))}\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { DoodleDisplayView, DoodleDrawerView } from 'doodle/doodle-view';\r\nimport { defaultDoodleDrawing, DoodleDrawing, DoodleData, DoodleDrawingStorageService } from 'doodle/doodle';\r\nimport { View, Text, TouchableOpacity } from 'react-native-lite';\r\nimport { useAutoLoadingError } from 'utils-react/hooks';\r\nimport { SubjectNavigator } from './utils/subject-navigator';\r\nimport { KeyboardSimplified } from './utils/keyboard-simplified';\r\n\r\nexport const styles = {\r\n    container: {\r\n        alignItems: `center`,\r\n    },\r\n    drawing: {\r\n        width: 312,\r\n        height: 312,\r\n        color: `#FFFFFF`,\r\n        backgroundColor: `#000000`,\r\n    },\r\n    drawingChoicesView: {\r\n        maxWidth: 312 + 4 * 4 + 4,\r\n        flexDirection: `row`,\r\n        flexWrap: `wrap`,\r\n    },\r\n    drawingChoiceWrapper: {\r\n        padding: 4,\r\n    },\r\n    drawingChoice: {\r\n        width: 78,\r\n        height: 78,\r\n        color: `#FFFFFF`,\r\n        backgroundColor: `#000000`,\r\n    },\r\n    titleView: {\r\n        justifyContent: `center`,\r\n        alignItems: `center`,\r\n    },\r\n    titleText: {\r\n        fontSize: 20,\r\n        color: `#FFFFFF`,\r\n    },\r\n    promptView: {\r\n        justifyContent: `center`,\r\n        alignItems: `center`,\r\n    },\r\n    promptText: {\r\n        fontSize: 20,\r\n        color: `#FFFF00`,\r\n    },\r\n    hintText: {\r\n        fontSize: 14,\r\n        color: `#FFFF00`,\r\n    },\r\n    buttonRowView: {\r\n        flexDirection: `row`,\r\n    },\r\n    buttonView: {\r\n        margin: 4,\r\n        padding: 8,\r\n        backgroundColor: `#111111`,\r\n    },\r\n    buttonText: {\r\n        fontSize: 20,\r\n        color: `#FFFF00`,\r\n    },\r\n} as const;\r\n\r\nexport type DoodleProblemService = {\r\n    getSections: () => { key: string, name: string, isComplete: boolean }[];\r\n    gotoSection: (section: { key: string }) => void;\r\n    getNextProblem: () => DoodleProblem | null;\r\n};\r\ntype DoodleProblem = {\r\n    prompt: string;\r\n    hint?: string;\r\n    speakPrompt?: () => void;\r\n};\r\n\r\nexport const EducationalGame_Doodle = (props: { problemService: DoodleProblemService, drawingStorage: DoodleDrawingStorageService }) => {\r\n    const [problemSourceKey, setProblemSourceKey] = useState(0);\r\n\r\n    return (<>\r\n        <EducationalGame_Doodle_Inner {...props} problemSourceKey={problemSourceKey} />\r\n        <SubjectNavigator problemService={props.problemService}\r\n            onOpen={() => { }}\r\n            onClose={() => { }}\r\n            onSubjectNavigation={() => { setProblemSourceKey(s => s + 1); }}\r\n        />\r\n    </>);\r\n};\r\n\r\nexport const EducationalGame_Doodle_Inner = (props: { problemService: DoodleProblemService, drawingStorage: DoodleDrawingStorageService, problemSourceKey: number }) => {\r\n\r\n    const [problem, setProblem] = useState(null as null | DoodleProblem);\r\n    const [mode, setMode] = useState(`type` as 'type' | 'drawPrompt' | 'chooseCorrect' | 'chooseBest');\r\n    const [drawings, setDrawings] = useState(null as null | DoodleData[]);\r\n    const prompt = useRef(problem?.prompt ?? ``);\r\n    prompt.current = problem?.prompt ?? ``;\r\n\r\n    const gotoNextProblem = () => {\r\n        const p = props.problemService.getNextProblem();\r\n        if (!p) { return; }\r\n        setProblem(p);\r\n        setTimeout(gotoTypeMode);\r\n        p.speakPrompt?.();\r\n    };\r\n\r\n    useEffect(() => {\r\n        gotoNextProblem();\r\n    }, [props.problemSourceKey]);\r\n\r\n    const { loading, error, doWork } = useAutoLoadingError();\r\n\r\n    const gotoTypeMode = () => {\r\n        doWork(async (stopIfObsolete) => {\r\n            const result = await props.drawingStorage.getDrawings(prompt.current, { maxCount: 1, includeOtherPrompts: false });\r\n            setDrawings(result.doodles);\r\n            setMode(`type`);\r\n        });\r\n    };\r\n\r\n    const onTypeDone = () => {\r\n        doWork(async (stopIfObsolete) => {\r\n            setTimeout(gotoDrawPromptMode);\r\n        });\r\n    };\r\n\r\n    const gotoDrawPromptMode = () => {\r\n        setMode(`drawPrompt`);\r\n    };\r\n\r\n    const onDrawingDone = (drawing: DoodleDrawing) => {\r\n        // props.onDone(drawing);\r\n\r\n        // Save drawing with word prompt\r\n        doWork(async (stopIfObsolete) => {\r\n            if (drawing.segments.length > 0) {\r\n                await props.drawingStorage.saveDrawing(prompt.current, drawing);\r\n            }\r\n            stopIfObsolete();\r\n            setTimeout(gotoChooseBestMode);\r\n        });\r\n    };\r\n    const onDrawingSkip = () => {\r\n        setTimeout(gotoChooseBestMode);\r\n    };\r\n\r\n    const gotoChooseBestMode = () => {\r\n        doWork(async (stopIfObsolete) => {\r\n            const result = await props.drawingStorage.getDrawings(prompt.current);\r\n            stopIfObsolete();\r\n\r\n            if (result.doodles.length <= 1) {\r\n                gotoNextProblem();\r\n                return;\r\n            }\r\n\r\n            setDrawings(result.doodles);\r\n            setMode(`chooseBest`);\r\n        });\r\n    };\r\n\r\n    const onChooseBest = (value: DoodleData) => {\r\n        doWork(async (stopIfObsolete) => {\r\n            await props.drawingStorage.saveBestDrawingSelection(value);\r\n            stopIfObsolete();\r\n            gotoNextProblem();\r\n        });\r\n    };\r\n\r\n\r\n    if (!problem) {\r\n        return (\r\n            <>\r\n            </>\r\n        );\r\n    }\r\n\r\n    if (mode === `type`) {\r\n        return (\r\n            <>\r\n                <DoodleGameView_Type prompt={prompt.current} drawings={drawings ?? []} onDone={onTypeDone} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    if (mode === `chooseBest` && drawings) {\r\n        return (\r\n            <>\r\n                <DoodleGameView_ChooseBest prompt={prompt.current} drawings={drawings} onChooseBest={onChooseBest} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <DoodleGameView_DrawWord prompt={prompt.current} hint={problem.hint} onDone={onDrawingDone} onSkip={onDrawingSkip} />\r\n            {/* <DoodleDisplayView style={styles.drawing} drawing={defaultDoodleDrawing()} /> */}\r\n        </>\r\n    );\r\n};\r\n\r\nexport const DoodleGameView_DrawWord = (props: { prompt: string, hint?: string, onDone: (drawing: DoodleDrawing) => void, onSkip: () => void }) => {\r\n    const [drawing, setDrawing] = useState(defaultDoodleDrawing());\r\n    const changeDoodle = (value: DoodleDrawing) => {\r\n        setDrawing(value);\r\n    };\r\n\r\n    const done = () => {\r\n        props.onDone(drawing);\r\n    };\r\n    const skip = () => {\r\n        props.onSkip();\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Reset problem when prompt changes\r\n        setDrawing(defaultDoodleDrawing());\r\n    }, [props.prompt]);\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <View style={styles.titleView}>\r\n                <Text style={styles.titleText}>Draw</Text>\r\n            </View>\r\n            <DoodleDrawerView style={styles.drawing} drawing={drawing} onChange={changeDoodle} />\r\n            <View style={styles.promptView}>\r\n                <Text style={styles.promptText}>{props.prompt}</Text>\r\n                {!!props.hint && (<Text style={styles.hintText}>{props.hint}</Text>)}\r\n            </View>\r\n            <View style={styles.buttonRowView}>\r\n                <TouchableOpacity onPress={skip}>\r\n                    <View style={styles.buttonView}>\r\n                        <Text style={styles.buttonText}>Skip</Text>\r\n                    </View>\r\n                </TouchableOpacity>\r\n                <TouchableOpacity onPress={done}>\r\n                    <View style={styles.buttonView}>\r\n                        <Text style={styles.buttonText}>Done</Text>\r\n                    </View>\r\n                </TouchableOpacity>\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n\r\nexport const DoodleGameView_ChooseBest = (props: { prompt: string, drawings: DoodleData[], onChooseBest: (drawing: DoodleData) => void }) => {\r\n    return (\r\n        <View style={styles.container}>\r\n            <View style={styles.titleView}>\r\n                <Text style={styles.titleText}>Choose Best</Text>\r\n            </View>\r\n            <View style={styles.promptView}>\r\n                <Text style={styles.promptText}>{props.prompt}</Text>\r\n            </View>\r\n            <View style={styles.drawingChoicesView} >\r\n                {props.drawings.map(x => (\r\n                    <TouchableOpacity key={x.key} onPress={() => props.onChooseBest(x)}>\r\n                        <View style={styles.drawingChoiceWrapper} >\r\n                            <DoodleDisplayView style={styles.drawingChoice} drawing={x.drawing} />\r\n                        </View>\r\n                    </TouchableOpacity>\r\n                ))}\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n\r\nconst typeStyles = {\r\n    completedText: {\r\n        fontSize: 16,\r\n        color: `#FFFF00`,\r\n    },\r\n} as const;\r\nexport const DoodleGameView_Type = (props: { prompt: string, drawings: DoodleData[], onDone: () => void }) => {\r\n\r\n    const [status, setStatus] = useState({ completed: ``, remaining: props.prompt });\r\n    useEffect(() => {\r\n        setStatus({ completed: ``, remaining: props.prompt });\r\n    }, [props.prompt, props.drawings]);\r\n\r\n    const onExpectedKeyPress = () => {\r\n        setStatus(s => {\r\n            if (s.remaining.length <= 1) {\r\n                props.onDone();\r\n            }\r\n            const nextChar = s.remaining[0];\r\n            return {\r\n                completed: s.completed + nextChar,\r\n                remaining: s.remaining.substr(1),\r\n            };\r\n        });\r\n    };\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <View style={styles.titleView}>\r\n                <Text style={styles.titleText}>Type Word</Text>\r\n            </View>\r\n            <View style={styles.drawingChoicesView} >\r\n                {props.drawings.map(x => (\r\n                    <View key={x.key} style={styles.drawingChoiceWrapper} >\r\n                        <DoodleDisplayView style={styles.drawingChoice} drawing={x.drawing} />\r\n                    </View>\r\n                ))}\r\n            </View>\r\n            <View>\r\n                <Text style={typeStyles.completedText}>{`${status.completed}${status.remaining.length > 0 ? `_` : ``}`}</Text>\r\n            </View>\r\n            <KeyboardSimplified expectedCharacter={status.remaining[0] ?? ` `} showHints onExpectedKeyPress={onExpectedKeyPress} />\r\n        </View>\r\n    );\r\n};\r\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\nimport React, { useRef, useState, useEffect } from 'react';\r\nimport { Text, View, Platform, ActivityIndicator } from 'react-native-lite';\r\nimport { createDoodleDrawingStorageService } from 'doodle/doodle-storage';\r\nimport { DoodleDrawingStorageService } from 'doodle/doodle';\r\nimport { useAutoLoadingError } from 'utils-react/hooks';\r\nimport { Problem } from '../problems/problems-service';\r\nimport { EducationalGame_Doodle, DoodleProblemService } from '../doodle-game';\r\nimport { createSpeechService } from '../utils/speech';\r\nimport { createSpellingProblemService } from '../problems/spelling/spelling-problem-service';\r\nimport { VoiceChooser } from '../utils/voice-chooser';\r\nimport { createAutoSavedProblemService } from '../problems/problem-state-storage';\r\n\r\nexport const EducationalGame_Doodle_Spelling = (props: {}) => {\r\n    const speechService = useRef(createSpeechService());\r\n    const [hasStarted, setHasStarted] = useState(Platform.OS !== `web`);\r\n\r\n    const { loading, error, doWork } = useAutoLoadingError();\r\n    const drawingStorage = useRef(null as null | DoodleDrawingStorageService);\r\n    const problemService = useRef(null as null | DoodleProblemService);\r\n    useEffect(() => {\r\n        doWork(async (stopIfObsolete) => {\r\n            drawingStorage.current = await createDoodleDrawingStorageService();\r\n            stopIfObsolete();\r\n\r\n            const inner = createAutoSavedProblemService(createSpellingProblemService({ speechService: speechService.current, sectionSize: 8 }), `ProblemsSpellingDoodle`);\r\n            let lastProblem = null as null | Problem;\r\n            problemService.current = {\r\n                getSections: inner.getSections,\r\n                gotoSection: inner.gotoSection,\r\n                getNextProblem: () => {\r\n                    if (lastProblem) {\r\n                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n                        inner.recordAnswer(lastProblem, lastProblem.answers.find(x => x.isCorrect)!);\r\n                    }\r\n\r\n                    const p = inner.getNextProblem();\r\n                    if (!p.question) { return null; }\r\n                    lastProblem = p;\r\n\r\n                    return {\r\n                        prompt: p.answers.find(x => x.isCorrect)?.value ?? ``,\r\n                        // hint: p.question,\r\n                        speakPrompt: p.onQuestion,\r\n                    };\r\n                },\r\n            };\r\n        });\r\n    }, []);\r\n\r\n    // Only web\r\n    if (!hasStarted) {\r\n        const speak = () => { speechService.current.speak(`Start`); setHasStarted(true); };\r\n        return (\r\n            <View>\r\n                <VoiceChooser languange='en' speechService={speechService.current} />\r\n                <div onClick={() => speak()}>\r\n                    <View style={{ height: 300, alignSelf: `center`, alignItems: `center`, justifyContent: `center` }}>\r\n                        <Text style={{ fontSize: 36 }}>Start</Text>\r\n                    </View>\r\n                </div>\r\n            </View>\r\n        );\r\n    }\r\n\r\n    if (loading || !drawingStorage.current || !problemService.current) {\r\n        return (\r\n            <>\r\n                <ActivityIndicator size='large' color='#FFFF00' />\r\n            </>\r\n        );\r\n    }\r\n\r\n    return <EducationalGame_Doodle\r\n        problemService={problemService.current}\r\n        drawingStorage={drawingStorage.current}\r\n    />;\r\n};\r\n"],"sourceRoot":""}