{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/games/educational-games/pet/pet-view.tsx"],"names":["styles","container","height","fixed","position","top","right","left","inner","text","fontFamily","fontSize","color","foodText","PetView","props","useState","petState","setPetState","useEffect","sub","PetService","get","subscribePetStateChange","unsubscribe","style","PetTextView","food","Array","map","x","i","key","transform","getFoodVariant","getEmoji","emotion","emoji","setEmoji","variant","update","id","setInterval","clearInterval","items","shuffle","length","foodItems","replace","split","trim","filter"],"mappings":"ylCAKO,IAAMA,EAAS,CAClBC,UAAW,CACPC,OAAQ,IAEZC,MAAO,CACHC,SAAU,QACVC,IAAK,EAAGC,MAAO,EAAGC,KAAM,GAE5BC,MAAO,CACHJ,SAAU,WACVF,OAAQ,IAEZO,KAAM,CACFC,WAAY,sCACZC,SAAU,GACVC,MAAO,WAEXC,SAAU,CACNH,WAAY,sCACZC,SAAU,GACVC,MAAO,YAIFE,EAAU,SAACC,GAAc,MACFC,mBAAS,MAAlCC,EAD2B,KACjBC,EADiB,KAQlC,OANAC,qBAAU,WACN,IACMC,EADaC,IAAWC,MACPC,wBAAwBL,GAC/C,OAAO,kBAAME,EAAII,kBAIjB,kBAAC,IAAD,CAAMC,MAAOzB,EAAOC,WAChB,kBAAC,IAAD,CAAMwB,MAAOzB,EAAOG,OAChB,kBAAC,IAAD,CAAMsB,MAAOzB,EAAOQ,OAChB,kBAACkB,EAAD,CAAaT,SAAUA,IACtBA,GAAYA,EAASU,KAAO,GAAK,EAAI,IAAIC,MAAMX,EAASU,OAAOE,KAAI,SAACC,EAAGC,GAAJ,OAEhE,kBAAC,IAAD,CAAMC,IAAG,GAAKD,EAAKN,MAAO,CAAErB,SAAU,WAAY6B,UAAW,cAAa,GAAS,GAAJF,EAAS,KAA7B,OAAsC,EAAQ,GAAJA,EAAS,IAAnD,QACvD,kBAAC,IAAD,CAAMN,MAAOzB,EAAOa,UAAWqB,EAAeH,YAUpEL,EAAc,SAAC,GAAgD,MAA9CT,EAA8C,EAA9CA,SAA8C,EACvCD,mBAASmB,EAAQ,UAAClB,aAAD,EAACA,EAAUmB,eAAX,QAAsB,KAAM,IAAhEC,EAD0D,KACnDC,EADmD,KAajE,OAXAnB,qBAAU,WACN,IAAIoB,EAAU,EACRC,EAAS,WAAM,MACjBF,EAASH,EAAQ,UAAClB,aAAD,EAACA,EAAUmB,eAAX,QAAsB,KAAMG,OAEjDC,IAEA,IAAMC,EAAKC,YAAYF,EAAQ,KAC/B,OAAO,kBAAMG,cAAcF,MAC5B,CAACxB,IAGA,kBAAC,IAAD,CAAMQ,MAAOzB,EAAOS,MAAO4B,IAS7BF,EAAW,SAACC,EAAgCG,GAI9C,IAAKH,EAAW,WAEhB,GAAgB,SAAZA,EAAoB,CACpB,IAAMQ,EAAQC,YAAQ,CAAC,KAAD,gCACtB,OAAOD,EAAML,EAAUK,EAAME,QAEjC,GAAgB,UAAZV,EAAqB,CACrB,IAAMQ,EAAQ,CAAC,KAAD,qBACd,OAAOA,EAAML,EAAUK,EAAME,QAEjC,GAAgB,WAAZV,EAAsB,CACtB,IAAMQ,EAAQ,CAAC,KAAD,+BACd,OAAOA,EAAML,EAAUK,EAAME,QAEjC,GAAgB,SAAZV,EAAoB,CACpB,IAAMQ,EAAQ,CAAC,KAAD,+BACd,OAAOA,EAAML,EAAUK,EAAME,QAEjC,GAAgB,SAAZV,EAAoB,CACpB,IAAMQ,EAAQ,CAAC,KAAD,cACd,OAAOA,EAAML,EAAUK,EAAME,QAIjC,YAGEC,EAAYF,YAAQ,0MAIrBG,QAJqB,UAIFC,MAJE,KAISpB,KAAI,SAAAC,GAAC,OAAIA,EAAEoB,UAAQC,QAAO,SAAArB,GAAC,OAAIA,MAE5DI,EAAiB,SAACK,GACpB,OAAOQ,EAAUR,EAAUQ,EAAUD","file":"24-5ed732ceaa4554c92426.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { View, Text, TouchableOpacity } from 'react-native-lite';\r\nimport { shuffle } from 'utils/arrays';\r\nimport { PetService, PetState, PetEmotionKind } from './pet-service';\r\n\r\nexport const styles = {\r\n    container: {\r\n        height: 36,\r\n    },\r\n    fixed: {\r\n        position: `fixed`,\r\n        top: 0, right: 0, left: 0,\r\n    },\r\n    inner: {\r\n        position: `relative`,\r\n        height: 36,\r\n    },\r\n    text: {\r\n        fontFamily: `\"Lucida Console\", Monaco, monospace`,\r\n        fontSize: 24,\r\n        color: `#333300`,\r\n    },\r\n    foodText: {\r\n        fontFamily: `\"Lucida Console\", Monaco, monospace`,\r\n        fontSize: 12,\r\n        color: `#333300`,\r\n    },\r\n} as const;\r\n\r\nexport const PetView = (props: {}) => {\r\n    const [petState, setPetState] = useState(null as null | PetState);\r\n    useEffect(() => {\r\n        const petService = PetService.get();\r\n        const sub = petService.subscribePetStateChange(setPetState);\r\n        return () => sub.unsubscribe();\r\n    });\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <View style={styles.fixed}>\r\n                <View style={styles.inner}>\r\n                    <PetTextView petState={petState} />\r\n                    {petState && petState.food > 0 && [...new Array(petState.food)].map((x, i) => (\r\n                        // eslint-disable-next-line react/no-array-index-key\r\n                        <View key={`${i}`} style={{ position: `absolute`, transform: `translate(${50 + i * 87 % 100}px,${4 + i * 43 % 12}px)` }} >\r\n                            <Text style={styles.foodText}>{getFoodVariant(i)}</Text>\r\n                        </View>\r\n                    ))}\r\n                </View>\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n\r\n\r\nconst PetTextView = ({ petState }: { petState: null | PetState }) => {\r\n    const [emoji, setEmoji] = useState(getEmoji(petState?.emotion ?? null, 0));\r\n    useEffect(() => {\r\n        let variant = 0;\r\n        const update = () => {\r\n            setEmoji(getEmoji(petState?.emotion ?? null, variant++));\r\n        };\r\n        update();\r\n\r\n        const id = setInterval(update, 3000);\r\n        return () => clearInterval(id);\r\n    }, [petState]);\r\n\r\n    return (\r\n        <Text style={styles.text}>{emoji}</Text>\r\n    );\r\n};\r\n\r\n// 😀😁😂🤣😃😄😅😆😉😊😋😎😍😘🥰😗😙😚☺🙂🤗🤩🤔🤨😐😑😶\r\n// 🙄😏😣😥😮🤐😯😪😫🥱😴😌😛😜😝🤤😒😓😔😕🙃🤑😲☹🙁😖😞\r\n// 😟😤😢😭😦😧😨😩🤯😬😰😱🥵🥶😳🤪😵🥴😠😡🤬😷🤒🤕🤢🤮\r\n// 🤧😇🥳🥺🤠🤡🤥🤫🤭🧐🤓😈👿👹👺💀☠👻👽👾🤖💩\r\n// 🧟‍♂️\r\nconst getEmoji = (emotion: null | PetEmotionKind, variant: number) => {\r\n    // console.log(`getEmoji`, { emotion, variant });\r\n\r\n    // Setup State\r\n    if (!emotion) { return `😶`; }\r\n\r\n    if (emotion === `full`) {\r\n        const items = shuffle([`😁`, `😍`, `😎`, `🤩`, `🤗`, `🥳`, `😂`]);\r\n        return items[variant % items.length];\r\n    }\r\n    if (emotion === `happy`) {\r\n        const items = [`😀`, `🙂`, `😄`, `😃`, `😊`];\r\n        return items[variant % items.length];\r\n    }\r\n    if (emotion === `hungry`) {\r\n        const items = [`😳`, `😟`, `😤`, `😣`, `🥺`, `😫`, `😩`];\r\n        return items[variant % items.length];\r\n    }\r\n    if (emotion === `sick`) {\r\n        const items = [`🤢`, `🤮`, `😵`, `🤧`, `😬`, `💩`, `😞`];\r\n        return items[variant % items.length];\r\n    }\r\n    if (emotion === `dead`) {\r\n        const items = [`💀`, `👻`, `🧟‍♂️`];\r\n        return items[variant % items.length];\r\n    }\r\n\r\n    // Unknown\r\n    return `👾`;\r\n};\r\n\r\nconst foodItems = shuffle(` \r\n        🍕 🍔 🍟 🌭 🍿 🥓 🥚 🧇 🥞 🧈 🥐 🍞 🥨 🥖 🥯 🧀 🥗 🥙 🥪 🌯 🌮 \r\n        🥩 🍗 🍖 🍠 🥟 🥠 🍘 🥡 🍱 🍚 🍙 🍛 🍜 🦪 🍣 🥮 🍥 🍤 🍢 🧆 \r\n        🥣 🍝 🍲 🥧 🍦 🍧 🍪 🍩 🍨 🎂 🍰 🧁 🍮 🍯 🍵 `\r\n    .replace(`\\n`, ` `).split(` `).map(x => x.trim()).filter(x => x));\r\n\r\nconst getFoodVariant = (variant: number) => {\r\n    return foodItems[variant % foodItems.length];\r\n};\r\n"],"sourceRoot":""}