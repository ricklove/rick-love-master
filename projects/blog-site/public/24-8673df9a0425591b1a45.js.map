{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/games/educational-games/multiples-monster.tsx"],"names":["leaderboardService","createLeaderboard","storageKey","sortKey","x","score","scoreColumns","name","getValue","timeMs","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","EducationalGame_MultiplesMonster","props","useState","key","startTime","Date","now","gameOverTime","gameScore","setGameScore","createDefaultGameBoardState","gameBoard","setGameBoard","gameInput","setGameInput","lastGameBoard","useRef","leaderboard","useLeaderboard","getScore","onMove","value","newGameBoard","current","player","position","newPlayerCell","columns","col","cells","row","state","ProgressGameService","onCorrect","s","nextGameBoard","nextInputState","moveMonsters","setTimeout","game","gameInputState","createGameInputState","useEffect","style","marginTop","marginBottom","padding","alignItems","width","GameScore","GameBoard","focus","GameInput","LeaderboardArea","gameOver","onScoreSaved","maxTimes","Array","map","i","r","j","randomIndex","house","monsters","forEach","m","monster","updateBoard","board","p","mon","colDiff","rowDiff","Math","abs","sign","random","newMonster","maxMultiple","push","newBoard","deadMonsters","filter","liveMonsters","c","cellRaw","cell","updateBoardPosition","boardRaw","kind","styles","cellView","height","backgroundColor","borderWidth","borderColor","borderStyle","justifyContent","focusCellView","borderLeftColor","borderRightColor","cellHeaderView","focusCellHeaderView","cellText","fontFamily","fontSize","cellHeaderText","color","focusCellHeaderText","flexDirection","getCellText","nextCells","isOnSquare","buttons","text","onPress","shuffle","inputStyles","outerContainer","container","margin","buttonView","buttonText","y","setY","id","setInterval","max","clearInterval","console","log","transform","scoreStyles","flex","mistakesText","setTimeMessage","scoreMessage","setScoreMessage"],"mappings":"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","file":"24-8673df9a0425591b1a45.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { View, Text, TouchableOpacity } from 'react-native-lite';\r\nimport { shuffle } from 'utils/arrays';\r\nimport { randomIndex } from 'utils/random';\r\nimport { createLeaderboard } from './components/leaderboard';\r\nimport { ProgressGameService } from './progress-games/progress-game';\r\n\r\nconst leaderboardService = createLeaderboard<{\r\n    score: number;\r\n    timeMs: number;\r\n}>({\r\n    storageKey: `MultiplesMonsterLeaderboard`,\r\n    sortKey: x => x.score,\r\n    scoreColumns: [\r\n        { name: `Time`, getValue: x => `${(x.timeMs / 1000).toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 })}` },\r\n        { name: `Score`, getValue: x => `${x.score}` },\r\n    ],\r\n});\r\n\r\nexport const EducationalGame_MultiplesMonster = (props: {}) => {\r\n\r\n    const [gameScore, setGameScore] = useState({ key: 0, startTime: Date.now(), gameOverTime: undefined, score: 0 } as GameScoreState & { key: number });\r\n    const [gameBoard, setGameBoard] = useState(createDefaultGameBoardState());\r\n    const [gameInput, setGameInput] = useState(null as null | GameInputState);\r\n    const lastGameBoard = useRef(gameBoard);\r\n\r\n    const leaderboard = leaderboardService.useLeaderboard({\r\n        getScore: () => ({ score: gameScore.score, timeMs: (gameScore.gameOverTime ?? Date.now()) - gameScore.startTime }),\r\n    });\r\n\r\n    const onGameOver = () => {\r\n        setGameScore(s => ({ ...s, gameOverTime: Date.now(), key: s.key + 1 }));\r\n    };\r\n\r\n    const onScoreSaved = () => {\r\n        // Restart Game\r\n        const newGameBoard = createDefaultGameBoardState();\r\n        setGameScore({ key: 0, startTime: Date.now(), gameOverTime: undefined, score: 0 });\r\n        setGameBoard(newGameBoard);\r\n        nextInputState(newGameBoard);\r\n    };\r\n\r\n    const onMove = (value: { col: number, row: number }) => {\r\n        const newGameBoard = { ...lastGameBoard.current };\r\n        newGameBoard.player.position = value;\r\n\r\n        let newPlayerCell = newGameBoard.columns[newGameBoard.player.position.col].cells[newGameBoard.player.position.row];\r\n        if (newPlayerCell.state === `blank`) {\r\n            ProgressGameService.onCorrect();\r\n            setGameScore(s => ({ ...s, score: s.score + newPlayerCell.value }));\r\n        }\r\n        // Player Safe at House\r\n        if (newPlayerCell.state === `house`) {\r\n            // next level\r\n            const nextGameBoard = createDefaultGameBoardState();\r\n            setGameBoard(nextGameBoard);\r\n            nextInputState(nextGameBoard);\r\n            return;\r\n        }\r\n\r\n        moveMonsters(newGameBoard);\r\n\r\n        // Player dead\r\n        newPlayerCell = newGameBoard.columns[newGameBoard.player.position.col].cells[newGameBoard.player.position.row];\r\n        if (newPlayerCell.state === `monster`) {\r\n            onGameOver();\r\n        }\r\n\r\n        // const col = newGameBoard.columns.find(x => x.col === value.col);\r\n        // if (col) {\r\n        //     col.maxTimesCorrect = value.row;\r\n        // };\r\n        setGameBoard(newGameBoard);\r\n        setTimeout(() => {\r\n            nextInputState(newGameBoard);\r\n        }, 100);\r\n    };\r\n\r\n    const nextInputState = (game: GameBoardState) => {\r\n        const gameInputState = createGameInputState(game, onMove);\r\n        setGameInput(gameInputState);\r\n    };\r\n\r\n    useEffect(() => {\r\n        nextInputState(gameBoard);\r\n    }, []);\r\n\r\n    lastGameBoard.current = gameBoard;\r\n\r\n    return (\r\n        <>\r\n            <View style={{ marginTop: 50, marginBottom: 150, padding: 2, alignItems: `center` }} >\r\n                <View style={{ width: 24 * 12 + 4 }}>\r\n                    <GameScore gameScore={gameScore} />\r\n                    <GameBoard gameBoard={gameBoard} focus={gameBoard.player.position ?? { col: 0, row: 0 }} />\r\n                    {gameInput && !gameScore.gameOverTime && <GameInput gameInput={gameInput} />}\r\n                    <leaderboard.LeaderboardArea gameOver={!!gameScore.gameOverTime} onScoreSaved={onScoreSaved} />\r\n                </View>\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\ntype GameBoardState = {\r\n    key: number;\r\n    maxTimes: number;\r\n    columns: {\r\n        col: number;\r\n        cells: GameBoardCell[];\r\n    }[];\r\n    player: {\r\n        position: GameBoardPosition;\r\n    };\r\n    monsters: {\r\n        position: GameBoardPosition;\r\n    }[];\r\n    house: {\r\n        position: GameBoardPosition;\r\n    };\r\n};\r\n\r\ntype GameBoardPosition = {\r\n    col: number;\r\n    row: number;\r\n};\r\n\r\ntype GameBoardCell = {\r\n    col: number;\r\n    row: number;\r\n    value: number;\r\n    state: 'blank' | 'answer' | 'monster' | 'player' | 'house';\r\n};\r\n\r\nconst maxMultiple = 12;\r\n\r\nconst createDefaultGameBoardState = (): GameBoardState => {\r\n\r\n    const gameBoard: GameBoardState = {\r\n        key: 0,\r\n        maxTimes: maxMultiple,\r\n        columns: [...new Array(maxMultiple)].map((x, i) => ({\r\n            col: i,\r\n            cells: [...new Array(maxMultiple)].map((r, j) => ({\r\n                col: i,\r\n                row: j,\r\n                value: (i + 1) * (j + 1),\r\n                state: `blank`,\r\n            })),\r\n        })),\r\n        player: { position: { col: randomIndex(maxMultiple), row: randomIndex(maxMultiple) } },\r\n        house: { position: { col: randomIndex(maxMultiple), row: randomIndex(maxMultiple) } },\r\n        monsters: [...new Array(3)].map(x => ({ position: { col: randomIndex(maxMultiple), row: randomIndex(maxMultiple) } })),\r\n    };\r\n\r\n    while (gameBoard.house.position.row === gameBoard.player.position.row) {\r\n        gameBoard.house.position = { col: randomIndex(maxMultiple), row: randomIndex(maxMultiple) };\r\n    }\r\n\r\n    gameBoard.monsters.forEach(m => {\r\n        const monster = m;\r\n        while (monster.position.row === gameBoard.player.position.row) {\r\n            monster.position = { col: randomIndex(maxMultiple), row: randomIndex(maxMultiple) };\r\n        }\r\n    });\r\n\r\n    // Randomly place player\r\n    updateBoard(gameBoard);\r\n\r\n    return gameBoard;\r\n};\r\n\r\nconst moveMonsters = (board: GameBoardState) => {\r\n    updateBoard(board);\r\n\r\n    const p = board.player;\r\n    board.monsters.forEach(mon => {\r\n        const m = mon;\r\n        const colDiff = p.position.col - m.position.col;\r\n        const rowDiff = p.position.row - m.position.row;\r\n        if (Math.abs(colDiff) >= Math.abs(rowDiff)) {\r\n            m.position = { ...m.position, col: m.position.col + Math.sign(colDiff) };\r\n        } else {\r\n            m.position = { ...m.position, row: m.position.row + Math.sign(rowDiff) };\r\n        }\r\n\r\n\r\n    });\r\n\r\n    // Spawn random monster\r\n    if (Math.random() < 0.25) {\r\n        const newMonster = { position: { col: randomIndex(maxMultiple), row: randomIndex(maxMultiple) } };\r\n        if (Math.random() < 0.5) {\r\n            if (Math.random() < 0.5) {\r\n                newMonster.position.col = 0;\r\n            } else {\r\n                newMonster.position.col = maxMultiple - 1;\r\n            }\r\n        } else {\r\n            // eslint-disable-next-line no-lonely-if\r\n            if (Math.random() < 0.5) {\r\n                newMonster.position.row = 0;\r\n            } else {\r\n                newMonster.position.row = maxMultiple - 1;\r\n            }\r\n        }\r\n\r\n        board.monsters.push(newMonster);\r\n    }\r\n\r\n    // Remove monsters that run into answer\r\n    const newBoard = board;\r\n    const monsters = [...board.monsters];\r\n    const deadMonsters = monsters.filter(m => board.columns[m.position.col].cells[m.position.row].state === `answer`);\r\n    const liveMonsters = monsters.filter(m => board.columns[m.position.col].cells[m.position.row].state !== `answer`);\r\n\r\n    // Dead monsters destroy answer\r\n    deadMonsters.forEach(m => {\r\n        newBoard.columns[m.position.col].cells[m.position.row].state = `blank`;\r\n    });\r\n\r\n    newBoard.monsters = liveMonsters;\r\n\r\n    updateBoard(newBoard);\r\n};\r\n\r\nconst updateBoard = (state: GameBoardState) => {\r\n    state.columns.forEach(c => c.cells.forEach(cellRaw => {\r\n        const cell = cellRaw;\r\n        if (cell.state === `monster`) { cell.state = `blank`; }\r\n        if (cell.state === `player`) { cell.state = `answer`; }\r\n    }));\r\n\r\n    updateBoardPosition(state, state.house.position, `house`);\r\n    updateBoardPosition(state, state.player.position, `player`);\r\n    state.monsters.forEach(m => {\r\n        updateBoardPosition(state, m.position, `monster`);\r\n    });\r\n};\r\n\r\nconst updateBoardPosition = (boardRaw: GameBoardState, position: GameBoardPosition, kind: 'player' | 'monster' | 'house') => {\r\n    const board = boardRaw;\r\n    board.columns[position.col].cells[position.row].state = kind;\r\n    board.key += 1;\r\n};\r\n\r\nconst styles = {\r\n    cellView: {\r\n        width: 24,\r\n        height: 24,\r\n        backgroundColor: `rgba(0,0,0,0.75)`,\r\n        borderWidth: 1,\r\n        borderColor: `#111133`,\r\n        borderStyle: `solid`,\r\n        justifyContent: `center`,\r\n        alignItems: `center`,\r\n    },\r\n    focusCellView: {\r\n        width: 24,\r\n        height: 24,\r\n        borderWidth: 1,\r\n        borderColor: `#66FF66`,\r\n        borderLeftColor: `#FF66FF`,\r\n        borderRightColor: `#FF66FF`,\r\n        borderStyle: `solid`,\r\n        justifyContent: `center`,\r\n        alignItems: `center`,\r\n    },\r\n    cellHeaderView: {\r\n        width: 24,\r\n        height: 24,\r\n        backgroundColor: `rgba(0,0,0,0.5)`,\r\n        borderWidth: 1,\r\n        borderColor: `#111133`,\r\n        borderStyle: `solid`,\r\n        justifyContent: `center`,\r\n        alignItems: `center`,\r\n    },\r\n    focusCellHeaderView: {\r\n        width: 24,\r\n        height: 24,\r\n        backgroundColor: `rgba(0,0,0,0.5)`,\r\n        borderWidth: 1,\r\n        borderColor: `#111133`,\r\n        borderStyle: `solid`,\r\n        justifyContent: `center`,\r\n        alignItems: `center`,\r\n    },\r\n    cellText: {\r\n        fontFamily: `\"Lucida Console\", Monaco, monospace`,\r\n        fontSize: 12,\r\n    },\r\n    cellHeaderText: {\r\n        fontFamily: `\"Lucida Console\", Monaco, monospace`,\r\n        fontSize: 12,\r\n        color: `#333300`,\r\n    },\r\n    focusCellHeaderText: {\r\n        fontFamily: `\"Lucida Console\", Monaco, monospace`,\r\n        fontSize: 12,\r\n        color: `#FFFF00`,\r\n    },\r\n} as const;\r\n\r\nconst getCellText = (cell: GameBoardCell) => {\r\n    return cell.state === `answer` ? `${cell.value}`\r\n        : cell.state === `player` ? `😀`\r\n            : cell.state === `monster` ? `💀`\r\n                : cell.state === `house` ? `🏠`\r\n                    : ``;\r\n};\r\n\r\nconst GameBoard = ({ gameBoard, focus }: { gameBoard: GameBoardState, focus: { col: number, row: number } }) => {\r\n    return (\r\n        <>\r\n            <View style={{ flexDirection: `row` }} >\r\n                <View style={{ flexDirection: `column-reverse` }} >\r\n                    <View style={styles.focusCellHeaderView} >\r\n                        <Text style={styles.focusCellHeaderText} >x</Text>\r\n                    </View>\r\n                    {gameBoard.columns[0].cells.map((r) => (\r\n                        <View key={r.row} style={focus.row === r.row ? styles.focusCellHeaderView : styles.cellHeaderView} >\r\n                            <Text style={focus.row === r.row ? styles.focusCellHeaderText : styles.cellHeaderText}>{`${r.row + 1}`}</Text>\r\n                        </View>\r\n                    ))}\r\n                </View>\r\n\r\n                {gameBoard.columns.map((c) => (\r\n                    <View key={c.col} style={{ flexDirection: `column-reverse` }} >\r\n                        <View style={focus.col === c.col ? styles.focusCellHeaderView : styles.cellHeaderView} >\r\n                            <Text style={focus.col === c.col ? styles.focusCellHeaderText : styles.cellHeaderText}>{`${c.col + 1}`}</Text>\r\n                        </View>\r\n                        {c.cells.map((cell) => (\r\n                            <View key={cell.row} style={focus.row >= cell.row && focus.col >= c.col ? styles.focusCellView : styles.cellView} >\r\n                                <Text style={styles.cellText}>{getCellText(cell)}</Text>\r\n                            </View>\r\n                        ))}\r\n                    </View>\r\n                ))}\r\n\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\ntype GameInputState = {\r\n    key: string;\r\n    buttons: {\r\n        key: string;\r\n        text: string;\r\n        onPress: () => void;\r\n    }[];\r\n};\r\n\r\nconst createGameInputState = (gameBoard: GameBoardState, onMove: (value: { col: number, row: number }) => void): GameInputState => {\r\n    const { player } = gameBoard;\r\n\r\n    const nextCells = [\r\n        gameBoard.columns[player.position.col + 0]?.cells[player.position.row + 1],\r\n        gameBoard.columns[player.position.col + 0]?.cells[player.position.row - 1],\r\n        gameBoard.columns[player.position.col + 1]?.cells[player.position.row + 0],\r\n        gameBoard.columns[player.position.col - 1]?.cells[player.position.row + 0],\r\n    ].filter(x => x);\r\n\r\n    const isOnSquare = player.position.col === player.position.row;\r\n    const buttons = nextCells.map(x => ({\r\n        key: `${x.row} ${x.col}`,\r\n        text: `${x.value}${isOnSquare && player.position.col === x.col ? `↕` : isOnSquare && player.position.row === x.row ? `↔` : ``}`,\r\n        onPress: () => onMove(x),\r\n    }));\r\n\r\n    return {\r\n        key: `${gameBoard.key}`,\r\n        buttons: shuffle(buttons),\r\n    };\r\n};\r\n\r\nconst inputStyles = {\r\n    outerContainer: {\r\n        height: 150,\r\n    },\r\n    container: {\r\n        flexDirection: `row`,\r\n        justifyContent: `space-around`,\r\n        margin: 16,\r\n    },\r\n    buttonView: {\r\n        width: 48,\r\n        height: 48,\r\n        borderWidth: 2,\r\n        borderColor: `#6666FF`,\r\n        borderStyle: `solid`,\r\n        justifyContent: `center`,\r\n        alignItems: `center`,\r\n    },\r\n    buttonText: {\r\n        fontFamily: `\"Lucida Console\", Monaco, monospace`,\r\n        fontSize: 24,\r\n        color: `#FFFFFF`,\r\n    },\r\n} as const;\r\n\r\nconst GameInput = ({ gameInput }: { gameInput: GameInputState }) => {\r\n\r\n    const [y, setY] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setY(100);\r\n        const id = setInterval(() => {\r\n            setY(s => Math.max(0, s - 1));\r\n        }, 50);\r\n        return () => clearInterval(id);\r\n    }, [gameInput.key]);\r\n\r\n    console.log(`GameInput`, { gameInput });\r\n    return (\r\n        <>\r\n            <View style={inputStyles.outerContainer}>\r\n                <View style={[inputStyles.container, { transform: `translate(0px,${y}px)` }]}>\r\n                    {gameInput.buttons.map(x => (\r\n                        <TouchableOpacity key={x.key} onPress={x.onPress}>\r\n                            <View style={inputStyles.buttonView}>\r\n                                <Text style={inputStyles.buttonText}>{x.text}</Text>\r\n                            </View>\r\n                        </TouchableOpacity>))}\r\n                </View>\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nconst scoreStyles = {\r\n    container: {\r\n        flex: 1,\r\n        alignItems: `center`,\r\n        margin: 16,\r\n    },\r\n    text: {\r\n        fontFamily: `\"Lucida Console\", Monaco, monospace`,\r\n        fontSize: 14,\r\n        color: `#FFFF00`,\r\n    },\r\n    mistakesText: {\r\n        fontFamily: `\"Lucida Console\", Monaco, monospace`,\r\n        fontSize: 14,\r\n        color: `#FF6666`,\r\n    },\r\n} as const;\r\n\r\ntype GameScoreState = {\r\n    startTime: number;\r\n    gameOverTime?: number;\r\n    score: number;\r\n};\r\n\r\nconst GameScore = ({ gameScore }: { gameScore: GameScoreState }) => {\r\n\r\n    const [timeMessage, setTimeMessage] = useState(``);\r\n    const [scoreMessage, setScoreMessage] = useState(``);\r\n\r\n    useEffect(() => {\r\n        const id = setInterval(() => {\r\n\r\n            setScoreMessage(`${gameScore.score}`);\r\n\r\n            if (gameScore.gameOverTime) {\r\n                const timeMs = gameScore.gameOverTime - gameScore.startTime;\r\n                setTimeMessage(s => `${(timeMs / 1000).toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 })} seconds`);\r\n                return;\r\n            }\r\n\r\n            const timeMs = Date.now() - gameScore.startTime;\r\n            setTimeMessage(s => `${(timeMs / 1000).toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 })} seconds`);\r\n        }, 100);\r\n        return () => clearInterval(id);\r\n    }, [gameScore]);\r\n\r\n    // console.log(`GameInput`);\r\n    return (\r\n        <>\r\n            <View style={scoreStyles.container}>\r\n                {/* <View>\r\n                    <Text style={scoreStyles.text}>{timeMessage}</Text>\r\n                </View> */}\r\n                <View>\r\n                    <Text style={scoreStyles.text}>{scoreMessage}</Text>\r\n                </View>\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n"],"sourceRoot":""}