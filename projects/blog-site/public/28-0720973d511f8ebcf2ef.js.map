{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/hacker-news/hacker-news-item-list.tsx","webpack:///D:/Projects/rick-love-master/code/hacker-news/hacker-news-api.ts","webpack:///D:/Projects/rick-love-master/code/hacker-news/hacker-news-page.tsx"],"names":["HackerNewsItemList","posts","style","styles","container","map","x","i","key","id","item","index","numberText","fontSize","titleText","fontWeight","infoText","pointsText","authorsText","timeText","actionsText","HackerNewsListItem","timestamp","url","type","display","flexDirection","alignItems","justifyContent","width","title","URL","host","score","by","time","formatDate_FromNow","Date","descendants","JSON","stringify","pageTopPostUrl","top","new","fetchJson","a","fetch","mode","response","ok","console","log","status","statusText","ApiError","json","getTopPosts","page","pageUrl","itemIds","itemIds_top","slice","Promise","all","items","HackerNewsPage","useAutoLoadingError","loading","error","doWork","useState","setPosts","useEffect","result","HackerNewsPage_TopNews","props"],"mappings":"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","file":"28-0720973d511f8ebcf2ef.js","sourcesContent":["import React from 'react';\r\nimport { View, Text } from 'react-native-lite';\r\nimport { formatDate_FromNow } from 'utils/dates';\r\nimport { HackerNewsItem, Timestamp } from './hacker-news-types';\r\n\r\nexport const HackerNewsItemList = ({\r\n    posts,\r\n}: {\r\n    posts: HackerNewsItem[];\r\n}) => {\r\n    return (\r\n        <>\r\n            <View style={styles.container}>\r\n                {posts.map((x, i) => (\r\n                    <View key={`${x.id}`}>\r\n                        <HackerNewsListItem item={x} index={i} />\r\n                    </View>\r\n                ))}\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n\r\nconst styles = {\r\n    container: {\r\n    },\r\n    numberText: {\r\n        fontSize: 12,\r\n    },\r\n    titleText: {\r\n        fontSize: 14,\r\n        fontWeight: `bold`,\r\n    },\r\n    infoText: {\r\n        fontSize: 12,\r\n    },\r\n    pointsText: {\r\n        fontSize: 10,\r\n    },\r\n    authorsText: {\r\n        fontSize: 10,\r\n    },\r\n    timeText: {\r\n        fontSize: 10,\r\n    },\r\n    actionsText: {\r\n        fontSize: 10,\r\n    },\r\n} as const;\r\n\r\nconst getUrlDomain = (url: undefined | string) => url ? `(${new URL(url).host})` : ``;\r\nconst getTimeText = (timestamp: Timestamp) => `${formatDate_FromNow(new Date(timestamp * 1000))}`;\r\n\r\nconst HackerNewsListItem = ({ item, index }: { item: HackerNewsItem, index: number }) => {\r\n    if (item.type === `story` || item.type === `job`) {\r\n        return (\r\n            <>\r\n                <View style={{ display: `flex`, flexDirection: `row`, alignItems: `flex-start` }}>\r\n                    {/* Index */}\r\n                    <View style={{ display: `flex`, flexDirection: `row`, justifyContent: `center`, width: 32 }}>\r\n                        <Text style={styles.numberText}>{`${index + 1}.`}</Text>\r\n                    </View>\r\n                    {/* Actions */}\r\n                    {/* Content */}\r\n                    <View style={{ display: `flex`, flexDirection: `column` }}>\r\n                        <View style={{ display: `flex`, flexDirection: `row`, justifyContent: `flex-start`, alignItems: `flex-end` }}>\r\n                            <Text style={styles.titleText}>{item.title}</Text>\r\n                            <Text style={styles.infoText}>{` ${getUrlDomain(item.url)}`}</Text>\r\n                        </View>\r\n                        <View style={{ display: `flex`, flexDirection: `row`, justifyContent: `flex-start`, alignItems: `flex-end` }}>\r\n                            <Text style={styles.pointsText}>{`${item.score} points`}</Text>\r\n                            <Text style={styles.authorsText}>{` by`}</Text>\r\n                            <Text style={styles.authorsText}>{` ${item.by}`}</Text>\r\n                            <Text style={styles.timeText}>{` ${getTimeText(item.time)}`}</Text>\r\n                            {item.type === `story` && (\r\n                                <>\r\n                                    <Text style={styles.timeText}>{` | ${item.descendants} comments`}</Text>\r\n                                </>\r\n                            )}\r\n                        </View>\r\n                    </View>\r\n\r\n                </View>\r\n                {/* <Text>{JSON.stringify(item, null, 2)}</Text> */}\r\n            </>\r\n        );\r\n    }\r\n    return (<Text>{JSON.stringify(item, null, 2)}</Text>);\r\n\r\n};\r\n","import { ApiError } from 'utils/error';\r\nimport { HackerNewsItem, HackerNewsItemId } from './hacker-news-types';\r\n\r\nexport type HackerNewsPageKind = 'top' | 'new';\r\nexport type TopPostData = HackerNewsItemId[];\r\n\r\nconst pageTopPostUrl: { [page in HackerNewsPageKind]: string } = {\r\n    top: `https://hacker-news.firebaseio.com/v0/topstories.json`,\r\n    new: `https://hacker-news.firebaseio.com/v0/newstories.json`,\r\n};\r\n\r\nconst getItemUrl = (itemId: HackerNewsItemId) => {\r\n    return `https://hacker-news.firebaseio.com/v0/item/${itemId}.json`;\r\n};\r\n\r\nconst fetchJson = async <T>(url: string): Promise<T> => {\r\n    const response = await fetch(url, { mode: `cors` });\r\n    if (!response.ok) {\r\n        console.log(`Failed to get data`, { url, status: response.status, statusText: response.statusText, response });\r\n        throw new ApiError(`Failed to get data`, { url, status: response.status, statusText: response.statusText });\r\n    }\r\n    return await response.json() as T;\r\n};\r\n\r\nexport const getTopPosts = async (page: HackerNewsPageKind): Promise<HackerNewsItem[]> => {\r\n    const pageUrl = pageTopPostUrl[page];\r\n    const itemIds = await fetchJson<HackerNewsItemId[]>(pageUrl);\r\n    const itemIds_top = itemIds.slice(0, 30);\r\n    const items = await Promise.all(itemIds_top.map(async x => await fetchJson<HackerNewsItem>(getItemUrl(x))));\r\n    return items;\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport { ErrorBox } from 'controls-react/error-box';\r\nimport { Loading } from 'controls-react/loading';\r\nimport { useAutoLoadingError } from 'utils-react/hooks';\r\nimport { HackerNewsItemList } from './hacker-news-item-list';\r\nimport { HackerNewsItem } from './hacker-news-types';\r\nimport { getTopPosts, HackerNewsPageKind } from './hacker-news-api';\r\n\r\n\r\nconst HackerNewsPage = ({\r\n    page,\r\n}: {\r\n    page: HackerNewsPageKind;\r\n}) => {\r\n\r\n    const { loading, error, doWork } = useAutoLoadingError();\r\n    const [posts, setPosts] = useState(null as null | HackerNewsItem[]);\r\n\r\n    useEffect(() => {\r\n        doWork(async () => {\r\n            const result = await getTopPosts(page);\r\n            setPosts(result);\r\n        });\r\n\r\n    }, [page]);\r\n\r\n    return (\r\n        <>\r\n            <Loading loading={loading} />\r\n            <ErrorBox error={error} />\r\n            {posts && (\r\n                <HackerNewsItemList posts={posts} />\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport const HackerNewsPage_TopNews = (props: {}) => (<HackerNewsPage page='top' />);\r\n"],"sourceRoot":""}