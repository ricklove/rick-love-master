{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/doodle/doodle-storage.ts","webpack:///D:/Projects/rick-love-master/code/games/educational-games/utils/keyboard-simplified.tsx","webpack:///D:/Projects/rick-love-master/code/games/educational-games/doodle.tsx","webpack:///D:/Projects/rick-love-master/code/games/educational-games/doodle-subjects/doodle-spelling.tsx"],"names":["storageAccess","JSON","parse","localStorage","getItem","value","setItem","stringify","createRemoteDoodleAccess","uploadApiWebClient","createUploadApiWebClient","uploadApiConfig","storageData","uploadUrl","load","a","doodles","downloadData","getUrl","data","save","createUploadUrl","prefix","uploader","createUploader","uploadData","renewUploadUrl","relativePath","backupUrl","backupUploader","createDoodleDrawingStorageService","remote","memory","map","x","drawing","drawingEncoded","decodeDoodleDrawing","service","saveDrawing","prompt","doodle","key","substr","Date","now","Math","floor","random","push","setTimeout","undefined","encodeDoodleDrawing","saveBestDrawingSelection","d","find","score","getDrawings","options","includeOtherPrompts","maxCount","samePromptDrawings","filter","otherPromptDrawings","allDrawings","randomItem","shuffle","slice","drawings","englishKeyboard","rows","keys","split","styles","container","rowView","flex","flexDirection","keyView","margin","padding","width","height","backgroundColor","justifyContent","alignItems","keyView_disabled","opacity","keyText","fontSize","keyText_wrong","color","KeyboardSimplified","expectedCharacter","showHints","onExpectedKeyPress","keyboard","useState","hintKeys","setHintKeys","wrongKeys","setWrongKeys","useEffect","hints","flatMap","trim","style","row","iRow","k","i","outline","onPress","s","includes","drawingChoicesView","maxWidth","flexWrap","drawingChoiceWrapper","drawingChoice","titleView","titleText","promptView","promptText","buttonView","buttonText","EducationalGame_Doodle","props","problemSourceKey","setProblemSourceKey","problemService","onOpen","onClose","onSubjectNavigation","EducationalGame_Doodle_Inner","problem","setProblem","mode","setMode","setDrawings","useRef","answers","isCorrect","current","gotoNextProblem","p","getNextProblem","question","gotoTypeMode","onQuestion","useAutoLoadingError","doWork","loading","error","stopIfObsolete","drawingStorage","result","gotoDrawPromptMode","gotoChooseBestMode","length","onDone","onChooseBest","segments","DoodleGameView_DrawWord","defaultDoodleDrawing","setDrawing","onChange","DoodleGameView_ChooseBest","typeStyles","completedText","DoodleGameView_Type","completed","remaining","status","setStatus","nextChar","EducationalGame_Doodle_Spelling","speechService","createSpeechService","Platform","OS","hasStarted","setHasStarted","languange","onClick","speak","alignSelf","size","createAutoSavedProblemService","createReviewProblemService","createSpellingProblemService","sectionSize"],"mappings":"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","file":"20-5732e197b12ad790ebb8.js","sourcesContent":["import { randomItem } from 'utils/random';\r\nimport { shuffle } from 'utils/arrays';\r\nimport { UploadUrl } from 'upload-api/client/types';\r\nimport { createUploadApiWebClient } from 'upload-api/client/web-client';\r\nimport { uploadApiConfig } from 'upload-api/client/config';\r\nimport { createUploader, downloadData } from 'upload-api/client/uploader';\r\nimport { DoodleDrawingStorageService, DoodleData_Encoded, DoodleData, decodeDoodleDrawing, DoodleDrawingEncoded, DoodleDrawing, encodeDoodleDrawing } from './doodle';\r\n\r\ntype DoodleStorageData = {\r\n    // doodles: DoodleData[];\r\n    uploadUrl: UploadUrl;\r\n};\r\ntype DoodleUploadData = {\r\n    doodles: DoodleData_Encoded[];\r\n};\r\nconst storageAccess = {\r\n    load: (): null | DoodleStorageData => {\r\n        try {\r\n            return JSON.parse(localStorage.getItem(`doodleStorage`) ?? `NULL!{}`);\r\n        } catch{ return null; }\r\n    },\r\n    save: (value: DoodleStorageData) => {\r\n        localStorage.setItem(`doodleStorage`, JSON.stringify(value));\r\n    },\r\n};\r\n\r\nconst createRemoteDoodleAccess = () => {\r\n    const uploadApiWebClient = createUploadApiWebClient(uploadApiConfig);\r\n\r\n    const storageData = storageAccess.load();\r\n    let uploadUrl = storageData?.uploadUrl ?? null;\r\n\r\n    return {\r\n        load: async (): Promise<DoodleUploadData> => {\r\n            if (!uploadUrl) {\r\n                return { doodles: [] };\r\n            }\r\n\r\n            const data = await downloadData(uploadUrl.getUrl);\r\n            return data as DoodleUploadData;\r\n        },\r\n        save: async (data: DoodleUploadData) => {\r\n            if (!uploadUrl) {\r\n                uploadUrl = (await uploadApiWebClient.createUploadUrl({ prefix: `doodle` })).uploadUrl;\r\n                storageAccess.save({ uploadUrl });\r\n            }\r\n\r\n            try {\r\n                const uploader = createUploader(uploadUrl);\r\n                await uploader.uploadData(data);\r\n            } catch{\r\n                // Try again after renew upload token\r\n                uploadUrl = (await uploadApiWebClient.renewUploadUrl({ uploadUrl })).uploadUrl;\r\n                storageAccess.save({ uploadUrl });\r\n\r\n                const uploader = createUploader(uploadUrl);\r\n                await uploader.uploadData(data);\r\n            }\r\n\r\n            // Upload backup (temp)\r\n            const backupUrl = (await uploadApiWebClient.createUploadUrl({ prefix: `${uploadUrl.relativePath}/backup` })).uploadUrl;\r\n            const backupUploader = createUploader(backupUrl);\r\n            await backupUploader.uploadData(data);\r\n        },\r\n    };\r\n};\r\n\r\nexport const createDoodleDrawingStorageService = async () => {\r\n    const remote = createRemoteDoodleAccess();\r\n\r\n    const memory = {\r\n        doodles: [] as DoodleData[],\r\n    };\r\n\r\n    // Load from server\r\n    memory.doodles = (await remote.load()).doodles.map(x => ({\r\n        ...x,\r\n        drawing: x.drawingEncoded ? decodeDoodleDrawing(x.drawingEncoded) : (x as unknown as DoodleData).drawing,\r\n    }));\r\n\r\n    const service: DoodleDrawingStorageService = {\r\n        saveDrawing: async (prompt, drawing) => {\r\n            const doodle = { key: `${prompt.substr(0, 8)}:${Date.now()}:${Math.floor(Math.random() * 999999)}`, drawing, prompt };\r\n            memory.doodles.push(doodle);\r\n\r\n            // Save to server\r\n            setTimeout(async () => {\r\n                await remote.save({ doodles: memory.doodles.map(x => ({ ...x, drawing: undefined, drawingEncoded: encodeDoodleDrawing(x.drawing) })) });\r\n            });\r\n        },\r\n        saveBestDrawingSelection: async (doodle) => {\r\n            const d = memory.doodles.find(x => x.key === doodle.key);\r\n            if (!d) { return; }\r\n            d.score = (d.score ?? 0) + 1;\r\n\r\n            // Save to server\r\n            setTimeout(async () => {\r\n                await remote.save({ doodles: memory.doodles.map(x => ({ ...x, drawing: undefined, drawingEncoded: encodeDoodleDrawing(x.drawing) })) });\r\n            });\r\n        },\r\n        getDrawings: async (prompt, options) => {\r\n            const {\r\n                includeOtherPrompts = false,\r\n                maxCount = 4,\r\n            } = options ?? {};\r\n\r\n            const samePromptDrawings = memory.doodles.filter(x => x.prompt === prompt);\r\n            const otherPromptDrawings = includeOtherPrompts ? memory.doodles.filter(x => x.prompt !== prompt) : [];\r\n            const allDrawings =\r\n                includeOtherPrompts ? [randomItem(samePromptDrawings), ...shuffle(otherPromptDrawings).slice(0, maxCount - 1)]\r\n                    : samePromptDrawings;\r\n            const drawings = shuffle(allDrawings).slice(0, maxCount);\r\n            return { doodles: drawings };\r\n        },\r\n    };\r\n\r\n    return service;\r\n};\r\n","/* eslint-disable react/no-array-index-key */\r\nimport React, { useEffect, useState } from 'react';\r\nimport { View, Text, TouchableOpacity } from 'react-native-lite';\r\nimport { shuffle } from 'utils/arrays';\r\n\r\nconst englishKeyboard = {\r\n    rows: [\r\n        { keys: `qwertyuiop`.split(``) },\r\n        { keys: ` asdfghjkl`.split(``) },\r\n        { keys: `  zxcvbnm `.split(``) },\r\n    ],\r\n};\r\n\r\nconst styles = {\r\n    container: {},\r\n    rowView: { flex: 1, flexDirection: `row` },\r\n    keyView: {\r\n        margin: 2,\r\n        padding: 2,\r\n        width: 20,\r\n        height: 20,\r\n        backgroundColor: `#111111`,\r\n        justifyContent: `center`,\r\n        alignItems: `center`,\r\n    },\r\n    keyView_disabled: { opacity: 0.5 },\r\n    keyText: {\r\n        fontSize: 16,\r\n    },\r\n    keyText_wrong: {\r\n        fontSize: 16,\r\n        color: `#FF0000`,\r\n    },\r\n} as const;\r\n\r\nexport const KeyboardSimplified = ({ expectedCharacter, showHints, onExpectedKeyPress }: { expectedCharacter: string, showHints: boolean, onExpectedKeyPress: () => void }) => {\r\n    const keyboard = englishKeyboard;\r\n\r\n    const [hintKeys, setHintKeys] = useState(null as null | string[]);\r\n    const [wrongKeys, setWrongKeys] = useState([] as string[]);\r\n    useEffect(() => {\r\n        if (!showHints) { setHintKeys(null); }\r\n\r\n        const hints = [expectedCharacter, ...shuffle(keyboard.rows.flatMap(x => x.keys).map(x => x.trim()).filter(x => x)).slice(0, 3)];\r\n        setHintKeys(hints);\r\n        setWrongKeys([]);\r\n    }, [expectedCharacter, showHints]);\r\n\r\n    const onKeyPress = (key: string) => {\r\n        if (key === expectedCharacter) {\r\n            onExpectedKeyPress();\r\n            return;\r\n        }\r\n        // Remove from choices\r\n        if (showHints) {\r\n            setHintKeys(s => (s ?? []).filter(x => x !== key));\r\n            setWrongKeys(s => [...s, key]);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <View style={styles.container}>\r\n                {keyboard.rows.map((row, iRow) => (\r\n                    <View style={styles.rowView} key={`${iRow}`} >\r\n                        {row.keys.map((k, i) => (\r\n                            <TouchableOpacity key={`${k}${i}`} style={{ outline: `none` }} onPress={() => onKeyPress(k)}>\r\n                                <View style={!hintKeys || hintKeys.includes(k) ? {} : styles.keyView_disabled} >\r\n                                    <View style={styles.keyView}>\r\n                                        <Text style={wrongKeys.includes(k) ? styles.keyText_wrong : styles.keyText}>{k}</Text>\r\n                                    </View>\r\n                                </View>\r\n                            </TouchableOpacity>\r\n                        ))}\r\n                    </View>\r\n                ))}\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { DoodleDisplayView, DoodleDrawerView } from 'doodle/doodle-view';\r\nimport { defaultDoodleDrawing, DoodleDrawing, DoodleData, DoodleDrawingStorageService } from 'doodle/doodle';\r\nimport { View, Text, TouchableOpacity } from 'react-native-lite';\r\nimport { useAutoLoadingError } from 'utils-react/hooks';\r\nimport { ProblemService, Problem } from './problems/problems-service';\r\nimport { SubjectNavigator } from './utils/subject-navigator';\r\nimport { KeyboardSimplified } from './utils/keyboard-simplified';\r\n\r\nexport const styles = {\r\n    container: {\r\n        alignItems: `center`,\r\n    },\r\n    drawing: {\r\n        width: 312,\r\n        height: 312,\r\n        color: `#FFFFFF`,\r\n        backgroundColor: `#000000`,\r\n    },\r\n    drawingChoicesView: {\r\n        maxWidth: 312 + 4 * 4 + 4,\r\n        flexDirection: `row`,\r\n        flexWrap: `wrap`,\r\n    },\r\n    drawingChoiceWrapper: {\r\n        padding: 4,\r\n    },\r\n    drawingChoice: {\r\n        width: 78,\r\n        height: 78,\r\n        color: `#FFFFFF`,\r\n        backgroundColor: `#000000`,\r\n    },\r\n    titleView: {\r\n        justifyContent: `center`,\r\n        alignItems: `center`,\r\n    },\r\n    titleText: {\r\n        fontSize: 20,\r\n        color: `#FFFFFF`,\r\n    },\r\n    promptView: {\r\n        justifyContent: `center`,\r\n        alignItems: `center`,\r\n    },\r\n    promptText: {\r\n        fontSize: 20,\r\n        color: `#FFFF00`,\r\n    },\r\n    buttonView: {\r\n        padding: 8,\r\n        backgroundColor: `#111111`,\r\n    },\r\n    buttonText: {\r\n        fontSize: 20,\r\n        color: `#FFFF00`,\r\n    },\r\n} as const;\r\n\r\n\r\nexport const EducationalGame_Doodle = (props: { problemService: ProblemService, drawingStorage: DoodleDrawingStorageService }) => {\r\n    const [problemSourceKey, setProblemSourceKey] = useState(0);\r\n\r\n    return (<>\r\n        <EducationalGame_Doodle_Inner {...props} problemSourceKey={problemSourceKey} />\r\n        <SubjectNavigator problemService={props.problemService}\r\n            onOpen={() => { }}\r\n            onClose={() => { }}\r\n            onSubjectNavigation={() => { setProblemSourceKey(s => s + 1); }}\r\n        />\r\n    </>);\r\n};\r\n\r\nexport const EducationalGame_Doodle_Inner = (props: { problemService: ProblemService, drawingStorage: DoodleDrawingStorageService, problemSourceKey: number }) => {\r\n\r\n    const [problem, setProblem] = useState(null as null | Problem);\r\n    const [mode, setMode] = useState(`type` as 'type' | 'drawPrompt' | 'chooseCorrect' | 'chooseBest');\r\n    const [drawings, setDrawings] = useState(null as null | DoodleData[]);\r\n    const prompt = useRef(problem?.answers.find(x => x.isCorrect)?.value ?? ``);\r\n    prompt.current = problem?.answers.find(x => x.isCorrect)?.value ?? ``;\r\n\r\n    const gotoNextProblem = () => {\r\n        const p = props.problemService.getNextProblem();\r\n        if (!p.question) { return; }\r\n        setProblem(p);\r\n        setTimeout(gotoTypeMode);\r\n        p.onQuestion?.();\r\n    };\r\n\r\n    useEffect(() => {\r\n        gotoNextProblem();\r\n    }, [props.problemSourceKey]);\r\n\r\n    const { loading, error, doWork } = useAutoLoadingError();\r\n\r\n    const gotoTypeMode = () => {\r\n        doWork(async (stopIfObsolete) => {\r\n            const result = await props.drawingStorage.getDrawings(prompt.current);\r\n            setDrawings(result.doodles);\r\n            setMode(`type`);\r\n        });\r\n    };\r\n\r\n    const onTypeDone = () => {\r\n        doWork(async (stopIfObsolete) => {\r\n            setTimeout(gotoDrawPromptMode);\r\n        });\r\n    };\r\n\r\n    const gotoDrawPromptMode = () => {\r\n        setMode(`drawPrompt`);\r\n    };\r\n\r\n    const onDrawingDone = (drawing: DoodleDrawing) => {\r\n        // props.onDone(drawing);\r\n\r\n        // Save drawing with word prompt\r\n        doWork(async (stopIfObsolete) => {\r\n            if (drawing.segments.length > 0) {\r\n                await props.drawingStorage.saveDrawing(prompt.current, drawing);\r\n            }\r\n            stopIfObsolete();\r\n            setTimeout(gotoChooseBestMode);\r\n        });\r\n    };\r\n\r\n    const gotoChooseBestMode = () => {\r\n        doWork(async (stopIfObsolete) => {\r\n            const result = await props.drawingStorage.getDrawings(prompt.current);\r\n            stopIfObsolete();\r\n\r\n            if (result.doodles.length <= 1) {\r\n                gotoNextProblem();\r\n                return;\r\n            }\r\n\r\n            setDrawings(result.doodles);\r\n            setMode(`chooseBest`);\r\n        });\r\n    };\r\n\r\n    const onChooseBest = (value: DoodleData) => {\r\n        doWork(async (stopIfObsolete) => {\r\n            await props.drawingStorage.saveBestDrawingSelection(value);\r\n            stopIfObsolete();\r\n            gotoNextProblem();\r\n        });\r\n    };\r\n\r\n\r\n    if (!problem) {\r\n        return (\r\n            <>\r\n            </>\r\n        );\r\n    }\r\n\r\n    if (mode === `type`) {\r\n        return (\r\n            <>\r\n                <DoodleGameView_Type prompt={prompt.current} drawings={drawings ?? []} onDone={onTypeDone} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    if (mode === `chooseBest` && drawings) {\r\n        return (\r\n            <>\r\n                <DoodleGameView_ChooseBest prompt={prompt.current} drawings={drawings} onChooseBest={onChooseBest} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <DoodleGameView_DrawWord prompt={prompt.current} onDone={onDrawingDone} />\r\n            {/* <DoodleDisplayView style={styles.drawing} drawing={defaultDoodleDrawing()} /> */}\r\n        </>\r\n    );\r\n};\r\n\r\nexport const DoodleGameView_DrawWord = (props: { prompt: string, onDone: (drawing: DoodleDrawing) => void }) => {\r\n    const [drawing, setDrawing] = useState(defaultDoodleDrawing());\r\n    const changeDoodle = (value: DoodleDrawing) => {\r\n        setDrawing(value);\r\n    };\r\n\r\n    const done = () => {\r\n        props.onDone(drawing);\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Reset problem when prompt changes\r\n        setDrawing(defaultDoodleDrawing());\r\n    }, [props.prompt]);\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <View style={styles.titleView}>\r\n                <Text style={styles.titleText}>Draw</Text>\r\n            </View>\r\n            <DoodleDrawerView style={styles.drawing} drawing={drawing} onChange={changeDoodle} />\r\n            <View style={styles.promptView}>\r\n                <Text style={styles.promptText}>{props.prompt}</Text>\r\n            </View>\r\n            <TouchableOpacity onPress={done}>\r\n                <View style={styles.buttonView}>\r\n                    <Text style={styles.buttonText}>Done</Text>\r\n                </View>\r\n            </TouchableOpacity>\r\n        </View>\r\n    );\r\n};\r\n\r\nexport const DoodleGameView_ChooseBest = (props: { prompt: string, drawings: DoodleData[], onChooseBest: (drawing: DoodleData) => void }) => {\r\n    return (\r\n        <View style={styles.container}>\r\n            <View style={styles.titleView}>\r\n                <Text style={styles.titleText}>Choose Best</Text>\r\n            </View>\r\n            <View style={styles.promptView}>\r\n                <Text style={styles.promptText}>{props.prompt}</Text>\r\n            </View>\r\n            <View style={styles.drawingChoicesView} >\r\n                {props.drawings.map(x => (\r\n                    <TouchableOpacity onPress={() => props.onChooseBest(x)}>\r\n                        <View style={styles.drawingChoiceWrapper} >\r\n                            <DoodleDisplayView style={styles.drawingChoice} drawing={x.drawing} />\r\n                        </View>\r\n                    </TouchableOpacity>\r\n                ))}\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n\r\nconst typeStyles = {\r\n    completedText: {\r\n        fontSize: 16,\r\n        color: `#FFFF00`,\r\n    },\r\n} as const;\r\nexport const DoodleGameView_Type = (props: { prompt: string, drawings: DoodleData[], onDone: () => void }) => {\r\n\r\n    const [status, setStatus] = useState({ completed: ``, remaining: props.prompt });\r\n    useEffect(() => {\r\n        setStatus({ completed: ``, remaining: props.prompt });\r\n    }, [props.prompt, props.drawings]);\r\n\r\n    const onExpectedKeyPress = () => {\r\n        setStatus(s => {\r\n            if (s.remaining.length <= 1) {\r\n                props.onDone();\r\n            }\r\n            const nextChar = s.remaining[0];\r\n            return {\r\n                completed: s.completed + nextChar,\r\n                remaining: s.remaining.substr(1),\r\n            };\r\n        });\r\n    };\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <View style={styles.titleView}>\r\n                <Text style={styles.titleText}>Type Word</Text>\r\n            </View>\r\n            <View style={styles.drawingChoicesView} >\r\n                {props.drawings.map(x => (\r\n                    <View style={styles.drawingChoiceWrapper} >\r\n                        <DoodleDisplayView style={styles.drawingChoice} drawing={x.drawing} />\r\n                    </View>\r\n                ))}\r\n            </View>\r\n            <View>\r\n                <Text style={typeStyles.completedText}>{`${status.completed}${status.remaining.length > 0 ? `_` : ``}`}</Text>\r\n            </View>\r\n            <KeyboardSimplified expectedCharacter={status.remaining[0] ?? ` `} showHints onExpectedKeyPress={onExpectedKeyPress} />\r\n        </View>\r\n    );\r\n};\r\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\nimport React, { useRef, useState, useEffect } from 'react';\r\nimport { Text, View, Platform, ActivityIndicator } from 'react-native-lite';\r\nimport { createDoodleDrawingStorageService } from 'doodle/doodle-storage';\r\nimport { DoodleDrawingStorageService } from 'doodle/doodle';\r\nimport { useAutoLoadingError } from 'utils-react/hooks';\r\nimport { EducationalGame_Doodle } from '../doodle';\r\nimport { createSpeechService } from '../utils/speech';\r\nimport { createReviewProblemService } from '../problems/problems-reviewer';\r\nimport { createSpellingProblemService } from '../problems/spelling/spelling-problem-service';\r\nimport { VoiceChooser } from '../utils/voice-chooser';\r\nimport { createAutoSavedProblemService } from '../problems/problem-state-storage';\r\n\r\nexport const EducationalGame_Doodle_Spelling = (props: {}) => {\r\n    const speechService = useRef(createSpeechService());\r\n    const [hasStarted, setHasStarted] = useState(Platform.OS !== `web`);\r\n\r\n    const { loading, error, doWork } = useAutoLoadingError();\r\n    const drawingStorage = useRef(null as null | DoodleDrawingStorageService);\r\n    useEffect(() => {\r\n        doWork(async (stopIfObsolete) => {\r\n            drawingStorage.current = await createDoodleDrawingStorageService();\r\n        });\r\n    }, []);\r\n\r\n    // Only web\r\n    if (!hasStarted) {\r\n        const speak = () => { speechService.current.speak(`Start`); setHasStarted(true); };\r\n        return (\r\n            <View>\r\n                <VoiceChooser languange='en' speechService={speechService.current} />\r\n                <div onClick={() => speak()}>\r\n                    <View style={{ height: 300, alignSelf: `center`, alignItems: `center`, justifyContent: `center` }}>\r\n                        <Text style={{ fontSize: 36 }}>Start</Text>\r\n                    </View>\r\n                </div>\r\n            </View>\r\n        );\r\n    }\r\n\r\n    if (loading || !drawingStorage.current) {\r\n        return (\r\n            <>\r\n                <ActivityIndicator size='large' color='#FFFF00' />\r\n            </>\r\n        );\r\n    }\r\n\r\n    return <EducationalGame_Doodle\r\n        problemService={createAutoSavedProblemService(createReviewProblemService(createSpellingProblemService({ speechService: speechService.current, sectionSize: 8 }), {}), `ProblemsSpellingDoodle`)}\r\n        drawingStorage={drawingStorage.current}\r\n    />;\r\n};\r\n"],"sourceRoot":""}