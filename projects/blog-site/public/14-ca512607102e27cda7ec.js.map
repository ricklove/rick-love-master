{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/node_modules/core-js/modules/_flatten-into-array.js","webpack:///D:/Projects/rick-love-master/code/games/educational-games/components/game-pad-discrete.tsx","webpack:///D:/Projects/rick-love-master/code/games/educational-games/multiples-large-board.tsx","webpack:///D:/Projects/rick-love-master/node_modules/core-js/modules/es7.array.flat-map.js"],"names":["isArray","isObject","toLength","ctx","IS_CONCAT_SPREADABLE","module","exports","flattenIntoArray","target","original","source","sourceLen","start","depth","mapper","thisArg","element","spreadable","targetIndex","sourceIndex","mapFn","undefined","length","TypeError","inputStyles","container","flex","flexDirection","justifyContent","alignItems","padding","section","row","cellTouch","outline","cellView","margin","width","height","borderWidth","borderStyle","cellText","userSelect","cellEmptyView","GamepadDiscrete","props","move","onMove","cellViewStyle","style","onPress","x","y","buttons","map","Fragment","key","text","colors","gameStyles","problemView","problemText","fontFamily","fontSize","color","EducationalGame_MultiplesLargeBoard","useState","createDefaultGameBoardState","gameBoard","setGameBoard","lastGameBoard","useRef","problem","setProblem","nextProblem","nextCells","current","columns","flatMap","c","cells","filter","cell","randomIndex","value","useEffect","marginTop","marginBottom","onChangeFocus","f","focus","size","i","j","s","PetService","get","feed","forEach","ProblemView","minC","minR","Array","r","bodyIndex","connected","t","b","l","Math","floor","styles","cellHeaderView","focusCellHeaderView","cellHeaderText","focusCellHeaderText","GameBoard","getCellViewStyle","focusState","lineColorRow","includes","lineColorCol","solidColorRow","solidColorCol","unitSize","background","getCellTextStyle","getCellText","GameGamepadInput","backgroundColor","borderColor","dir","col","$export","toObject","aFunction","arraySpeciesCreate","P","callbackfn","A","O","this","arguments"],"mappings":"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","file":"14-ca512607102e27cda7ec.js","sourcesContent":["'use strict';\n// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray\nvar isArray = require('./_is-array');\nvar isObject = require('./_is-object');\nvar toLength = require('./_to-length');\nvar ctx = require('./_ctx');\nvar IS_CONCAT_SPREADABLE = require('./_wks')('isConcatSpreadable');\n\nfunction flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {\n  var targetIndex = start;\n  var sourceIndex = 0;\n  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;\n  var element, spreadable;\n\n  while (sourceIndex < sourceLen) {\n    if (sourceIndex in source) {\n      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];\n\n      spreadable = false;\n      if (isObject(element)) {\n        spreadable = element[IS_CONCAT_SPREADABLE];\n        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);\n      }\n\n      if (spreadable && depth > 0) {\n        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;\n      } else {\n        if (targetIndex >= 0x1fffffffffffff) throw TypeError();\n        target[targetIndex] = element;\n      }\n\n      targetIndex++;\n    }\n    sourceIndex++;\n  }\n  return targetIndex;\n}\n\nmodule.exports = flattenIntoArray;\n","import React from 'react';\r\nimport { View, Text, TouchableOpacity } from 'react-native-lite';\r\n\r\nconst inputStyles = {\r\n    container: { flex: 1, flexDirection: `row`, justifyContent: `space-between`, alignItems: `center`, padding: 16 },\r\n    section: { justifyContent: `center`, alignItems: `center`, padding: 16 },\r\n    row: { flexDirection: `row` },\r\n    cellTouch: { outline: `none` },\r\n    cellView: { margin: 2, width: 32, height: 32, justifyContent: `center`, alignItems: `center`, borderWidth: 1, borderStyle: `solid`, outline: `none` },\r\n    cellText: { userSelect: `none` },\r\n    cellEmptyView: { margin: 2, width: 32, height: 32 },\r\n} as const;\r\n\r\nexport const GamepadDiscrete = (props: { style: { backgroundColor: string, borderColor: string }, onMove: (direction: { x: number, y: number }) => void, buttons: { text: string, onPress: () => void }[] }) => {\r\n    const { onMove: move } = props;\r\n\r\n    const cellViewStyle = { ...inputStyles.cellView, ...props.style };\r\n\r\n    return (\r\n        <View style={inputStyles.container}>\r\n            <View style={inputStyles.section}>\r\n                <View style={inputStyles.row} >\r\n                    <View style={inputStyles.cellEmptyView} />\r\n                    <TouchableOpacity style={inputStyles.cellTouch} onPress={() => move({ x: 0, y: +1 })}><View style={cellViewStyle}><Text style={inputStyles.cellText}>⬆</Text></View></TouchableOpacity>\r\n                    <View style={inputStyles.cellEmptyView} />\r\n                </View>\r\n                <View style={inputStyles.row} >\r\n                    <TouchableOpacity style={inputStyles.cellTouch} onPress={() => move({ x: -1, y: 0 })}><View style={cellViewStyle}><Text style={inputStyles.cellText}>⬅</Text></View></TouchableOpacity>\r\n                    <View style={inputStyles.cellEmptyView} />\r\n                    <TouchableOpacity style={inputStyles.cellTouch} onPress={() => move({ x: 1, y: 0 })}><View style={cellViewStyle}><Text style={inputStyles.cellText}>➡</Text></View></TouchableOpacity>\r\n                </View>\r\n                <View style={inputStyles.row} >\r\n                    <View style={inputStyles.cellEmptyView} />\r\n                    <TouchableOpacity style={inputStyles.cellTouch} onPress={() => move({ x: 0, y: -1 })}><View style={cellViewStyle}><Text style={inputStyles.cellText}>⬇</Text></View></TouchableOpacity>\r\n                    <View style={inputStyles.cellEmptyView} />\r\n                </View>\r\n            </View>\r\n            <View style={inputStyles.section} >\r\n                <View style={inputStyles.row} >\r\n                    {props.buttons.map(x => (\r\n                        <React.Fragment key={`${x.text}`}>\r\n                            <View style={inputStyles.cellEmptyView} />\r\n                            <TouchableOpacity style={inputStyles.cellTouch} onPress={x.onPress}><View style={cellViewStyle}><Text style={inputStyles.cellText}>{x.text}</Text></View></TouchableOpacity>\r\n                        </React.Fragment>\r\n                    ))}\r\n                </View>\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { View, Text, TouchableOpacity, TextInput } from 'react-native-lite';\r\nimport { randomIndex } from 'utils/random';\r\nimport { GamepadDiscrete } from './components/game-pad-discrete';\r\nimport { PetService } from './pet/pet-service';\r\n\r\nconst colors = {\r\n    text: `#FFFF00`,\r\n    problemText: `#FFFF00`,\r\n    line: `#000000`,\r\n    lineFocus: `#000000`,\r\n    solid: `transparent`,\r\n    solidFocus: `#7777FF55`,\r\n    buttonBackground: `#333333`,\r\n    buttonBorder: `#000033`,\r\n};\r\n\r\nconst gameStyles = {\r\n    problemView: {\r\n        flex: 1,\r\n        flexDirection: `row`,\r\n        justifyContent: `center`,\r\n        alignItems: `center`,\r\n        padding: 16,\r\n    },\r\n    problemText: {\r\n        fontFamily: `\"Lucida Console\", Monaco, monospace`,\r\n        fontSize: 20,\r\n        color: colors.problemText,\r\n    },\r\n} as const;\r\n\r\nexport const EducationalGame_MultiplesLargeBoard = (props: {}) => {\r\n\r\n    const [gameBoard, setGameBoard] = useState(createDefaultGameBoardState());\r\n    const lastGameBoard = useRef(gameBoard);\r\n\r\n    const [problem, setProblem] = useState(0 as number);\r\n\r\n    const changeFocus = (f: GameBoardPosition) => {\r\n        const focus = f;\r\n        const { size } = lastGameBoard.current;\r\n        focus.i = focus.i < 0 ? 0 : focus.i > size - 1 ? size - 1 : focus.i;\r\n        focus.j = focus.j < 0 ? 0 : focus.j > size - 1 ? size - 1 : focus.j;\r\n        const s = lastGameBoard.current;\r\n        setGameBoard({ ...s, key: s.key + 1, focus });\r\n    };\r\n\r\n    const submitAnswer = () => {\r\n        const s = lastGameBoard.current;\r\n        const cell = s.columns[s.focus.i].cells[s.focus.j];\r\n\r\n        // Correct\r\n        if (cell.value === problem) {\r\n            PetService.get().feed();\r\n\r\n            cell.text = `${cell.value}`;\r\n\r\n            // Reset any x\r\n            s.columns.forEach(x => x.cells.forEach(c => { if (c.text === `❌`) { c.text = ``; } }));\r\n\r\n            nextProblem();\r\n            return;\r\n        }\r\n\r\n        // Wrong\r\n        cell.text = `❌`;\r\n        setGameBoard({ ...s, key: s.key + 1 });\r\n    };\r\n\r\n    const nextProblem = () => {\r\n        const s = lastGameBoard.current;\r\n        const allCells = s.columns.flatMap(c => c.cells);\r\n        const nextCells = allCells.filter(x => !x.text);\r\n        if (nextCells.length === 0) {\r\n            // TODO: Game Won\r\n            setProblem(0);\r\n            return;\r\n        }\r\n\r\n        const cell = nextCells[randomIndex(nextCells.length)];\r\n        setProblem(cell.value);\r\n    };\r\n\r\n    useEffect(() => {\r\n        nextProblem();\r\n    }, []);\r\n\r\n    lastGameBoard.current = gameBoard;\r\n\r\n    return (\r\n        <>\r\n            <View style={{ marginTop: 50, marginBottom: 150, padding: 2, alignItems: `center` }} >\r\n                <View style={{ alignItems: `center` }}>\r\n                    <GameBoard gameBoard={gameBoard} />\r\n                    <ProblemView problem={problem} />\r\n                    <GameGamepadInput gameBoard={gameBoard} onChangeFocus={changeFocus} buttons={[{ text: `🔴`, onPress: submitAnswer }]} />\r\n                </View>\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n\r\nexport const ProblemView = (props: { problem: number }) => {\r\n    return (\r\n        <View style={gameStyles.problemView}><Text style={gameStyles.problemText}>{`${props.problem}`}</Text></View>\r\n    );\r\n};\r\n\r\n\r\ntype GameBoardState = {\r\n    key: number;\r\n    size: number;\r\n    columns: {\r\n        i: number;\r\n        c: number;\r\n        cells: GameBoardCell[];\r\n    }[];\r\n    focus: GameBoardPosition;\r\n};\r\n\r\ntype GameBoardPosition = {\r\n    i: number;\r\n    j: number;\r\n};\r\n\r\ntype GameBoardCell = {\r\n    i: number;\r\n    j: number;\r\n    c: number;\r\n    r: number;\r\n    value: number;\r\n    text: string;\r\n};\r\n\r\n\r\nconst createDefaultGameBoardState = (): GameBoardState => {\r\n    const size = 5;\r\n    const minC = 2 + randomIndex(7 + 1 - 2);\r\n    const minR = 2 + randomIndex(7 + 1 - 2);\r\n\r\n    const gameBoard: GameBoardState = {\r\n        key: 0,\r\n        size,\r\n        columns: [...new Array(size)].map((x, i) => ({\r\n            i,\r\n            c: i + minC,\r\n            cells: [...new Array(size)].map((r, j) => ({\r\n                i,\r\n                j,\r\n                c: i + minC,\r\n                r: j + minR,\r\n                value: (i + minC) * (j + minR),\r\n                text: ``,\r\n                bodyIndex: 0,\r\n                connected: {\r\n                    t: false,\r\n                    b: false,\r\n                    l: false,\r\n                    r: false,\r\n                },\r\n            })),\r\n        })),\r\n        focus: { i: Math.floor(size / 2), j: Math.floor(size / 2) },\r\n    };\r\n\r\n    // Show all\r\n    // gameBoard.columns.forEach(x => x.cells.forEach(c => { c.text = `${c.value}`; }));\r\n\r\n    return gameBoard;\r\n};\r\n\r\nconst styles = {\r\n    cellView: {\r\n        width: 24,\r\n        height: 24,\r\n        justifyContent: `center`,\r\n        alignItems: `center`,\r\n    },\r\n    cellText: {\r\n        fontFamily: `\"Lucida Console\", Monaco, monospace`,\r\n        fontSize: 12,\r\n        color: colors.text,\r\n    },\r\n\r\n    cellHeaderView: {},\r\n    focusCellHeaderView: {},\r\n    cellHeaderText: {},\r\n    focusCellHeaderText: {},\r\n} as const;\r\n\r\nconst GameBoard = ({ gameBoard }: { gameBoard: GameBoardState }) => {\r\n    const { focus } = gameBoard;\r\n\r\n    const getCellText = (cell: GameBoardCell) => {\r\n        const { text } = cell;\r\n        return `${text}`;\r\n    };\r\n\r\n    const getCellViewStyle = (cell: GameBoardCell) => {\r\n        const { i, j, c, r } = cell;\r\n        const focusState = focus.i === i && focus.j === j ? `row col`\r\n            : focus.i === i ? `col`\r\n                : focus.j === j ? `row`\r\n                    : ``;\r\n        const unitSize = 4;\r\n        const lineColorRow = focusState.includes(`row`) ? colors.lineFocus : colors.line;\r\n        const lineColorCol = focusState.includes(`col`) ? colors.lineFocus : colors.line;\r\n        const solidColorRow = focusState.includes(`row`) ? colors.solidFocus : colors.solid;\r\n        const solidColorCol = focusState.includes(`col`) ? colors.solidFocus : colors.solid;\r\n        const lineRadius = 0.5;\r\n\r\n        const background = `\r\n        repeating-linear-gradient(${lineColorRow} 0px, ${lineColorRow} ${lineRadius}px, ${solidColorRow} ${lineRadius}px, ${solidColorRow} ${unitSize - lineRadius}px, ${lineColorRow} ${unitSize - lineRadius}px, ${lineColorRow} ${unitSize}px), \r\n        repeating-linear-gradient(0.25turn, ${lineColorCol} 0px, ${lineColorCol} ${lineRadius}px, ${solidColorCol} ${lineRadius}px, ${solidColorCol} ${unitSize - lineRadius}px, ${lineColorCol} ${unitSize - lineRadius}px, ${lineColorCol} ${unitSize}px)\r\n        `;\r\n\r\n        return [styles.cellView, {\r\n            width: c * unitSize,\r\n            height: r * unitSize,\r\n            margin: unitSize / 2,\r\n            borderWidth: 0,\r\n            background,\r\n        }];\r\n        // return styles.cellView;\r\n    };\r\n\r\n    const getCellTextStyle = (cell: GameBoardCell) => {\r\n        const { c } = cell;\r\n        if (c < 2) {\r\n            return [styles.cellText, {\r\n                fontSize: 8,\r\n            }];\r\n        }\r\n        return styles.cellText;\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <View style={{ flexDirection: `row` }} >\r\n                <View style={{ flexDirection: `column-reverse` }} >\r\n                    <View style={[...getCellViewStyle(gameBoard.columns[0].cells[0]), { background: undefined }]} >\r\n                        <Text style={styles.focusCellHeaderText} > </Text>\r\n                    </View>\r\n                    {gameBoard.columns[0].cells.map((r) => (\r\n                        <View key={r.r} style={[...getCellViewStyle(r), { background: undefined }]} >\r\n                            <Text style={focus.j === r.j ? styles.focusCellHeaderText : styles.cellHeaderText}>{`${r.r}`}</Text>\r\n                        </View>\r\n                    ))}\r\n                </View>\r\n\r\n                {gameBoard.columns.map((c) => (\r\n                    <View key={c.c} style={{ flexDirection: `column-reverse` }} >\r\n                        <View style={[...getCellViewStyle(c.cells[0]), { background: undefined }]} >\r\n                            <Text style={focus.i === c.i ? styles.focusCellHeaderText : styles.cellHeaderText}>{`${c.c}`}</Text>\r\n                        </View>\r\n                        {c.cells.map((cell) => (\r\n                            <View key={cell.r} style={getCellViewStyle(cell)} >\r\n                                <Text style={getCellTextStyle(cell)}>{getCellText(cell)}</Text>\r\n                            </View>\r\n                        ))}\r\n                    </View>\r\n                ))}\r\n\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n\r\nconst GameGamepadInput = (props: { gameBoard: GameBoardState, onChangeFocus: (focus: GameBoardPosition) => void, buttons: { text: string, onPress: () => void }[] }) => {\r\n    const move = (col: number, row: number) => {\r\n        props.onChangeFocus({\r\n            i: props.gameBoard.focus.i + col,\r\n            j: props.gameBoard.focus.j + row,\r\n        });\r\n    };\r\n\r\n    return (\r\n        <GamepadDiscrete style={{ backgroundColor: colors.buttonBackground, borderColor: colors.buttonBorder }} onMove={dir => move(dir.x, dir.y)} buttons={props.buttons} />\r\n    );\r\n};\r\n","'use strict';\n// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap\nvar $export = require('./_export');\nvar flattenIntoArray = require('./_flatten-into-array');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar aFunction = require('./_a-function');\nvar arraySpeciesCreate = require('./_array-species-create');\n\n$export($export.P, 'Array', {\n  flatMap: function flatMap(callbackfn /* , thisArg */) {\n    var O = toObject(this);\n    var sourceLen, A;\n    aFunction(callbackfn);\n    sourceLen = toLength(O.length);\n    A = arraySpeciesCreate(O, 0);\n    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);\n    return A;\n  }\n});\n\nrequire('./_add-to-unscopables')('flatMap');\n"],"sourceRoot":""}