{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/games/educational-games/utils/number-names.ts","webpack:///D:/Projects/rick-love-master/code/games/educational-games/multiples-counting-words.tsx"],"names":["getDigitName","value","Math","floor","numberNames","Error","ones","tens","hundreds","hundredText","getTeensName","trim","tensText","getTensName","onesText","leaderboardService","createLeaderboard","storageKey","sortKey","x","timeMs","sortDescending","scoreColumns","name","getValue","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","mistakes","EducationalGame_MultiplesCountingWords","props","useState","key","startTime","Date","now","gameWonTime","gameScore","setGameScore","createDefaultGameBoardState","gameBoard","setGameBoard","gameInput","setGameInput","lastGameBoard","useRef","leaderboard","useLeaderboard","getScore","onGameWon","s","onCorrect","ProgressGameService","newGameBoard","current","col","columns","find","multiple","maxTimesCorrect","times","setTimeout","nextInputState","onWrong","game","gameInputState","createGameInputState","useEffect","style","marginTop","marginBottom","padding","alignItems","width","focus","LeaderboardArea","gameOver","onScoreSaved","size","rows","Array","map","i","styles","cellView","height","backgroundColor","borderWidth","borderColor","borderStyle","justifyContent","focusCellView","cellHeaderView","focusCellHeaderView","cellText","fontFamily","fontSize","cellHeaderText","color","focusCellHeaderText","GameBoard","boardTick","setboardTick","id","setInterval","clearInterval","getBoardTickResult","flexDirection","r","c","borderLeftColor","borderRightColor","borderTopColor","borderBottomColor","includes","row","nextColumn","filter","buttons","m","t","correctValue","wrongValues","distinct","round","random","slice","answers","shuffle","text","onPress","button","wasAnsweredWrong","onAnswer","inputStyles","outerContainer","container","margin","buttonView","buttonText","fontWeight","buttonText_wrong","GameInput","scoreStyles","flex","mistakesText","GameScore","timeMessage","setTimeMessage","mistakesMessage","setMistakesMessage"],"mappings":"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","file":"25-f6285e70a8b5b4ec07cc.js","sourcesContent":["\r\nconst getDigitName = (value: number): string => {\r\n    const digit = Math.floor(value % 10);\r\n    switch (digit) {\r\n        case 9: return `nine`;\r\n        case 8: return `eight`;\r\n        case 7: return `seven`;\r\n        case 6: return `six`;\r\n        case 5: return `five`;\r\n        case 4: return `four`;\r\n        case 3: return `three`;\r\n        case 2: return `two`;\r\n        case 1: return `one`;\r\n        case 0: return `zero`;\r\n        default: return ``;\r\n    }\r\n};\r\n\r\nconst getTensName = (value: number): string => {\r\n    const digit = Math.floor(value % 10);\r\n    switch (digit) {\r\n        case 9: return `ninety`;\r\n        case 8: return `eighty`;\r\n        case 7: return `seventy`;\r\n        case 6: return `sixty`;\r\n        case 5: return `fifty`;\r\n        case 4: return `fourty`;\r\n        case 3: return `thirty`;\r\n        case 2: return `twenty`;\r\n        case 1: return `ten`;\r\n        default: return ``;\r\n    }\r\n};\r\n\r\n\r\nconst getTeensName = (value: number): string => {\r\n    const digit = Math.floor(value % 10);\r\n    switch (digit) {\r\n        case 9: return `nineteen`;\r\n        case 8: return `eighteen`;\r\n        case 7: return `seventeen`;\r\n        case 6: return `sixteen`;\r\n        case 5: return `fifteen`;\r\n        case 4: return `fourteen`;\r\n        case 3: return `thirteen`;\r\n        case 2: return `twelve`;\r\n        case 1: return `eleven`;\r\n        case 0: return `ten`;\r\n        default: return ``;\r\n    }\r\n};\r\n\r\nconst getNumberName = (value: number): string => {\r\n    if (value > 999) {\r\n        throw new Error(`Only Numbers 0-999 Supported`);\r\n    }\r\n\r\n    const ones = Math.floor(value % 10);\r\n    const tens = Math.floor((value % 100) / 10);\r\n    const hundreds = Math.floor((value % 1000) / 100);\r\n\r\n    const hundredText = hundreds > 0 ? `${getDigitName(hundreds)}-hundred` : ``;\r\n\r\n    if (tens === 1) {\r\n        return `${hundredText} ${getTeensName(tens * 10 + ones)}`.trim();\r\n    }\r\n\r\n    const tensText = getTensName(tens);\r\n    const onesText = ones > 0 ? getDigitName(ones) : ``;\r\n\r\n    return `${hundredText} ${tensText}${tensText && onesText ? `-` : ``}${onesText}`.trim();\r\n};\r\n\r\nexport const numberNames = {\r\n    getNumberName,\r\n    getDigitName,\r\n};\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport { View, Text, TouchableOpacity, TextInput } from 'react-native-lite';\r\nimport { distinct, shuffle } from 'utils/arrays';\r\nimport { numberNames } from './utils/number-names';\r\nimport { createLeaderboard } from './components/leaderboard';\r\nimport { ProgressGameService } from './progress-games/progress-game';\r\n\r\n\r\nconst leaderboardService = createLeaderboard<{\r\n    mistakes: number;\r\n    timeMs: number;\r\n}>({\r\n    storageKey: `MultiplesCountingWordsLeaderboard`,\r\n    sortKey: x => x.timeMs,\r\n    sortDescending: true,\r\n    scoreColumns: [\r\n        { name: `Time`, getValue: x => `${(x.timeMs / 1000).toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 })}` },\r\n        { name: `Mistakes`, getValue: x => `${x.mistakes}` },\r\n    ],\r\n});\r\n\r\nexport const EducationalGame_MultiplesCountingWords = (props: {}) => {\r\n\r\n    const [gameScore, setGameScore] = useState({ key: 0, startTime: Date.now(), gameWonTime: undefined, mistakes: 0 } as GameScoreState & { key: number });\r\n    const [gameBoard, setGameBoard] = useState(createDefaultGameBoardState());\r\n    const [gameInput, setGameInput] = useState(null as null | GameInputState);\r\n    const lastGameBoard = useRef(gameBoard);\r\n\r\n    const leaderboard = leaderboardService.useLeaderboard({\r\n        getScore: () => ({ mistakes: gameScore.mistakes, timeMs: (gameScore.gameWonTime ?? Date.now()) - gameScore.startTime }),\r\n    });\r\n\r\n    const onGameWon = () => {\r\n        setGameScore(s => ({ ...s, gameWonTime: Date.now(), key: s.key + 1 }));\r\n    };\r\n\r\n    const onScoreSaved = () => {\r\n        // Restart Game\r\n        const newGameBoard = createDefaultGameBoardState();\r\n        setGameScore({ key: 0, startTime: Date.now(), gameWonTime: undefined, mistakes: 0 });\r\n        setGameBoard(newGameBoard);\r\n        nextInputState(newGameBoard);\r\n    };\r\n\r\n    const onCorrect = (value: { multiple: number, times: number }) => {\r\n        ProgressGameService.onCorrect();\r\n\r\n        const newGameBoard = { ...lastGameBoard.current };\r\n        const col = newGameBoard.columns.find(x => x.multiple === value.multiple);\r\n        if (col) {\r\n            col.maxTimesCorrect = value.times;\r\n        };\r\n\r\n        setGameBoard(newGameBoard);\r\n        // setGameInput(null);\r\n\r\n        setTimeout(() => {\r\n            nextInputState(newGameBoard);\r\n        }, 100);\r\n    };\r\n    const onWrong = (value: { multiple: number, times: number }) => {\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        setGameInput(s => ({ ...s! }));\r\n\r\n        setGameScore(s => ({ ...s, mistakes: s.mistakes + 1, key: s.key + 1 }));\r\n\r\n        // Reset column\r\n        // const newGameBoard = ({ ...gameBoard, columns: gameBoard.columns.map(x => x.multiple === value.multiple ? { maxTimesCorrect: 0, multiple: x.multiple } : x) });\r\n\r\n        // setGameBoard(newGameBoard);\r\n        // setGameInput(null);\r\n\r\n        // setTimeout(() => {\r\n        //     nextInputState(newGameBoard);\r\n        // }, 500);\r\n    };\r\n\r\n    const nextInputState = (game: GameBoardState) => {\r\n        const gameInputState = createGameInputState(game, onGameWon, onCorrect, onWrong);\r\n        setGameInput(gameInputState);\r\n    };\r\n\r\n    useEffect(() => {\r\n        nextInputState(gameBoard);\r\n    }, []);\r\n\r\n    lastGameBoard.current = gameBoard;\r\n\r\n    return (\r\n        <>\r\n            <View style={{ marginTop: 50, marginBottom: 150, padding: 2, alignItems: `center` }} >\r\n                <View style={{ width: 24 * 12 + 4 }}>\r\n                    <GameScore gameScore={gameScore} />\r\n                    <GameBoard gameBoard={gameBoard} focus={gameInput?.focus ?? { multiple: 0, times: 0 }} />\r\n                    {gameInput && !gameScore.gameWonTime && <GameInput gameInput={gameInput} />}\r\n                    <leaderboard.LeaderboardArea gameOver={!!gameScore.gameWonTime} onScoreSaved={onScoreSaved} />\r\n                </View>\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\ntype GameBoardState = {\r\n    size: number;\r\n    rows: { times: number }[];\r\n    columns: {\r\n        multiple: number;\r\n        maxTimesCorrect: number;\r\n    }[];\r\n};\r\n\r\nconst createDefaultGameBoardState = (): GameBoardState => {\r\n    const size = 12;\r\n    const gameBoard: GameBoardState = {\r\n        size,\r\n        rows: [...new Array(size)].map((x, i) => ({ times: i + 1 })),\r\n        columns: [...new Array(size)].map((x, i) => ({ multiple: i + 1, maxTimesCorrect: 0 })),\r\n    };\r\n\r\n    return gameBoard;\r\n};\r\n\r\nconst styles = {\r\n    cellView: {\r\n        width: 24,\r\n        height: 24,\r\n        backgroundColor: `rgba(0,0,0,0.75)`,\r\n        borderWidth: 1,\r\n        borderColor: `#111133`,\r\n        borderStyle: `solid`,\r\n        justifyContent: `center`,\r\n        alignItems: `center`,\r\n    },\r\n    focusCellView: {\r\n        width: 24,\r\n        height: 24,\r\n        borderWidth: 1,\r\n        borderColor: `#66FF66`,\r\n        borderStyle: `solid`,\r\n        justifyContent: `center`,\r\n        alignItems: `center`,\r\n    },\r\n    cellHeaderView: {\r\n        width: 24,\r\n        height: 24,\r\n        backgroundColor: `rgba(0,0,0,0.5)`,\r\n        borderWidth: 1,\r\n        borderColor: `#111133`,\r\n        borderStyle: `solid`,\r\n        justifyContent: `center`,\r\n        alignItems: `center`,\r\n    },\r\n    focusCellHeaderView: {\r\n        width: 24,\r\n        height: 24,\r\n        backgroundColor: `rgba(0,0,0,0.5)`,\r\n        borderWidth: 1,\r\n        borderColor: `#111133`,\r\n        borderStyle: `solid`,\r\n        justifyContent: `center`,\r\n        alignItems: `center`,\r\n    },\r\n    cellText: {\r\n        fontFamily: `\"Lucida Console\", Monaco, monospace`,\r\n        fontSize: 12,\r\n    },\r\n    cellHeaderText: {\r\n        fontFamily: `\"Lucida Console\", Monaco, monospace`,\r\n        fontSize: 12,\r\n        color: `#333300`,\r\n    },\r\n    focusCellHeaderText: {\r\n        fontFamily: `\"Lucida Console\", Monaco, monospace`,\r\n        fontSize: 12,\r\n        color: `#FFFF00`,\r\n    },\r\n} as const;\r\n\r\nconst GameBoard = ({ gameBoard, focus }: { gameBoard: GameBoardState, focus: { multiple: number, times: number } }) => {\r\n\r\n    const [boardTick, setboardTick] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setboardTick(0);\r\n        const id = setInterval(() => {\r\n            setboardTick(s => s + 1);\r\n        }, 1000);\r\n        return () => clearInterval(id);\r\n    }, [/* Keep Going */]);\r\n\r\n\r\n    const getBoardTickResult = () => {\r\n        return boardTick % 5 === 0 ? `row` :\r\n            boardTick % 5 === 1 ? `col` :\r\n                `both`;\r\n    };\r\n\r\n    const getBorderStyle = () => {\r\n        const s = getBoardTickResult();\r\n\r\n        if (s === `both`) {\r\n            return {\r\n                borderLeftColor: styles.focusCellView.borderColor,\r\n                borderRightColor: styles.focusCellView.borderColor,\r\n                borderTopColor: styles.focusCellView.borderColor,\r\n                borderBottomColor: styles.focusCellView.borderColor,\r\n            } as const;\r\n        }\r\n\r\n        return {\r\n            borderLeftColor: !s.includes(`col`) ? `rgba(0,0,0,0.15)` : `#000000`,\r\n            borderRightColor: !s.includes(`col`) ? `rgba(0,0,0,0.15)` : `#000000`,\r\n            borderTopColor: !s.includes(`row`) ? `rgba(0,0,0,0.15)` : `#000000`,\r\n            borderBottomColor: !s.includes(`row`) ? `rgba(0,0,0,0.15)` : `#000000`,\r\n        } as const;\r\n    };\r\n\r\n    const getCellText = (col: number, row: number) => {\r\n        const s = getBoardTickResult();\r\n\r\n        if (s === `both`) {\r\n            return `${col * row}`;\r\n        }\r\n\r\n        return ``;\r\n        // if (s === `row`) {\r\n        //     return `${col}`;\r\n        // }\r\n\r\n        // return `${row}`;\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n            <View style={{ flexDirection: `row` }} >\r\n                <View style={{ flexDirection: `column-reverse` }} >\r\n                    <View style={styles.focusCellHeaderView} >\r\n                        <Text style={styles.focusCellHeaderText} >x</Text>\r\n                    </View>\r\n                    {gameBoard.rows.map((r) => (\r\n                        <View key={r.times} style={focus.times === r.times ? styles.focusCellHeaderView : styles.cellHeaderView} >\r\n                            <Text style={focus.times === r.times ? styles.focusCellHeaderText : styles.cellHeaderText}>{`${r.times}`}</Text>\r\n                        </View>\r\n                    ))}\r\n                </View>\r\n\r\n                {gameBoard.columns.map((c) => (\r\n                    <View key={c.multiple} style={{ flexDirection: `column-reverse` }} >\r\n                        <View style={focus.multiple === c.multiple ? styles.focusCellHeaderView : styles.cellHeaderView} >\r\n                            <Text style={focus.multiple === c.multiple ? styles.focusCellHeaderText : styles.cellHeaderText}>{`${c.multiple}`}</Text>\r\n                        </View>\r\n                        {gameBoard.rows.map((r) => (\r\n                            <View key={r.times} style={focus.times >= r.times && focus.multiple >= c.multiple ? [styles.focusCellView, getBorderStyle()] : styles.cellView} >\r\n                                {c.maxTimesCorrect >= r.times ? (\r\n                                    <Text style={styles.cellText}>{`${getCellText(c.multiple, r.times)}`}</Text>\r\n                                ) : (\r\n                                        <Text style={styles.cellText} />\r\n                                    )}\r\n                            </View>\r\n                        ))}\r\n                    </View>\r\n                ))}\r\n\r\n            </View>\r\n        </>\r\n    );\r\n};\r\ntype GameInputState = {\r\n    key: string;\r\n    focus: { multiple: number, times: number };\r\n    buttons: {\r\n        value: number;\r\n        text: string;\r\n        onPress: () => void;\r\n        wasAnsweredWrong: boolean;\r\n    }[];\r\n};\r\n\r\nconst createGameInputState = (gameBoard: GameBoardState, onGameWon: () => void, onCorrect: (value: { multiple: number, times: number }) => void, onWrong: (value: { multiple: number, times: number }) => void): GameInputState => {\r\n    const nextColumn = gameBoard.columns.filter(x => x.maxTimesCorrect < gameBoard.size)[0];\r\n    if (!nextColumn) {\r\n        // Win state - All Complete\r\n        onGameWon();\r\n        return { key: ``, focus: { multiple: 0, times: 0 }, buttons: [] };\r\n    }\r\n\r\n    const m = nextColumn.multiple;\r\n    const t = nextColumn.maxTimesCorrect + 1;\r\n\r\n    const correctValue = m * t;\r\n    const wrongAnswerCount = 2;\r\n    const wrongValues =\r\n        distinct(\r\n            [...new Array(100)].map(() =>\r\n                Math.round(m + 1 - 2 * Math.random())\r\n                * Math.round(t + 1 - 2 * Math.random())\r\n                + Math.round(2 - 4 * Math.random()))\r\n                .filter(x => x !== correctValue)\r\n                .filter(x => x > 0),\r\n        ).slice(0, wrongAnswerCount);\r\n\r\n    const answers = shuffle([correctValue, ...wrongValues]);\r\n\r\n    const onAnswer = (value: number) => {\r\n        if (value === correctValue) {\r\n            onCorrect({ multiple: m, times: t });\r\n            return;\r\n        }\r\n\r\n        const button = buttons.find(x => x.value === value);\r\n        if (!button) { return; }\r\n        button.wasAnsweredWrong = true;\r\n        onWrong({ multiple: m, times: t });\r\n    };\r\n\r\n    const buttons = answers.map(x => ({\r\n        value: x,\r\n        text: `${numberNames.getNumberName(x)}`,\r\n        onPress: () => onAnswer(x),\r\n        wasAnsweredWrong: false,\r\n    }));\r\n\r\n    return {\r\n        key: `${m}*${t}`,\r\n        focus: { multiple: m, times: t },\r\n        buttons,\r\n    };\r\n};\r\n\r\nconst inputStyles = {\r\n    outerContainer: {\r\n        height: 150,\r\n    },\r\n    container: {\r\n        flexDirection: `column`,\r\n        margin: 16,\r\n    },\r\n    buttonView: {\r\n        height: 32,\r\n        margin: 8,\r\n        borderWidth: 2,\r\n        borderColor: `#6666FF`,\r\n        borderStyle: `solid`,\r\n        justifyContent: `center`,\r\n        alignItems: `center`,\r\n    },\r\n    buttonText: {\r\n        fontFamily: `Verdana, Geneva, sans-serif`,\r\n        fontSize: 16,\r\n        fontWeight: `lighter`,\r\n        color: `#FFFFFF`,\r\n    },\r\n    buttonText_wrong: {\r\n        fontFamily: `Verdana, Geneva, sans-serif`,\r\n        fontSize: 16,\r\n        fontWeight: `lighter`,\r\n        color: `#FF6666`,\r\n    },\r\n} as const;\r\n\r\nconst GameInput = ({ gameInput }: { gameInput: GameInputState }) => {\r\n\r\n    // const [y, setY] = useState(0);\r\n\r\n    // useEffect(() => {\r\n    //     setY(100);\r\n    //     const id = setInterval(() => {\r\n    //         setY(s => Math.max(0, s - 1));\r\n    //     }, 50);\r\n    //     return () => clearInterval(id);\r\n    // }, [gameInput.key]);\r\n\r\n    // console.log(`GameInput`);\r\n\r\n    // Auto answer\r\n    // useEffect(() => {\r\n    //     const id = setInterval(() => {\r\n    //         gameInput.buttons[randomIndex(gameInput.buttons.length)].onPress();\r\n    //     }, 50);\r\n    //     return () => clearInterval(id);\r\n    // }, [gameInput.key]);\r\n\r\n    return (\r\n        <>\r\n            <View style={inputStyles.outerContainer}>\r\n                <View style={inputStyles.container}>\r\n                    {gameInput.buttons.map(x => (\r\n                        <TouchableOpacity key={x.text + gameInput.key} onPress={x.wasAnsweredWrong ? () => {/* Ignore */ } : x.onPress}>\r\n                            <View style={inputStyles.buttonView}>\r\n                                <Text style={x.wasAnsweredWrong ? inputStyles.buttonText_wrong : inputStyles.buttonText}>{x.text}</Text>\r\n                            </View>\r\n                        </TouchableOpacity>))}\r\n                </View>\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nconst scoreStyles = {\r\n    container: {\r\n        flex: 1,\r\n        alignItems: `center`,\r\n        margin: 16,\r\n    },\r\n    text: {\r\n        fontFamily: `\"Lucida Console\", Monaco, monospace`,\r\n        fontSize: 14,\r\n        color: `#FFFF00`,\r\n    },\r\n    mistakesText: {\r\n        fontFamily: `\"Lucida Console\", Monaco, monospace`,\r\n        fontSize: 14,\r\n        color: `#FF6666`,\r\n    },\r\n} as const;\r\n\r\ntype GameScoreState = {\r\n    startTime: number;\r\n    gameWonTime?: number;\r\n    mistakes: number;\r\n};\r\n\r\nconst GameScore = ({ gameScore }: { gameScore: GameScoreState }) => {\r\n\r\n    const [timeMessage, setTimeMessage] = useState(``);\r\n    const [mistakesMessage, setMistakesMessage] = useState(``);\r\n\r\n    useEffect(() => {\r\n        const id = setInterval(() => {\r\n            setMistakesMessage(gameScore.mistakes ? `${gameScore.mistakes ?? 0} Mistakes` : ``);\r\n\r\n            if (gameScore.gameWonTime) {\r\n                const timeMs = gameScore.gameWonTime - gameScore.startTime;\r\n                setTimeMessage(s => `${(timeMs / 1000).toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 })} seconds`);\r\n                return;\r\n            }\r\n\r\n            const timeMs = Date.now() - gameScore.startTime;\r\n            setTimeMessage(s => `${(timeMs / 1000).toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 })} seconds`);\r\n        }, 100);\r\n        return () => clearInterval(id);\r\n    }, [gameScore]);\r\n\r\n    // console.log(`GameInput`);\r\n    return (\r\n        <>\r\n            <View style={scoreStyles.container}>\r\n                <View>\r\n                    <Text style={scoreStyles.text}>{timeMessage}</Text>\r\n                </View>\r\n                <View>\r\n                    <Text style={scoreStyles.mistakesText}>{mistakesMessage}</Text>\r\n                </View>\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n"],"sourceRoot":""}