{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/node_modules/gatsby/node_modules/core-js/modules/es.promise.finally.js","webpack:///D:/Projects/rick-love-master/code/art/rando.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/circles.tsx","webpack:///D:/Projects/rick-love-master/code/art/artwork/layers-of-the-onions-soul.tsx","webpack:///D:/Projects/rick-love-master/code/art/artwork/art-121-helpers.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/art-121.tsx","webpack:///D:/Projects/rick-love-master/code/art/div-host.tsx","webpack:///D:/Projects/rick-love-master/code/art/artwork/puzzle/art-puzzle-01.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/gears.tsx","webpack:///D:/Projects/rick-love-master/code/art/artwork/gpu-01/gpu-01.tsx","webpack:///D:/Projects/rick-love-master/code/art/artwork/flying-colors/flying-colors.tsx","webpack:///D:/Projects/rick-love-master/code/art/artwork/example-PavelDoGreat-fluid-simulation/src/systems/webgl.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/example-PavelDoGreat-fluid-simulation/src/utils.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/example-PavelDoGreat-fluid-simulation/src/systems/texture.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/example-PavelDoGreat-fluid-simulation/src/systems/shader.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/example-PavelDoGreat-fluid-simulation/src/run.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/example-PavelDoGreat-fluid-simulation/src/systems/frame-buffer.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/example-PavelDoGreat-fluid-simulation/src/config.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/example-PavelDoGreat-fluid-simulation/src/gui.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/example-PavelDoGreat-fluid-simulation/src/shaders.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/example-PavelDoGreat-fluid-simulation/example-fluid-simulator.tsx","webpack:///D:/Projects/rick-love-master/code/art/art-gallery.tsx","webpack:///D:/Projects/rick-love-master/code/art/artwork/example-PavelDoGreat-fluid-simulation/src/ga.ts","webpack:///D:/Projects/rick-love-master/node_modules/gatsby/node_modules/core-js/modules/es.math.hypot.js"],"names":["$","IS_PURE","NativePromise","fails","getBuiltIn","speciesConstructor","promiseResolve","redefine","target","proto","real","forced","prototype","call","then","onFinally","C","this","isFunction","x","e","createRandomGenerator","hash","a","seed","str","h","length","i","Math","imul","charCodeAt","xmur3","random","t","art_circles","key","title","description","artist","getTokenDescription","tokenId","renderArt","hostElement","floor","b","c","cr","cg","cb","ca","tick","p5","s","setup","createCanvas","draw","background","scale","size","color","noFill","stroke","j","circle","translate","rotate","art_layersOfTheOnionsSoul","d","fill","sin","parseTokenId_art121","tokenTimestampValue","Number","parseInt","substr","tokenCounterValue","console","log","isFinite","tokenCounter","timestampSecs","targetSecs","Date","getTime","timeDeltaSecs","abs","art_121","tokenData","drawClock","index","clockRadius","units","value","perUnit","iHalf","PI","isFront","xZeroValue","correctRatioRaw","zRotation","cos","angleOffset","y","isFrontValue","sign","colorKey","alphaShift","lowAlpha","ceil","strokeWeight","line","defaultDelta","now","tokenTimeDeltaSecs","delta","year","month","day","hour","minute","second","iTick","DivHost","props","hostElementRef","useRef","HostElement","Component","style","ref","useEffect","current","innerHTML","remove","art_puzzle01","oppositeDirection","dir","state","board","boardVisits","moveSequence","player","moveIndex","calculateNextPos","posRaw","pos","exit","renderSeed","item","renderPos","push","randomMove","direction","r","distance","gridSize","wallColorCount","wallColors","Array","map","getNextWallRandomSeed","lastReverseMove","calculatePlayerReverseMove","reverseMove","lastPos","nextPos","itemAtPos","find","itemAtNextPos","m","endPosition","actualDistance","startPosition","actualMove","unshift","p","actualReverseMove","isVisited","getRenderPosition","forEach","drawPuzzleItem","gameWon","targetRenderPos","aOffset","tOffset","angle","trans","rect","itemSize","spiralRadius","iOffset","mod","filter","activeMove","pPos","tPos","undefined","wallPos","wall","slice","keyPressed","keyCode","UP_ARROW","LEFT_ARROW","DOWN_ARROW","RIGHT_ARROW","getKeyDirection","nextMove","drawGear","g","options","colorMode","position","radiusInner","radiusOuter","radiusAxis","teeth","rotationAngle","randomSeed","randomConstant","round","randomSym","toothAngle","TWO_PI","radI","radO","jitterSize","angle0","angle1","noStroke","curveTightness","beginShape","curveVertex","endShape","drawFace","faceType","radSmile","ex","ey","art_gears","randomMain","brightness","speed","gearCount","lastGear","radius","canvasSize","gears","targetRadius","targetDistance","angleQuandrant","targetAngle","xDelta","yDelta","actualRadius","sqrt","noise","noiseDebounceTime","toggleNoise","disconnect","Noise","amp","start","mousePressed","mouseX","mouseY","touchStarted","touches","faceCount","faceCreepyCount","entries","gear","teethPassed","pow","result","path","art_gpu_01","shaderInstance","preload","loadShader","WEBGL","setUniform","millis","shader","art_flyingColors","lastTimeMs","getSupportedFormat","gl","internalFormat","format","type","texture","createTexture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","fbo","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","supportRenderTextureFormat","gl2","R16F","RG16F","RG","RGBA16F","RGBA","Error","isMobile","test","navigator","userAgent","clamp01","input","min","max","generateColor","v","f","q","HSVtoRGB","scaleByPixelRatio","pixelRatio","window","devicePixelRatio","hashCode","randomIntRange","minInclusive","maxInclusive","createTextureUtils","ext","createFrameBufferObject","getResolution","resolution","aspectRatio","drawingBufferWidth","drawingBufferHeight","width","height","captureScreenshot","render","res","formatRGBA","halfFloatTexType","filename","uri","link","datauri","captureCanvas","document","createElement","ctx","getContext","imageData","createImageData","data","set","putImageData","textureToCanvas","Uint8Array","id","nid","normalizeTexture","frameBuffer","Float32Array","readPixels","FLOAT","framebufferToTexture","toDataURL","download","href","body","append","click","URL","revokeObjectURL","ShaderMaterial","factory","vertexShader","fragmentShaderSource","programs","activeProgram","uniforms","setKeywords","keywords","program","fragmentShader","compileShader","FRAGMENT_SHADER","createProgram","getUniforms","bind","useProgram","ShaderProgram","runFluidSimulator","host","contentPath","canvas","resizeCanvas","PointerEntity","texcoordX","texcoordY","prevTexcoordX","prevTexcoordY","deltaX","deltaY","down","moved","pointers","splatStack","webGlSystem","params","alpha","depth","stencil","antialias","preserveDrawingBuffer","getExtension","supportLinearFiltering","HALF_FLOAT","clearColor","formatRG","formatR","RED","gl1","halfFloat","HALF_FLOAT_OES","getWebGLSystem","frameBufferFactory","w","param","activeTexture","TEXTURE0","viewport","clear","COLOR_BUFFER_BIT","texelSizeX","texelSizeY","attach","createDoubleFrameBufferObject","fbo1","fbo2","swap","temp","createFrameBufferFactory","shaderFactory","source","keywordsString","keyword","addKeywords","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","trace","getShaderInfoLog","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","uniformCount","ACTIVE_UNIFORMS","uniformName","getActiveUniform","name","getUniformLocation","createShaderFactory","config","SIM_RESOLUTION","DYE_RESOLUTION","CAPTURE_RESOLUTION","DENSITY_DISSIPATION","VELOCITY_DISSIPATION","PRESSURE","PRESSURE_ITERATIONS","CURL","SPLAT_RADIUS","SPLAT_FORCE","SHADING","COLORFUL","COLOR_UPDATE_SPEED","PAUSED","BACK_COLOR","TRANSPARENT","BLOOM","BLOOM_ITERATIONS","BLOOM_RESOLUTION","BLOOM_INTENSITY","BLOOM_THRESHOLD","BLOOM_SOFT_KNEE","SUNRAYS","SUNRAYS_RESOLUTION","SUNRAYS_WEIGHT","initFramebuffers","updateKeywords","dat","gui","GUI","add","onFinishChange","step","listen","fun","bloomFolder","addFolder","sunraysFolder","captureFolder","addColor","github","open","ga","__li","className","borderLeft","githubIcon","domElement","parentElement","twitter","twitterIcon","discord","discordIcon","app","appIcon","close","startGUI","url","ditheringTexture","LINEAR","REPEAT","RGB","UNSIGNED_BYTE","obj","image","Image","addEventListener","src","createTextureAsync","dye","velocity","divergence","curl","pressure","bloom","sunrays","sunraysTemp","shaders","baseVertexShader","VERTEX_SHADER","blurVertexShader","blurShader","copyShader","clearShader","colorShader","checkerboardShader","displayShaderSource","bloomPrefilterShader","bloomBlurShader","bloomFinalShader","sunraysMaskShader","sunraysShader","splatShader","advectionShader","divergenceShader","curlShader","vorticityShader","pressureShader","gradientSubtractShader","createShaders","blurProgram","copyProgram","clearProgram","colorProgram","checkerboardProgram","bloomPrefilterProgram","bloomBlurProgram","bloomFinalProgram","sunraysMaskProgram","sunraysProgram","splatProgram","advectionProgram","divergenceProgram","curlProgram","vorticityProgram","pressureProgram","gradienSubtractProgram","displayMaterial","blit","bindBuffer","ARRAY_BUFFER","createBuffer","bufferData","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","Uint16Array","vertexAttribPointer","enableVertexAttribArray","drawElements","TRIANGLES","UNSIGNED_SHORT","createFrameBufferUtils","bloomFramebuffers","resizeDoubleFBO","read","newFBO","uniform1i","uTexture","resizeFBO","write","simRes","dyeRes","texType","rgba","rg","filtering","disable","BLEND","initBloomFramebuffers","initSunraysFramebuffers","displayKeywords","multipleSplats","lastUpdateTime","clientWidth","clientHeight","colorUpdateTimer","mask","destination","last","knee","curve0","curve1","curve2","uniform3f","curve","uniform1f","threshold","dest","uniform2f","texelSize","blendFunc","ONE","enable","baseTex","intensity","applyBloom","weight","iterations","blur","ONE_MINUS_SRC_ALPHA","uniform4f","drawColor","drawCheckerboard","uBloom","uDithering","getTextureScale","ditherScale","uSunrays","drawDisplay","amount","splat","dx","dy","uTarget","point","correctRadius","updatePointerDownData","pointer","posX","posY","updatePointerMoveData","correctDeltaX","correctDeltaY","updatePointerUpData","offsetX","offsetY","preventDefault","targetTouches","touch","pageX","pageY","identifier","changedTouches","code","update","dt","calcDeltaTime","range","updateColors","lastSplat","pop","applyInputs","uVelocity","uCurl","uDivergence","uPressure","dyeTexelSize","velocityId","uSource","dissipation","requestAnimationFrame","warn","art_exampleFluidSimulator","ArtGallery","artItems","art","useState","showNavigation","setShowNavigation","setTokenId","artRenderer","setArtRenderer","tokenDescription","setTokenDescription","debounce","useDebounce","queryParts","location","search","split","artKey","startsWith","artworkItem","newTokenId","changeTokenId","ArtComponent","kind","openSea","View_Panel","View_Form","Fragment","paddingBottom","Button_FormAction","onPress","View_FieldRow","Text_FormTitle","Input_Text","onChange","theme","text_formTitle","whiteSpace","padding","fontSize","$hypot","hypot","stat","Infinity","NaN","value1","value2","arg","div","sum","aLen","arguments","larg"],"mappings":"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","file":"8-aebd6df3e58506ea06da.js","sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar IS_PURE = require('../internals/is-pure');\nvar NativePromise = require('../internals/native-promise-constructor');\nvar fails = require('../internals/fails');\nvar getBuiltIn = require('../internals/get-built-in');\nvar speciesConstructor = require('../internals/species-constructor');\nvar promiseResolve = require('../internals/promise-resolve');\nvar redefine = require('../internals/redefine');\n\n// Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829\nvar NON_GENERIC = !!NativePromise && fails(function () {\n  NativePromise.prototype['finally'].call({ then: function () { /* empty */ } }, function () { /* empty */ });\n});\n\n// `Promise.prototype.finally` method\n// https://tc39.es/ecma262/#sec-promise.prototype.finally\n$({ target: 'Promise', proto: true, real: true, forced: NON_GENERIC }, {\n  'finally': function (onFinally) {\n    var C = speciesConstructor(this, getBuiltIn('Promise'));\n    var isFunction = typeof onFinally == 'function';\n    return this.then(\n      isFunction ? function (x) {\n        return promiseResolve(C, onFinally()).then(function () { return x; });\n      } : onFinally,\n      isFunction ? function (e) {\n        return promiseResolve(C, onFinally()).then(function () { throw e; });\n      } : onFinally\n    );\n  }\n});\n\n// patch native Promise.prototype for native async functions\nif (!IS_PURE && typeof NativePromise == 'function' && !NativePromise.prototype['finally']) {\n  redefine(NativePromise.prototype, 'finally', getBuiltIn('Promise').prototype['finally']);\n}\n","/* eslint-disable no-return-assign */\r\n/* eslint-disable no-multi-assign */\r\n/* eslint-disable @typescript-eslint/no-unused-expressions */\r\n/* eslint-disable no-bitwise */\r\n\r\n// FROM: https://stackoverflow.com/a/47593316/567524\r\n\r\nfunction xmur3(str: string) {\r\n    let h = 1779033703 ^ str.length;\r\n    for (let i = 0; i < str.length; i++) {\r\n        h = Math.imul(h ^ str.charCodeAt(i), 3432918353);\r\n        h = h << 13 | h >>> 19;\r\n    }\r\n\r\n    return () => {\r\n        h = Math.imul(h ^ h >>> 16, 2246822507);\r\n        h = Math.imul(h ^ h >>> 13, 3266489909);\r\n        return (h ^= h >>> 16) >>> 0;\r\n    };\r\n}\r\n\r\nfunction mulberry32(a: number) {\r\n    return () => {\r\n        let t = a += 0x6D2B79F5;\r\n        t = Math.imul(t ^ t >>> 15, t | 1);\r\n        t ^= t + Math.imul(t ^ t >>> 7, t | 61);\r\n        return ((t ^ t >>> 14) >>> 0) / 4294967296;\r\n    };\r\n}\r\n\r\nexport const createRandomGenerator = (hash: string) => {\r\n    const seed = xmur3(hash)();\r\n    return {\r\n        random: mulberry32(seed),\r\n    };\r\n};\r\n","/* eslint-disable new-cap */\r\n/* eslint-disable no-new */\r\nimport p5 from 'p5';\r\nimport { createRandomGenerator } from '../rando';\r\nimport { ArtWork } from '../artwork-type';\r\n\r\nexport const art_circles: ArtWork = {\r\n    key: `art-circles`,\r\n    title: `Circles`,\r\n    description: `The circles we travel in life always bring us back home.`,\r\n    artist: `Rick Love`,\r\n    getTokenDescription: (tokenId: string) => {\r\n        return null;\r\n    },\r\n    // openSea: {\r\n    //     tokenAddress: `0x495f947276749ce646f68ac8c248420045cb7b5e`,\r\n    //     tokenId: `91242641486941084018191434774360347389366801368112854311223385694785434025985`,\r\n    // },\r\n    renderArt: (hostElement: HTMLElement, hash = `This is my hash!`) => {\r\n        // const { a, b, c } = { a: 57, b: 23, c: 15 };\r\n\r\n\r\n        const { random } = createRandomGenerator(hash);\r\n\r\n        const { a, b, c } = { a: 1 + Math.floor(57 * random()), b: 1 + Math.floor(213 * random()), c: 1 + Math.floor(115 * random()) };\r\n        const { cr, cg, cb, ca } = { cr: Math.floor(25 + 230 * random()), cg: Math.floor(25 + 230 * random()), cb: Math.floor(25 + 230 * random()), ca: Math.floor(25 + 25 * random()) };\r\n\r\n        const size = 600;\r\n        const h = 200;\r\n        const scale = size / 400;\r\n        const speed = 0.5;\r\n\r\n        let tick = 0;\r\n        return new p5((s: p5) => {\r\n            s.setup = () => {\r\n                s.createCanvas(size, size);\r\n            };\r\n            s.draw = () => {\r\n                s.background(0);\r\n                s.scale(scale);\r\n\r\n                for (let i = 0; i < 10; i++) {\r\n                    const color = s.color((cr * i) % 255, (cg * i) % 255, (cb * i) % 255, ca);\r\n                    s.noFill();\r\n                    s.stroke(color);\r\n                    for (let j = 0; j < 36; j++) {\r\n                        s.circle(h - a / 2 + j % a, h - b / 2 + j % b, (h * 1.35) - (i * 5) % c);\r\n                    }\r\n                    s.translate(h, h);\r\n                    // s.rotate((a + b + c + tick * 0.001) % 2);\r\n                    s.rotate((a + b + c + tick * 0.001));\r\n                    s.translate(-h, -h);\r\n                    tick += speed;\r\n                }\r\n\r\n                tick++;\r\n            };\r\n        }, hostElement);\r\n    },\r\n};\r\n","/* eslint-disable new-cap */\r\n/* eslint-disable no-new */\r\nimport p5 from 'p5';\r\nimport { createRandomGenerator } from '../rando';\r\nimport { ArtWork } from '../artwork-type';\r\n\r\nexport const art_layersOfTheOnionsSoul: ArtWork = {\r\n    key: `art-onions`,\r\n    title: `Layers of the Onion's Soul`,\r\n    description: `This represents the complexity of an onion's soul - which has many layers, like a human.`,\r\n    artist: `Rick Love & Lydia Love - who called me weirdo as inspiration, and mentioned a circle, some squares, a tetrahedron, Minecraft blocks, and then said she meant cubes and spheres.`,\r\n    getTokenDescription: (tokenId: string) => {\r\n        return null;\r\n    },\r\n    renderArt: (hostElement: HTMLElement, hash = `This is my hash!`) => {\r\n        // const { a, b, c } = { a: 3, b: 7, c: 15 };\r\n\r\n        const { random } = createRandomGenerator(hash);\r\n        const { a, b, c, d, e } = { a: 1 + Math.floor(17 * random()), b: 1 + Math.floor(57 * random()), c: 1 + Math.floor(35 * random()), d: 0 + Math.floor(5 * random()), e: 20 + Math.floor(255 * random()) };\r\n        // const { cr, cg, cb } = { cr: 207, cg: 175, cb: 65 };\r\n        const { cr, cg, cb } = { cr: Math.floor(25 + 230 * random()), cg: Math.floor(25 + 230 * random()), cb: Math.floor(25 + 230 * random()) };\r\n\r\n        let tick = 0;\r\n\r\n        return new p5((s: p5) => {\r\n            s.setup = () => {\r\n                s.createCanvas(400, 400);\r\n            };\r\n            s.draw = () => {\r\n                s.background(0);\r\n                for (let i = 0; i < 35; i++) {\r\n                    const color = s.color((cr + b * i) % 255, cg * (1 + i * a) % 255, (cb + i * d) % 255);\r\n                    s.fill(color);\r\n                    s.circle(150 + (i * 7) % b - a + 32 * Math.sin(tick * 0.001), 250 + i - c % 35 + b, (270 - i) % e);\r\n                    s.translate(100, 100);\r\n                    s.rotate(d + tick * 0.000007);\r\n                    s.translate(-120, -150);\r\n                    tick++;\r\n                }\r\n            };\r\n        }, hostElement);\r\n    },\r\n};\r\n","export const parseTokenId_art121 = (tokenId: string) => {\r\n    const tokenTimestampValue = Number.parseInt(tokenId.substr(0, tokenId.length - 6), 10);\r\n    const tokenCounterValue = Number.parseInt(tokenId.substr(tokenId.length - 6), 10);\r\n    console.log(`parseTokenId_art121`, { tokenId, tokenTimestampValue, tokenCounterValue });\r\n\r\n    if (!Number.isFinite(tokenTimestampValue)) { return null; }\r\n    if (!Number.isFinite(tokenCounterValue)) { return null; }\r\n\r\n    const tokenCounter = tokenCounterValue;\r\n    const timestampSecs = tokenTimestampValue;\r\n    const targetSecs = Math.floor(new Date(`2021-01-21 21:21:21Z`).getTime()) / 1000;\r\n    const timeDeltaSecs = Math.abs(targetSecs - timestampSecs);\r\n    return {\r\n        tokenId,\r\n        tokenCounter,\r\n        timestampSecs,\r\n        targetSecs,\r\n        timeDeltaSecs,\r\n    };\r\n};\r\n","/* eslint-disable new-cap */\r\n/* eslint-disable no-new */\r\nimport p5 from 'p5';\r\nimport { createRandomGenerator } from '../rando';\r\nimport { parseTokenId_art121 } from './art-121-helpers';\r\nimport { ArtWork } from '../artwork-type';\r\n\r\nexport const art_121: ArtWork = {\r\n    key: `art-121`,\r\n    title: `1/21/21 21:21:21`,\r\n    description: `This exact time pattern will occur only once in our human timeline. This NFT crypto art will attempt to capture that time to the precise second and embed it in the distributed blockchain forever. \r\n    \r\nHowever the exact outcome cannot be controlled: \r\n\r\nThe color scheme is generated from the token hash.\r\n\r\nEven more difficult to predict - the block mining timestamp since 1/21/21 21:21:21 UTC controls the behavior of the clocks:\r\n\r\nYear\r\nMonth\r\nDay\r\nHour\r\nMinute\r\nSecond\r\n\r\nIf this is mined at the exact second, perfect stability will be achieved.\r\n\r\nThis is all up to whatever timing occurs on the blockchain when these NFTs are mined by the collectors.\r\n\r\nCan we obtain the exact precision?\r\n`,\r\n    artist: `Rick Love`,\r\n    getTokenDescription: (tokenId: string) => {\r\n        const tokenData = parseTokenId_art121(tokenId);\r\n        if (!tokenData) { return null; }\r\n\r\n        return `${tokenData.timeDeltaSecs} Seconds from 1/21/21 21:21:21 (#${tokenData.tokenCounter})`;\r\n    },\r\n    renderArt: (hostElement: HTMLElement, tokenId: string) => {\r\n        // const { a, b, c } = { a: 57, b: 23, c: 15 };\r\n\r\n\r\n        const { random } = createRandomGenerator(tokenId);\r\n        const { a, b, c } = { a: 1 + Math.floor(57 * random()), b: 1 + Math.floor(213 * random()), c: 1 + Math.floor(115 * random()) };\r\n        const { cr, cg, cb, ca } = { cr: Math.floor(25 + 230 * random()), cg: Math.floor(25 + 230 * random()), cb: Math.floor(25 + 230 * random()), ca: Math.floor(25 + 25 * random()) };\r\n\r\n        let tick = 0;\r\n\r\n        const tokenData = parseTokenId_art121(tokenId);\r\n\r\n        return new p5((s: p5) => {\r\n            s.setup = () => {\r\n                s.createCanvas(350, 350);\r\n            };\r\n            s.draw = () => {\r\n                s.background(0);\r\n\r\n                const drawClock = (index: number, clockRadius: number, units: number, value: number) => {\r\n\r\n                    const perUnit = 1 / units;\r\n                    const d = 0.8 * clockRadius * Math.sin(Math.PI * 2 * perUnit);\r\n\r\n                    for (let iHalf = 0; iHalf <= 1; iHalf++) {\r\n                        const isFront = iHalf === 1;\r\n                        let xZeroValue = 0;\r\n                        for (let i = 0; i < units; i++) {\r\n\r\n\r\n                            const errorRatio = (0.5 - Math.abs((value * perUnit) - 0.5)) * 2;\r\n                            const correctRatioRaw = 1 - errorRatio;\r\n                            // const correctRatio = correctRatioRaw * ((tick * 0.121 * correctRatioRaw) % 2 - 1);\r\n                            const zRotation = Math.cos((tick * 0.0121 * correctRatioRaw + index * 0.25));\r\n                            const angleOffset = -0.25 + value * perUnit;\r\n\r\n                            const x = zRotation * clockRadius * Math.cos(Math.PI * 2 * (angleOffset - i * perUnit));\r\n                            const y = clockRadius * Math.sin(Math.PI * 2 * (angleOffset - i * perUnit));\r\n\r\n                            if (i === 0) {\r\n                                xZeroValue = x;\r\n                            }\r\n\r\n                            const isFrontValue = (value === 0 && index % 2 === 0 ? -1 : 1) * Math.sign(xZeroValue) === Math.sign(x);\r\n                            // const isFrontValue = Math.sign(xZeroValue) === Math.sign(x);\r\n                            // const isFrontValue = Math.sign(xZeroValue) === Math.sign(x);\r\n\r\n                            if (isFront && !isFrontValue) { continue; }\r\n                            if (!isFront && isFrontValue) { continue; }\r\n\r\n                            // if (isFront && isFrontX) { continue; }\r\n                            // if (!isFront && (isFrontOnLeft && x > 0 || !isFrontOnLeft && x < 0)) { continue; }\r\n                            // if (!isFront && value !== 0) { continue; }\r\n\r\n                            const colorKey = index + 1;\r\n\r\n                            // const alphaShift = 0.5 + 0.5 * (x / clockRadius) * (isFrontOnLeft ? -1 : 1);\r\n                            // const alphaShift = 1;\r\n                            const alphaShift = isFront ? 1 : 0.25;\r\n                            const lowAlpha = Math.ceil(units < 100 ? 100 : 25);\r\n\r\n                            s.noFill();\r\n                            s.stroke(s.color((cr * colorKey) % 255, (cg * colorKey) % 255, (cb * colorKey) % 255, Math.ceil((value === 0 ? 255 : lowAlpha) * alphaShift)));\r\n                            s.strokeWeight(2);\r\n                            s.line(x * (1 - 0.05 * Math.abs(zRotation)), y * 0.95, x, y);\r\n\r\n                            if (i === 0) {\r\n                                s.stroke(s.color((cr * colorKey) % 255, (cg * colorKey) % 255, (cb * colorKey) % 255, value === 0 ? 255 : 50));\r\n                                s.line(0, 0, x, y);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                };\r\n\r\n                s.translate(175, 175);\r\n\r\n                const defaultDelta = ((new Date(`2021-01-21 21:21:21.212Z`)).getTime() - Date.now());\r\n                // const defaultDelta = ((new Date(`2022-01-21 21:21:21.212Z`)).getTime() - Date.now());\r\n                // const defaultDelta = ((new Date(`2000-01-01 00:00:00.000Z`)).getTime() - Date.now());\r\n                // const defaultDelta = 0;\r\n\r\n                const tokenTimeDeltaSecs = tokenData?.timeDeltaSecs;\r\n                const delta = tokenTimeDeltaSecs != null ? tokenTimeDeltaSecs * 1000 : defaultDelta;\r\n                // console.log(`delta`, { delta, defaultDelta, tokenId });\r\n\r\n                const e = {\r\n                    year: Math.floor(delta / (1000 * 60 * 60 * 24 * 365)),\r\n                    month: Math.floor(delta / (1000 * 60 * 60 * 24 * 31) % 12),\r\n                    day: Math.floor(delta / (1000 * 60 * 60 * 24) % 31),\r\n                    hour: Math.floor(delta / (1000 * 60 * 60) % 24),\r\n                    minute: Math.floor(delta / (1000 * 60) % 60),\r\n                    second: Math.floor(delta / (1000) % 60),\r\n                    // ms: delta % 1000,\r\n                };\r\n                const isBefore = true;\r\n\r\n                // tick = 0;\r\n                for (let iTick = 0; iTick < 10; iTick++) {\r\n                    drawClock(0, 140, 100, e.year);\r\n                    drawClock(1, 120, 12, e.month);\r\n                    drawClock(2, 100, 31, e.day);\r\n                    drawClock(3, 80, 60, e.hour);\r\n                    drawClock(4, 60, 60, e.minute);\r\n                    drawClock(5, 40, 60, e.second);\r\n                    // drawClock(6, 20, 1000, e.ms);\r\n\r\n                    s.background(s.color(0, 0, 0, 5));\r\n                    tick++;\r\n                }\r\n\r\n                s.translate(-175, -175);\r\n\r\n\r\n                const drawText = () => {\r\n                    s.textSize(20);\r\n                    s.noStroke();\r\n                    s.textFont(`monospace`);\r\n\r\n                    const pad = (value: number, digits: number) => (`${value}`).padStart(digits, `0`);\r\n\r\n                    s.fill(s.color(255, 255, 255));\r\n                    s.text(`1/21/21 21:21:21 GST`, 60, 20);\r\n\r\n                    s.fill(!isBefore ? s.color(0, 255, 0) : s.color(255, 0, 0));\r\n                    s.text(`${isBefore ? `-` : `+`} ${pad(e.year, 2)}y ${pad(e.month, 2)}m ${pad(e.day, 2)}d ${pad(e.hour, 2)}:${pad(e.minute, 2)}:${pad(e.second, 2)}`, 50, 340);\r\n                };\r\n\r\n                // drawText();\r\n\r\n                tick++;\r\n            };\r\n        }, hostElement);\r\n    },\r\n};\r\n","/* eslint-disable react/require-default-props */\r\nimport React, { useEffect, useRef } from 'react';\r\n\r\n\r\n// const hasLoadedScript = false;\r\n\r\nexport const DivHost = (props: {\r\n    renderArt: (hostElement: HTMLDivElement) => { remove: () => void };\r\n    // eslint-disable-next-line react/no-unused-prop-types\r\n    openSea?: {\r\n        tokenAddress: string;\r\n        tokenId: string;\r\n    };\r\n}) => {\r\n\r\n    const hostElementRef = useRef(null as null | HTMLDivElement);\r\n    const HostElement = useRef({ Component: () => <div style={{}} ref={hostElementRef} /> });\r\n\r\n    useEffect(() => {\r\n        // if (!hasLoadedScript) {\r\n        //     hasLoadedScript = true;\r\n        //     const scriptElement = document.createElement(`script`);\r\n        //     scriptElement.src = `https://unpkg.com/embeddable-nfts/dist/nft-card.min.js`;\r\n        //     document.head.append(scriptElement);\r\n        // }\r\n\r\n        if (!hostElementRef.current) { return () => { }; }\r\n\r\n        console.log(`DivHost - renderArt`, { hostElementRef: hostElementRef.current, renderArt: props.renderArt });\r\n        hostElementRef.current.innerHTML = ``;\r\n        const { remove } = props.renderArt(hostElementRef.current);\r\n        return () => {\r\n            remove();\r\n        };\r\n    }, [hostElementRef.current, props.renderArt]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <HostElement.current.Component />\r\n            {/* {props.openSea && (\r\n                <>\r\n                    <div>Open Sea</div>\r\n                    <nft-card\r\n                        tokenAddress={props.openSea.tokenAddress}\r\n                        tokenId={props.openSea.tokenId}\r\n                        network='mainnet'\r\n                    />\r\n                </>\r\n            )} */}\r\n        </>\r\n    );\r\n};\r\n","/* eslint-disable new-cap */\r\n/* eslint-disable no-new */\r\nimport p5 from 'p5';\r\nimport { ArtWork } from '../../artwork-type';\r\nimport { createRandomGenerator } from '../../rando';\r\n\r\n\r\nconst parseTokenId_puzzle01 = (tokenId: string) => { return tokenId; };\r\n\r\nexport const art_puzzle01: ArtWork = {\r\n    key: `art-puzzle-01`,\r\n    title: `Puzzle 01`,\r\n    description: `Try to puzzle it out and unlock the answer.`,\r\n    artist: `Rick Love`,\r\n    getTokenDescription: (tokenId: string) => {\r\n        const tokenData = parseTokenId_puzzle01(tokenId);\r\n        if (!tokenData) { return null; }\r\n\r\n        return `TokenId: ${tokenData}`;\r\n    },\r\n    renderArt: (hostElement: HTMLElement, tokenId: string) => {\r\n        // const { a, b, c } = { a: 57, b: 23, c: 15 };\r\n\r\n\r\n        const tokenData = parseTokenId_puzzle01(tokenId);\r\n\r\n        type Vector2 = { x: number, y: number };\r\n\r\n        type BoardItem = {\r\n            /** Seed for the render math */\r\n            renderSeed: string;\r\n            item: 'player' | 'exit' | 'entrance' | 'wall' | 'wall-broken';\r\n            pos: Vector2;\r\n\r\n            renderPos?: Vector2;\r\n            targetRenderPos?: Vector2;\r\n            activeMove?: ActualMove;\r\n        }\r\n        type MoveDirection = 'up' | 'down' | 'left' | 'right';\r\n        const oppositeDirection = (dir: MoveDirection): MoveDirection => {\r\n            switch (dir) {\r\n                case `up`: return `down`;\r\n                case `down`: return `up`;\r\n                case `left`: return `right`;\r\n                case `right`: return `left`;\r\n                default: return `up`;\r\n            }\r\n        };\r\n        type Move = {\r\n            direction: MoveDirection;\r\n            distance: number;\r\n        };\r\n        type ActualMove = {\r\n            direction: MoveDirection;\r\n            distance: number;\r\n            startPosition: Vector2;\r\n            endPosition: Vector2;\r\n        };\r\n        const state = {\r\n            board: [] as BoardItem[],\r\n            boardVisits: [] as { pos: Vector2 }[],\r\n            moveSequence: [] as ActualMove[],\r\n            player: {} as BoardItem,\r\n            moveIndex: 0,\r\n        };\r\n\r\n        const canvasSize = 350;\r\n        const gridSize = 16;\r\n        const itemSize = 20;\r\n        const gridAreaOffset = 15;\r\n        const maxMoveCount = 20;\r\n\r\n        const calculateNextPos = (posRaw: Vector2, dir: MoveDirection): Vector2 => {\r\n            const pos = { ...posRaw };\r\n            if (dir === `up`) { pos.y--; }\r\n            if (dir === `down`) { pos.y++; }\r\n            if (dir === `left`) { pos.x--; }\r\n            if (dir === `right`) { pos.x++; }\r\n            return pos;\r\n        };\r\n\r\n        return new p5((s: p5) => {\r\n            s.setup = () => {\r\n                s.createCanvas(canvasSize, canvasSize);\r\n                s.background(0);\r\n                // s.colorMode(s.HSB);\r\n\r\n                // Create board out of backwards generation of correct moves\r\n                const { random } = createRandomGenerator(tokenId);\r\n\r\n                const { board, boardVisits } = state;\r\n                const exit: BoardItem = {\r\n                    renderSeed: `${random()}`,\r\n                    item: `exit`,\r\n                    pos: {\r\n                        x: Math.floor(1 + (gridSize - 2) * random()),\r\n                        y: Math.floor(1 + (gridSize - 2) * random()),\r\n                    },\r\n                };\r\n\r\n                state.player = {\r\n                    renderSeed: `${random()}`,\r\n                    item: `player`,\r\n                    pos: { ...exit.pos },\r\n                    renderPos: { x: 0, y: 0 },\r\n                };\r\n                const { player } = state;\r\n\r\n                board.push(exit);\r\n                // board.push(player);\r\n\r\n                // // Crete outer wall\r\n                // for (let i = 0; i < gridSize; i++) {\r\n                //     board.push({ renderSeed: `${random()}`, item: `wall`, pos: { x: i, y: 0 } });\r\n                //     board.push({ renderSeed: `${random()}`, item: `wall`, pos: { x: i, y: gridSize - 1 } });\r\n                //     board.push({ renderSeed: `${random()}`, item: `wall`, pos: { x: 0, y: i } });\r\n                //     board.push({ renderSeed: `${random()}`, item: `wall`, pos: { x: gridSize - 1, y: i } });\r\n                // }\r\n\r\n                const randomMoveDirection = (): MoveDirection => {\r\n                    const r = random();\r\n                    if (r > 0.75) { return `up`; }\r\n                    if (r > 0.5) { return `down`; }\r\n                    if (r > 0.25) { return `left`; }\r\n                    return `right`;\r\n                };\r\n                const randomMove = (): Move => {\r\n                    return {\r\n                        direction: randomMoveDirection(),\r\n                        distance: Math.floor(0 + gridSize * 0.75 * random()),\r\n                    };\r\n                };\r\n\r\n                const wallColorMaxCount = 16;\r\n                const wallColorCount = 4 + Math.floor(random() * (wallColorMaxCount - 4));\r\n                const wallColors = [...new Array(wallColorCount)].map(x => `${random()}`);\r\n                const getNextWallRandomSeed = () => {\r\n                    return wallColors[Math.floor(random() * wallColorCount)];\r\n                };\r\n\r\n                // Reversed moves to generate board\r\n                let lastReverseMove = {\r\n                    distance: 0,\r\n                    direction: `unknown`,\r\n                } as unknown as Move;\r\n\r\n                const calculatePlayerReverseMove = (reverseMove: Move): null | ActualMove => {\r\n                    let d = reverseMove.distance;\r\n                    let lastPos = { ...player.pos };\r\n\r\n                    const dir = reverseMove.direction;\r\n                    while (d > 0) {\r\n                        const pos = calculateNextPos(lastPos, dir);\r\n                        const nextPos = calculateNextPos(lastPos, dir);\r\n\r\n                        // Past edge - fail\r\n                        if (pos.x <= 0 || pos.x >= gridSize - 1\r\n                            || pos.y <= 0 || pos.y >= gridSize - 1) { return null; }\r\n\r\n                        // Hit existing wall - fail\r\n                        const itemAtPos = board.find(x => x.item !== `player` && x.pos.x === pos.x && x.pos.y === pos.y);\r\n                        if (itemAtPos?.item === `wall`) { return null; }\r\n\r\n                        // Already next wall - fail\r\n                        const itemAtNextPos = board.find(x => x.item !== `player` && x.pos.x === nextPos.x && x.pos.y === nextPos.y);\r\n                        if (itemAtNextPos?.item === `wall`) { return null; }\r\n\r\n                        d--;\r\n                        lastPos = { ...pos };\r\n                    }\r\n\r\n                    // If in line with any existing endmove, reject\r\n                    const inLineWithLastPos = state.moveSequence.find(m => m.endPosition.x === lastPos.x || m.endPosition.y === lastPos.y);\r\n                    if (inLineWithLastPos) { return null; }\r\n\r\n                    const actualDistance = reverseMove.distance - d;\r\n                    return {\r\n                        direction: oppositeDirection(reverseMove.direction),\r\n                        distance: actualDistance,\r\n                        endPosition: { ...player.pos },\r\n                        startPosition: lastPos,\r\n                    };\r\n                };\r\n\r\n                // Add outer wall\r\n                for (let i = 0; i < gridSize; i++) {\r\n                    board.push({ renderSeed: getNextWallRandomSeed(), item: `wall`, pos: { x: i, y: 0 } });\r\n                    board.push({ renderSeed: getNextWallRandomSeed(), item: `wall`, pos: { x: i, y: gridSize - 1 } });\r\n                    board.push({ renderSeed: getNextWallRandomSeed(), item: `wall`, pos: { x: 0, y: i } });\r\n                    board.push({ renderSeed: getNextWallRandomSeed(), item: `wall`, pos: { x: gridSize - 1, y: i } });\r\n                }\r\n\r\n                // Add game walls\r\n                for (let i = 0; i < maxMoveCount; i++) {\r\n\r\n                    // Reverse Move player\r\n                    let reverseMove = randomMove();\r\n                    while (reverseMove.direction === lastReverseMove.direction\r\n                        || reverseMove.direction === oppositeDirection(lastReverseMove.direction)) {\r\n                        reverseMove = randomMove();\r\n                    }\r\n\r\n                    // Calculate reverse move\r\n                    const actualMove = calculatePlayerReverseMove(reverseMove);\r\n                    if (!actualMove || actualMove.distance <= 0) {\r\n                        continue;\r\n                    }\r\n\r\n                    // Add wall which would have stopped the player (having made this move forward)\r\n                    if (state.moveSequence.length > 0) {\r\n                        const nextPos = calculateNextPos(player.pos, oppositeDirection(reverseMove.direction));\r\n                        board.push({\r\n                            item: `wall`,\r\n                            pos: nextPos,\r\n                            renderSeed: getNextWallRandomSeed(),\r\n                        });\r\n                    }\r\n\r\n                    // Move player\r\n                    player.pos = actualMove.startPosition;\r\n                    state.moveSequence.unshift(actualMove);\r\n                    lastReverseMove = actualMove;\r\n\r\n                    // Add board visits\r\n                    let p = actualMove.startPosition;\r\n                    state.boardVisits.push({ pos: { ...p } });\r\n                    while (p.x !== actualMove.endPosition.x\r\n                        || p.y !== actualMove.endPosition.y) {\r\n                        p = calculateNextPos(p, actualMove.direction);\r\n                        state.boardVisits.push({ pos: { ...p } });\r\n                    }\r\n\r\n                    console.log(`boardVisits`, { actualReverseMove: actualMove, boardVisits: [...state.boardVisits] });\r\n                }\r\n\r\n                // Add random walls\r\n                for (let x = 0; x < gridSize; x++) {\r\n                    for (let y = 0; y < gridSize; y++) {\r\n                        const isVisited = !!boardVisits.find(b => b.pos.x === x && b.pos.y === y);\r\n                        const item = !!board.find(b => b.pos.x === x && b.pos.y === y);\r\n\r\n                        if (isVisited || item) { continue; }\r\n\r\n                        if (random() > 0.75) {\r\n                            board.push({\r\n                                item: `wall`,\r\n                                pos: { x, y },\r\n                                renderSeed: getNextWallRandomSeed(),\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n                player.renderPos = getRenderPosition(player.pos);\r\n                state.board.forEach(x => drawPuzzleItem(x));\r\n            };\r\n\r\n            const getRenderPosition = (p: Vector2) => {\r\n                const x = gridAreaOffset + p.x * itemSize;\r\n                const y = gridAreaOffset + p.y * itemSize;\r\n                return { x, y };\r\n            };\r\n\r\n            const drawPuzzleItem = (item: typeof state.board[0]) => {\r\n                const { random } = createRandomGenerator(item.renderSeed);\r\n                const { a, b, c } = { a: 1 + Math.floor(57 * random()), b: 1 + Math.floor(213 * random()), c: 1 + Math.floor(115 * random()) };\r\n                const { cr, cg, cb, ca } = { cr: Math.floor(25 + 230 * random()), cg: Math.floor(25 + 230 * random()), cb: Math.floor(25 + 230 * random()), ca: Math.floor(25 + 125 * random()) };\r\n\r\n                const { x, y } = item.renderPos ?? getRenderPosition(item.pos);\r\n                s.fill(cr, cg, cb, ca);\r\n                s.stroke(cr, cg, cb, 255);\r\n                s.strokeWeight(1);\r\n\r\n                const gameWon = state.moveIndex >= state.moveSequence.length && !state.player.targetRenderPos;\r\n\r\n                const aOffset = tick / 100;\r\n                const tOffset = Math.abs(Math.floor(Math.sin((tick + a * c) / 1000) * canvasSize));\r\n                const alphaCycle = 100;\r\n\r\n                if (item.item === `player`) {\r\n                    if (gameWon) {\r\n                        s.stroke(0, 0, 0, 10);\r\n\r\n                        let mod = tick;\r\n                        for (let i = 0; i < 16; i++) {\r\n                            s.fill(cr, cg, (cb + i * c) % 255, Math.floor(Math.sin((tick + a * c) / alphaCycle) * 25 + 35));\r\n\r\n                            const j = 0;\r\n                            s.circle(200 - a / 2 + j % a, 200 - b / 2 + j % b, 270 - (i * 5) % c);\r\n                            s.translate(tOffset, tOffset);\r\n                            // s.rotate((a + b + c + tick * 0.001) % 2);\r\n                            s.rotate(((a + b + c + mod) * 0.001));\r\n                            s.translate(-tOffset, -tOffset);\r\n                            mod++;\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    s.fill(cr, cg, cb, 30);\r\n                    const circleCount = 4;\r\n                    const spiralRadius = 0.01 * (4 + state.moveSequence.length - state.moveIndex);\r\n                    // const spiralRadius = 0.1;\r\n                    for (let i = 0; i < circleCount; i++) {\r\n                        s.stroke(cr, cg, cb, Math.floor(255 * (i + 1) / (circleCount + 1)));\r\n\r\n                        s.circle(x + itemSize * (0.5 + spiralRadius * Math.cos(2 * Math.PI * (i / circleCount + tick / 100))), y + itemSize * (0.5 + spiralRadius * Math.sin(2 * Math.PI * (i / circleCount + tick / 100))), itemSize);\r\n                    }\r\n\r\n                    // s.circle(x + 0.5 * itemSize, y + 0.5 * itemSize, itemSize);\r\n                    return;\r\n                }\r\n\r\n                if (item.item === `exit`) {\r\n                    if (gameWon) {\r\n                        s.fill(cr, cg, cb, Math.floor(Math.sin((tick + a * c) / alphaCycle) * 25 + 35));\r\n                        s.stroke(0, 0, 0, 10);\r\n\r\n                        let angle = a;\r\n                        let trans = c;\r\n                        for (let i = 0; i < 32; i++) {\r\n\r\n                            // s.rect(x + itemSize * 0.25, y + itemSize * 0.25, itemSize * 0.5, itemSize * 0.5);\r\n                            s.translate(trans, trans);\r\n                            s.rotate(angle + aOffset);\r\n                            s.rect(x + itemSize * 0.25, y + itemSize * 0.25, c * x, c * y);\r\n                            s.rotate(-angle - aOffset);\r\n                            s.translate(-trans, -trans);\r\n                            angle += b;\r\n                            trans += c;\r\n                            trans %= 125;\r\n                        }\r\n                        return;\r\n                    }\r\n\r\n                    // s.fill(cr, cg, cb, 200);\r\n                    s.fill(255, 255, 255);\r\n                    s.rect(x, y, itemSize, itemSize);\r\n                    s.fill(0, 0, 0);\r\n                    s.rect(x + itemSize * 0.25, y + itemSize * 0.25, itemSize * 0.5, itemSize * 0.5);\r\n                    return;\r\n                }\r\n\r\n                if (item.item === `wall-broken`) {\r\n                    if (!gameWon) { return; }\r\n\r\n                    s.fill(cr, cg, cb, Math.floor(Math.sin((tick + a * c) / alphaCycle) * 25 + 25));\r\n                    s.stroke(0, 0, 0, 10);\r\n\r\n                    let angle = a;\r\n                    const trans = c % (canvasSize * 0.5);\r\n                    for (let i = 0; i < 8; i++) {\r\n\r\n                        s.translate(-trans, -trans);\r\n                        s.rotate(angle + aOffset);\r\n                        s.rect(x, y, itemSize * x, itemSize * y);\r\n                        s.rotate(-angle - aOffset);\r\n                        s.translate(trans, trans);\r\n                        angle += b;\r\n                        // trans += c;\r\n                        // trans %= 3;\r\n                    }\r\n                    return;\r\n\r\n                    // s.rect(x + itemSize * 0.25, y + itemSize * 0.25, itemSize * 0.5, itemSize * 0.5);\r\n                    // s.rect(x, y, itemSize * x, itemSize * y);\r\n                    // return;\r\n                }\r\n\r\n                if (gameWon) {\r\n                    return;\r\n                    // s.fill(cr, cg, cb, Math.floor(Math.sin((tick + a * c) / alphaCycle) * 25 + 25));\r\n                    // s.rect(x, y, itemSize, itemSize);\r\n                    // return;\r\n                }\r\n                // s.rect(x, y, itemSize, itemSize);\r\n\r\n                s.fill(cr, cg, cb, 5);\r\n                const circleCount = 4;\r\n                const spiralRadius = 0.015 * (4 + state.moveSequence.length - state.moveIndex);\r\n                const iOffset = random();\r\n                for (let i = 0; i < circleCount; i++) {\r\n                    s.stroke(cr, cg, cb, Math.floor(255 * (i + 1) / (circleCount + 1)));\r\n                    s.rect(x + itemSize * (0 + spiralRadius * Math.cos(2 * Math.PI * ((iOffset + i) / circleCount + tick / 100))), y + itemSize * (0 + spiralRadius * Math.sin(2 * Math.PI * ((iOffset + i) / circleCount + tick / 100))), itemSize, itemSize);\r\n                }\r\n            };\r\n\r\n            let tick = 0;\r\n            s.draw = () => {\r\n                s.background(0);\r\n                // s.background(0, 0, 0, 5);\r\n\r\n                const drawMoveHistory = (m: typeof state.moveSequence[0]) => {\r\n                    s.noFill();\r\n                    s.stroke(255, 255, 255, 100);\r\n\r\n                    const x1 = gridAreaOffset + m.startPosition.x * itemSize + itemSize * 0.5;\r\n                    const y1 = gridAreaOffset + m.startPosition.y * itemSize + itemSize * 0.5;\r\n                    const x2 = gridAreaOffset + m.endPosition.x * itemSize + itemSize * 0.5;\r\n                    const y2 = gridAreaOffset + m.endPosition.y * itemSize + itemSize * 0.5;\r\n                    s.line(x1, y1, x2, y2);\r\n                    s.line(x1 + itemSize * 0.25, y1 + itemSize * 0.25, x2, y2);\r\n\r\n                    // s.text(`${i}`, x1,y1);\r\n                };\r\n\r\n                // state.board.forEach(x => drawPuzzleItem(x));\r\n                state.board.filter(x => x.item === `wall-broken`).forEach(x => drawPuzzleItem(x));\r\n                state.board.filter(x => x.item !== `wall-broken`).forEach(x => drawPuzzleItem(x));\r\n\r\n                drawPuzzleItem(state.player);\r\n\r\n                // Animate\r\n                if (state.player.activeMove && state.player.renderPos && state.player.targetRenderPos) {\r\n                    // state.player.renderPos = {\r\n                    //     x: 0.9 * state.player.renderPos.x + 0.1 * state.player.targetRenderPos.x,\r\n                    //     y: 0.9 * state.player.renderPos.y + 0.1 * state.player.targetRenderPos.y,\r\n                    // };\r\n\r\n                    const speed = 3;\r\n                    for (let i = 0; i < speed; i++) {\r\n                        state.player.renderPos = calculateNextPos(state.player.renderPos, state.player.activeMove.direction);\r\n\r\n                        const dist = Math.abs(state.player.renderPos.x - state.player.targetRenderPos.x)\r\n                            + Math.abs(state.player.renderPos.y - state.player.targetRenderPos.y);\r\n                        if (dist < 1) {\r\n                            state.player.renderPos = state.player.targetRenderPos;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // If player is done animating destroy wall\r\n                const { activeMove } = state.player;\r\n\r\n                const pPos = state.player.renderPos;\r\n                const tPos = state.player.targetRenderPos;\r\n                if (activeMove && pPos && tPos && pPos.x === tPos.x && pPos.y === tPos.y) {\r\n                    console.log(`Reached`, { activeMove, pPos, tPos });\r\n                    state.player.targetRenderPos = undefined;\r\n\r\n                    // Break any walls that have been reached\r\n                    for (const m of state.moveSequence.slice(0, state.moveIndex)) {\r\n                        const wallPos = calculateNextPos(m.endPosition, m.direction);\r\n                        const wall = state.board.find(x => x.pos.x === wallPos.x && x.pos.y === wallPos.y);\r\n                        if (!wall) { continue; }\r\n\r\n                        wall.item = `wall-broken`;\r\n                    }\r\n                }\r\n\r\n\r\n                // Debug\r\n                //  state.moveSequence.forEach(x => drawMoveHistory(x));\r\n                tick++;\r\n            };\r\n\r\n            s.keyPressed = () => {\r\n                const { key, keyCode } = s;\r\n\r\n                const getKeyDirection = (): null | MoveDirection => {\r\n                    switch (key) {\r\n                        case `w`: return `up`;\r\n                        case `a`: return `left`;\r\n                        case `s`: return `down`;\r\n                        case `d`: return `right`;\r\n                        default: break;\r\n                    }\r\n                    switch (keyCode) {\r\n                        case s.UP_ARROW: return `up`;\r\n                        case s.LEFT_ARROW: return `left`;\r\n                        case s.DOWN_ARROW: return `down`;\r\n                        case s.RIGHT_ARROW: return `right`;\r\n                        default: return null;\r\n                    }\r\n                };\r\n\r\n                const d = getKeyDirection();\r\n                if (!d) { return; }\r\n\r\n                // Move the player\r\n                const nextMove = state.moveSequence[state.moveIndex];\r\n                if (!nextMove) { return; }\r\n\r\n                if (nextMove.direction !== d) {\r\n                    state.moveIndex = 0;\r\n                    state.player.activeMove = undefined;\r\n                    state.player.renderPos = undefined;\r\n                    state.player.targetRenderPos = undefined;\r\n                    state.board.filter(x => x.item === `wall-broken`).forEach(x => { x.item = `wall`; });\r\n                    return;\r\n                }\r\n\r\n                state.player.activeMove = nextMove;\r\n                state.player.renderPos = getRenderPosition(nextMove.startPosition);\r\n                state.player.targetRenderPos = getRenderPosition(nextMove.endPosition);\r\n                state.moveIndex++;\r\n            };\r\n        }, hostElement);\r\n    },\r\n};\r\n","/* eslint-disable new-cap */\r\n/* eslint-disable no-new */\r\nimport p5 from 'p5';\r\nimport { createRandomGenerator } from '../rando';\r\nimport { ArtWork } from '../artwork-type';\r\n\r\ntype Vector2 = { x: number, y: number };\r\ntype ColorHsb = {\r\n    /** 0-360 */\r\n    h: number;\r\n    /** 0-100 */\r\n    s: number;\r\n    /** 0-100 */\r\n    b: number;\r\n    /** 0-1 */\r\n    a: number;\r\n};\r\nconst drawGear = (g: p5,\r\n    options: {\r\n        position: Vector2;\r\n        radiusInner: number;\r\n        radiusOuter: number;\r\n        radiusAxis: number;\r\n        teeth: number;\r\n        rotationAngle: number;\r\n        color: ColorHsb;\r\n        randomSeed: string;\r\n    }) => {\r\n    g.colorMode(`hsl`);\r\n\r\n    const { position: { x, y }, radiusInner, radiusOuter, radiusAxis, teeth, rotationAngle, color, randomSeed } = options;\r\n\r\n    const angleRandomKs = 16;\r\n    // const angleRandomKs = 8;\r\n    const { random: randomConstant } = createRandomGenerator(`${randomSeed}`);\r\n    const { random } = createRandomGenerator(`${randomSeed}${Math.round(rotationAngle * angleRandomKs)}`);\r\n    const randomSym = () => 1 - 2 * random();\r\n\r\n    // g.fill(color.h, color.s, color.b, color.a);\r\n    // g.stroke(0, 0, 0, 1);\r\n    // g.stroke(0, 0, 0, color.a);\r\n    // g.stroke(0, 0, 0, 0);\r\n    // g.circle(x, y, radiusOuter * 2);\r\n    // g.circle(x, y, radius * 2);\r\n\r\n    g.stroke(color.h, color.s, color.b, color.a);\r\n    g.noFill();\r\n\r\n    // g.circle(x, y, radiusOuter * 2);\r\n\r\n    const toothAngle = g.TWO_PI / teeth;\r\n    const radI = radiusInner;\r\n    const radO = radiusOuter;\r\n    let jitterSize = 2.5;\r\n    const angle0 = rotationAngle;\r\n    const angle1 = angle0 + Math.PI * 2 * randomConstant();\r\n\r\n    jitterSize = radiusOuter * 0.5;\r\n    for (let j = 0; j < 4; j++) {\r\n\r\n        g.noStroke();\r\n        g.fill(color.h, color.s, color.b * 0.25, 0.4);\r\n        // g.fill(color.h, color.s, color.b, 0.25);\r\n        // g.fill(0, 0, 0);\r\n        g.curveTightness(0.9);\r\n        g.beginShape();\r\n        for (let i = 0; i <= teeth; i++) {\r\n            // g.curveVertex(x + diaI * g.cos((i + 0) * toothAngle), y + diaI * g.sin((i + 0) * toothAngle));\r\n            if (i !== 0) {\r\n                g.curveVertex(x + (radI - jitterSize * random()) * g.cos((i + 0.2) * toothAngle + angle0), y + (radI - jitterSize * random()) * g.sin((i + 0.2) * toothAngle + angle0));\r\n            }\r\n\r\n            g.curveVertex(x + (radO - jitterSize * random()) * g.cos((i + 0.3) * toothAngle + angle0), y + (radO - jitterSize * random()) * g.sin((i + 0.3) * toothAngle + angle0));\r\n            g.curveVertex(x + (radO - jitterSize * random()) * g.cos((i + 0.7) * toothAngle + angle0), y + (radO - jitterSize * random()) * g.sin((i + 0.7) * toothAngle + angle0));\r\n            g.curveVertex(x + (radI - jitterSize * random()) * g.cos((i + 0.8) * toothAngle + angle0), y + (radI - jitterSize * random()) * g.sin((i + 0.8) * toothAngle + angle0));\r\n            // g.curveVertex(x + diaI * g.cos((i + 1) * toothAngle), y + diaI * g.sin((i + 1) * toothAngle));\r\n            // g.arc(x, y, diaI, diaI, (i + 0) * toothAngle, (i + 0.5) * toothAngle);\r\n            // g.arc(x, y, diaO, diaO, (i + 0.5) * toothAngle, (i + 1) * toothAngle);\r\n        }\r\n        g.endShape();\r\n    }\r\n\r\n    jitterSize = 2.5;\r\n    g.noFill();\r\n    g.stroke(color.h, color.s, color.b, color.a);\r\n\r\n    // Draw face\r\n    const drawFace = randomConstant() > 0.5;\r\n    const faceType = random() > 0.5 ? `happy` as const : `creepy` as const;\r\n    if (drawFace) {\r\n        const radSmile = 0.5 * radI;\r\n        for (let j = 0; j < 4; j++) {\r\n\r\n            // Smile\r\n            if (faceType === `creepy`) {\r\n                jitterSize = 12;\r\n            }\r\n            g.noFill();\r\n            g.curveTightness(0.9);\r\n            g.beginShape();\r\n            for (let i = 0; i <= teeth / 3; i++) {\r\n                g.curveVertex(x + radSmile * g.cos((i + 0.2) * toothAngle + angle1) + jitterSize * randomSym(), y + radSmile * g.sin((i + 0.2) * toothAngle + angle1) + jitterSize * randomSym());\r\n            }\r\n            g.endShape();\r\n\r\n            // jitterSize = 2.5;\r\n\r\n            // Left Eye\r\n            for (let e = 0; e <= 1; e++) {\r\n                const r = e === 0 ? 1.1 : 1.6;\r\n                const ex = radSmile * Math.cos(r * Math.PI + angle1);\r\n                const ey = radSmile * Math.sin(r * Math.PI + angle1);\r\n                g.fill(0, 0, 0);\r\n                g.beginShape();\r\n                for (let i = 0; i <= teeth + 2; i++) {\r\n                    g.curveVertex(ex + x + radiusAxis * g.cos((i + 0.3) * toothAngle + angle1) + jitterSize * randomSym(), ey + y + radiusAxis * g.sin((i + 0.3) * toothAngle + angle1) + jitterSize * randomSym());\r\n                }\r\n                g.endShape();\r\n            }\r\n        }\r\n    }\r\n\r\n    if (drawFace && faceType === `creepy`) {\r\n        jitterSize = 5;\r\n    }\r\n\r\n    // jitterSize = 2.5;\r\n    for (let j = 0; j < 4; j++) {\r\n\r\n        g.noFill();\r\n        // g.fill(0, 0, 0, 0.1);\r\n        // g.fill(color.h, color.s, color.b, 0.05);\r\n        g.curveTightness(0.9);\r\n        g.beginShape();\r\n        for (let i = 0; i <= teeth; i++) {\r\n            // g.curveVertex(x + diaI * g.cos((i + 0) * toothAngle), y + diaI * g.sin((i + 0) * toothAngle));\r\n            if (i !== 0) {\r\n                g.curveVertex(x + radI * g.cos((i + 0.2) * toothAngle + angle0) + jitterSize * randomSym(), y + radI * g.sin((i + 0.2) * toothAngle + angle0) + jitterSize * randomSym());\r\n            }\r\n\r\n            g.curveVertex(x + radO * g.cos((i + 0.3) * toothAngle + angle0) + jitterSize * randomSym(), y + radO * g.sin((i + 0.3) * toothAngle + angle0) + jitterSize * randomSym());\r\n            g.curveVertex(x + radO * g.cos((i + 0.7) * toothAngle + angle0) + jitterSize * randomSym(), y + radO * g.sin((i + 0.7) * toothAngle + angle0) + jitterSize * randomSym());\r\n            g.curveVertex(x + radI * g.cos((i + 0.8) * toothAngle + angle0) + jitterSize * randomSym(), y + radI * g.sin((i + 0.8) * toothAngle + angle0) + jitterSize * randomSym());\r\n            // g.curveVertex(x + diaI * g.cos((i + 1) * toothAngle), y + diaI * g.sin((i + 1) * toothAngle));\r\n            // g.arc(x, y, diaI, diaI, (i + 0) * toothAngle, (i + 0.5) * toothAngle);\r\n            // g.arc(x, y, diaO, diaO, (i + 0.5) * toothAngle, (i + 1) * toothAngle);\r\n        }\r\n        g.endShape();\r\n\r\n        // Inner circle\r\n        g.fill(0, 0, 0);\r\n        g.beginShape();\r\n        for (let i = 0; i <= teeth + 2; i++) {\r\n            g.curveVertex(x + radiusAxis * g.cos((i + 0.3) * toothAngle + angle0) + jitterSize * randomSym(), y + radiusAxis * g.sin((i + 0.3) * toothAngle + angle0) + jitterSize * randomSym());\r\n        }\r\n        g.endShape();\r\n    }\r\n\r\n    return {\r\n        faceType: drawFace ? faceType : null,\r\n    };\r\n};\r\n\r\nexport const art_gears: ArtWork = {\r\n    key: `art-gears`,\r\n    title: `Gears`,\r\n    description: `Are the gears of conflict twisting our perceptions of others? (Press image to toggle sound)`,\r\n    artist: `Rick Love`,\r\n    getTokenDescription: (tokenId: string) => {\r\n        return null;\r\n    },\r\n    renderArt: (hostElement: HTMLElement, hash = `This is my hash!`) => {\r\n        (async () => await import(`p5/lib/addons/p5.sound`))();\r\n\r\n        const { random: randomMain } = createRandomGenerator(hash);\r\n\r\n        let tick = 0;\r\n\r\n        // const sat = 65 - 10 * Math.random();\r\n        const sat = 100;\r\n        const brightness = 60 - 20 * Math.random();\r\n\r\n        // const canvasSize = 300; const speed = 1 / (200 - 100 * randomMain());\r\n        const canvasSize = 600; const speed = 1 / (100 - 70 * randomMain());\r\n\r\n\r\n        const halfSize = canvasSize * 0.5;\r\n        const minGearRadius = canvasSize / 16;\r\n        const maxGearRadius = canvasSize / 3;\r\n        const minGearCount = 3;\r\n        const maxGearCount = 8;\r\n        const gearCount = Math.floor(minGearCount + (maxGearCount - minGearCount) * randomMain());\r\n\r\n        let lastGear = {\r\n            position: { x: canvasSize * randomMain(), y: canvasSize * randomMain() },\r\n            radius: minGearRadius,\r\n            // position: { x: canvasSize * randomMain(), y: canvasSize * randomMain() },\r\n            // size: minGearSize + (maxGearSize - minGearSize) * randomMain(),\r\n            randomSeed: `${randomMain()}`,\r\n            color: { h: 360 * randomMain(), s: 50, b: 50, a: 0.5 },\r\n        };\r\n        const gears = [...new Array(gearCount)].map(() => {\r\n\r\n            const targetRadius = minGearRadius + (maxGearRadius - minGearRadius) * randomMain();\r\n            const targetDistance = lastGear.radius + targetRadius;\r\n            const lastPos = lastGear.position;\r\n\r\n            // Try to bring back to center\r\n            const angleQuandrant = (lastPos.x > halfSize && lastPos.y > halfSize) ? (Math.PI * 1)\r\n                : (lastPos.x < halfSize && lastPos.y > halfSize) ? (Math.PI * 1.5)\r\n                    : (lastPos.x > halfSize && lastPos.y < halfSize) ? (Math.PI * 0.5)\r\n                        : 0;\r\n            // console.log(`angleQuandrant`, { angleQuandrant, lastPos, halfSize });\r\n            const targetAngle = Math.PI / 2 * randomMain() + angleQuandrant;\r\n\r\n            const posRaw = {\r\n                x: lastPos.x + targetDistance * Math.cos(targetAngle),\r\n                y: lastPos.y + targetDistance * Math.sin(targetAngle),\r\n            };\r\n            const pos = posRaw;\r\n            // const pos = {\r\n            //     x: 0.8 * posRaw.x + 0.2 * halfSize,\r\n            //     y: 0.8 * posRaw.y + 0.2 * halfSize,\r\n            // };\r\n\r\n            const xDelta = pos.x - lastPos.x;\r\n            const yDelta = pos.y - lastPos.y;\r\n            const actualRadius = Math.sqrt(xDelta * xDelta + yDelta * yDelta) - lastGear.radius;\r\n\r\n            // eslint-disable-next-line no-return-assign\r\n            return lastGear = {\r\n                position: pos,\r\n                radius: actualRadius,\r\n                randomSeed: `${randomMain()}`,\r\n                color: { h: 360 * randomMain(), s: sat, b: brightness, a: 0.5 },\r\n            };\r\n        });\r\n\r\n        let noise = null as null | p5.Noise;\r\n        let noiseDebounceTime = Date.now();\r\n\r\n        const toggleNoise = () => {\r\n            if (Date.now() < noiseDebounceTime + 500) { return; }\r\n            noiseDebounceTime = Date.now();\r\n\r\n            if (noise) {\r\n                noise.disconnect();\r\n                noise = null;\r\n                return;\r\n            }\r\n            noise = new p5.Noise(`white`);\r\n            noise.amp(0);\r\n            noise.start();\r\n        };\r\n\r\n        return new p5((s: p5) => {\r\n            s.setup = () => {\r\n                s.createCanvas(canvasSize, canvasSize);\r\n            };\r\n            s.mousePressed = () => { if (s.mouseX < 0 || s.mouseX > canvasSize || s.mouseY < 0 || s.mouseY > canvasSize) { return; } toggleNoise(); };\r\n            s.touchStarted = () => { const t = s.touches[0] as Vector2; if (t.x < 0 || t.x > canvasSize || t.y < 0 || t.y > canvasSize) { return; } toggleNoise(); };\r\n            // s.keyPressed = () => { toggleNoise(); };\r\n            s.draw = () => {\r\n                s.background(0);\r\n                // noise?.amp(0);\r\n\r\n                // s.background(10, 10, 10);\r\n                const g = s;\r\n                // const g = s.createGraphics(canvasSize * 2, canvasSize * 2);\r\n                // g.translate(canvasSize, canvasSize);\r\n                // g.scale(0.25);\r\n\r\n                let faceCount = 0;\r\n                let faceCreepyCount = 0;\r\n                for (const [i, gear] of gears.entries()) {\r\n                    const direction = i % 2 === 0 ? 1 : -1;\r\n                    const teethDepth = 5;\r\n                    const teeth = Math.ceil(gear.radius * Math.PI * 2 / (4 * teethDepth));\r\n                    const teethPassed = tick * speed * Math.pow(1.25, i + 1);\r\n                    const rotationAngle = s.TWO_PI * teethPassed / teeth;\r\n\r\n                    const result = drawGear(g, {\r\n                        position: gear.position,\r\n                        // radiusInner: gear.size * 0.93,\r\n                        // radiusOuter: gear.size * 1.07,\r\n                        radiusInner: gear.radius - teethDepth,\r\n                        radiusOuter: gear.radius + teethDepth,\r\n                        // radiusAxis: gear.radius * 0.15,\r\n                        radiusAxis: gear.radius * 0.1,\r\n                        // radiusAxis: teethDepth,\r\n                        teeth,\r\n                        color: gear.color,\r\n                        rotationAngle: direction * rotationAngle,\r\n                        randomSeed: gear.randomSeed,\r\n                    });\r\n\r\n                    if (result.faceType) {\r\n                        faceCount++;\r\n                    }\r\n                    if (result.faceType === `creepy`) {\r\n                        // Not actual position\r\n                        //  const distanceToCenterX = Math.abs(gear.position.x - halfSize);\r\n                        //  const distanceToCenterY = Math.abs(gear.position.y - halfSize);\r\n                        //  const distRatioToEdge = (halfSize - Math.sqrt(distanceToCenterX * distanceToCenterX + distanceToCenterY * distanceToCenterY)) / halfSize;\r\n                        // faceCreepyCount += Math.max(0, distRatioToEdge);\r\n                        faceCreepyCount++;\r\n                    }\r\n\r\n                    // Rotate slightly\r\n                    g.translate(gear.position.x, gear.position.y);\r\n                    g.rotate(s.TWO_PI * teethPassed / (teeth * 4));\r\n                    g.translate(-gear.position.x, -gear.position.y);\r\n                }\r\n                // s.image(g, 0, 0, canvasSize, canvasSize);\r\n\r\n                // console.log(`noiseLevel`, { level: faceCreepyCount / faceCount });\r\n                noise?.amp(faceCount > 0 ? faceCreepyCount / faceCount : 0);\r\n\r\n                // for (let i = 0; i < 10; i++) {\r\n                //     const color = s.color((cr * i) % 255, (cg * i) % 255, (cb * i) % 255, ca);\r\n                //     s.noFill();\r\n                //     s.stroke(color);\r\n                //     for (let j = 0; j < 36; j++) {\r\n                //         s.circle(200 - a / 2 + j % a, 200 - b / 2 + j % b, 270 - (i * 5) % c);\r\n                //     }\r\n                //     s.translate(200, 200);\r\n                //     // s.rotate((a + b + c + tick * 0.001) % 2);\r\n                //     s.rotate((a + b + c + tick * 0.001));\r\n                //     s.translate(-200, -200);\r\n                //     tick++;\r\n                // }\r\n\r\n                tick++;\r\n            };\r\n        }, hostElement);\r\n    },\r\n};\r\n","/* eslint-disable new-cap */\r\n/* eslint-disable no-new */\r\nimport p5 from 'p5';\r\nimport { createRandomGenerator } from '../../rando';\r\nimport { ArtWork } from '../../artwork-type';\r\n\r\nconst path = `/content/art/artwork/gpu-01/gpu-01`;\r\n\r\nexport const art_gpu_01: ArtWork = {\r\n    key: `art-gpu-01`,\r\n    title: `Gpu Example 01`,\r\n    description: `2015 - http://patriciogonzalezvivo.com\r\n\r\nThis is included as a great example of a gpu shader.\r\n    \r\nFrom: https://thebookofshaders.com/13/`,\r\n    artist: `@patriciogv`,\r\n    getTokenDescription: (tokenId: string) => {\r\n        return null;\r\n    },\r\n    // openSea: {\r\n    //     tokenAddress: `0x495f947276749ce646f68ac8c248420045cb7b5e`,\r\n    //     tokenId: `91242641486941084018191434774360347389366801368112854311223385694785434025985`,\r\n    // },\r\n    renderArt: (hostElement: HTMLElement, hash = `This is my hash!`) => {\r\n        // const { a, b, c } = { a: 57, b: 23, c: 15 };\r\n\r\n        const { random } = createRandomGenerator(hash);\r\n\r\n\r\n        // const { a, b, c } = { a: 1 + Math.floor(57 * random()), b: 1 + Math.floor(213 * random()), c: 1 + Math.floor(115 * random()) };\r\n        // const { cr, cg, cb, ca } = { cr: Math.floor(25 + 230 * random()), cg: Math.floor(25 + 230 * random()), cb: Math.floor(25 + 230 * random()), ca: Math.floor(25 + 25 * random()) };\r\n\r\n        const size = 600;\r\n        // const h = 200;\r\n        // const scale = size / 400;\r\n        // const speed = 0.5;\r\n\r\n        // let tick = 0;\r\n\r\n        let shaderInstance: null | p5.Shader = null;\r\n\r\n        return new p5((s: p5) => {\r\n            s.preload = () => {\r\n                shaderInstance = s.loadShader(`${path}.vert`, `${path}.frag`);\r\n            };\r\n            s.setup = () => {\r\n                s.createCanvas(size, size, s.WEBGL);\r\n                s.noStroke();\r\n            };\r\n            s.draw = () => {\r\n                if (!shaderInstance) { return; }\r\n\r\n                // send resolution of sketch into shader\r\n                shaderInstance.setUniform(`u_resolution`, [size, size]);\r\n                shaderInstance.setUniform(`u_time`, s.millis() / 1000);\r\n                shaderInstance.setUniform(`u_mouse`, [s.mouseX, s.map(s.mouseY, 0, size, size, 0)]);\r\n\r\n                // shader() sets the active shader with our shader\r\n                s.shader(shaderInstance);\r\n\r\n                // rect gives us some geometry on the screen\r\n                s.rect(0, 0, size, size);\r\n            };\r\n        }, hostElement);\r\n    },\r\n};\r\n","/* eslint-disable new-cap */\r\n/* eslint-disable no-new */\r\nimport p5 from 'p5';\r\nimport { createRandomGenerator } from '../../rando';\r\nimport { ArtWork } from '../../artwork-type';\r\n\r\nconst path = `/content/art/artwork/flying-colors/flying-colors`;\r\n\r\nexport const art_flyingColors: ArtWork = {\r\n    key: `art-flying-colors`,\r\n    title: `Flying Colors`,\r\n    description: `Mmmm, bright`,\r\n    artist: `Rick Love`,\r\n    getTokenDescription: (tokenId: string) => {\r\n        return null;\r\n    },\r\n    // openSea: {\r\n    //     tokenAddress: `0x495f947276749ce646f68ac8c248420045cb7b5e`,\r\n    //     tokenId: `91242641486941084018191434774360347389366801368112854311223385694785434025985`,\r\n    // },\r\n    renderArt: (hostElement: HTMLElement, hash = `This is my hash!`) => {\r\n        // const { a, b, c } = { a: 57, b: 23, c: 15 };\r\n\r\n        const { random } = createRandomGenerator(hash);\r\n        const seed = random();\r\n\r\n\r\n        // const { a, b, c } = { a: 1 + Math.floor(57 * random()), b: 1 + Math.floor(213 * random()), c: 1 + Math.floor(115 * random()) };\r\n        // const { cr, cg, cb, ca } = { cr: Math.floor(25 + 230 * random()), cg: Math.floor(25 + 230 * random()), cb: Math.floor(25 + 230 * random()), ca: Math.floor(25 + 25 * random()) };\r\n\r\n        const size = 600;\r\n        // const h = 200;\r\n        // const scale = size / 400;\r\n        // const speed = 0.5;\r\n\r\n        // let tick = 0;\r\n        let lastTimeMs = 0;\r\n        const gameTimeMs = 0;\r\n        const lastTimeModifier = 1;\r\n\r\n        let shaderInstance: null | p5.Shader = null;\r\n\r\n        return new p5((s: p5) => {\r\n            s.preload = () => {\r\n                shaderInstance = s.loadShader(`${path}.vert`, `${path}.frag`);\r\n            };\r\n            s.setup = () => {\r\n                s.createCanvas(size, size, s.WEBGL);\r\n                s.noStroke();\r\n            };\r\n            s.draw = () => {\r\n                if (!shaderInstance) { return; }\r\n\r\n                // send resolution of sketch into shader\r\n                const deltaTimeMs = lastTimeMs - s.millis();\r\n                lastTimeMs = s.millis();\r\n\r\n                // const timeModifier = 0.7 * (0.5 + 0.7 * Math.cos(s.millis() / (5 * 1000)));\r\n                // const timeModifier01 = lastTimeModifier + 0.25 * (0.5 - Math.random());\r\n                // const timeModifier02 = Math.min(1, Math.max(0, timeModifier01));\r\n                // const dampen = Math.pow(Math.abs(timeModifier02 - 0.5) * 2, 5);\r\n                // const timeModifier = dampen * 0.5 + (1 - dampen) * timeModifier02;\r\n\r\n                // const timeModifier01 = lastTimeModifier + 0.25 * (0.5 - Math.random());\r\n                // const timeModifier02 = Math.min(1, Math.max(0, timeModifier01));\r\n\r\n                // lastTimeModifier = timeModifier;\r\n                // gameTimeMs += deltaTimeMs * timeModifier;\r\n\r\n\r\n                // console.log(`draw`, { lastTimeModifier, seed, mouse: s.mouseX, gameTimeMs });\r\n\r\n                shaderInstance.setUniform(`u_resolution`, [size, size]);\r\n                shaderInstance.setUniform(`u_time`, lastTimeMs / 1000);\r\n                shaderInstance.setUniform(`u_mouse`, [s.mouseX, s.map(s.mouseY, 0, size, size, 0)]);\r\n                shaderInstance.setUniform(`u_seed`, seed);\r\n\r\n                // shader() sets the active shader with our shader\r\n                s.shader(shaderInstance);\r\n\r\n                // rect gives us some geometry on the screen\r\n                s.rect(0, 0, size, size);\r\n            };\r\n        }, hostElement);\r\n    },\r\n};\r\n","/* eslint-disable unicorn/filename-case */\r\n\r\n// WebGl Context ---\r\nexport function getWebGLSystem(canvas: HTMLCanvasElement): null | {\r\n    gl: WebGL2RenderingContext | WebGLRenderingContext;\r\n    ext: {\r\n        formatRGBA: SupportedFormat;\r\n        formatRG: SupportedFormat;\r\n        formatR: SupportedFormat;\r\n        halfFloatTexType: number;\r\n        supportLinearFiltering: null | OES_texture_float_linear | OES_texture_half_float_linear;\r\n    };\r\n} {\r\n    const params = { alpha: true, depth: false, stencil: false, antialias: false, preserveDrawingBuffer: false };\r\n\r\n    const gl2 = canvas.getContext(`webgl2`, params) as null | WebGL2RenderingContext;\r\n    if (gl2) {\r\n        const gl = gl2;\r\n        gl.getExtension(`EXT_color_buffer_float`);\r\n        const supportLinearFiltering = gl.getExtension(`OES_texture_float_linear`);\r\n        const halfFloatTexType = gl.HALF_FLOAT;\r\n        gl.clearColor(0, 0, 0, 1);\r\n\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        const formatRGBA = getSupportedFormat(gl, gl.RGBA16F, gl.RGBA, halfFloatTexType);\r\n        const formatRG = getSupportedFormat(gl, gl.RG16F, gl.RG, halfFloatTexType);\r\n        const formatR = getSupportedFormat(gl, gl.R16F, gl.RED, halfFloatTexType);\r\n\r\n        return {\r\n            gl,\r\n            ext: {\r\n                formatRGBA,\r\n                formatRG,\r\n                formatR,\r\n                halfFloatTexType,\r\n                supportLinearFiltering,\r\n            },\r\n        };\r\n    }\r\n\r\n    const gl1 = (canvas.getContext(`webgl`, params) || canvas.getContext(`experimental-webgl`, params)) as null | WebGLRenderingContext;\r\n    if (!gl1) { return null; }\r\n\r\n    const gl = gl1;\r\n\r\n    const halfFloat = gl.getExtension(`OES_texture_half_float`) as OES_texture_half_float;\r\n    const supportLinearFiltering = gl.getExtension(`OES_texture_half_float_linear`);\r\n\r\n    gl.clearColor(0, 0, 0, 1);\r\n\r\n    const halfFloatTexType = halfFloat.HALF_FLOAT_OES;\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    const formatRGBA = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\r\n    const formatRG = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\r\n    const formatR = getSupportedFormat(gl, gl.RGBA, gl.RGBA, halfFloatTexType);\r\n\r\n    return {\r\n        gl,\r\n        ext: {\r\n            formatRGBA,\r\n            formatRG,\r\n            formatR,\r\n            halfFloatTexType,\r\n            supportLinearFiltering,\r\n        },\r\n    };\r\n}\r\nexport type WebGlSystem = NonNullable<ReturnType<typeof getWebGLSystem>>;\r\n\r\ntype SupportedFormat = {\r\n    internalFormat: number;\r\n    format: number;\r\n};\r\nfunction getSupportedFormat(gl: WebGL2RenderingContext | WebGLRenderingContext, internalFormat: number, format: number, type: number): SupportedFormat {\r\n    if (!supportRenderTextureFormat(gl, internalFormat, format, type)) {\r\n        const gl2 = gl as WebGL2RenderingContext;\r\n        switch (internalFormat) {\r\n            case gl2.R16F:\r\n                return getSupportedFormat(gl, gl2.RG16F, gl2.RG, type);\r\n            case gl2.RG16F:\r\n                return getSupportedFormat(gl, gl2.RGBA16F, gl2.RGBA, type);\r\n            default:\r\n                throw new Error(`Unknown Render Format`);\r\n            // return null;\r\n        }\r\n    }\r\n\r\n    return {\r\n        internalFormat,\r\n        format,\r\n    };\r\n}\r\n\r\nfunction supportRenderTextureFormat(gl: WebGL2RenderingContext | WebGLRenderingContext, internalFormat: number, format: number, type: number) {\r\n    const texture = gl.createTexture();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 4, 4, 0, format, type, null);\r\n\r\n    const fbo = gl.createFramebuffer();\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n\r\n    const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\r\n    return status === gl.FRAMEBUFFER_COMPLETE;\r\n}\r\n","/* eslint-disable no-bitwise */\r\nexport function isMobile() {\r\n    return /mobi|android/i.test(navigator.userAgent);\r\n}\r\nexport function clamp01(input: number) {\r\n    return Math.min(Math.max(input, 0), 1);\r\n}\r\n\r\nexport function correctDeltaX(delta: number, canvas: { width: number, height: number }) {\r\n    const aspectRatio = canvas.width / canvas.height;\r\n    if (aspectRatio < 1) delta *= aspectRatio;\r\n    return delta;\r\n}\r\n\r\nexport function correctDeltaY(delta: number, canvas: { width: number, height: number }) {\r\n    const aspectRatio = canvas.width / canvas.height;\r\n    if (aspectRatio > 1) delta /= aspectRatio;\r\n    return delta;\r\n}\r\n\r\nexport function generateColor() {\r\n    const c = HSVtoRGB(Math.random(), 1, 1);\r\n    c.r *= 0.15;\r\n    c.g *= 0.15;\r\n    c.b *= 0.15;\r\n    return c;\r\n}\r\n\r\nexport function HSVtoRGB(h: number, s: number, v: number) {\r\n    const i = Math.floor(h * 6);\r\n    const f = h * 6 - i;\r\n    const p = v * (1 - s);\r\n    const q = v * (1 - f * s);\r\n    const t = v * (1 - (1 - f) * s);\r\n\r\n    switch (i % 6) {\r\n        case 0: return { r: v, g: t, b: p };\r\n        case 1: return { r: q, g: v, b: p };\r\n        case 2: return { r: p, g: v, b: t };\r\n        case 3: return { r: p, g: q, b: v };\r\n        case 4: return { r: t, g: p, b: v };\r\n        case 5: return { r: v, g: p, b: q };\r\n        default: return { r: v, g: p, b: q };\r\n    }\r\n}\r\n\r\nexport function normalizeColor(input: { r: number, g: number, b: number }) {\r\n    const output = {\r\n        r: input.r / 255,\r\n        g: input.g / 255,\r\n        b: input.b / 255,\r\n    };\r\n    return output;\r\n}\r\n\r\nexport function wrap(value: number, min: number, max: number) {\r\n    const range = max - min;\r\n    if (range === 0) return min;\r\n    return (value - min) % range + min;\r\n}\r\n\r\n\r\nexport function getTextureScale(texture: { width: number, height: number }, width: number, height: number) {\r\n    return {\r\n        x: width / texture.width,\r\n        y: height / texture.height,\r\n    };\r\n}\r\n\r\nexport function scaleByPixelRatio(input: number) {\r\n    const pixelRatio = window.devicePixelRatio || 1;\r\n    return Math.floor(input * pixelRatio);\r\n}\r\n\r\nexport function hashCode(s: string) {\r\n    if (!s) return 0;\r\n\r\n    let hash = 0;\r\n    for (let i = 0; i < s.length; i++) {\r\n        hash = (hash << 5) - hash + s.charCodeAt(i);\r\n        hash |= 0; // Convert to 32bit integer\r\n    }\r\n    return hash;\r\n};\r\n\r\nexport const randomIntRange = (minInclusive: number, maxInclusive: number) => {\r\n    return (minInclusive + (maxInclusive - minInclusive + 1) * Math.random()) | 0;\r\n};\r\n\r\nexport type ColorRgb = { r: number, g: number, b: number };\r\n","import { FrameBufferFactory, FrameBufferObject } from './frame-buffer';\r\nimport { clamp01 } from '../utils';\r\nimport { WebGlSystem } from './webgl';\r\n\r\nexport const createTextureUtils = ({ gl, ext }: WebGlSystem, { createFrameBufferObject }: FrameBufferFactory) => {\r\n\r\n    function captureScreenshot(render: (target: FrameBufferObject) => void, { resolution }: { resolution: number }) {\r\n        const res = getResolution(resolution);\r\n        const target = createFrameBufferObject(res.width, res.height, ext.formatRGBA.internalFormat, ext.formatRGBA.format, ext.halfFloatTexType, gl.NEAREST);\r\n        render(target);\r\n\r\n        const texture32 = framebufferToTexture(target);\r\n        const texture = normalizeTexture(texture32, target.width, target.height);\r\n\r\n        const captureCanvas = textureToCanvas(texture, target.width, target.height);\r\n        const datauri = captureCanvas.toDataURL();\r\n        downloadURI(`fluid.png`, datauri);\r\n        URL.revokeObjectURL(datauri);\r\n    }\r\n\r\n    function downloadURI(filename: string, uri: string) {\r\n        const link = document.createElement(`a`);\r\n        link.download = filename;\r\n        link.href = uri;\r\n        document.body.append(link);\r\n        link.click();\r\n        link.remove();\r\n    }\r\n\r\n    function getResolution(resolution: number) {\r\n        let aspectRatio = gl.drawingBufferWidth / gl.drawingBufferHeight;\r\n        if (aspectRatio < 1)\r\n            aspectRatio = 1 / aspectRatio;\r\n\r\n        const min = Math.round(resolution);\r\n        const max = Math.round(resolution * aspectRatio);\r\n\r\n        if (gl.drawingBufferWidth > gl.drawingBufferHeight)\r\n            return { width: max, height: min };\r\n        return { width: min, height: max };\r\n    }\r\n\r\n    function framebufferToTexture(target: FrameBufferObject) {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, target.frameBuffer);\r\n        const length = target.width * target.height * 4;\r\n        const texture = new Float32Array(length);\r\n        gl.readPixels(0, 0, target.width, target.height, gl.RGBA, gl.FLOAT, texture);\r\n        return texture;\r\n    }\r\n\r\n    function normalizeTexture(texture: Float32Array, width: number, height: number) {\r\n        const result = new Uint8Array(texture.length);\r\n        let id = 0;\r\n        for (let i = height - 1; i >= 0; i--) {\r\n            for (let j = 0; j < width; j++) {\r\n                const nid = i * width * 4 + j * 4;\r\n                result[nid + 0] = clamp01(texture[id + 0]) * 255;\r\n                result[nid + 1] = clamp01(texture[id + 1]) * 255;\r\n                result[nid + 2] = clamp01(texture[id + 2]) * 255;\r\n                result[nid + 3] = clamp01(texture[id + 3]) * 255;\r\n                id += 4;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function textureToCanvas(texture: Uint8Array, width: number, height: number) {\r\n        const captureCanvas = document.createElement(`canvas`);\r\n        const ctx = captureCanvas.getContext(`2d`);\r\n        if (!ctx) { throw new Error(`Could not get canvas 2d context`); }\r\n\r\n        captureCanvas.width = width;\r\n        captureCanvas.height = height;\r\n\r\n        const imageData = ctx.createImageData(width, height);\r\n        imageData.data.set(texture);\r\n        ctx.putImageData(imageData, 0, 0);\r\n\r\n        return captureCanvas;\r\n    }\r\n\r\n    return {\r\n        captureScreenshot,\r\n        getResolution,\r\n        // framebufferToTexture,\r\n        // normalizeTexture,\r\n        // textureToCanvas,\r\n    };\r\n};\r\n","/* eslint-disable lines-between-class-members */\r\n/* eslint-disable max-classes-per-file */\r\nimport { hashCode } from '../utils';\r\nimport { WebGlSystem } from './webgl';\r\n\r\nexport const createShaderFactory = ({ gl, ext }: WebGlSystem) => {\r\n    function compileShader(type: number, source: string, keywords?: null | string[]) {\r\n        source = addKeywords(source, keywords);\r\n\r\n        const shader = gl.createShader(type);\r\n        if (!shader) { throw new Error(`shader could not be created`); }\r\n\r\n        gl.shaderSource(shader, source);\r\n        gl.compileShader(shader);\r\n\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n            console.trace(gl.getShaderInfoLog(shader));\r\n        }\r\n\r\n        return shader;\r\n    };\r\n\r\n    function addKeywords(source: string, keywords?: null | string[]) {\r\n        if (!keywords) return source;\r\n\r\n        let keywordsString = ``;\r\n        keywords.forEach(keyword => {\r\n            keywordsString += `#define ${keyword}\\n`;\r\n        });\r\n        return keywordsString + source;\r\n    }\r\n\r\n    function createProgram(vertexShader: WebGLShader, fragmentShader: WebGLShader) {\r\n        const program = gl.createProgram();\r\n        if (!program) { throw new Error(`program could not be created`); }\r\n\r\n        gl.attachShader(program, vertexShader);\r\n        gl.attachShader(program, fragmentShader);\r\n        gl.linkProgram(program);\r\n\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS))\r\n            console.trace(gl.getProgramInfoLog(program));\r\n\r\n        return program;\r\n    }\r\n\r\n    function getUniforms(program: WebGLProgram): { [name: string]: WebGLUniformLocation } {\r\n        const uniforms = {} as { [name: string]: WebGLUniformLocation };\r\n        const uniformCount = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\r\n        for (let i = 0; i < uniformCount; i++) {\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            const uniformName = gl.getActiveUniform(program, i)?.name!;\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            uniforms[uniformName] = gl.getUniformLocation(program, uniformName)!;\r\n        }\r\n        return uniforms;\r\n    }\r\n\r\n    return {\r\n        gl,\r\n        ext,\r\n        compileShader,\r\n        createProgram,\r\n        getUniforms,\r\n    };\r\n};\r\n\r\nexport type ShaderFactory = ReturnType<typeof createShaderFactory>;\r\nexport type ShaderUniforms = ReturnType<ShaderFactory['getUniforms']>;\r\n\r\nexport class ShaderMaterial {\r\n    vertexShader: WebGLShader;\r\n    fragmentShaderSource: string;\r\n    programs: WebGLProgram[];\r\n    activeProgram: null | WebGLProgram;\r\n    uniforms: ShaderUniforms;\r\n\r\n    constructor(private factory: ShaderFactory, vertexShader: WebGLShader, fragmentShaderSource: string) {\r\n        this.vertexShader = vertexShader;\r\n        this.fragmentShaderSource = fragmentShaderSource;\r\n        this.programs = [];\r\n        this.activeProgram = null;\r\n        this.uniforms = {};\r\n    }\r\n\r\n    setKeywords(keywords: string[]) {\r\n        let hash = 0;\r\n        for (let i = 0; i < keywords.length; i++)\r\n            hash += hashCode(keywords[i]);\r\n\r\n        let program = this.programs[hash];\r\n        if (program == null) {\r\n            const fragmentShader = this.factory.compileShader(this.factory.gl.FRAGMENT_SHADER, this.fragmentShaderSource, keywords);\r\n            program = this.factory.createProgram(this.vertexShader, fragmentShader);\r\n            this.programs[hash] = program;\r\n        }\r\n\r\n        if (program === this.activeProgram) return;\r\n\r\n        this.uniforms = this.factory.getUniforms(program);\r\n        this.activeProgram = program;\r\n    }\r\n\r\n    bind() {\r\n        this.factory.gl.useProgram(this.activeProgram);\r\n    }\r\n}\r\n\r\nexport class ShaderProgram {\r\n    uniforms: ShaderUniforms;\r\n    program: WebGLProgram;\r\n\r\n    constructor(private factory: ShaderFactory, vertexShader: WebGLShader, fragmentShader: WebGLShader) {\r\n        this.uniforms = {};\r\n        this.program = this.factory.createProgram(vertexShader, fragmentShader);\r\n        this.uniforms = this.factory.getUniforms(this.program);\r\n    }\r\n\r\n    bind() {\r\n        this.factory.gl.useProgram(this.program);\r\n    }\r\n}\r\n","/* eslint-disable no-bitwise */\r\n/* eslint-disable lines-between-class-members */\r\n/* eslint-disable max-classes-per-file */\r\n\r\nimport { createConfig } from './config';\r\nimport { createFrameBufferFactory, createFrameBufferUtils, DoubleFrameBufferObject, FrameBufferObject } from './systems/frame-buffer';\r\nimport { getWebGLSystem } from './systems/webgl';\r\nimport { startGUI } from './gui';\r\nimport { ColorRgb, correctDeltaX, correctDeltaY, generateColor, getTextureScale, isMobile, normalizeColor, randomIntRange, scaleByPixelRatio, wrap } from './utils';\r\nimport { createTextureUtils } from './systems/texture';\r\nimport { createShaderFactory, ShaderMaterial, ShaderProgram } from './systems/shader';\r\nimport { createShaders } from './shaders';\r\n// import { setupAppPopup } from './setup-app-popup';\r\n\r\n\r\nexport const runFluidSimulator = (host: HTMLDivElement, contentPath: string, style: { width: string, height: string }): null | { close: () => void } => {\r\n\r\n    // setupAppPopup();\r\n\r\n    // Simulation section\r\n\r\n    // Setup ---\r\n    // const canvas = document.querySelectorAll(`canvas`)[0] as HTMLCanvasElement;\r\n    const canvas = document.createElement(`canvas`);\r\n    canvas.style.width = style.width;\r\n    canvas.style.height = style.height;\r\n    host.append(canvas);\r\n\r\n    resizeCanvas();\r\n\r\n\r\n    class PointerEntity {\r\n        id = -1;\r\n        texcoordX = 0;\r\n        texcoordY = 0;\r\n        prevTexcoordX = 0;\r\n        prevTexcoordY = 0;\r\n        deltaX = 0;\r\n        deltaY = 0;\r\n        down = false;\r\n        moved = false;\r\n        color = { r: 30, g: 0, b: 300 };\r\n        p = { r: 0, g: 0, b: 0 };\r\n    }\r\n\r\n    const pointers = [] as PointerEntity[];\r\n    const splatStack = [] as number[];\r\n    pointers.push(new PointerEntity());\r\n\r\n    console.log(`runFluidSimulator - 01 getWebGLSystem`, {});\r\n    const webGlSystem = getWebGLSystem(canvas);\r\n    if (!webGlSystem) { return null; }\r\n\r\n    const { gl, ext } = webGlSystem;\r\n    console.log(`runFluidSimulator - 01B getWebGLSystem`, { gl, ext });\r\n\r\n    const frameBufferFactory = createFrameBufferFactory(webGlSystem);\r\n    const {\r\n        createFrameBufferObject,\r\n        createDoubleFrameBufferObject,\r\n    } = frameBufferFactory;\r\n\r\n\r\n    const {\r\n        captureScreenshot,\r\n        getResolution,\r\n    } = createTextureUtils(webGlSystem, frameBufferFactory);\r\n\r\n    const shaderFactory = createShaderFactory(webGlSystem);\r\n\r\n    const config = createConfig();\r\n    if (isMobile()) {\r\n        config.DYE_RESOLUTION = 512;\r\n    }\r\n    if (!ext.supportLinearFiltering) {\r\n        config.DYE_RESOLUTION = 512;\r\n        config.SHADING = false;\r\n        config.BLOOM = false;\r\n        config.SUNRAYS = false;\r\n    }\r\n\r\n    console.log(`runFluidSimulator - 02 startGUI`, {});\r\n\r\n    startGUI({\r\n        config,\r\n        splatStack,\r\n        initFramebuffers,\r\n        updateKeywords,\r\n        captureScreenshot: () => captureScreenshot(render, { resolution: config.CAPTURE_RESOLUTION }),\r\n    });\r\n\r\n    console.log(`runFluidSimulator - 03 ditheringTexture`, { url: `${contentPath}/LDR_LLL1_0.png` });\r\n    const ditheringTexture = createTextureAsync(`${contentPath}/LDR_LLL1_0.png`);\r\n\r\n    console.log(`runFluidSimulator - 04 createShaders`, {});\r\n    const shaders = createShaders(shaderFactory);\r\n    const blurProgram = new ShaderProgram(shaderFactory, shaders.blurVertexShader, shaders.blurShader);\r\n    const copyProgram = new ShaderProgram(shaderFactory, shaders.baseVertexShader, shaders.copyShader);\r\n    const clearProgram = new ShaderProgram(shaderFactory, shaders.baseVertexShader, shaders.clearShader);\r\n    const colorProgram = new ShaderProgram(shaderFactory, shaders.baseVertexShader, shaders.colorShader);\r\n    const checkerboardProgram = new ShaderProgram(shaderFactory, shaders.baseVertexShader, shaders.checkerboardShader);\r\n    const bloomPrefilterProgram = new ShaderProgram(shaderFactory, shaders.baseVertexShader, shaders.bloomPrefilterShader);\r\n    const bloomBlurProgram = new ShaderProgram(shaderFactory, shaders.baseVertexShader, shaders.bloomBlurShader);\r\n    const bloomFinalProgram = new ShaderProgram(shaderFactory, shaders.baseVertexShader, shaders.bloomFinalShader);\r\n    const sunraysMaskProgram = new ShaderProgram(shaderFactory, shaders.baseVertexShader, shaders.sunraysMaskShader);\r\n    const sunraysProgram = new ShaderProgram(shaderFactory, shaders.baseVertexShader, shaders.sunraysShader);\r\n    const splatProgram = new ShaderProgram(shaderFactory, shaders.baseVertexShader, shaders.splatShader);\r\n    const advectionProgram = new ShaderProgram(shaderFactory, shaders.baseVertexShader, shaders.advectionShader);\r\n    const divergenceProgram = new ShaderProgram(shaderFactory, shaders.baseVertexShader, shaders.divergenceShader);\r\n    const curlProgram = new ShaderProgram(shaderFactory, shaders.baseVertexShader, shaders.curlShader);\r\n    const vorticityProgram = new ShaderProgram(shaderFactory, shaders.baseVertexShader, shaders.vorticityShader);\r\n    const pressureProgram = new ShaderProgram(shaderFactory, shaders.baseVertexShader, shaders.pressureShader);\r\n    const gradienSubtractProgram = new ShaderProgram(shaderFactory, shaders.baseVertexShader, shaders.gradientSubtractShader);\r\n    const displayMaterial = new ShaderMaterial(shaderFactory, shaders.baseVertexShader, shaders.displayShaderSource);\r\n\r\n    const {\r\n        blit,\r\n    } = createFrameBufferUtils(webGlSystem);\r\n\r\n    let dye: DoubleFrameBufferObject;\r\n    let velocity: DoubleFrameBufferObject;\r\n    let divergence: FrameBufferObject;\r\n    let curl: FrameBufferObject;\r\n    let pressure: DoubleFrameBufferObject;\r\n    let bloom: FrameBufferObject;\r\n    const bloomFramebuffers = [] as FrameBufferObject[];\r\n    let sunrays: FrameBufferObject;\r\n    let sunraysTemp: FrameBufferObject;\r\n\r\n    function resizeFBO(target: FrameBufferObject, w: number, h: number, internalFormat: number, format: number, type: number, param: number) {\r\n        const newFBO = createFrameBufferObject(w, h, internalFormat, format, type, param);\r\n        copyProgram.bind();\r\n        gl.uniform1i(copyProgram.uniforms.uTexture, target.attach(0));\r\n        blit(newFBO);\r\n        return newFBO;\r\n    }\r\n\r\n    function resizeDoubleFBO(target: DoubleFrameBufferObject, w: number, h: number, internalFormat: number, format: number, type: number, param: number) {\r\n        if (target.width === w && target.height === h)\r\n            return target;\r\n        target.read = resizeFBO(target.read, w, h, internalFormat, format, type, param);\r\n        target.write = createFrameBufferObject(w, h, internalFormat, format, type, param);\r\n        target.width = w;\r\n        target.height = h;\r\n        target.texelSizeX = 1 / w;\r\n        target.texelSizeY = 1 / h;\r\n        return target;\r\n    }\r\n\r\n    function initFramebuffers() {\r\n        const simRes = getResolution(config.SIM_RESOLUTION);\r\n        const dyeRes = getResolution(config.DYE_RESOLUTION);\r\n\r\n        const texType = ext.halfFloatTexType;\r\n        const rgba = ext.formatRGBA;\r\n        const rg = ext.formatRG;\r\n        const r = ext.formatR;\r\n        const filtering = ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST;\r\n\r\n        gl.disable(gl.BLEND);\r\n\r\n        if (dye == null)\r\n            dye = createDoubleFrameBufferObject(dyeRes.width, dyeRes.height, rgba.internalFormat, rgba.format, texType, filtering);\r\n        else\r\n            dye = resizeDoubleFBO(dye, dyeRes.width, dyeRes.height, rgba.internalFormat, rgba.format, texType, filtering);\r\n\r\n        if (velocity == null)\r\n            velocity = createDoubleFrameBufferObject(simRes.width, simRes.height, rg.internalFormat, rg.format, texType, filtering);\r\n        else\r\n            velocity = resizeDoubleFBO(velocity, simRes.width, simRes.height, rg.internalFormat, rg.format, texType, filtering);\r\n\r\n        divergence = createFrameBufferObject(simRes.width, simRes.height, r.internalFormat, r.format, texType, gl.NEAREST);\r\n        curl = createFrameBufferObject(simRes.width, simRes.height, r.internalFormat, r.format, texType, gl.NEAREST);\r\n        pressure = createDoubleFrameBufferObject(simRes.width, simRes.height, r.internalFormat, r.format, texType, gl.NEAREST);\r\n\r\n        initBloomFramebuffers();\r\n        initSunraysFramebuffers();\r\n    }\r\n\r\n    function initBloomFramebuffers() {\r\n        const res = getResolution(config.BLOOM_RESOLUTION);\r\n\r\n        const texType = ext.halfFloatTexType;\r\n        const rgba = ext.formatRGBA;\r\n        const filtering = ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST;\r\n\r\n        bloom = createFrameBufferObject(res.width, res.height, rgba.internalFormat, rgba.format, texType, filtering);\r\n\r\n        bloomFramebuffers.length = 0;\r\n        for (let i = 0; i < config.BLOOM_ITERATIONS; i++) {\r\n            const width = res.width >> (i + 1);\r\n            const height = res.height >> (i + 1);\r\n\r\n            if (width < 2 || height < 2) break;\r\n\r\n            const fbo = createFrameBufferObject(width, height, rgba.internalFormat, rgba.format, texType, filtering);\r\n            bloomFramebuffers.push(fbo);\r\n        }\r\n    }\r\n\r\n    function initSunraysFramebuffers() {\r\n        const res = getResolution(config.SUNRAYS_RESOLUTION);\r\n\r\n        const texType = ext.halfFloatTexType;\r\n        const r = ext.formatR;\r\n        const filtering = ext.supportLinearFiltering ? gl.LINEAR : gl.NEAREST;\r\n\r\n        sunrays = createFrameBufferObject(res.width, res.height, r.internalFormat, r.format, texType, filtering);\r\n        sunraysTemp = createFrameBufferObject(res.width, res.height, r.internalFormat, r.format, texType, filtering);\r\n    }\r\n\r\n\r\n    function createTextureAsync(url: string) {\r\n        const texture = gl.createTexture();\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, 1, 1, 0, gl.RGB, gl.UNSIGNED_BYTE, new Uint8Array([255, 255, 255]));\r\n\r\n        const obj = {\r\n            texture,\r\n            width: 1,\r\n            height: 1,\r\n            attach(id: number) {\r\n                gl.activeTexture(gl.TEXTURE0 + id);\r\n                gl.bindTexture(gl.TEXTURE_2D, texture);\r\n                return id;\r\n            },\r\n        };\r\n\r\n        const image = new Image();\r\n        image.addEventListener(`load`, () => {\r\n            obj.width = image.width;\r\n            obj.height = image.height;\r\n            gl.bindTexture(gl.TEXTURE_2D, texture);\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, gl.RGB, gl.UNSIGNED_BYTE, image);\r\n        });\r\n        image.src = url;\r\n\r\n        return obj;\r\n    }\r\n\r\n    function updateKeywords() {\r\n        const displayKeywords = [];\r\n        if (config.SHADING) displayKeywords.push(`SHADING`);\r\n        if (config.BLOOM) displayKeywords.push(`BLOOM`);\r\n        if (config.SUNRAYS) displayKeywords.push(`SUNRAYS`);\r\n        displayMaterial.setKeywords(displayKeywords);\r\n    }\r\n\r\n    console.log(`runFluidSimulator - 05 updateKeywords`, {});\r\n    updateKeywords();\r\n\r\n    console.log(`runFluidSimulator - 06 initFramebuffers`, {});\r\n    initFramebuffers();\r\n\r\n    console.log(`runFluidSimulator - 07 multipleSplats`, {});\r\n    multipleSplats(randomIntRange(5, 25));\r\n\r\n    function update() {\r\n        // console.log(`runFluidSimulator.update START`, {});\r\n\r\n        const dt = calcDeltaTime();\r\n        if (resizeCanvas())\r\n            initFramebuffers();\r\n        updateColors(dt);\r\n        applyInputs();\r\n        if (!config.PAUSED)\r\n            step(dt);\r\n        render(null);\r\n        requestAnimationFrame(update);\r\n    }\r\n\r\n    let lastUpdateTime = Date.now();\r\n    function calcDeltaTime() {\r\n        const now = Date.now();\r\n        let dt = (now - lastUpdateTime) / 1000;\r\n        dt = Math.min(dt, 0.016666);\r\n        lastUpdateTime = now;\r\n        return dt;\r\n    }\r\n\r\n    function resizeCanvas() {\r\n        const width = scaleByPixelRatio(canvas.clientWidth);\r\n        const height = scaleByPixelRatio(canvas.clientHeight);\r\n        if (canvas.width !== width || canvas.height !== height) {\r\n            canvas.width = width;\r\n            canvas.height = height;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    let colorUpdateTimer = 0;\r\n    function updateColors(dt: number) {\r\n        if (!config.COLORFUL) return;\r\n\r\n        colorUpdateTimer += dt * config.COLOR_UPDATE_SPEED;\r\n        if (colorUpdateTimer >= 1) {\r\n            colorUpdateTimer = wrap(colorUpdateTimer, 0, 1);\r\n            pointers.forEach(p => {\r\n                p.color = generateColor();\r\n            });\r\n        }\r\n    }\r\n\r\n    function applyInputs() {\r\n\r\n        const lastSplat = splatStack.pop();\r\n        if (lastSplat != null) {\r\n            console.log(`applyInputs: lastSplat`, { lastSplat, splatStack, pointers });\r\n\r\n            multipleSplats(lastSplat);\r\n        }\r\n\r\n        pointers.forEach(p => {\r\n            if (p.moved) {\r\n                p.moved = false;\r\n                splatPointer(p);\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    function step(dt: number) {\r\n        gl.disable(gl.BLEND);\r\n\r\n        curlProgram.bind();\r\n        gl.uniform2f(curlProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);\r\n        gl.uniform1i(curlProgram.uniforms.uVelocity, velocity.read.attach(0));\r\n        blit(curl);\r\n\r\n        vorticityProgram.bind();\r\n        gl.uniform2f(vorticityProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);\r\n        gl.uniform1i(vorticityProgram.uniforms.uVelocity, velocity.read.attach(0));\r\n        gl.uniform1i(vorticityProgram.uniforms.uCurl, curl.attach(1));\r\n        gl.uniform1f(vorticityProgram.uniforms.curl, config.CURL);\r\n        gl.uniform1f(vorticityProgram.uniforms.dt, dt);\r\n        blit(velocity.write);\r\n        velocity.swap();\r\n\r\n        divergenceProgram.bind();\r\n        gl.uniform2f(divergenceProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);\r\n        gl.uniform1i(divergenceProgram.uniforms.uVelocity, velocity.read.attach(0));\r\n        blit(divergence);\r\n\r\n        clearProgram.bind();\r\n        gl.uniform1i(clearProgram.uniforms.uTexture, pressure.read.attach(0));\r\n        gl.uniform1f(clearProgram.uniforms.value, config.PRESSURE);\r\n        blit(pressure.write);\r\n        pressure.swap();\r\n\r\n        pressureProgram.bind();\r\n        gl.uniform2f(pressureProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);\r\n        gl.uniform1i(pressureProgram.uniforms.uDivergence, divergence.attach(0));\r\n        for (let i = 0; i < config.PRESSURE_ITERATIONS; i++) {\r\n            gl.uniform1i(pressureProgram.uniforms.uPressure, pressure.read.attach(1));\r\n            blit(pressure.write);\r\n            pressure.swap();\r\n        }\r\n\r\n        gradienSubtractProgram.bind();\r\n        gl.uniform2f(gradienSubtractProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);\r\n        gl.uniform1i(gradienSubtractProgram.uniforms.uPressure, pressure.read.attach(0));\r\n        gl.uniform1i(gradienSubtractProgram.uniforms.uVelocity, velocity.read.attach(1));\r\n        blit(velocity.write);\r\n        velocity.swap();\r\n\r\n        advectionProgram.bind();\r\n        gl.uniform2f(advectionProgram.uniforms.texelSize, velocity.texelSizeX, velocity.texelSizeY);\r\n        if (!ext.supportLinearFiltering)\r\n            gl.uniform2f(advectionProgram.uniforms.dyeTexelSize, velocity.texelSizeX, velocity.texelSizeY);\r\n        const velocityId = velocity.read.attach(0);\r\n        gl.uniform1i(advectionProgram.uniforms.uVelocity, velocityId);\r\n        gl.uniform1i(advectionProgram.uniforms.uSource, velocityId);\r\n        gl.uniform1f(advectionProgram.uniforms.dt, dt);\r\n        gl.uniform1f(advectionProgram.uniforms.dissipation, config.VELOCITY_DISSIPATION);\r\n        blit(velocity.write);\r\n        velocity.swap();\r\n\r\n        if (!ext.supportLinearFiltering)\r\n            gl.uniform2f(advectionProgram.uniforms.dyeTexelSize, dye.texelSizeX, dye.texelSizeY);\r\n        gl.uniform1i(advectionProgram.uniforms.uVelocity, velocity.read.attach(0));\r\n        gl.uniform1i(advectionProgram.uniforms.uSource, dye.read.attach(1));\r\n        gl.uniform1f(advectionProgram.uniforms.dissipation, config.DENSITY_DISSIPATION);\r\n        blit(dye.write);\r\n        dye.swap();\r\n    }\r\n\r\n    function render(target: null | FrameBufferObject) {\r\n        if (config.BLOOM)\r\n            applyBloom(dye.read, bloom);\r\n        if (config.SUNRAYS) {\r\n            applySunrays(dye.read, dye.write, sunrays);\r\n            blur(sunrays, sunraysTemp, 1);\r\n        }\r\n\r\n        if (target == null || !config.TRANSPARENT) {\r\n            gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\r\n            gl.enable(gl.BLEND);\r\n        }\r\n        else {\r\n            gl.disable(gl.BLEND);\r\n        }\r\n\r\n        if (!config.TRANSPARENT)\r\n            drawColor(target, normalizeColor(config.BACK_COLOR));\r\n        if (target == null && config.TRANSPARENT)\r\n            drawCheckerboard(target);\r\n        drawDisplay(target);\r\n    }\r\n\r\n    function drawColor(target: null | FrameBufferObject, color: ColorRgb) {\r\n        colorProgram.bind();\r\n        gl.uniform4f(colorProgram.uniforms.color, color.r, color.g, color.b, 1);\r\n        blit(target);\r\n    }\r\n\r\n    function drawCheckerboard(target: null | FrameBufferObject) {\r\n        checkerboardProgram.bind();\r\n        gl.uniform1f(checkerboardProgram.uniforms.aspectRatio, canvas.width / canvas.height);\r\n        blit(target);\r\n    }\r\n\r\n    function drawDisplay(target: null | FrameBufferObject) {\r\n        // console.log(`drawDisplay`, { target });\r\n\r\n        const width = target == null ? gl.drawingBufferWidth : target.width;\r\n        const height = target == null ? gl.drawingBufferHeight : target.height;\r\n\r\n        displayMaterial.bind();\r\n        if (config.SHADING)\r\n            gl.uniform2f(displayMaterial.uniforms.texelSize, 1 / width, 1 / height);\r\n        gl.uniform1i(displayMaterial.uniforms.uTexture, dye.read.attach(0));\r\n        if (config.BLOOM) {\r\n            gl.uniform1i(displayMaterial.uniforms.uBloom, bloom.attach(1));\r\n            gl.uniform1i(displayMaterial.uniforms.uDithering, ditheringTexture.attach(2));\r\n            const scale = getTextureScale(ditheringTexture, width, height);\r\n            gl.uniform2f(displayMaterial.uniforms.ditherScale, scale.x, scale.y);\r\n        }\r\n        if (config.SUNRAYS)\r\n            gl.uniform1i(displayMaterial.uniforms.uSunrays, sunrays.attach(3));\r\n        blit(target);\r\n    }\r\n\r\n    function applyBloom(source: FrameBufferObject, destination: FrameBufferObject) {\r\n        if (bloomFramebuffers.length < 2)\r\n            return;\r\n\r\n        let last = destination;\r\n\r\n        gl.disable(gl.BLEND);\r\n        bloomPrefilterProgram.bind();\r\n        const knee = config.BLOOM_THRESHOLD * config.BLOOM_SOFT_KNEE + 0.0001;\r\n        const curve0 = config.BLOOM_THRESHOLD - knee;\r\n        const curve1 = knee * 2;\r\n        const curve2 = 0.25 / knee;\r\n        gl.uniform3f(bloomPrefilterProgram.uniforms.curve, curve0, curve1, curve2);\r\n        gl.uniform1f(bloomPrefilterProgram.uniforms.threshold, config.BLOOM_THRESHOLD);\r\n        gl.uniform1i(bloomPrefilterProgram.uniforms.uTexture, source.attach(0));\r\n        blit(last);\r\n\r\n        bloomBlurProgram.bind();\r\n        for (const dest of bloomFramebuffers) {\r\n            gl.uniform2f(bloomBlurProgram.uniforms.texelSize, last.texelSizeX, last.texelSizeY);\r\n            gl.uniform1i(bloomBlurProgram.uniforms.uTexture, last.attach(0));\r\n            blit(dest);\r\n            last = dest;\r\n        }\r\n\r\n        gl.blendFunc(gl.ONE, gl.ONE);\r\n        gl.enable(gl.BLEND);\r\n\r\n        for (let i = bloomFramebuffers.length - 2; i >= 0; i--) {\r\n            const baseTex = bloomFramebuffers[i];\r\n            gl.uniform2f(bloomBlurProgram.uniforms.texelSize, last.texelSizeX, last.texelSizeY);\r\n            gl.uniform1i(bloomBlurProgram.uniforms.uTexture, last.attach(0));\r\n            gl.viewport(0, 0, baseTex.width, baseTex.height);\r\n            blit(baseTex);\r\n            last = baseTex;\r\n        }\r\n\r\n        gl.disable(gl.BLEND);\r\n        bloomFinalProgram.bind();\r\n        gl.uniform2f(bloomFinalProgram.uniforms.texelSize, last.texelSizeX, last.texelSizeY);\r\n        gl.uniform1i(bloomFinalProgram.uniforms.uTexture, last.attach(0));\r\n        gl.uniform1f(bloomFinalProgram.uniforms.intensity, config.BLOOM_INTENSITY);\r\n        blit(destination);\r\n    }\r\n\r\n    function applySunrays(source: FrameBufferObject, mask: FrameBufferObject, destination: FrameBufferObject) {\r\n        gl.disable(gl.BLEND);\r\n        sunraysMaskProgram.bind();\r\n        gl.uniform1i(sunraysMaskProgram.uniforms.uTexture, source.attach(0));\r\n        blit(mask);\r\n\r\n        sunraysProgram.bind();\r\n        gl.uniform1f(sunraysProgram.uniforms.weight, config.SUNRAYS_WEIGHT);\r\n        gl.uniform1i(sunraysProgram.uniforms.uTexture, mask.attach(0));\r\n        blit(destination);\r\n    }\r\n\r\n    function blur(target: FrameBufferObject, temp: FrameBufferObject, iterations: number) {\r\n        blurProgram.bind();\r\n        for (let i = 0; i < iterations; i++) {\r\n            gl.uniform2f(blurProgram.uniforms.texelSize, target.texelSizeX, 0);\r\n            gl.uniform1i(blurProgram.uniforms.uTexture, target.attach(0));\r\n            blit(temp);\r\n\r\n            gl.uniform2f(blurProgram.uniforms.texelSize, 0, target.texelSizeY);\r\n            gl.uniform1i(blurProgram.uniforms.uTexture, temp.attach(0));\r\n            blit(target);\r\n        }\r\n    }\r\n\r\n    function splatPointer(pointer: PointerEntity) {\r\n        const dx = pointer.deltaX * config.SPLAT_FORCE;\r\n        const dy = pointer.deltaY * config.SPLAT_FORCE;\r\n        splat(pointer.texcoordX, pointer.texcoordY, dx, dy, pointer.color);\r\n    }\r\n\r\n    function multipleSplats(amount: number) {\r\n        for (let i = 0; i < amount; i++) {\r\n            const color = generateColor();\r\n            color.r *= 10;\r\n            color.g *= 10;\r\n            color.b *= 10;\r\n            const x = Math.random();\r\n            const y = Math.random();\r\n            const dx = 1000 * (Math.random() - 0.5);\r\n            const dy = 1000 * (Math.random() - 0.5);\r\n            splat(x, y, dx, dy, color);\r\n        }\r\n    }\r\n\r\n    function splat(x: number, y: number, dx: number, dy: number, color: ColorRgb) {\r\n        console.log(`splat`, { x, y, dx, dy, color });\r\n\r\n        splatProgram.bind();\r\n        gl.uniform1i(splatProgram.uniforms.uTarget, velocity.read.attach(0));\r\n        gl.uniform1f(splatProgram.uniforms.aspectRatio, canvas.width / canvas.height);\r\n        gl.uniform2f(splatProgram.uniforms.point, x, y);\r\n        gl.uniform3f(splatProgram.uniforms.color, dx, dy, 0);\r\n        gl.uniform1f(splatProgram.uniforms.radius, correctRadius(config.SPLAT_RADIUS / 100));\r\n        blit(velocity.write);\r\n        velocity.swap();\r\n\r\n        gl.uniform1i(splatProgram.uniforms.uTarget, dye.read.attach(0));\r\n        gl.uniform3f(splatProgram.uniforms.color, color.r, color.g, color.b);\r\n        blit(dye.write);\r\n        dye.swap();\r\n    }\r\n\r\n    function correctRadius(radius: number) {\r\n        const aspectRatio = canvas.width / canvas.height;\r\n        if (aspectRatio > 1)\r\n            radius *= aspectRatio;\r\n        return radius;\r\n    }\r\n\r\n    console.log(`runFluidSimulator - 08 addEventListeners`, {});\r\n\r\n    canvas.addEventListener(`mousedown`, e => {\r\n        const posX = scaleByPixelRatio(e.offsetX);\r\n        const posY = scaleByPixelRatio(e.offsetY);\r\n        let pointer = pointers.find(p => p.id === -1);\r\n        if (pointer == null)\r\n            pointer = new PointerEntity();\r\n        updatePointerDownData(pointer, -1, posX, posY);\r\n    });\r\n\r\n    canvas.addEventListener(`mousemove`, e => {\r\n        const pointer = pointers[0];\r\n        if (!pointer.down) return;\r\n        const posX = scaleByPixelRatio(e.offsetX);\r\n        const posY = scaleByPixelRatio(e.offsetY);\r\n        updatePointerMoveData(pointer, posX, posY);\r\n    });\r\n\r\n    window.addEventListener(`mouseup`, () => {\r\n        updatePointerUpData(pointers[0]);\r\n    });\r\n\r\n    canvas.addEventListener(`touchstart`, e => {\r\n        e.preventDefault();\r\n        const touches = e.targetTouches as unknown as Touch[];\r\n        while (touches.length >= pointers.length)\r\n            pointers.push(new PointerEntity());\r\n        for (const [i, touch] of touches.entries()) {\r\n            const posX = scaleByPixelRatio(touch.pageX);\r\n            const posY = scaleByPixelRatio(touch.pageY);\r\n            updatePointerDownData(pointers[i + 1], touch.identifier, posX, posY);\r\n        }\r\n    });\r\n\r\n    canvas.addEventListener(`touchmove`, e => {\r\n        e.preventDefault();\r\n        const touches = e.targetTouches as unknown as Touch[];\r\n        for (const [i, touch] of touches.entries()) {\r\n            const pointer = pointers[i + 1];\r\n            if (!pointer.down) continue;\r\n            const posX = scaleByPixelRatio(touch.pageX);\r\n            const posY = scaleByPixelRatio(touch.pageY);\r\n            updatePointerMoveData(pointer, posX, posY);\r\n        }\r\n    }, false);\r\n\r\n    window.addEventListener(`touchend`, e => {\r\n        const touches = e.changedTouches as unknown as Touch[];\r\n        for (const touch of touches) {\r\n            const pointer = pointers.find(p => p.id === touch.identifier);\r\n            if (pointer == null) continue;\r\n            updatePointerUpData(pointer);\r\n        }\r\n    });\r\n\r\n    window.addEventListener(`keydown`, e => {\r\n        if (e.code === `KeyP`)\r\n            config.PAUSED = !config.PAUSED;\r\n        if (e.key === ` `)\r\n            splatStack.push(randomIntRange(5, 25));\r\n    });\r\n\r\n    function updatePointerDownData(pointer: PointerEntity, id: number, posX: number, posY: number) {\r\n        pointer.id = id;\r\n        pointer.down = true;\r\n        pointer.moved = false;\r\n        pointer.texcoordX = posX / canvas.width;\r\n        pointer.texcoordY = 1 - posY / canvas.height;\r\n        pointer.prevTexcoordX = pointer.texcoordX;\r\n        pointer.prevTexcoordY = pointer.texcoordY;\r\n        pointer.deltaX = 0;\r\n        pointer.deltaY = 0;\r\n        pointer.color = generateColor();\r\n\r\n        // console.log(`updatePointerDownData`, { pointer });\r\n    }\r\n\r\n    function updatePointerMoveData(pointer: PointerEntity, posX: number, posY: number) {\r\n        pointer.prevTexcoordX = pointer.texcoordX;\r\n        pointer.prevTexcoordY = pointer.texcoordY;\r\n        pointer.texcoordX = posX / canvas.width;\r\n        pointer.texcoordY = 1 - posY / canvas.height;\r\n        pointer.deltaX = correctDeltaX(pointer.texcoordX - pointer.prevTexcoordX, canvas);\r\n        pointer.deltaY = correctDeltaY(pointer.texcoordY - pointer.prevTexcoordY, canvas);\r\n        pointer.moved = Math.abs(pointer.deltaX) > 0 || Math.abs(pointer.deltaY) > 0;\r\n    }\r\n\r\n    function updatePointerUpData(pointer: PointerEntity) {\r\n        pointer.down = false;\r\n    }\r\n\r\n    console.log(`runFluidSimulator - 09 update Start Loop`, {});\r\n    update();\r\n\r\n    console.log(`runFluidSimulator - 10 DONE`, {});\r\n    return {\r\n        close: () => {\r\n            // TODO: You better just refresh!\r\n            console.warn(`Refresh the browser - for real`);\r\n        },\r\n    };\r\n};\r\n","import { WebGlSystem } from './webgl';\r\n\r\nexport const createFrameBufferFactory = ({ gl }: WebGlSystem) => {\r\n\r\n    function createFrameBufferObject(w: number, h: number, internalFormat: number, format: number, type: number, param: number) {\r\n        gl.activeTexture(gl.TEXTURE0);\r\n        const texture = gl.createTexture();\r\n        if (!texture) { throw new Error(`texture not created`); }\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, texture);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, param);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, param);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, w, h, 0, format, type, null);\r\n\r\n        const frameBuffer = gl.createFramebuffer();\r\n        if (!frameBuffer) { throw new Error(`frame buffer not created`); }\r\n\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n        gl.viewport(0, 0, w, h);\r\n        gl.clear(gl.COLOR_BUFFER_BIT);\r\n\r\n        const texelSizeX = 1 / w;\r\n        const texelSizeY = 1 / h;\r\n\r\n        return {\r\n            texture,\r\n            frameBuffer,\r\n            width: w,\r\n            height: h,\r\n            texelSizeX,\r\n            texelSizeY,\r\n            attach(id: number) {\r\n                gl.activeTexture(gl.TEXTURE0 + id);\r\n                gl.bindTexture(gl.TEXTURE_2D, texture);\r\n                return id;\r\n            },\r\n        };\r\n    }\r\n\r\n    function createDoubleFrameBufferObject(w: number, h: number, internalFormat: number, format: number, type: number, param: number) {\r\n        let fbo1 = createFrameBufferObject(w, h, internalFormat, format, type, param);\r\n        let fbo2 = createFrameBufferObject(w, h, internalFormat, format, type, param);\r\n\r\n        return {\r\n            width: w,\r\n            height: h,\r\n            texelSizeX: fbo1.texelSizeX,\r\n            texelSizeY: fbo1.texelSizeY,\r\n            get read() {\r\n                return fbo1;\r\n            },\r\n            set read(value) {\r\n                fbo1 = value;\r\n            },\r\n            get write() {\r\n                return fbo2;\r\n            },\r\n            set write(value) {\r\n                fbo2 = value;\r\n            },\r\n            swap() {\r\n                const temp = fbo1;\r\n                fbo1 = fbo2;\r\n                fbo2 = temp;\r\n            },\r\n        };\r\n    }\r\n\r\n\r\n    return {\r\n        createFrameBufferObject,\r\n        createDoubleFrameBufferObject,\r\n    };\r\n};\r\n\r\nexport type FrameBufferFactory = ReturnType<typeof createFrameBufferFactory>;\r\nexport type FrameBufferObject = ReturnType<FrameBufferFactory['createFrameBufferObject']>;\r\nexport type DoubleFrameBufferObject = ReturnType<FrameBufferFactory['createDoubleFrameBufferObject']>;\r\n\r\n\r\nexport const createFrameBufferUtils = ({ gl }: WebGlSystem) => {\r\n\r\n    const createBlit = () => {\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer());\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, -1, -1, 1, 1, 1, 1, -1]), gl.STATIC_DRAW);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gl.createBuffer());\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array([0, 1, 2, 0, 2, 3]), gl.STATIC_DRAW);\r\n        gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\r\n        gl.enableVertexAttribArray(0);\r\n\r\n        return (target: null | FrameBufferObject, clear = false) => {\r\n            // console.log(`blit`, { target, clear });\r\n\r\n            if (target == null) {\r\n                gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\r\n                gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n            }\r\n            else {\r\n                gl.viewport(0, 0, target.width, target.height);\r\n                gl.bindFramebuffer(gl.FRAMEBUFFER, target.frameBuffer);\r\n            }\r\n            if (clear) {\r\n                gl.clearColor(0, 0, 0, 1);\r\n                gl.clear(gl.COLOR_BUFFER_BIT);\r\n            }\r\n            // CHECK_FRAMEBUFFER_STATUS();\r\n            gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\r\n        };\r\n    };\r\n    const blit = createBlit();\r\n\r\n    // function CHECK_FRAMEBUFFER_STATUS() {\r\n    //     const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\r\n    //     if (status != gl.FRAMEBUFFER_COMPLETE)\r\n    //         console.trace(`Framebuffer error: ${status}`);\r\n    // }\r\n\r\n    return {\r\n        blit,\r\n    };\r\n};\r\n","\r\nexport const createConfig = () => ({\r\n    SIM_RESOLUTION: 128,\r\n    DYE_RESOLUTION: 1024,\r\n    CAPTURE_RESOLUTION: 512,\r\n    DENSITY_DISSIPATION: 1,\r\n    VELOCITY_DISSIPATION: 0.2,\r\n    PRESSURE: 0.8,\r\n    PRESSURE_ITERATIONS: 20,\r\n    CURL: 30,\r\n    SPLAT_RADIUS: 0.25,\r\n    SPLAT_FORCE: 6000,\r\n    SHADING: true,\r\n    COLORFUL: true,\r\n    COLOR_UPDATE_SPEED: 10,\r\n    PAUSED: false,\r\n    BACK_COLOR: { r: 0, g: 0, b: 0 },\r\n    TRANSPARENT: false,\r\n    BLOOM: true,\r\n    BLOOM_ITERATIONS: 8,\r\n    BLOOM_RESOLUTION: 256,\r\n    BLOOM_INTENSITY: 0.8,\r\n    BLOOM_THRESHOLD: 0.6,\r\n    BLOOM_SOFT_KNEE: 0.7,\r\n    SUNRAYS: true,\r\n    SUNRAYS_RESOLUTION: 196,\r\n    SUNRAYS_WEIGHT: 1,\r\n});\r\nexport type Config = ReturnType<typeof createConfig>;\r\n","import { Config } from './config';\r\nimport { ga } from './ga';\r\nimport { isMobile, randomIntRange } from './utils';\r\n\r\ntype DatGui = {\r\n    add: (configObject: unknown, key: string, options?: (number | { [key: string]: number }), options2?: number) => {\r\n        name: (value: string) => {\r\n            onFinishChange: (callback: () => void) => void;\r\n            listen: () => void;\r\n            step: (count: number) => void;\r\n            __li: {\r\n                className: string;\r\n                style: HTMLDivElement['style'];\r\n            };\r\n            domElement: HTMLDivElement;\r\n        };\r\n    };\r\n    addFolder: (name: string) => DatGui;\r\n    addColor: (configObject: unknown, key: string) => {\r\n        name: (value: string) => void;\r\n    };\r\n    close: () => void;\r\n};\r\ndeclare let dat: {\r\n    GUI: {\r\n        new(...args: unknown[]): DatGui;\r\n    };\r\n};\r\n\r\nexport function startGUI({\r\n    config,\r\n    splatStack,\r\n    initFramebuffers,\r\n    updateKeywords,\r\n    captureScreenshot,\r\n}: {\r\n    config: Config;\r\n    splatStack: number[];\r\n    initFramebuffers: () => void;\r\n    updateKeywords: () => void;\r\n    captureScreenshot: () => void;\r\n}) {\r\n    if (typeof (dat) === `undefined`) { return; }\r\n\r\n    const gui = new dat.GUI({ width: 300 });\r\n    gui.add(config, `DYE_RESOLUTION`, { 'high': 1024, 'medium': 512, 'low': 256, 'very low': 128 }).name(`quality`).onFinishChange(initFramebuffers);\r\n    gui.add(config, `SIM_RESOLUTION`, { '32': 32, '64': 64, '128': 128, '256': 256 }).name(`sim resolution`).onFinishChange(initFramebuffers);\r\n    gui.add(config, `DENSITY_DISSIPATION`, 0, 4).name(`density diffusion`);\r\n    gui.add(config, `VELOCITY_DISSIPATION`, 0, 4).name(`velocity diffusion`);\r\n    gui.add(config, `PRESSURE`, 0, 1).name(`pressure`);\r\n    gui.add(config, `CURL`, 0, 50).name(`vorticity`).step(1);\r\n    gui.add(config, `SPLAT_RADIUS`, 0.01, 1).name(`splat radius`);\r\n    gui.add(config, `SHADING`).name(`shading`).onFinishChange(updateKeywords);\r\n    gui.add(config, `COLORFUL`).name(`colorful`);\r\n    gui.add(config, `PAUSED`).name(`paused`).listen();\r\n\r\n    gui.add({\r\n        fun: () => {\r\n            splatStack.push(randomIntRange(5, 25));\r\n        },\r\n    }, `fun`).name(`Random splats`);\r\n\r\n    const bloomFolder = gui.addFolder(`Bloom`);\r\n    bloomFolder.add(config, `BLOOM`).name(`enabled`).onFinishChange(updateKeywords);\r\n    bloomFolder.add(config, `BLOOM_INTENSITY`, 0.1, 2).name(`intensity`);\r\n    bloomFolder.add(config, `BLOOM_THRESHOLD`, 0, 1).name(`threshold`);\r\n\r\n    const sunraysFolder = gui.addFolder(`Sunrays`);\r\n    sunraysFolder.add(config, `SUNRAYS`).name(`enabled`).onFinishChange(updateKeywords);\r\n    sunraysFolder.add(config, `SUNRAYS_WEIGHT`, 0.3, 1).name(`weight`);\r\n\r\n    const captureFolder = gui.addFolder(`Capture`);\r\n    captureFolder.addColor(config, `BACK_COLOR`).name(`background color`);\r\n    captureFolder.add(config, `TRANSPARENT`).name(`transparent`);\r\n    captureFolder.add({ fun: captureScreenshot }, `fun`).name(`take screenshot`);\r\n\r\n    const github = gui.add({\r\n        fun: () => {\r\n            window.open(`https://github.com/PavelDoGreat/WebGL-Fluid-Simulation`);\r\n            ga(`send`, `event`, `link button`, `github`);\r\n        },\r\n    }, `fun`).name(`Github`);\r\n    github.__li.className = `cr function bigFont`;\r\n    github.__li.style.borderLeft = `3px solid #8C8C8C`;\r\n    const githubIcon = document.createElement(`span`);\r\n    github.domElement.parentElement?.append(githubIcon);\r\n    githubIcon.className = `icon github`;\r\n\r\n    const twitter = gui.add({\r\n        fun: () => {\r\n            ga(`send`, `event`, `link button`, `twitter`);\r\n            window.open(`https://twitter.com/PavelDoGreat`);\r\n        },\r\n    }, `fun`).name(`Twitter`);\r\n    twitter.__li.className = `cr function bigFont`;\r\n    twitter.__li.style.borderLeft = `3px solid #8C8C8C`;\r\n    const twitterIcon = document.createElement(`span`);\r\n    twitter.domElement.parentElement?.append(twitterIcon);\r\n    twitterIcon.className = `icon twitter`;\r\n\r\n    const discord = gui.add({\r\n        fun: () => {\r\n            ga(`send`, `event`, `link button`, `discord`);\r\n            window.open(`https://discordapp.com/invite/CeqZDDE`);\r\n        },\r\n    }, `fun`).name(`Discord`);\r\n    discord.__li.className = `cr function bigFont`;\r\n    discord.__li.style.borderLeft = `3px solid #8C8C8C`;\r\n    const discordIcon = document.createElement(`span`);\r\n    discord.domElement.parentElement?.append(discordIcon);\r\n    discordIcon.className = `icon discord`;\r\n\r\n    const app = gui.add({\r\n        fun: () => {\r\n            ga(`send`, `event`, `link button`, `app`);\r\n            window.open(`http://onelink.to/5b58bn`);\r\n        },\r\n    }, `fun`).name(`Check out mobile app`);\r\n    app.__li.className = `cr function appBigFont`;\r\n    app.__li.style.borderLeft = `3px solid #00FF7F`;\r\n    const appIcon = document.createElement(`span`);\r\n    app.domElement.parentElement?.append(appIcon);\r\n    appIcon.className = `icon app`;\r\n\r\n    if (isMobile())\r\n        gui.close();\r\n}\r\n","import { ShaderFactory } from './systems/shader';\r\n\r\nexport const createShaders = ({ gl, ext, compileShader }: ShaderFactory) => {\r\n    return {\r\n        baseVertexShader: compileShader(gl.VERTEX_SHADER, `\r\n    precision highp float;\r\n\r\n    attribute vec2 aPosition;\r\n    varying vec2 vUv;\r\n    varying vec2 vL;\r\n    varying vec2 vR;\r\n    varying vec2 vT;\r\n    varying vec2 vB;\r\n    uniform vec2 texelSize;\r\n\r\n    void main () {\r\n        vUv = aPosition * 0.5 + 0.5;\r\n        vL = vUv - vec2(texelSize.x, 0.0);\r\n        vR = vUv + vec2(texelSize.x, 0.0);\r\n        vT = vUv + vec2(0.0, texelSize.y);\r\n        vB = vUv - vec2(0.0, texelSize.y);\r\n        gl_Position = vec4(aPosition, 0.0, 1.0);\r\n    }\r\n`),\r\n\r\n        blurVertexShader: compileShader(gl.VERTEX_SHADER, `\r\n    precision highp float;\r\n\r\n    attribute vec2 aPosition;\r\n    varying vec2 vUv;\r\n    varying vec2 vL;\r\n    varying vec2 vR;\r\n    uniform vec2 texelSize;\r\n\r\n    void main () {\r\n        vUv = aPosition * 0.5 + 0.5;\r\n        float offset = 1.33333333;\r\n        vL = vUv - texelSize * offset;\r\n        vR = vUv + texelSize * offset;\r\n        gl_Position = vec4(aPosition, 0.0, 1.0);\r\n    }\r\n`),\r\n\r\n        blurShader: compileShader(gl.FRAGMENT_SHADER, `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying vec2 vUv;\r\n    varying vec2 vL;\r\n    varying vec2 vR;\r\n    uniform sampler2D uTexture;\r\n\r\n    void main () {\r\n        vec4 sum = texture2D(uTexture, vUv) * 0.29411764;\r\n        sum += texture2D(uTexture, vL) * 0.35294117;\r\n        sum += texture2D(uTexture, vR) * 0.35294117;\r\n        gl_FragColor = sum;\r\n    }\r\n`),\r\n\r\n        copyShader: compileShader(gl.FRAGMENT_SHADER, `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying highp vec2 vUv;\r\n    uniform sampler2D uTexture;\r\n\r\n    void main () {\r\n        gl_FragColor = texture2D(uTexture, vUv);\r\n    }\r\n`),\r\n\r\n        clearShader: compileShader(gl.FRAGMENT_SHADER, `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying highp vec2 vUv;\r\n    uniform sampler2D uTexture;\r\n    uniform float value;\r\n\r\n    void main () {\r\n        gl_FragColor = value * texture2D(uTexture, vUv);\r\n    }\r\n`),\r\n\r\n        colorShader: compileShader(gl.FRAGMENT_SHADER, `\r\n    precision mediump float;\r\n\r\n    uniform vec4 color;\r\n\r\n    void main () {\r\n        gl_FragColor = color;\r\n    }\r\n`),\r\n\r\n        checkerboardShader: compileShader(gl.FRAGMENT_SHADER, `\r\n    precision highp float;\r\n    precision highp sampler2D;\r\n\r\n    varying vec2 vUv;\r\n    uniform sampler2D uTexture;\r\n    uniform float aspectRatio;\r\n\r\n    #define SCALE 25.0\r\n\r\n    void main () {\r\n        vec2 uv = floor(vUv * SCALE * vec2(aspectRatio, 1.0));\r\n        float v = mod(uv.x + uv.y, 2.0);\r\n        v = v * 0.1 + 0.8;\r\n        gl_FragColor = vec4(vec3(v), 1.0);\r\n    }\r\n`),\r\n\r\n        displayShaderSource: `\r\n    precision highp float;\r\n    precision highp sampler2D;\r\n\r\n    varying vec2 vUv;\r\n    varying vec2 vL;\r\n    varying vec2 vR;\r\n    varying vec2 vT;\r\n    varying vec2 vB;\r\n    uniform sampler2D uTexture;\r\n    uniform sampler2D uBloom;\r\n    uniform sampler2D uSunrays;\r\n    uniform sampler2D uDithering;\r\n    uniform vec2 ditherScale;\r\n    uniform vec2 texelSize;\r\n\r\n    vec3 linearToGamma (vec3 color) {\r\n        color = max(color, vec3(0));\r\n        return max(1.055 * pow(color, vec3(0.416666667)) - 0.055, vec3(0));\r\n    }\r\n\r\n    void main () {\r\n        vec3 c = texture2D(uTexture, vUv).rgb;\r\n\r\n    #ifdef SHADING\r\n        vec3 lc = texture2D(uTexture, vL).rgb;\r\n        vec3 rc = texture2D(uTexture, vR).rgb;\r\n        vec3 tc = texture2D(uTexture, vT).rgb;\r\n        vec3 bc = texture2D(uTexture, vB).rgb;\r\n\r\n        float dx = length(rc) - length(lc);\r\n        float dy = length(tc) - length(bc);\r\n\r\n        vec3 n = normalize(vec3(dx, dy, length(texelSize)));\r\n        vec3 l = vec3(0.0, 0.0, 1.0);\r\n\r\n        float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\r\n        c *= diffuse;\r\n    #endif\r\n\r\n    #ifdef BLOOM\r\n        vec3 bloom = texture2D(uBloom, vUv).rgb;\r\n    #endif\r\n\r\n    #ifdef SUNRAYS\r\n        float sunrays = texture2D(uSunrays, vUv).r;\r\n        c *= sunrays;\r\n    #ifdef BLOOM\r\n        bloom *= sunrays;\r\n    #endif\r\n    #endif\r\n\r\n    #ifdef BLOOM\r\n        float noise = texture2D(uDithering, vUv * ditherScale).r;\r\n        noise = noise * 2.0 - 1.0;\r\n        bloom += noise / 255.0;\r\n        bloom = linearToGamma(bloom);\r\n        c += bloom;\r\n    #endif\r\n\r\n        float a = max(c.r, max(c.g, c.b));\r\n        gl_FragColor = vec4(c, a);\r\n    }\r\n`,\r\n\r\n        bloomPrefilterShader: compileShader(gl.FRAGMENT_SHADER, `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying vec2 vUv;\r\n    uniform sampler2D uTexture;\r\n    uniform vec3 curve;\r\n    uniform float threshold;\r\n\r\n    void main () {\r\n        vec3 c = texture2D(uTexture, vUv).rgb;\r\n        float br = max(c.r, max(c.g, c.b));\r\n        float rq = clamp(br - curve.x, 0.0, curve.y);\r\n        rq = curve.z * rq * rq;\r\n        c *= max(rq, br - threshold) / max(br, 0.0001);\r\n        gl_FragColor = vec4(c, 0.0);\r\n    }\r\n`),\r\n\r\n        bloomBlurShader: compileShader(gl.FRAGMENT_SHADER, `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying vec2 vL;\r\n    varying vec2 vR;\r\n    varying vec2 vT;\r\n    varying vec2 vB;\r\n    uniform sampler2D uTexture;\r\n\r\n    void main () {\r\n        vec4 sum = vec4(0.0);\r\n        sum += texture2D(uTexture, vL);\r\n        sum += texture2D(uTexture, vR);\r\n        sum += texture2D(uTexture, vT);\r\n        sum += texture2D(uTexture, vB);\r\n        sum *= 0.25;\r\n        gl_FragColor = sum;\r\n    }\r\n`),\r\n\r\n        bloomFinalShader: compileShader(gl.FRAGMENT_SHADER, `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying vec2 vL;\r\n    varying vec2 vR;\r\n    varying vec2 vT;\r\n    varying vec2 vB;\r\n    uniform sampler2D uTexture;\r\n    uniform float intensity;\r\n\r\n    void main () {\r\n        vec4 sum = vec4(0.0);\r\n        sum += texture2D(uTexture, vL);\r\n        sum += texture2D(uTexture, vR);\r\n        sum += texture2D(uTexture, vT);\r\n        sum += texture2D(uTexture, vB);\r\n        sum *= 0.25;\r\n        gl_FragColor = sum * intensity;\r\n    }\r\n`),\r\n\r\n        sunraysMaskShader: compileShader(gl.FRAGMENT_SHADER, `\r\n    precision highp float;\r\n    precision highp sampler2D;\r\n\r\n    varying vec2 vUv;\r\n    uniform sampler2D uTexture;\r\n\r\n    void main () {\r\n        vec4 c = texture2D(uTexture, vUv);\r\n        float br = max(c.r, max(c.g, c.b));\r\n        c.a = 1.0 - min(max(br * 20.0, 0.0), 0.8);\r\n        gl_FragColor = c;\r\n    }\r\n`),\r\n\r\n        sunraysShader: compileShader(gl.FRAGMENT_SHADER, `\r\n    precision highp float;\r\n    precision highp sampler2D;\r\n\r\n    varying vec2 vUv;\r\n    uniform sampler2D uTexture;\r\n    uniform float weight;\r\n\r\n    #define ITERATIONS 16\r\n\r\n    void main () {\r\n        float Density = 0.3;\r\n        float Decay = 0.95;\r\n        float Exposure = 0.7;\r\n\r\n        vec2 coord = vUv;\r\n        vec2 dir = vUv - 0.5;\r\n\r\n        dir *= 1.0 / float(ITERATIONS) * Density;\r\n        float illuminationDecay = 1.0;\r\n\r\n        float color = texture2D(uTexture, vUv).a;\r\n\r\n        for (int i = 0; i < ITERATIONS; i++)\r\n        {\r\n            coord -= dir;\r\n            float col = texture2D(uTexture, coord).a;\r\n            color += col * illuminationDecay * weight;\r\n            illuminationDecay *= Decay;\r\n        }\r\n\r\n        gl_FragColor = vec4(color * Exposure, 0.0, 0.0, 1.0);\r\n    }\r\n`),\r\n\r\n        splatShader: compileShader(gl.FRAGMENT_SHADER, `\r\n    precision highp float;\r\n    precision highp sampler2D;\r\n\r\n    varying vec2 vUv;\r\n    uniform sampler2D uTarget;\r\n    uniform float aspectRatio;\r\n    uniform vec3 color;\r\n    uniform vec2 point;\r\n    uniform float radius;\r\n\r\n    void main () {\r\n        vec2 p = vUv - point.xy;\r\n        p.x *= aspectRatio;\r\n        vec3 splat = exp(-dot(p, p) / radius) * color;\r\n        vec3 base = texture2D(uTarget, vUv).xyz;\r\n        gl_FragColor = vec4(base + splat, 1.0);\r\n    }\r\n`),\r\n\r\n        advectionShader: compileShader(gl.FRAGMENT_SHADER, `\r\n    precision highp float;\r\n    precision highp sampler2D;\r\n\r\n    varying vec2 vUv;\r\n    uniform sampler2D uVelocity;\r\n    uniform sampler2D uSource;\r\n    uniform vec2 texelSize;\r\n    uniform vec2 dyeTexelSize;\r\n    uniform float dt;\r\n    uniform float dissipation;\r\n\r\n    vec4 bilerp (sampler2D sam, vec2 uv, vec2 tsize) {\r\n        vec2 st = uv / tsize - 0.5;\r\n\r\n        vec2 iuv = floor(st);\r\n        vec2 fuv = fract(st);\r\n\r\n        vec4 a = texture2D(sam, (iuv + vec2(0.5, 0.5)) * tsize);\r\n        vec4 b = texture2D(sam, (iuv + vec2(1.5, 0.5)) * tsize);\r\n        vec4 c = texture2D(sam, (iuv + vec2(0.5, 1.5)) * tsize);\r\n        vec4 d = texture2D(sam, (iuv + vec2(1.5, 1.5)) * tsize);\r\n\r\n        return mix(mix(a, b, fuv.x), mix(c, d, fuv.x), fuv.y);\r\n    }\r\n\r\n    void main () {\r\n    #ifdef MANUAL_FILTERING\r\n        vec2 coord = vUv - dt * bilerp(uVelocity, vUv, texelSize).xy * texelSize;\r\n        vec4 result = bilerp(uSource, coord, dyeTexelSize);\r\n    #else\r\n        vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;\r\n        vec4 result = texture2D(uSource, coord);\r\n    #endif\r\n        float decay = 1.0 + dissipation * dt;\r\n        gl_FragColor = result / decay;\r\n    }`,\r\n            ext.supportLinearFiltering ? null : [`MANUAL_FILTERING`],\r\n        ),\r\n\r\n        divergenceShader: compileShader(gl.FRAGMENT_SHADER, `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying highp vec2 vUv;\r\n    varying highp vec2 vL;\r\n    varying highp vec2 vR;\r\n    varying highp vec2 vT;\r\n    varying highp vec2 vB;\r\n    uniform sampler2D uVelocity;\r\n\r\n    void main () {\r\n        float L = texture2D(uVelocity, vL).x;\r\n        float R = texture2D(uVelocity, vR).x;\r\n        float T = texture2D(uVelocity, vT).y;\r\n        float B = texture2D(uVelocity, vB).y;\r\n\r\n        vec2 C = texture2D(uVelocity, vUv).xy;\r\n        if (vL.x < 0.0) { L = -C.x; }\r\n        if (vR.x > 1.0) { R = -C.x; }\r\n        if (vT.y > 1.0) { T = -C.y; }\r\n        if (vB.y < 0.0) { B = -C.y; }\r\n\r\n        float div = 0.5 * (R - L + T - B);\r\n        gl_FragColor = vec4(div, 0.0, 0.0, 1.0);\r\n    }\r\n`),\r\n\r\n        curlShader: compileShader(gl.FRAGMENT_SHADER, `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying highp vec2 vUv;\r\n    varying highp vec2 vL;\r\n    varying highp vec2 vR;\r\n    varying highp vec2 vT;\r\n    varying highp vec2 vB;\r\n    uniform sampler2D uVelocity;\r\n\r\n    void main () {\r\n        float L = texture2D(uVelocity, vL).y;\r\n        float R = texture2D(uVelocity, vR).y;\r\n        float T = texture2D(uVelocity, vT).x;\r\n        float B = texture2D(uVelocity, vB).x;\r\n        float vorticity = R - L - T + B;\r\n        gl_FragColor = vec4(0.5 * vorticity, 0.0, 0.0, 1.0);\r\n    }\r\n`),\r\n\r\n        vorticityShader: compileShader(gl.FRAGMENT_SHADER, `\r\n    precision highp float;\r\n    precision highp sampler2D;\r\n\r\n    varying vec2 vUv;\r\n    varying vec2 vL;\r\n    varying vec2 vR;\r\n    varying vec2 vT;\r\n    varying vec2 vB;\r\n    uniform sampler2D uVelocity;\r\n    uniform sampler2D uCurl;\r\n    uniform float curl;\r\n    uniform float dt;\r\n\r\n    void main () {\r\n        float L = texture2D(uCurl, vL).x;\r\n        float R = texture2D(uCurl, vR).x;\r\n        float T = texture2D(uCurl, vT).x;\r\n        float B = texture2D(uCurl, vB).x;\r\n        float C = texture2D(uCurl, vUv).x;\r\n\r\n        vec2 force = 0.5 * vec2(abs(T) - abs(B), abs(R) - abs(L));\r\n        force /= length(force) + 0.0001;\r\n        force *= curl * C;\r\n        force.y *= -1.0;\r\n\r\n        vec2 velocity = texture2D(uVelocity, vUv).xy;\r\n        velocity += force * dt;\r\n        velocity = min(max(velocity, -1000.0), 1000.0);\r\n        gl_FragColor = vec4(velocity, 0.0, 1.0);\r\n    }\r\n`),\r\n\r\n        pressureShader: compileShader(gl.FRAGMENT_SHADER, `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying highp vec2 vUv;\r\n    varying highp vec2 vL;\r\n    varying highp vec2 vR;\r\n    varying highp vec2 vT;\r\n    varying highp vec2 vB;\r\n    uniform sampler2D uPressure;\r\n    uniform sampler2D uDivergence;\r\n\r\n    void main () {\r\n        float L = texture2D(uPressure, vL).x;\r\n        float R = texture2D(uPressure, vR).x;\r\n        float T = texture2D(uPressure, vT).x;\r\n        float B = texture2D(uPressure, vB).x;\r\n        float C = texture2D(uPressure, vUv).x;\r\n        float divergence = texture2D(uDivergence, vUv).x;\r\n        float pressure = (L + R + B + T - divergence) * 0.25;\r\n        gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\r\n    }\r\n`),\r\n\r\n        gradientSubtractShader: compileShader(gl.FRAGMENT_SHADER, `\r\n    precision mediump float;\r\n    precision mediump sampler2D;\r\n\r\n    varying highp vec2 vUv;\r\n    varying highp vec2 vL;\r\n    varying highp vec2 vR;\r\n    varying highp vec2 vT;\r\n    varying highp vec2 vB;\r\n    uniform sampler2D uPressure;\r\n    uniform sampler2D uVelocity;\r\n\r\n    void main () {\r\n        float L = texture2D(uPressure, vL).x;\r\n        float R = texture2D(uPressure, vR).x;\r\n        float T = texture2D(uPressure, vT).x;\r\n        float B = texture2D(uPressure, vB).x;\r\n        vec2 velocity = texture2D(uVelocity, vUv).xy;\r\n        velocity.xy -= vec2(R - L, T - B);\r\n        gl_FragColor = vec4(velocity, 0.0, 1.0);\r\n    }\r\n`),\r\n    };\r\n};\r\n","/* eslint-disable new-cap */\r\n/* eslint-disable no-new */\r\nimport { createRandomGenerator } from '../../rando';\r\nimport { ArtWork } from '../../artwork-type';\r\nimport { runFluidSimulator } from './src/run';\r\n\r\nconst contentPath = `/content/art/artwork/example-PavelDoGreat-fluid-simulation/src`;\r\n\r\nexport const art_exampleFluidSimulator: ArtWork = {\r\n    key: `art-exampleFluidSimulator`,\r\n    title: `Fluid Simulator`,\r\n    description: `2017 \r\n\r\nThis is included as an amazing gpu shader.\r\n    \r\nFrom: https://paveldogreat.github.io/WebGL-Fluid-Simulation/`,\r\n    artist: `Pavel Dobryakov`,\r\n    getTokenDescription: (tokenId: string) => {\r\n        return null;\r\n    },\r\n    // openSea: {\r\n    //     tokenAddress: `0x495f947276749ce646f68ac8c248420045cb7b5e`,\r\n    //     tokenId: `91242641486941084018191434774360347389366801368112854311223385694785434025985`,\r\n    // },\r\n    renderArt: (hostElement: HTMLDivElement, hash) => {\r\n        const result = runFluidSimulator(hostElement, contentPath, { width: `600px`, height: `600px` });\r\n        return {\r\n            remove: () => result?.close(),\r\n        };\r\n    },\r\n};\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport { C } from 'controls-react';\r\nimport { useDebounce } from 'utils-react/hooks';\r\nimport { theme } from 'themes/theme';\r\nimport { art_circles } from './artwork/circles';\r\nimport { art_layersOfTheOnionsSoul } from './artwork/layers-of-the-onions-soul';\r\nimport { art_121 } from './artwork/art-121';\r\nimport { DivHost } from './div-host';\r\nimport { art_puzzle01 } from './artwork/puzzle/art-puzzle-01';\r\nimport { art_gears } from './artwork/gears';\r\nimport { ArtWork } from './artwork-type';\r\nimport { art_gpu_01 } from './artwork/gpu-01/gpu-01';\r\nimport { art_flyingColors } from './artwork/flying-colors/flying-colors';\r\nimport { art_exampleFluidSimulator } from './artwork/example-PavelDoGreat-fluid-simulation/example-fluid-simulator';\r\n\r\nexport const ArtGallery = (props: {}) => {\r\n    const artItems: ArtWork[] = [\r\n        art_exampleFluidSimulator,\r\n        art_flyingColors,\r\n        art_gpu_01,\r\n        art_gears,\r\n        art_puzzle01,\r\n        art_121,\r\n        art_circles,\r\n        art_layersOfTheOnionsSoul,\r\n    ];\r\n\r\n    const art = useRef(artItems[0]);\r\n    const [showNavigation, setShowNavigation] = useState(true);\r\n    const [tokenId, setTokenId] = useState(`0`);\r\n\r\n    type ArtRender = {\r\n        kind: 'div';\r\n        renderArt: (hostElement: HTMLDivElement) => { remove: () => void };\r\n        openSea?: ArtWork['openSea'];\r\n    } | {\r\n        kind: 'react';\r\n        ArtComponent: () => JSX.Element;\r\n        openSea?: ArtWork['openSea'];\r\n    };\r\n    const [artRenderer, setArtRenderer] = useState(null as null | ArtRender);\r\n    const [tokenDescription, setTokenDescription] = useState(null as null | string);\r\n\r\n    const { debounce } = useDebounce(250);\r\n\r\n    useEffect(() => {\r\n        const queryParts = document.location.search.substr(1).split(`&`);\r\n        const artKey = queryParts.find(x => x.startsWith(`key`))?.split(`=`)[1];\r\n        if (!artKey) { changeTokenId(`0`); return; }\r\n        const artworkItem = artItems.find(x => x.key === artKey);\r\n        if (!artworkItem) { changeTokenId(`0`); return; }\r\n\r\n        art.current = artworkItem;\r\n        const newTokenId = queryParts.find(x => x.startsWith(`tokenId`))?.split(`=`)[1];\r\n\r\n        setShowNavigation(false);\r\n        changeTokenId(`${newTokenId || tokenId}`);\r\n    }, [document.location.search]);\r\n\r\n    const changeArt = (value: typeof artItems[0]) => {\r\n        art.current = value;\r\n        changeTokenId(tokenId);\r\n    };\r\n\r\n    const changeTokenId = (value: string) => {\r\n        console.log(`changeTokenId`, { value });\r\n\r\n        setTokenId(value);\r\n\r\n        debounce(() => {\r\n            console.log(`changeTokenId debounce`, { value });\r\n            setTokenDescription(art.current.getTokenDescription(value));\r\n            const { renderArt, ArtComponent } = art.current;\r\n            if (renderArt) {\r\n                setArtRenderer({\r\n                    kind: `div`,\r\n                    renderArt: (hostElement) => renderArt(hostElement, value),\r\n                    openSea: art.current.openSea,\r\n                });\r\n            } else if (ArtComponent) {\r\n                setArtRenderer({\r\n                    kind: `react`,\r\n                    ArtComponent: () => <ArtComponent hash={value} />,\r\n                    openSea: art.current.openSea,\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <C.View_Panel>\r\n                {showNavigation && (\r\n                    <C.View_Form>\r\n                        {artItems.map(x => (\r\n                            <React.Fragment key={x.title}>\r\n                                <div style={{ paddingBottom: 4 }}>\r\n                                    <C.Button_FormAction onPress={() => changeArt(x)}>{x.title}</C.Button_FormAction>\r\n                                </div>\r\n                            </React.Fragment>\r\n                        ))}\r\n                        <C.View_FieldRow>\r\n                            <C.Text_FormTitle>Enter a preview tokenId:</C.Text_FormTitle>\r\n                            <C.Input_Text value={tokenId} onChange={changeTokenId} />\r\n                        </C.View_FieldRow>\r\n                    </C.View_Form>\r\n                )}\r\n\r\n\r\n                <C.Text_FormTitle style={{ ...theme.text_formTitle, whiteSpace: `pre-wrap` }}>{art.current.title}</C.Text_FormTitle>\r\n                <C.Text_FormTitle style={{ ...theme.text_formTitle, whiteSpace: `pre-wrap` }}>{art.current.artist}</C.Text_FormTitle>\r\n                {artRenderer?.kind === `div` && (\r\n                    <DivHost renderArt={artRenderer.renderArt} openSea={artRenderer.openSea} />\r\n                )}\r\n                {artRenderer?.kind === `react` && (\r\n                    <artRenderer.ArtComponent />\r\n                )}\r\n                {tokenDescription && (<C.Text_FormTitle style={{ ...theme.text_formTitle, background: `#EEEEEE`, padding: 8, whiteSpace: `pre-wrap` }}>{tokenDescription}</C.Text_FormTitle>)}\r\n                <C.Text_FormTitle style={{ ...theme.text_formTitle, whiteSpace: `pre-wrap` }}>{art.current.description}</C.Text_FormTitle>\r\n            </C.View_Panel>\r\n            {!showNavigation && (\r\n                <div style={{ padding: 16, fontSize: 16 }}>\r\n                    <a href='/art'>Other Art by Rick Love</a>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n","// eslint-disable-next-line import/no-mutable-exports\r\ndeclare let ga: (send: 'send', event: 'event', name: string, message: string) => void;\r\nif (typeof (ga) === `undefined`) { ga = () => { }; }\r\nexport { ga };\r\n","var $ = require('../internals/export');\n\nvar $hypot = Math.hypot;\nvar abs = Math.abs;\nvar sqrt = Math.sqrt;\n\n// Chrome 77 bug\n// https://bugs.chromium.org/p/v8/issues/detail?id=9546\nvar BUGGY = !!$hypot && $hypot(Infinity, NaN) !== Infinity;\n\n// `Math.hypot` method\n// https://tc39.es/ecma262/#sec-math.hypot\n$({ target: 'Math', stat: true, forced: BUGGY }, {\n  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars\n    var sum = 0;\n    var i = 0;\n    var aLen = arguments.length;\n    var larg = 0;\n    var arg, div;\n    while (i < aLen) {\n      arg = abs(arguments[i++]);\n      if (larg < arg) {\n        div = larg / arg;\n        sum = sum * div * div + 1;\n        larg = arg;\n      } else if (arg > 0) {\n        div = arg / larg;\n        sum += div * div;\n      } else sum += arg;\n    }\n    return larg === Infinity ? Infinity : larg * sqrt(sum);\n  }\n});\n"],"sourceRoot":""}