{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/games/educational-games/problems/spelling/spelling-problem-service.ts","webpack:///D:/Projects/rick-love-master/code/games/educational-games/star-blast-sideways-with-subjects/star-blast-spelling.tsx"],"names":["createSpellingProblemService","speechService","maxAnswers","sectionSize","speech","spellingEntries","getSpellingEntries","sectionCount","Math","ceil","length","state","nextIndex","completedSectionKeys","getSectionKey","sectionIndex","load","storage","a","loaded","save","getSections","Array","map","x","i","key","name","isComplete","includes","gotoSection","Number","parseInt","getNextProblem","p","correctValue","word","wrongAnswerCount","wrongValues","shuffle","distinct","mispellings","slice","answers","value","isCorrect","isLastOfSection","isLastOfSubject","question","onQuestion","speak","sectionKey","floor","recordAnswer","problem","answer","push","console","log","random","randomItem","find","EducationalGame_StarBlastSideways_Spelling","props","useRef","createSpeechService","useState","Platform","OS","hasStarted","setHasStarted","languange","current","onClick","style","height","alignSelf","alignItems","justifyContent","fontSize","problemService","createAutoSavedProblemService","createReviewProblemService"],"mappings":"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","file":"26-51b68b0beb9a3b4b5e22.js","sourcesContent":["import { distinct, shuffle } from 'utils/arrays';\r\nimport { randomItem } from 'utils/random';\r\nimport { SpeechService } from '../../utils/speech';\r\nimport { ProblemService, ProblemAnswer } from '../problems-service';\r\nimport { getSpellingEntries } from './spelling-entries';\r\n\r\nexport const createSpellingProblemService = ({ speechService, maxAnswers = 4, sectionSize = 25 }: { speechService: SpeechService, maxAnswers?: number, sectionSize?: number }): ProblemService => {\r\n    const speech = speechService;\r\n    const spellingEntries = getSpellingEntries();\r\n    const sectionCount = Math.ceil(spellingEntries.length / sectionSize);\r\n\r\n    let state = {\r\n        nextIndex: 0,\r\n        completedSectionKeys: [] as string[],\r\n    };\r\n\r\n    const getSectionKey = (sectionIndex: number) => {\r\n        return `${sectionIndex}`;\r\n    };\r\n    const getSectionName = (sectionIndex: number) => {\r\n        return `Spelling ${sectionIndex + 1}`;\r\n    };\r\n\r\n    const service: ProblemService = {\r\n        load: async (storage) => {\r\n            const loaded = await storage.load<typeof state>();\r\n            if (loaded) {\r\n                state = loaded;\r\n            }\r\n        },\r\n        save: async (storage) => {\r\n            await storage.save(state);\r\n        },\r\n        getSections: () => [...new Array(sectionCount)].map((x, i) => ({\r\n            key: getSectionKey(i),\r\n            name: getSectionName(i),\r\n            isComplete: state.completedSectionKeys.includes(getSectionKey(i)),\r\n        })),\r\n        gotoSection: ({ key }) => {\r\n            const a = Number.parseInt(key, 10);\r\n            state.nextIndex = (a - 1) * sectionSize;\r\n        },\r\n        getNextProblem: () => {\r\n            if (state.nextIndex >= spellingEntries.length) {\r\n                state.nextIndex = 0;\r\n            }\r\n\r\n            const i = state.nextIndex;\r\n            state.nextIndex++;\r\n\r\n            const p = spellingEntries[i];\r\n            const correctValue = p.word;\r\n            const wrongAnswerCount = maxAnswers - 1;\r\n            const wrongValues =\r\n                shuffle(distinct(p.mispellings)).slice(0, wrongAnswerCount);\r\n\r\n            const answers: ProblemAnswer[] = shuffle([...wrongValues.map(x => ({ value: `${x}`, isCorrect: false })), { value: `${correctValue}`, isCorrect: true }]).map(x => ({ ...x, key: x.value }));\r\n\r\n            const isLastOfSection = (i + 1) % sectionSize === 0;\r\n            const isLastOfSubject = i === spellingEntries.length - 1;\r\n            return {\r\n                key: `${i + 1}`,\r\n                question: `Word ${i + 1}`,\r\n                onQuestion: () => { speech.speak(correctValue); },\r\n                answers,\r\n                sectionKey: getSectionKey(Math.floor(i / sectionSize)),\r\n                isLastOfSection,\r\n                isLastOfSubject,\r\n            };\r\n        },\r\n        recordAnswer: (problem, answer) => {\r\n            if (answer.isCorrect && problem.isLastOfSection) {\r\n                state.completedSectionKeys.push(problem.sectionKey);\r\n            }\r\n\r\n            // Responses\r\n            if (!answer.isCorrect) {\r\n                // Demotivation!\r\n                const phrases = [\r\n                    `I've got a dog that spells better`,\r\n                    `That was horrible`,\r\n                    `What are you trying to do?`,\r\n                    `That is not a word`,\r\n                    `No, select the correct answer`,\r\n                    `Absolutely Incorrect`,\r\n                    `Completely Wrong`,\r\n                    `This is supposed to be English`,\r\n                    `What does the fox say?`,\r\n                ];\r\n                speech.speak(randomItem(phrases));\r\n                speech.speak(problem.answers.find(x => x.isCorrect)?.value ?? ``);\r\n            } else {\r\n\r\n                console.log(`recordAnswer correct`);\r\n                if (Math.random() > 0.1) { return; }\r\n                const phrases = [\r\n                    `Good job! Thank you for the alien skulls.`,\r\n                    `Great! That's a nice pile of bones.`,\r\n                    // `Amazing! Keep getting better`,\r\n                ];\r\n                speech.speak(randomItem(phrases));\r\n            }\r\n        },\r\n    };\r\n\r\n    return service;\r\n};\r\n","/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\nimport React, { useRef, useState } from 'react';\r\nimport { Text, View, Platform } from 'react-native-lite';\r\nimport { createSpeechService } from '../utils/speech';\r\nimport { EducationalGame_StarBlastSideways } from '../star-blast-sideways';\r\nimport { createReviewProblemService } from '../problems/problems-reviewer';\r\nimport { createSpellingProblemService } from '../problems/spelling/spelling-problem-service';\r\nimport { VoiceChooser } from '../utils/voice-chooser';\r\nimport { createAutoSavedProblemService } from '../problems/problem-state-storage';\r\n\r\nexport const EducationalGame_StarBlastSideways_Spelling = (props: {}) => {\r\n    const speechService = useRef(createSpeechService());\r\n    const [hasStarted, setHasStarted] = useState(Platform.OS !== `web`);\r\n\r\n    // Only web\r\n    if (!hasStarted) {\r\n        const speak = () => { speechService.current.speak(`Start`); setHasStarted(true); };\r\n        return (\r\n            <View>\r\n                <VoiceChooser languange='en' speechService={speechService.current} />\r\n                <div onClick={() => speak()}>\r\n                    <View style={{ height: 300, alignSelf: `center`, alignItems: `center`, justifyContent: `center` }}>\r\n                        <Text style={{ fontSize: 36 }}>Start</Text>\r\n                    </View>\r\n                </div>\r\n            </View>\r\n        );\r\n    }\r\n\r\n    return <EducationalGame_StarBlastSideways problemService={createAutoSavedProblemService(createReviewProblemService(createSpellingProblemService({ speechService: speechService.current }), {}), `ProblemsSpelling`)} />;\r\n};\r\n"],"sourceRoot":""}