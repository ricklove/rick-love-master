{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/utils/query.ts","webpack:///D:/Projects/rick-love-master/code/games/doodle/doodle-party-state.ts","webpack:///D:/Projects/rick-love-master/code/games/doodle/doodle-party-user-profile.tsx","webpack:///D:/Projects/rick-love-master/code/games/doodle/doodle-party-components.tsx","webpack:///D:/Projects/rick-love-master/code/games/doodle/doodle-party.tsx"],"names":["createClientStorage","clientStorage","load","JSON","parse","localStorage","getItem","save","value","setItem","stringify","createClientState","query","queryString","substr","split","pair","decodeURIComponent","parseQuery","window","location","search","client","_query","room","role","parseRole","clientPlayer","isActive","clientKey","name","emoji","isReady","createNewAssigment","kind","prompt","chainKey","Date","now","Math","floor","random","reduceState","previousState","message","console","log","hostClientKey","p","players","find","x","push","lastRound","completed","length","history","rounds","roundKey","assigment","playerAssignment","assignment","doodle","reduceClientsState","clients","forEach","c","key","distinct","map","useDoodlePartyController","clientState","useRef","current","useState","loading","setLoading","renderId","setRenderId","refresh","s","meshState","send","webSocketHistory","useEffect","webMeshClient","createWebMeshClient","channelKey","initialState","sub","subscribe","m","_webSocket","sendMessage","hostIntervalId","setInterval","mState","some","missingAssignments","filter","undefined","decodeDoodleDrawing","segments","lastAssignments","toKeyValueArray","groupItems","flatMap","remaining","i","lastPlayerRound","playerChains","Set","iRemaining","findIndex","has","oldAssigment","splice","newAssignment","setTimeout","a","uploadApiWebClient","createUploadApiWebClient","uploadApiConfig","createUploadUrl","prefix","doodleStoragePaths","doodlePartyDrawingsPrefix","backupUrl","uploadUrl","backupUploader","createUploader","uploadData","sendNewAssignmentsIfReady","unsubscribe","close","clearInterval","setClientPlayer","sendAssignment","_messages","messages","_events","events","DoodlePartyProfileView","props","controller","userProfile","setUserProfile","usedEmojis","setUsedEmojis","View_Panel","Text_FormTitle","onUserProfileChange","View_FormActionRow","Button_FormAction","onPress","onDone","DoodlePartyPlayerList","style","flexDirection","alignItems","fontSize","width","userProfileEmojis","replace","trim","UserProfileView","availableEmojis","setAvailableEmojis","isShowingEmojiSelection","setIsShowingEmojiSelection","includes","View_Form","flexWrap","View_FieldRow","onNameChange","UserProfileName","setName","isEditing","setIsEditing","changeName","Input_Text","onChange","onSubmit","onFocus","Button_FieldInline","DoodlePartyStatusBar","padding","flex","PartyViewer","allItems","iRound","y","item","chains","chain","items","sort","b","margin","background","player","AssignmentView","color","whiteSpace","height","backgroundColor","drawing","shouldAnimate","enableRedraw","DoodlePartyPlayView","text","setText","onDoneDescribe","size","encodeDoodleDrawing","DoodlePartyView","DoodlePartyView_Inner","mode","setMode","DebugView","intervalId","marginTop","t","_r"],"mappings":"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","file":"21-9816b95d7b3c3e4c0bce.js","sourcesContent":["export const parseQuery = (queryString: string): { [key: string]: undefined | string } => {\r\n    const query = {} as { [key: string]: string };\r\n    const pairs = (queryString[0] === `?` ? queryString.substr(1) : queryString).split(`&`);\r\n    for (const element of pairs) {\r\n        const pair = element.split(`=`);\r\n        query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || ``);\r\n    }\r\n    return query;\r\n};\r\n","import { useRef, useState, useEffect } from 'react';\r\nimport { parseQuery } from 'utils/query';\r\nimport { createUploader } from 'upload-api/client/uploader';\r\nimport { uploadApiConfig } from 'upload-api/client/config';\r\nimport { createUploadApiWebClient } from 'upload-api/client/web-client';\r\nimport { createWebMeshClient, WebMeshClientWebSocketHistory } from 'web-mesh/web-mesh-client';\r\nimport { distinct_key, groupItems, distinct } from 'utils/arrays';\r\nimport { toKeyValueArray } from 'utils/objects';\r\nimport { doodleStoragePaths } from './doodle-paths';\r\nimport { DoodleDrawingEncoded, decodeDoodleDrawing } from './doodle';\r\n\r\n\r\ntype ClientState = {\r\n    client: {\r\n        _query: { [key: string]: undefined | string };\r\n        room: string;\r\n        role: 'debug' | 'viewer' | 'player';\r\n\r\n        clientPlayer: PlayerState;\r\n    };\r\n};\r\ntype MeshState = {\r\n    hostClientKey: string;\r\n    clients: { key: string, isActive: boolean }[];\r\n    players: PlayerState[];\r\n    history: GameHistory;\r\n};\r\nexport type Assignment = {\r\n    kind: 'doodle' | 'describe';\r\n    chainKey: string;\r\n    prompt?: string;\r\n    doodle?: DoodleDrawingEncoded;\r\n};\r\nexport type PlayerState = {\r\n    isActive: boolean;\r\n    clientKey: string;\r\n    name: string;\r\n    emoji: string;\r\n    isReady: boolean;\r\n    assignment?: Assignment;\r\n};\r\ntype GameRound = {\r\n    roundKey: string;\r\n    completed: PlayerState[];\r\n};\r\ntype GameHistory = { rounds: GameRound[] };\r\ntype PlayerProfile = {\r\n    name: string;\r\n    emoji: string;\r\n};\r\n\r\nconst createClientStorage = () => {\r\n    type ClientStorageData = {\r\n        clientPlayer: PlayerProfile;\r\n    };\r\n    const CLIENT_STORAGE_KEY = `_DoodleGameClient`;\r\n    const clientStorage = {\r\n        load: (): null | ClientStorageData => {\r\n            try {\r\n                return JSON.parse(localStorage.getItem(CLIENT_STORAGE_KEY) ?? `NULL!{}`) as unknown as ClientStorageData;\r\n            } catch{\r\n                return null;\r\n            }\r\n        },\r\n        save: (value: ClientStorageData): void => {\r\n            localStorage.setItem(CLIENT_STORAGE_KEY, JSON.stringify(value));\r\n        },\r\n    };\r\n    return {\r\n        clientStorage,\r\n    };\r\n};\r\n\r\nconst createClientState = (): ClientState => {\r\n    const query = parseQuery(window.location.search);\r\n    const parseRoom = (value: undefined | string) => value ?? `UnknownRoom`;\r\n    const parseRole = (value: undefined | string): ClientState['client']['role'] => {\r\n        switch (value) {\r\n            case `debug`: return `debug`;\r\n            case `viewer`: return `viewer`;\r\n            default: return `player`;\r\n        }\r\n    };\r\n    const clientState: ClientState = {\r\n        client: {\r\n            _query: query,\r\n            room: parseRoom(query.room),\r\n            role: parseRole(query.role),\r\n\r\n            clientPlayer: {\r\n                isActive: true,\r\n                clientKey: ``,\r\n                name: ``,\r\n                emoji: `👤`,\r\n                isReady: false,\r\n            },\r\n        },\r\n    };\r\n\r\n    return clientState;\r\n};\r\n\r\ntype DoodlePartyMessage = {\r\n    kind: 'start';\r\n} | {\r\n    kind: 'setHost';\r\n    hostClientKey: string;\r\n} | {\r\n    kind: 'setPlayer';\r\n    clientPlayer: {\r\n        clientKey: string;\r\n        name: string;\r\n        emoji: string;\r\n        isReady: boolean;\r\n    };\r\n} | {\r\n    kind: 'assign';\r\n    players: PlayerState[];\r\n    lastRound?: GameRound;\r\n} | {\r\n    kind: 'completeAssignment';\r\n    playerAssignment: Assignment & { clientKey: string };\r\n};\r\n\r\nconst createNewAssigment = (): Assignment => {\r\n    return {\r\n        kind: `doodle`,\r\n        prompt: `Choose Your Own Word`,\r\n        chainKey: `${Date.now()}-${Math.floor(Math.random() * 999999)}`,\r\n    };\r\n};\r\n\r\nconst sendNewAssignmentsIfReady = (meshState: MeshState, send: (message: DoodlePartyMessage) => void) => {\r\n    // If some players aren't done yet\r\n    if (meshState.players.some(x => x.isActive && x.isReady && x.assignment && (!x.assignment.doodle || !x.assignment.prompt))) {\r\n\r\n        // Add new player assignments\r\n        const missingAssignments = meshState.players.filter(x => !x.assignment);\r\n        if (missingAssignments.length > 0) {\r\n            missingAssignments.forEach(x => { x.assignment = createNewAssigment(); });\r\n\r\n            send({\r\n                kind: `assign`,\r\n                players: meshState.players,\r\n                lastRound: undefined,\r\n            });\r\n            return;\r\n        }\r\n        return;\r\n    }\r\n\r\n    // Save Round (when all players are done)\r\n    const completed = [...meshState.players\r\n        .filter(x => x.assignment && x.assignment.doodle && x.assignment.prompt && decodeDoodleDrawing(x.assignment.doodle).segments.length > 0)\r\n        .map(x => ({ ...x, assignment: x.assignment ? { ...x.assignment } : undefined }))];\r\n    const lastRound = {\r\n        roundKey: `${Date.now()}`,\r\n        completed,\r\n    };\r\n    meshState.history.rounds.push(lastRound);\r\n\r\n    // Assign Next Item in Chain\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    const chains = toKeyValueArray(groupItems(meshState.history.rounds.flatMap(x => x.completed).map(x => x.assignment).filter(x => x).map(x => x!), x => x?.chainKey ?? ``));\r\n    const lastAssignments = chains.map(x => x.value[x.value.length - 1]);\r\n    const remaining = [...lastAssignments];\r\n\r\n    // Assign Players to new chain\r\n    for (let i = 0; i < meshState.players.length; i++) {\r\n        const p = meshState.players[i];\r\n\r\n        const lastPlayerRound = meshState.history.rounds[meshState.history.rounds.length - 1].completed.find(x => x.clientKey === p.clientKey);\r\n        const playerChains = new Set(meshState.history.rounds.flatMap(x => x.completed).filter(x => x.clientKey === p.clientKey).map(x => x.assignment?.chainKey ?? ``));\r\n        const iRemaining = remaining.findIndex(x =>\r\n            !playerChains.has(x.chainKey)\r\n            // Same type as last round (so swap will be correct)\r\n            && (!lastPlayerRound?.assignment?.chainKey || x.kind === lastPlayerRound.assignment.kind));\r\n\r\n        if (iRemaining < 0) {\r\n            meshState.players[i].assignment = createNewAssigment();\r\n            continue;\r\n        }\r\n\r\n        const oldAssigment = remaining.splice(iRemaining, 1)[0];\r\n        const newAssignment = { ...oldAssigment };\r\n\r\n        // Switch assignment types\r\n        if (newAssignment.kind === `doodle`) {\r\n            newAssignment.kind = `describe`;\r\n            newAssignment.prompt = undefined;\r\n        } else {\r\n            newAssignment.kind = `doodle`;\r\n            newAssignment.doodle = undefined;\r\n        }\r\n\r\n        meshState.players[i].assignment = newAssignment;\r\n    }\r\n\r\n    send({\r\n        kind: `assign`,\r\n        players: meshState.players,\r\n        lastRound,\r\n    });\r\n\r\n    // Save to server (for data)\r\n    setTimeout(async () => {\r\n        const uploadApiWebClient = createUploadApiWebClient(uploadApiConfig);\r\n        const backupUrl = (await uploadApiWebClient.createUploadUrl({ prefix: `${doodleStoragePaths.doodlePartyDrawingsPrefix}/${Date.now()}` })).uploadUrl;\r\n        const backupUploader = createUploader(backupUrl);\r\n        await backupUploader.uploadData({\r\n            history: meshState.history,\r\n        });\r\n    });\r\n};\r\n\r\nconst reduceState = (previousState: MeshState, message: DoodlePartyMessage): MeshState => {\r\n    console.log(`reduceState`, { message });\r\n\r\n    if (message.kind === `setHost`) {\r\n        previousState.hostClientKey = message.hostClientKey;\r\n        return previousState;\r\n    }\r\n\r\n    if (message.kind === `setPlayer`) {\r\n        let p = previousState.players.find(x => x.clientKey === message.clientPlayer.clientKey);\r\n        if (!p) {\r\n            p = { ...message.clientPlayer, isActive: true };\r\n            previousState.players.push(p);\r\n        }\r\n        p.name = message.clientPlayer.name;\r\n        p.emoji = message.clientPlayer.emoji;\r\n        p.isReady = message.clientPlayer.isReady;\r\n\r\n        return previousState;\r\n    }\r\n\r\n    // Assigments\r\n    if (message.kind === `assign`) {\r\n        previousState.players = message.players;\r\n        if (message.lastRound && message.lastRound.completed.length > 0) {\r\n            if (!previousState.history.rounds.find(x => x.roundKey === message.lastRound?.roundKey)) {\r\n                previousState.history.rounds.push(message.lastRound);\r\n            }\r\n        }\r\n        return previousState;\r\n    }\r\n\r\n    if (message.kind === `completeAssignment`) {\r\n        // Add Doodle, Prompt\r\n        const assigment = previousState.players.find(x => x.clientKey === message.playerAssignment.clientKey)?.assignment;\r\n        if (!assigment) { return previousState; }\r\n\r\n        assigment.prompt = message.playerAssignment.prompt;\r\n        assigment.doodle = message.playerAssignment.doodle;\r\n\r\n        return previousState;\r\n    }\r\n\r\n    return previousState;\r\n};\r\n\r\nconst reduceClientsState = (previousState: MeshState, clients: { key: string, lastActivityTimestamp: number }[]): MeshState => {\r\n    console.log(`reduceClientsState`, { clients });\r\n\r\n    previousState.players.forEach(x => {\r\n        x.isActive = !!clients.find(c => c.key === x.clientKey);\r\n    });\r\n    previousState.clients = distinct([...previousState.clients, ...clients].map(x => x.key)).map(x => ({ key: x, isActive: !!clients.find(c => c.key === x) }));\r\n\r\n    return previousState;\r\n};\r\n\r\n\r\nexport const useDoodlePartyController = () => {\r\n    const clientStateRef = useRef(createClientState());\r\n    const clientState = clientStateRef.current;\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [renderId, setRenderId] = useState(0);\r\n    const refresh = () => {\r\n        setRenderId(s => s + 1);\r\n    };\r\n\r\n    const loadClientPlayerFromStorage = () => {\r\n        // Load Client Player\r\n        const { clientStorage } = createClientStorage();\r\n        const s = clientStorage.load();\r\n        if (s) {\r\n            clientState.client.clientPlayer = {\r\n                clientKey: ``,\r\n                name: s.clientPlayer.name,\r\n                emoji: s.clientPlayer.emoji,\r\n                isReady: false,\r\n                isActive: true,\r\n            };\r\n        }\r\n        refresh();\r\n    };\r\n\r\n    const meshState = useRef(null as null | MeshState);\r\n    const send = useRef(null as null | ((message: DoodlePartyMessage) => void));\r\n    const webSocketHistory = useRef(null as null | { history: WebMeshClientWebSocketHistory });\r\n\r\n    useEffect(() => {\r\n\r\n        // Setup Web Mesh\r\n        const webMeshClient = createWebMeshClient<MeshState, DoodlePartyMessage>({\r\n            channelKey: `doodle_${clientState.client.room}`,\r\n            initialState: {\r\n                hostClientKey: ``,\r\n                clients: [],\r\n                players: [],\r\n                history: { rounds: [] },\r\n            },\r\n            reduceState,\r\n            reduceClientsState,\r\n        });\r\n        const sub = webMeshClient.subscribe((m) => {\r\n            meshState.current = m;\r\n            refresh();\r\n        });\r\n\r\n        webSocketHistory.current = ({ history: webMeshClient._webSocket.history });\r\n        send.current = webMeshClient.sendMessage;\r\n\r\n        // Setup Client State\r\n        loadClientPlayerFromStorage();\r\n        clientState.client.clientPlayer.clientKey = webMeshClient.clientKey;\r\n\r\n        // Host\r\n        const hostIntervalId = setInterval(() => {\r\n            const mState = meshState.current;\r\n            if (!mState) {\r\n                // webMeshClient.sendMessage({\r\n                //     kind: `start`,\r\n                // });\r\n                return;\r\n            }\r\n\r\n            const hasActiveHost = mState.clients.find(x => x.key === mState.hostClientKey)?.isActive;\r\n            if (!hasActiveHost) {\r\n                webMeshClient.sendMessage({\r\n                    kind: `setHost`,\r\n                    hostClientKey: webMeshClient.clientKey,\r\n                });\r\n                return;\r\n            }\r\n\r\n            if (mState.hostClientKey !== webMeshClient.clientKey) { return; }\r\n\r\n            // Act as host\r\n            sendNewAssignmentsIfReady(mState, webMeshClient.sendMessage);\r\n\r\n        }, 3000 + Math.floor(3000 * Math.random()));\r\n\r\n\r\n        setLoading(false);\r\n\r\n        return () => {\r\n            sub.unsubscribe();\r\n            webMeshClient.close();\r\n            clearInterval(hostIntervalId);\r\n        };\r\n    }, []);\r\n\r\n    // Send Messages\r\n    const sendClientPlayer = () => {\r\n        // Send to web socket on change\r\n        if (clientState.client.role !== `player`) { return; }\r\n\r\n        send.current?.({\r\n            kind: `setPlayer`,\r\n            clientPlayer: clientState.client.clientPlayer,\r\n        });\r\n    };\r\n    const setClientPlayer = (value: { name: string, emoji: string, isReady: boolean }) => {\r\n        // console.log(`useDoodlePartyController.setClientPlayer`, { value, send: send.current });\r\n        const { clientStorage } = createClientStorage();\r\n        clientState.client.clientPlayer = { ...clientState.client.clientPlayer, ...value };\r\n        clientStorage.save({\r\n            clientPlayer: clientState.client.clientPlayer,\r\n        });\r\n        sendClientPlayer();\r\n        refresh();\r\n    };\r\n\r\n    const sendAssignment = (assignment: Assignment) => {\r\n        // Send to web socket on change\r\n        if (clientState.client.role !== `player`) { return; }\r\n\r\n        send.current?.({\r\n            kind: `completeAssignment`,\r\n            playerAssignment: { ...assignment, clientKey: clientState.client.clientPlayer.clientKey },\r\n        });\r\n    };\r\n\r\n    return {\r\n        loading,\r\n        renderId,\r\n        clientState,\r\n        meshState: meshState.current,\r\n        setClientPlayer,\r\n        sendAssignment,\r\n        _messages: webSocketHistory.current?.history.messages ?? [],\r\n        _events: webSocketHistory.current?.history.events ?? [],\r\n    };\r\n};\r\nexport type DoodlePartyController = ReturnType<typeof useDoodlePartyController>;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { C } from 'controls-react';\r\nimport { View, Text, TouchableOpacity } from 'react-native-lite';\r\nimport { DoodlePartyController, PlayerState } from './doodle-party-state';\r\n\r\nexport const DoodlePartyProfileView = (props: { controller: DoodlePartyController, onDone: () => void }) => {\r\n    const { clientPlayer } = props.controller.clientState.client;\r\n    const [userProfile, setUserProfile] = useState({ ...clientPlayer } as UserProfileData);\r\n    const [usedEmojis, setUsedEmojis] = useState(props.controller.meshState?.players.filter(x => x.clientKey !== clientPlayer.clientKey).map(x => x.emoji) ?? []);\r\n\r\n    const changeUserProfile = (value: UserProfileData) => {\r\n        setUserProfile(value);\r\n        props.controller.setClientPlayer({ ...value, isReady: false });\r\n    };\r\n    const onDone = () => {\r\n        props.controller.setClientPlayer({ ...clientPlayer, isReady: true });\r\n        props.onDone();\r\n    };\r\n\r\n    useEffect(() => {\r\n        setUsedEmojis(props.controller.meshState?.players.filter(x => x.clientKey !== clientPlayer.clientKey).map(x => x.emoji) ?? []);\r\n    }, [props.controller.renderId]);\r\n\r\n    // console.log(`DoodlePartyProfileView`, { userProfile, usedEmojis });\r\n    return (\r\n        <>\r\n            <C.View_Panel>\r\n                <C.Text_FormTitle >User</C.Text_FormTitle>\r\n                <UserProfileView\r\n                    userProfile={userProfile}\r\n                    onUserProfileChange={changeUserProfile}\r\n                    usedEmojis={usedEmojis}\r\n                />\r\n                <C.View_FormActionRow>\r\n                    <C.Button_FormAction onPress={onDone}>Ready</C.Button_FormAction>\r\n                </C.View_FormActionRow>\r\n            </C.View_Panel>\r\n            <DoodlePartyPlayerList {...props} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport const DoodlePartyPlayerList = (props: { controller: DoodlePartyController }) => {\r\n\r\n    const getPlayerIcon = (p: PlayerState) => {\r\n        if (!p.isActive) return `❌`;\r\n        if (!p.isReady) return `◻`;\r\n        if (p.assignment && (p.assignment && (!p.assignment.doodle)) && p.assignment.kind === `doodle`) return `🎨`;\r\n        if (p.assignment && (p.assignment && (!p.assignment.prompt)) && p.assignment.kind === `describe`) return `✏`;\r\n        return `✔`;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <View>\r\n                {props.controller.meshState?.players.map(x => (\r\n                    <View key={x.clientKey} style={{ flexDirection: `row`, alignItems: `center` }}>\r\n                        <View>\r\n                            <Text style={{ fontSize: 24 }} >{getPlayerIcon(x)}</Text>\r\n                        </View>\r\n                        <View style={{ width: 48 }}>\r\n                            <Text style={{ fontSize: 32 }} >{x.emoji}</Text>\r\n                        </View>\r\n                        <View>\r\n                            <Text style={{ fontSize: 16 }}>{x.name}</Text>\r\n                        </View>\r\n                    </View>\r\n                ))}\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n\r\ntype UserProfileData = {\r\n    name: string;\r\n    emoji: string;\r\n};\r\n\r\nconst userProfileEmojis = `\r\n🐵 🐶 🐺 🐱 🦁 🐯 🦒 🦊 🦝 🐮 🐷 🐗 🐭 🐹 🐰 🐻 🐨 🐼 🐸 🦓 🐴 🦄 🐔 🐲 \r\n🤖 👽 👻 🍕 🍔 🌭 🥓 🌮 🍖 🥩 🍦 🍩 🍰 🧁 🥝 🥥 🍒 🍓 🍄 🥦 🥑 🥕 \r\n🚗 🚑 🚒 🚜 🦼 🚲 🚂 🛩 🚀 🛸 🛰 🪐 🧯 🧷  🪑 🛎 ☂ ⛄\r\n`.replace(/\\n/g, ``).split(` `).map(x => x.trim()).filter(x => x);\r\n\r\nconst UserProfileView = ({ userProfile, onUserProfileChange, usedEmojis }: { userProfile: UserProfileData, onUserProfileChange: (value: UserProfileData) => void, usedEmojis: string[] }) => {\r\n    const [availableEmojis, setAvailableEmojis] = useState(userProfileEmojis);\r\n    const [isShowingEmojiSelection, setIsShowingEmojiSelection] = useState(false);\r\n\r\n    const selectCharacter = (emoji: string) => {\r\n        setIsShowingEmojiSelection(false);\r\n        onUserProfileChange({ ...userProfile, emoji });\r\n    };\r\n\r\n    useEffect(() => {\r\n        setAvailableEmojis(userProfileEmojis.filter(x => !usedEmojis.includes(x)));\r\n    }, [usedEmojis]);\r\n\r\n    // console.log(`UserProfileView`, { usedEmojis });\r\n\r\n    if (isShowingEmojiSelection) {\r\n        return (\r\n            <>\r\n                <C.View_Form>\r\n                    <View style={{ flexDirection: `row`, flexWrap: `wrap` }}>\r\n                        {availableEmojis.map(x => (\r\n                            <TouchableOpacity key={x} onPress={() => selectCharacter(x)} >\r\n                                <View>\r\n                                    <Text style={{ fontSize: 32 }} >{x}</Text>\r\n                                </View>\r\n                            </TouchableOpacity>\r\n                        ))}\r\n                    </View>\r\n                </C.View_Form>\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <C.View_Form>\r\n                <C.View_FieldRow>\r\n                    <TouchableOpacity onPress={() => setIsShowingEmojiSelection(true)} >\r\n                        <View>\r\n                            <Text style={{ fontSize: 32 }} >{userProfile.emoji}</Text>\r\n                        </View>\r\n                    </TouchableOpacity>\r\n                    <UserProfileName userProfile={userProfile} onNameChange={(x) => onUserProfileChange({ ...userProfile, name: x })} />\r\n                </C.View_FieldRow>\r\n            </C.View_Form>\r\n        </>\r\n    );\r\n};\r\n\r\nconst UserProfileName = ({ userProfile, onNameChange }: { userProfile: UserProfileData, onNameChange: (value: string) => void }) => {\r\n    const [name, setName] = useState(userProfile.name || `Player`);\r\n    const [isEditing, setIsEditing] = useState(false);\r\n\r\n    const changeName = () => {\r\n        onNameChange(name);\r\n        setIsEditing(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <C.Input_Text value={name} onChange={setName} onSubmit={changeName} onFocus={() => { setName(``); setIsEditing(true); }} />\r\n            {isEditing && (\r\n                <C.Button_FieldInline onPress={changeName}>Set Name</C.Button_FieldInline>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n","/* eslint-disable react/no-array-index-key */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { View, Text, ActivityIndicator } from 'react-native-lite';\r\nimport { C } from 'controls-react';\r\nimport { groupItems } from 'utils/arrays';\r\nimport { toKeyValueArray } from 'utils/objects';\r\nimport { DoodlePartyController, PlayerState } from './doodle-party-state';\r\nimport { DoodlePartyPlayerList } from './doodle-party-user-profile';\r\nimport { DoodleGameView_DrawWord } from './doodle-components';\r\nimport { encodeDoodleDrawing, decodeDoodleDrawing } from './doodle';\r\nimport { DoodleDisplayView } from './doodle-view';\r\n\r\nexport const DoodlePartyStatusBar = (props: { controller: DoodlePartyController }) => {\r\n    const { clientState, meshState } = props.controller;\r\n    const { clientPlayer, role } = clientState.client;\r\n\r\n    return (\r\n        <>\r\n            <View key={clientPlayer.clientKey} style={{ padding: 4, flexDirection: `row`, alignItems: `center` }}>\r\n                {role === `player` && clientPlayer ? (\r\n                    <>\r\n                        <View style={{ width: 36 }}>\r\n                            <Text style={{ fontSize: 24 }} >{clientPlayer.emoji}</Text>\r\n                        </View>\r\n                        <View>\r\n                            <Text style={{ fontSize: 16 }}>{clientPlayer.name}</Text>\r\n                        </View>\r\n                    </>\r\n                ) : (\r\n                        <>\r\n                            <View>\r\n                                <Text style={{ fontSize: 16 }}>{role}</Text>\r\n                            </View>\r\n                        </>\r\n                    )}\r\n                <View style={{ flex: 1 }} />\r\n                {/* <View>\r\n                    <Text style={{ fontSize: 16 }}>{gameState.client.clientPlayer.clientKey}</Text>\r\n                </View> */}\r\n                <View>\r\n                    <Text style={{ fontSize: 16 }}>{meshState?.hostClientKey === clientState.client.clientPlayer.clientKey ? `🟢` : ``}</Text>\r\n                </View>\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n\r\nexport const PartyViewer = (props: { controller: DoodlePartyController }) => {\r\n\r\n    const allItems = props.controller.meshState?.history.rounds.flatMap((x, iRound) => x.completed.map(y => ({ iRound, item: y, chainKey: y.assignment?.chainKey }))) ?? [];\r\n    const chains = toKeyValueArray(groupItems(allItems, x => x.chainKey ?? ``)).map(x => ({ chain: x.key, items: x.value.sort((a, b) => a.iRound - b.iRound) }));\r\n\r\n    return (\r\n        <View>\r\n            <Text>Players</Text>\r\n            <DoodlePartyPlayerList controller={props.controller} />\r\n            <Text>Rounds</Text>\r\n            <Text>{`${props.controller.meshState?.history.rounds.length ?? 0}`}</Text>\r\n            {/* {props.controller.gameState.history.rounds.map((x, i) => (\r\n                <View key={`${i}`} style={{ flexDirection: `row`, alignItems: `center` }}>\r\n                    {x.completed.map(p => (\r\n                        <AssignmentView key={p.clientKey} player={p} />\r\n                    ))}\r\n                </View>\r\n            ))} */}\r\n            <Text>Chains</Text>\r\n            <View>\r\n                {chains.map((x, i) => (\r\n                    <View style={{ margin: 4, padding: 4, background: `#444444` }}>\r\n                        <View key={`${i}`} style={{ flexDirection: `row`, alignItems: `center`, flexWrap: `wrap` }}>\r\n                            {x.items.map(p => (\r\n                                <View style={{ padding: 4 }}>\r\n                                    <AssignmentView key={p.item.clientKey} player={p.item} />\r\n                                </View>\r\n                            ))}\r\n                        </View>\r\n                    </View>\r\n                ))}\r\n            </View>\r\n        </View>\r\n    );\r\n};\r\n\r\nconst AssignmentView = (props: { player: PlayerState }) => {\r\n    const p = props.player;\r\n    const { assignment } = props.player;\r\n    return (\r\n        <View style={{ flexDirection: `column`, alignItems: `center`, width: 104 }}>\r\n            <Text>{p.name}</Text>\r\n            <Text>{p.emoji}</Text>\r\n            <Text style={{ color: `#FFFF00`, whiteSpace: `pre-wrap` }}>{assignment?.kind === `doodle` ? assignment?.prompt ?? `` : ``}</Text>\r\n            {!!assignment?.doodle && (\r\n                <DoodleDisplayView style={{ width: 104, height: 104, color: `#FFFFFF`, backgroundColor: `#000000` }} drawing={decodeDoodleDrawing(assignment.doodle)} shouldAnimate enableRedraw />\r\n            )}\r\n            <Text style={{ color: `#FFFF00`, whiteSpace: `pre-wrap` }}>{assignment?.kind === `describe` ? assignment?.prompt ?? `` : ``}</Text>\r\n        </View>\r\n    );\r\n};\r\n\r\nexport const DoodlePartyPlayView = (props: { controller: DoodlePartyController }) => {\r\n    const { clientState, meshState } = props.controller;\r\n    const { clientKey } = clientState.client.clientPlayer;\r\n    const assigment = meshState?.players.find(x => x.clientKey === clientKey)?.assignment;\r\n    const [text, setText] = useState(``);\r\n\r\n    useEffect(() => {\r\n        setText(``);\r\n    }, [assigment]);\r\n\r\n    if (!assigment) {\r\n        return (\r\n            <>\r\n                <View style={{ padding: 8 }}>\r\n                    <Text>Please Wait Until Next Round</Text>\r\n                </View>\r\n                <PartyViewer controller={props.controller} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    if (assigment.kind === `describe` && assigment.doodle) {\r\n        const onDoneDescribe = () => {\r\n            assigment.prompt = text;\r\n            props.controller.sendAssignment(assigment);\r\n        };\r\n\r\n        return (\r\n            <>\r\n                <View style={{ flexDirection: `column`, alignItems: `center` }}>\r\n                    <Text style={{ fontSize: 20, margin: 8 }}>Describe</Text>\r\n                    <DoodleDisplayView style={{ width: 312, height: 312, color: `#FFFFFF`, backgroundColor: `#000000` }} drawing={decodeDoodleDrawing(assigment.doodle)} shouldAnimate enableRedraw />\r\n                    {!assigment.prompt && (\r\n                        <>\r\n                            <Text style={{ fontSize: 20, margin: 8, color: `#FFFF00` }}>What is this?</Text>\r\n                            <C.Input_Text value={text} onChange={setText} onSubmit={onDoneDescribe} />\r\n                            <C.Button_FieldInline onPress={onDoneDescribe}>Done</C.Button_FieldInline>\r\n                        </>\r\n                    )}\r\n                    {assigment.prompt && (\r\n                        <>\r\n                            <Text style={{ fontSize: 20, margin: 8, color: `#FFFF00` }}>{assigment.prompt}</Text>\r\n                            <Text style={{ fontSize: 20, margin: 8, color: `#FFFF00` }}>Waiting for other players</Text>\r\n                            <ActivityIndicator size='large' color='#FFFF00' />\r\n                        </>\r\n                    )}\r\n                </View>\r\n            </>\r\n        );\r\n    }\r\n\r\n    // Doodle\r\n    if (assigment.doodle) {\r\n        return (\r\n            <>\r\n                <View style={{ flexDirection: `column`, alignItems: `center` }}>\r\n                    <Text style={{ fontSize: 20, margin: 8 }}>Draw</Text>\r\n                    <DoodleDisplayView style={{ width: 312, height: 312, color: `#FFFFFF`, backgroundColor: `#000000` }} drawing={decodeDoodleDrawing(assigment.doodle)} shouldAnimate enableRedraw />\r\n                    <Text style={{ fontSize: 20, margin: 8, color: `#FFFF00` }}>Waiting for other players</Text>\r\n                    <ActivityIndicator size='large' color='#FFFF00' />\r\n                </View>\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Text style={{ fontSize: 20, margin: 8 }}>Draw</Text>\r\n            <DoodleGameView_DrawWord prompt={assigment.prompt ?? ``} onDone={(x) => {\r\n                assigment.doodle = encodeDoodleDrawing(x);\r\n                props.controller.sendAssignment(assigment);\r\n            }} />\r\n        </>\r\n    );\r\n};\r\n","/* eslint-disable react/no-array-index-key */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { View, Text, ActivityIndicator } from 'react-native-lite';\r\nimport { useDoodlePartyController, DoodlePartyController } from './doodle-party-state';\r\nimport { DoodlePartyProfileView } from './doodle-party-user-profile';\r\nimport { DoodlePartyStatusBar, DoodlePartyPlayView, PartyViewer } from './doodle-party-components';\r\n\r\nexport const DoodlePartyView = () => {\r\n\r\n    const controller = useDoodlePartyController();\r\n    return (\r\n        <>\r\n            <DoodlePartyStatusBar controller={controller} />\r\n            <DoodlePartyView_Inner controller={controller} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport const DoodlePartyView_Inner = ({ controller }: { controller: DoodlePartyController }) => {\r\n\r\n    const [mode, setMode] = useState(`profile` as 'profile' | 'play' | 'viewer');\r\n\r\n    const onProfileDone = () => {\r\n        // console.log(`onProfileDone`);\r\n        setMode(`play`);\r\n    };\r\n\r\n    if (controller.loading) {\r\n        return (\r\n            <ActivityIndicator size='large' color='#FFFF00' />\r\n        );\r\n    }\r\n\r\n    // Debug\r\n    if (controller.clientState.client.role === `debug`) {\r\n        return (\r\n            <DebugView controller={controller} />\r\n        );\r\n    }\r\n\r\n    // Viewer\r\n    if (controller.clientState.client.role === `viewer`) {\r\n        return (\r\n            <PartyViewer controller={controller} />\r\n        );\r\n    }\r\n\r\n    // Player\r\n\r\n    // Profile\r\n    if (mode === `profile`) {\r\n        // console.log(`DoodlePartyView profile`, { controller });\r\n        return (\r\n            <DoodlePartyProfileView controller={controller} onDone={onProfileDone} />\r\n        );\r\n    }\r\n\r\n    // // Waiting\r\n    // if (controller.gameState.players.some(x => !x.isReady)) {\r\n    //     return (\r\n    //         <PartyViewer controller={controller} />\r\n    //     );\r\n    // }\r\n\r\n    // Play View\r\n    return (\r\n        <DoodlePartyPlayView controller={controller} />\r\n    );\r\n};\r\n\r\nconst DebugView = (props: { controller: DoodlePartyController }) => {\r\n    const { clientState, meshState, _events, _messages } = props.controller;\r\n\r\n    const [renderId, setRenderId] = useState(0);\r\n    useEffect(() => {\r\n        const intervalId = setInterval(() => { setRenderId(s => s + 1); }, 1000);\r\n        return () => {\r\n            clearInterval(intervalId);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <PartyViewer controller={props.controller} />\r\n            <View style={{ marginTop: 64, background: `#555555` }}>\r\n\r\n                <Text style={{ fontSize: 20 }}>Debug</Text>\r\n                <View>\r\n                    <Text>{`Query: ${JSON.stringify(clientState.client._query)}`}</Text>\r\n                    <Text>{`Room: ${clientState.client.room}`}</Text>\r\n                    <Text>{`Role: ${clientState.client.role}`}</Text>\r\n                </View>\r\n\r\n                <View style={{ padding: 4 }}>\r\n                    <Text style={{ whiteSpace: `pre-wrap`, fontSize: 18 }}>Host</Text>\r\n                    <Text style={{ whiteSpace: `pre-wrap`, fontSize: 14 }}>{`'${meshState?.hostClientKey ?? ``}'`}</Text>\r\n\r\n                    <Text style={{ whiteSpace: `pre-wrap`, fontSize: 18 }}>Players</Text>\r\n                    {meshState?.players.map((x, i) => (\r\n                        <Text key={i} style={{ whiteSpace: `pre-wrap`, fontSize: 14 }}>{JSON.stringify(x)}</Text>\r\n                    ))}\r\n                </View>\r\n\r\n                <Text style={{ fontSize: 20 }}>Web Sockets</Text>\r\n                <View>\r\n                    <View style={{ padding: 4 }}>\r\n                        <Text style={{ whiteSpace: `pre-wrap`, fontSize: 18 }}>Events</Text>\r\n                        {_events.map((x, i) => (\r\n                            <Text key={i} style={{ whiteSpace: `pre-wrap`, fontSize: 14 }}>{JSON.stringify(x)}</Text>\r\n                        ))}\r\n                    </View>\r\n                    <View style={{ padding: 4 }}>\r\n                        <Text style={{ whiteSpace: `pre-wrap`, fontSize: 18 }}>Messages</Text>\r\n                        {_messages.map((x, i) => (\r\n                            <Text key={i} style={{ whiteSpace: `pre-wrap`, fontSize: 14 }}>{`${x.t} ${x._r - x.t}: ${JSON.stringify(x)}`}</Text>\r\n                        ))}\r\n                    </View>\r\n                </View>\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n"],"sourceRoot":""}