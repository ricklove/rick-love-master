{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/utils/query.ts","webpack:///D:/Projects/rick-love-master/code/doodle/doodle-party-state.ts","webpack:///D:/Projects/rick-love-master/code/doodle/doodle-party-user-profile.tsx","webpack:///D:/Projects/rick-love-master/code/doodle/doodle-party-components.tsx","webpack:///D:/Projects/rick-love-master/code/doodle/doodle-party.tsx"],"names":["createClientStorage","clientStorage","load","JSON","parse","localStorage","getItem","save","value","setItem","stringify","createDefaultGameState","query","queryString","substr","split","pair","decodeURIComponent","parseQuery","window","location","search","client","_query","room","role","parseRole","clientPlayer","clientKey","Math","random","name","emoji","isReady","players","history","rounds","useDoodlePartyController","gameState","useRef","current","useState","loading","setLoading","renderId","setRenderId","refresh","s","messages","setMessages","events","setEvents","send","messageHandler","useEffect","isUser","connection","createWebsocketClient","websocketsApiUrl","websocketsApiConfig","connect","key","unsubMessages","subscribeMessages","message","console","log","syncResponseId","setTimeout","sendGameState","requestedClientKey","masterClientKey","kind","timestamp","Date","now","masterState","startTimestamp","clientStates","sendNewAssignmentsIfReady","some","x","assignment","doodle","prompt","missingAssignments","filter","length","forEach","lastRound","undefined","completed","map","push","old","firstPlayer","shift","i","p","oldAssigment","decodeDoodleDrawing","segments","flatMap","find","newAssignment","a","uploadApiWebClient","createUploadApiWebClient","uploadApiConfig","createUploadUrl","prefix","doodleStoragePaths","doodlePartyDrawingsPrefix","backupUrl","uploadUrl","backupUploader","createUploader","uploadData","setInterval","m","lastMessageTimestamp","aliveTimeout","toKeyValueArray","deadTimeout","droppedClientKey","randomIndex","handleMessage","players_after","assigment","playerAssignment","clearTimeout","clientState","Object","assign","createMessageHandler","receivedAtTimestamp","unsubEvents","subscribeConnectionEvents","event","isConnected","unsubscribe","sendClientPlayer","setClientPlayer","sendAssignment","_messages","_events","DoodlePartyProfileView","props","controller","userProfile","setUserProfile","usedEmojis","setUsedEmojis","View_Panel","Text_FormTitle","onUserProfileChange","View_FormActionRow","Button_FormAction","onPress","onDone","DoodlePartyPlayerList","style","flexDirection","alignItems","fontSize","width","userProfileEmojis","replace","trim","UserProfileView","availableEmojis","setAvailableEmojis","isShowingEmojiSelection","setIsShowingEmojiSelection","includes","View_Form","flexWrap","View_FieldRow","onNameChange","UserProfileName","setName","isEditing","setIsEditing","changeName","Input_Text","onChange","onSubmit","onFocus","Button_FieldInline","DoodlePartyStatusBar","padding","flex","PartyViewer","player","AssignmentView","height","color","backgroundColor","drawing","shouldAnimate","enableRedraw","DoodlePartyPlayView","text","setText","onDoneDescribe","margin","size","encodeDoodleDrawing","DoodlePartyView","DoodlePartyView_Inner","mode","setMode","DebugView","marginTop","background","whiteSpace"],"mappings":"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","file":"20-3a673dff33581c7b4541.js","sourcesContent":["export const parseQuery = (queryString: string): { [key: string]: undefined | string } => {\r\n    const query = {} as { [key: string]: string };\r\n    const pairs = (queryString[0] === `?` ? queryString.substr(1) : queryString).split(`&`);\r\n    for (const element of pairs) {\r\n        const pair = element.split(`=`);\r\n        query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || ``);\r\n    }\r\n    return query;\r\n};\r\n","import { useRef, useState, useEffect } from 'react';\r\nimport { parseQuery } from 'utils/query';\r\nimport { WebsocketConnectionEvent } from 'websockets-api/client/types';\r\nimport { createWebsocketClient } from 'websockets-api/client/websocket-client';\r\nimport { websocketsApiConfig } from 'websockets-api/client/config';\r\nimport { toKeyValueArray } from 'utils/objects';\r\nimport { randomIndex } from 'utils/random';\r\nimport { createSmartUploader, createUploader } from 'upload-api/client/uploader';\r\nimport { uploadApiConfig } from 'upload-api/client/config';\r\nimport { createUploadApiWebClient } from 'upload-api/client/web-client';\r\nimport { doodleStoragePaths } from './doodle-paths';\r\nimport { DoodleDataWithScore, DoodleData_Encoded, DoodleDrawingEncoded, decodeDoodleDrawing, DoodleUserDrawingDataJson } from './doodle';\r\n\r\ntype GameState = {\r\n    client: {\r\n        _query: { [key: string]: undefined | string };\r\n        room: string;\r\n        role: 'debug' | 'viewer' | 'player';\r\n\r\n        clientPlayer: PlayerState;\r\n    };\r\n    masterClientKey?: string;\r\n    players: PlayerState[];\r\n    history: GameHistory;\r\n    // doodles: DoodleDataWithScore[];\r\n};\r\nexport type Assignment = {\r\n    kind: 'doodle' | 'describe';\r\n    prompt?: string;\r\n    doodle?: DoodleDrawingEncoded;\r\n};\r\nexport type PlayerState = {\r\n    clientKey: string;\r\n    name: string;\r\n    emoji: string;\r\n    isReady: boolean;\r\n    isUser?: boolean;\r\n\r\n    assignment?: Assignment;\r\n};\r\ntype GameRound = { completed: PlayerState[] };\r\ntype GameHistory = { rounds: GameRound[] };\r\ntype PlayerProfile = {\r\n    clientKey: string;\r\n    name: string;\r\n    emoji: string;\r\n};\r\n\r\nconst createClientStorage = () => {\r\n    type ClientStorageData = {\r\n        clientPlayer: PlayerProfile;\r\n    };\r\n    const CLIENT_STORAGE_KEY = `_DoodleGameClient`;\r\n    const clientStorage = {\r\n        load: (): null | ClientStorageData => {\r\n            try {\r\n                return JSON.parse(localStorage.getItem(CLIENT_STORAGE_KEY) ?? `NULL!{}`) as unknown as ClientStorageData;\r\n            } catch{\r\n                return null;\r\n            }\r\n        },\r\n        save: (value: ClientStorageData): void => {\r\n            localStorage.setItem(CLIENT_STORAGE_KEY, JSON.stringify(value));\r\n        },\r\n    };\r\n    return {\r\n        clientStorage,\r\n    };\r\n};\r\nconst createDefaultGameState = (): GameState => {\r\n    const query = parseQuery(window.location.search);\r\n    const parseRoom = (value: undefined | string) => value ?? `UnknownRoom`;\r\n    const parseRole = (value: undefined | string): GameState['client']['role'] => {\r\n        switch (value) {\r\n            case `debug`: return `debug`;\r\n            case `viewer`: return `viewer`;\r\n            default: return `player`;\r\n        }\r\n    };\r\n\r\n    const gameState: GameState = {\r\n        client: {\r\n            _query: query,\r\n            room: parseRoom(query.room),\r\n            role: parseRole(query.role),\r\n\r\n            clientPlayer: {\r\n                clientKey: (`${Math.random()}`).substr(2),\r\n                name: ``,\r\n                emoji: `👤`,\r\n                isReady: false,\r\n            },\r\n        },\r\n        players: [],\r\n        history: { rounds: [] },\r\n    };\r\n\r\n    return gameState;\r\n};\r\n\r\ntype DoodlePartyMessage = {\r\n    timestamp: number;\r\n    clientKey: string;\r\n} & ({\r\n    kind: 'syncRequest';\r\n} | {\r\n    kind: 'syncResponse';\r\n    requestedClientKey: string;\r\n    gameState: {\r\n        masterClientKey: string;\r\n        players: PlayerState[];\r\n        history: GameHistory;\r\n    };\r\n} | {\r\n    kind: 'setPlayer';\r\n    clientPlayer: {\r\n        clientKey: string;\r\n        name: string;\r\n        emoji: string;\r\n        isReady: boolean;\r\n    };\r\n} | {\r\n    kind: 'aliveRequest';\r\n    requestedClientKey: string;\r\n} | {\r\n    kind: 'aliveResponse';\r\n} | {\r\n    kind: 'dropPlayer';\r\n    droppedClientKey: string;\r\n} | {\r\n    kind: 'assign';\r\n    players: PlayerState[];\r\n    lastRound?: GameRound;\r\n} | {\r\n    kind: 'completeAssignment';\r\n    playerAssignment: Assignment & { clientKey: string };\r\n});\r\nconst createNewAssigment = (): Assignment => {\r\n    return {\r\n        kind: `doodle`,\r\n        prompt: `Choose Your Own Word`,\r\n    };\r\n};\r\nconst createMessageHandler = (gameState: GameState, refresh: () => void, send: (message: DoodlePartyMessage) => void) => {\r\n    console.log(`createMessageHandler`);\r\n    const { clientKey } = gameState.client.clientPlayer;\r\n\r\n    let syncResponseId = setTimeout(() => { });\r\n    const sendGameState = (requestedClientKey: string) => {\r\n        // Claim the master \r\n        gameState.masterClientKey = clientKey;\r\n        send({\r\n            kind: `syncResponse`,\r\n            requestedClientKey,\r\n            gameState: {\r\n                masterClientKey: gameState.masterClientKey,\r\n                players: gameState.players,\r\n                history: gameState.history,\r\n            },\r\n            clientKey,\r\n            timestamp: Date.now(),\r\n        });\r\n    };\r\n\r\n    const masterState = {\r\n        startTimestamp: Date.now(),\r\n        clientStates: {} as { [clientKey: string]: { lastMessageTimestamp: number } },\r\n    };\r\n\r\n    const sendNewAssignmentsIfReady = () => {\r\n        if (gameState.players.some(x => !x.isReady || (x.assignment && (!x.assignment.doodle || !x.assignment.prompt)))) {\r\n            // Add new player assignments\r\n            const missingAssignments = gameState.players.filter(x => x.isReady && !x.assignment);\r\n            if (missingAssignments.length > 0) {\r\n                missingAssignments.forEach(x => { x.assignment = createNewAssigment(); });\r\n\r\n                send({\r\n                    kind: `assign`,\r\n                    players: gameState.players,\r\n                    lastRound: undefined,\r\n                    clientKey,\r\n                    timestamp: Date.now(),\r\n                });\r\n                refresh();\r\n                return;\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Save Round\r\n        const lastRound = { completed: [...gameState.players.map(x => ({ ...x, assignment: x.assignment ? { ...x.assignment } : undefined }))] };\r\n        gameState.history.rounds.push(lastRound);\r\n\r\n        // Rotate next assignment\r\n        const old = gameState.players.map(x => x.assignment);\r\n\r\n        // Rotate Players\r\n        const firstPlayer = gameState.players.shift();\r\n        if (!firstPlayer) { return; }\r\n        gameState.players.push(firstPlayer);\r\n        for (let i = 0; i < gameState.players.length; i++) {\r\n            const p = gameState.players[i];\r\n\r\n            const oldAssigment = old[i];\r\n            const doodle = oldAssigment?.doodle;\r\n            const prompt = oldAssigment?.prompt;\r\n            if (!oldAssigment || !prompt || !doodle || decodeDoodleDrawing(doodle).segments.length <= 0\r\n                // Or if player has had to draw this prompt before (previous was describe)\r\n                || (oldAssigment.kind === `describe` && gameState.history.rounds.flatMap(x => x.completed).find(x => x.clientKey === p.clientKey && prompt === p.assignment?.prompt))\r\n            ) {\r\n                gameState.players[i].assignment = createNewAssigment();\r\n                continue;\r\n            }\r\n\r\n\r\n            const newAssignment = { ...oldAssigment };\r\n            // Switch assignment types\r\n            if (newAssignment.kind === `doodle`) {\r\n                newAssignment.kind = `describe`;\r\n                newAssignment.prompt = undefined;\r\n            } else {\r\n                newAssignment.kind = `doodle`;\r\n                newAssignment.doodle = undefined;\r\n            }\r\n\r\n            gameState.players[i].assignment = newAssignment;\r\n        }\r\n\r\n        send({\r\n            kind: `assign`,\r\n            players: gameState.players,\r\n            lastRound,\r\n            clientKey,\r\n            timestamp: Date.now(),\r\n        });\r\n\r\n        // Save to server (for data)\r\n        setTimeout(async () => {\r\n            const uploadApiWebClient = createUploadApiWebClient(uploadApiConfig);\r\n            const backupUrl = (await uploadApiWebClient.createUploadUrl({ prefix: `${doodleStoragePaths.doodlePartyDrawingsPrefix}/${Date.now()}` })).uploadUrl;\r\n            const backupUploader = createUploader(backupUrl);\r\n            await backupUploader.uploadData({\r\n                history: gameState.history,\r\n            });\r\n        });\r\n    };\r\n\r\n    const aliveTimeout = 15;\r\n    const deadTimeout = 30;\r\n\r\n    setInterval(() => {\r\n        const m = masterState.clientStates[gameState.masterClientKey ?? ``] ?? { lastMessageTimestamp: masterState.startTimestamp };\r\n        // console.log(`createMessageHandler`, { m, masterState });\r\n\r\n        // Clients - Detect Dead Master\r\n        if (gameState.masterClientKey !== clientKey) {\r\n            if (Date.now() > deadTimeout * 1000 + m.lastMessageTimestamp) {\r\n                console.log(`createMessageHandler - Master not responsive!`, { m, masterState });\r\n                // Master is not active, take over (send game state to self will work)\r\n                sendGameState(clientKey);\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Make sure assignments are out\r\n        sendNewAssignmentsIfReady();\r\n\r\n        // Keep Master Alive\r\n        if (Date.now() > aliveTimeout * 1000 + m.lastMessageTimestamp) {\r\n            // Master (self) is not being active - send a message before another client takes over\r\n            send({ kind: `aliveResponse`, clientKey, timestamp: Date.now() });\r\n        }\r\n\r\n        // Drop unresponsive players\r\n        toKeyValueArray(masterState.clientStates)\r\n            .filter(x => x.key !== clientKey)\r\n            .filter(x => Date.now() > aliveTimeout * 1000 + x.value.lastMessageTimestamp)\r\n            .map(x => send({\r\n                kind: `aliveRequest`,\r\n                requestedClientKey: x.key,\r\n                clientKey,\r\n                timestamp: Date.now(),\r\n            }));\r\n        toKeyValueArray(masterState.clientStates)\r\n            .filter(x => x.key !== clientKey)\r\n            .filter(x => Date.now() > deadTimeout * 1000 + x.value.lastMessageTimestamp)\r\n            .map(x => send({\r\n                kind: `dropPlayer`,\r\n                droppedClientKey: x.key,\r\n                clientKey,\r\n                timestamp: Date.now(),\r\n            }));\r\n\r\n    }, 3000 + randomIndex(3000));\r\n\r\n    const handleMessage = (message: DoodlePartyMessage) => {\r\n        masterState.clientStates[message.clientKey] = { lastMessageTimestamp: Date.now() };\r\n\r\n        if (message.kind === `setPlayer`) {\r\n            let p = gameState.players.find(x => x.clientKey === message.clientPlayer.clientKey);\r\n            if (!p) {\r\n                p = { ...message.clientPlayer };\r\n                gameState.players.push(p);\r\n            }\r\n            p.isUser = p.clientKey === clientKey;\r\n            p.name = message.clientPlayer.name;\r\n            p.emoji = message.clientPlayer.emoji;\r\n            p.isReady = message.clientPlayer.isReady;\r\n\r\n            // If master\r\n            if (clientKey === gameState.masterClientKey) {\r\n                setTimeout(() => {\r\n                    sendNewAssignmentsIfReady();\r\n                }, 3000);\r\n            }\r\n\r\n            refresh();\r\n            return;\r\n        }\r\n\r\n        if (message.kind === `dropPlayer`) {\r\n            gameState.players = gameState.players.filter(x => x.clientKey !== message.droppedClientKey);\r\n            console.log(`dropPlayer`, { players_after: [...gameState.players], message });\r\n            refresh();\r\n            return;\r\n        }\r\n\r\n        // Ignore own messages\r\n        if (message.clientKey === clientKey) { return; }\r\n\r\n        // Assigments\r\n        if (message.kind === `assign`) {\r\n            gameState.players = message.players;\r\n            if (message.lastRound) {\r\n                gameState.history.rounds.push(message.lastRound);\r\n            }\r\n            refresh();\r\n            return;\r\n        }\r\n        if (message.kind === `completeAssignment`) {\r\n            // Add Doodle, Prompt\r\n            const assigment = gameState.players.find(x => x.clientKey === message.clientKey)?.assignment;\r\n            if (!assigment) { return; }\r\n            assigment.prompt = message.playerAssignment.prompt;\r\n            assigment.doodle = message.playerAssignment.doodle;\r\n\r\n            // If master\r\n            if (clientKey === gameState.masterClientKey) {\r\n                sendNewAssignmentsIfReady();\r\n            }\r\n\r\n            refresh();\r\n            return;\r\n        }\r\n\r\n        // Alive Request\r\n        if (message.kind === `aliveRequest`) {\r\n            if (message.requestedClientKey !== clientKey) { return; }\r\n            send({ kind: `aliveResponse`, clientKey, timestamp: Date.now() });\r\n            return;\r\n        }\r\n\r\n        // Sync\r\n        if (message.kind === `syncRequest`) {\r\n            if (gameState.masterClientKey === clientKey) {\r\n                sendGameState(message.clientKey);\r\n                return;\r\n            }\r\n\r\n            clearTimeout(syncResponseId);\r\n            syncResponseId = setTimeout(() => {\r\n                // Master has not responded in a timely manner - claim it\r\n                sendGameState(message.clientKey);\r\n            }, 1000 + randomIndex(3000));\r\n        }\r\n        if (message.kind === `syncResponse`) {\r\n            clearTimeout(syncResponseId);\r\n\r\n            if (message.requestedClientKey !== clientKey) {\r\n                // Verify master is correct\r\n                if (message.gameState.players.length < gameState.players.length\r\n                    || message.gameState.history.rounds.length < gameState.history.rounds.length\r\n                ) {\r\n                    // The master is wrong - claim master and correct data\r\n                    sendGameState(message.clientKey);\r\n                    sendGameState(message.requestedClientKey);\r\n                    return;\r\n                }\r\n\r\n                // The master is right - accept the master\r\n                gameState.masterClientKey = message.gameState.masterClientKey;\r\n            }\r\n\r\n            // Use received state\r\n            const clientState = gameState.client;\r\n            Object.assign(gameState, message.gameState);\r\n            gameState.client = clientState;\r\n            gameState.players.forEach(x => { x.isUser = false; });\r\n            const p = gameState.players.find(x => x.clientKey === clientState.clientPlayer.clientKey);\r\n            if (p) { p.isUser = true; }\r\n        }\r\n    };\r\n\r\n\r\n    return {\r\n        handleMessage,\r\n    };\r\n};\r\ntype MessageHandler = ReturnType<typeof createMessageHandler>;\r\n\r\nexport const useDoodlePartyController = () => {\r\n    const gameStateRef = useRef(createDefaultGameState());\r\n    const gameState = gameStateRef.current;\r\n    const { clientKey } = gameState.client.clientPlayer;\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [renderId, setRenderId] = useState(0);\r\n    const refresh = () => {\r\n        setRenderId(s => s + 1);\r\n    };\r\n\r\n    const loadClientPlayerFromStorage = () => {\r\n        // Load Client Player\r\n        const { clientStorage } = createClientStorage();\r\n        const s = clientStorage.load();\r\n        if (s) {\r\n            gameState.client.clientPlayer = {\r\n                clientKey: s.clientPlayer.clientKey,\r\n                name: s.clientPlayer.name,\r\n                emoji: s.clientPlayer.emoji,\r\n                isReady: false,\r\n                isUser: true,\r\n            };\r\n        }\r\n        refresh();\r\n    };\r\n\r\n    const [messages, setMessages] = useState([] as (DoodlePartyMessage & { receivedAtTimestamp: number })[]);\r\n    const [events, setEvents] = useState([] as WebsocketConnectionEvent[]);\r\n    const send = useRef(null as null | ((message: DoodlePartyMessage) => void));\r\n    const messageHandler = useRef(null as null | MessageHandler);\r\n\r\n    useEffect(() => {\r\n        loadClientPlayerFromStorage();\r\n\r\n        const connection = createWebsocketClient({ websocketsApiUrl: websocketsApiConfig.websocketsApiUrl })\r\n            .connect<DoodlePartyMessage>({ key: gameState.client.room });\r\n\r\n        const unsubMessages = connection.subscribeMessages(message => {\r\n            if (!messageHandler.current) { messageHandler.current = createMessageHandler(gameState, refresh, (x) => send.current?.(x)); }\r\n            messageHandler.current.handleMessage(message);\r\n            setMessages(s => [...s, { ...message, receivedAtTimestamp: Date.now() }]);\r\n        });\r\n        const unsubEvents = connection.subscribeConnectionEvents(event => {\r\n            send.current = connection.isConnected() ? connection.send : null;\r\n            setEvents(s => [...s, event]);\r\n        });\r\n\r\n        setLoading(false);\r\n        return () => {\r\n            send.current = null;\r\n            unsubMessages.unsubscribe();\r\n            unsubEvents.unsubscribe();\r\n        };\r\n    }, []);\r\n\r\n    // const [messageText, setMessageText] = useState(``);\r\n    // const sendMessage = () => {\r\n    //     if (!send.current) { return; }\r\n    //     send.current?.({ text: messageText, timestamp: Date.now(), clientKey: clientKey });\r\n    //     setMessageText(``);\r\n    // };\r\n\r\n    const setClientPlayer = (value: { name: string, emoji: string, isReady: boolean }) => {\r\n        console.log(`useDoodlePartyController.setClientPlayer`, { value, send: send.current });\r\n        const { clientStorage } = createClientStorage();\r\n        gameState.client.clientPlayer = { ...gameState.client.clientPlayer, ...value };\r\n        clientStorage.save({\r\n            clientPlayer: gameState.client.clientPlayer,\r\n        });\r\n        sendClientPlayer();\r\n        refresh();\r\n    };\r\n    const sendClientPlayer = () => {\r\n        // Send to web socket on change\r\n        if (gameState.client.role !== `player`) { return; }\r\n\r\n        send.current?.({\r\n            kind: `setPlayer`,\r\n            clientPlayer: gameState.client.clientPlayer,\r\n            clientKey,\r\n            timestamp: Date.now(),\r\n        });\r\n    };\r\n    const sendAssignment = (assignment: Assignment) => {\r\n        // Send to web socket on change\r\n        if (gameState.client.role !== `player`) { return; }\r\n\r\n        send.current?.({\r\n            kind: `completeAssignment`,\r\n            playerAssignment: { ...assignment, clientKey },\r\n            clientKey,\r\n            timestamp: Date.now(),\r\n        });\r\n    };\r\n\r\n    // Sync game state (on connect)\r\n    useEffect(() => {\r\n        if (!send.current) { return; }\r\n\r\n        sendClientPlayer();\r\n\r\n        // Sync\r\n        send.current?.({\r\n            kind: `syncRequest`,\r\n            clientKey,\r\n            timestamp: Date.now(),\r\n        });\r\n\r\n    }, [send.current]);\r\n\r\n    return {\r\n        loading,\r\n        renderId,\r\n        gameState,\r\n        setClientPlayer,\r\n        sendAssignment,\r\n        _messages: messages,\r\n        _events: events,\r\n    };\r\n};\r\nexport type DoodlePartyController = ReturnType<typeof useDoodlePartyController>;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { C } from 'controls-react';\r\nimport { View, Text, TouchableOpacity } from 'react-native-lite';\r\nimport { DoodlePartyController, PlayerState } from './doodle-party-state';\r\n\r\nexport const DoodlePartyProfileView = (props: { controller: DoodlePartyController, onDone: () => void }) => {\r\n    const { clientPlayer } = props.controller.gameState.client;\r\n    const [userProfile, setUserProfile] = useState({ ...clientPlayer } as UserProfileData);\r\n    const [usedEmojis, setUsedEmojis] = useState(props.controller.gameState.players.filter(x => !x.isUser).map(x => x.emoji));\r\n\r\n    const changeUserProfile = (value: UserProfileData) => {\r\n        setUserProfile(value);\r\n        props.controller.setClientPlayer({ ...value, isReady: false });\r\n    };\r\n    const onDone = () => {\r\n        props.controller.setClientPlayer({ ...clientPlayer, isReady: true });\r\n        props.onDone();\r\n    };\r\n\r\n    useEffect(() => {\r\n        setUsedEmojis(props.controller.gameState.players.filter(x => !x.isUser).map(x => x.emoji));\r\n    }, [props.controller.renderId]);\r\n\r\n    // console.log(`DoodlePartyProfileView`, { userProfile, usedEmojis });\r\n    return (\r\n        <>\r\n            <C.View_Panel>\r\n                <C.Text_FormTitle >User</C.Text_FormTitle>\r\n                <UserProfileView\r\n                    userProfile={userProfile}\r\n                    onUserProfileChange={changeUserProfile}\r\n                    usedEmojis={usedEmojis}\r\n                />\r\n                <C.View_FormActionRow>\r\n                    <C.Button_FormAction onPress={onDone}>Ready</C.Button_FormAction>\r\n                </C.View_FormActionRow>\r\n            </C.View_Panel>\r\n            <DoodlePartyPlayerList {...props} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport const DoodlePartyPlayerList = (props: { controller: DoodlePartyController }) => {\r\n\r\n    const getPlayerIcon = (p: PlayerState) => {\r\n        if (!p.isReady) return `◻`;\r\n        if (p.assignment && (p.assignment && (!p.assignment.doodle)) && p.assignment.kind === `doodle`) return `🎨`;\r\n        if (p.assignment && (p.assignment && (!p.assignment.prompt)) && p.assignment.kind === `describe`) return `✏`;\r\n        return `✔`;\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <View>\r\n                {props.controller.gameState.players.map(x => (\r\n                    <View key={x.clientKey} style={{ flexDirection: `row`, alignItems: `center` }}>\r\n                        <View>\r\n                            <Text style={{ fontSize: 24 }} >{getPlayerIcon(x)}</Text>\r\n                        </View>\r\n                        <View style={{ width: 48 }}>\r\n                            <Text style={{ fontSize: 32 }} >{x.emoji}</Text>\r\n                        </View>\r\n                        <View>\r\n                            <Text style={{ fontSize: 16 }}>{x.name}</Text>\r\n                        </View>\r\n                    </View>\r\n                ))}\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n\r\ntype UserProfileData = {\r\n    name: string;\r\n    emoji: string;\r\n};\r\n\r\nconst userProfileEmojis = `\r\n🐵 🐶 🐺 🐱 🦁 🐯 🦒 🦊 🦝 🐮 🐷 🐗 🐭 🐹 🐰 🐻 🐨 🐼 🐸 🦓 🐴 🦄 🐔 🐲 \r\n🤖 👽 👻 🍕 🍔 🌭 🥓 🌮 🍖 🥩 🍦 🍩 🍰 🧁 🥝 🥥 🍒 🍓 🍄 🥦 🥑 🥕 \r\n🚗 🚑 🚒 🚜 🦼 🚲 🚂 🛩 🚀 🛸 🛰 🪐 🧯 🧷  🪑 🛎 ☂ ⛄\r\n`.replace(/\\n/g, ``).split(` `).map(x => x.trim()).filter(x => x);\r\n\r\nconst UserProfileView = ({ userProfile, onUserProfileChange, usedEmojis }: { userProfile: UserProfileData, onUserProfileChange: (value: UserProfileData) => void, usedEmojis: string[] }) => {\r\n    const [availableEmojis, setAvailableEmojis] = useState(userProfileEmojis);\r\n    const [isShowingEmojiSelection, setIsShowingEmojiSelection] = useState(false);\r\n\r\n    const selectCharacter = (emoji: string) => {\r\n        setIsShowingEmojiSelection(false);\r\n        onUserProfileChange({ ...userProfile, emoji });\r\n    };\r\n\r\n    useEffect(() => {\r\n        setAvailableEmojis(userProfileEmojis.filter(x => !usedEmojis.includes(x)));\r\n    }, [usedEmojis]);\r\n\r\n    // console.log(`UserProfileView`, { usedEmojis });\r\n\r\n    if (isShowingEmojiSelection) {\r\n        return (\r\n            <>\r\n                <C.View_Form>\r\n                    <View style={{ flexDirection: `row`, flexWrap: `wrap` }}>\r\n                        {availableEmojis.map(x => (\r\n                            <TouchableOpacity key={x} onPress={() => selectCharacter(x)} >\r\n                                <View>\r\n                                    <Text style={{ fontSize: 32 }} >{x}</Text>\r\n                                </View>\r\n                            </TouchableOpacity>\r\n                        ))}\r\n                    </View>\r\n                </C.View_Form>\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <C.View_Form>\r\n                <C.View_FieldRow>\r\n                    <TouchableOpacity onPress={() => setIsShowingEmojiSelection(true)} >\r\n                        <View>\r\n                            <Text style={{ fontSize: 32 }} >{userProfile.emoji}</Text>\r\n                        </View>\r\n                    </TouchableOpacity>\r\n                    <UserProfileName userProfile={userProfile} onNameChange={(x) => onUserProfileChange({ ...userProfile, name: x })} />\r\n                </C.View_FieldRow>\r\n            </C.View_Form>\r\n        </>\r\n    );\r\n};\r\n\r\nconst UserProfileName = ({ userProfile, onNameChange }: { userProfile: UserProfileData, onNameChange: (value: string) => void }) => {\r\n    const [name, setName] = useState(userProfile.name || `Player`);\r\n    const [isEditing, setIsEditing] = useState(false);\r\n\r\n    const changeName = () => {\r\n        onNameChange(name);\r\n        setIsEditing(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <C.Input_Text value={name} onChange={setName} onSubmit={changeName} onFocus={() => { setName(``); setIsEditing(true); }} />\r\n            {isEditing && (\r\n                <C.Button_FieldInline onPress={changeName}>Set Name</C.Button_FieldInline>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n","/* eslint-disable react/no-array-index-key */\r\nimport React, { useState, useEffect } from 'react';\r\nimport { View, Text, ActivityIndicator, TextInput } from 'react-native-lite';\r\nimport { C } from 'controls-react';\r\nimport { DoodlePartyController, Assignment, PlayerState } from './doodle-party-state';\r\nimport { DoodlePartyPlayerList } from './doodle-party-user-profile';\r\nimport { DoodleGameView_DrawWord } from './doodle-components';\r\nimport { encodeDoodleDrawing, decodeDoodleDrawing } from './doodle';\r\nimport { DoodleDisplayView } from './doodle-view';\r\n\r\nexport const DoodlePartyStatusBar = (props: { controller: DoodlePartyController }) => {\r\n    const { gameState } = props.controller;\r\n    const { clientPlayer, role } = gameState.client;\r\n\r\n    return (\r\n        <>\r\n            <View key={clientPlayer.clientKey} style={{ padding: 4, flexDirection: `row`, alignItems: `center` }}>\r\n                {role === `player` && clientPlayer ? (\r\n                    <>\r\n                        <View style={{ width: 36 }}>\r\n                            <Text style={{ fontSize: 24 }} >{clientPlayer.emoji}</Text>\r\n                        </View>\r\n                        <View>\r\n                            <Text style={{ fontSize: 16 }}>{clientPlayer.name}</Text>\r\n                        </View>\r\n                    </>\r\n                ) : (\r\n                        <>\r\n                            <View>\r\n                                <Text style={{ fontSize: 16 }}>{role}</Text>\r\n                            </View>\r\n                        </>\r\n                    )}\r\n                <View style={{ flex: 1 }} />\r\n                {/* <View>\r\n                    <Text style={{ fontSize: 16 }}>{gameState.client.clientPlayer.clientKey}</Text>\r\n                </View> */}\r\n                <View>\r\n                    <Text style={{ fontSize: 16 }}>{gameState.masterClientKey === gameState.client.clientPlayer.clientKey ? `🟢` : ``}</Text>\r\n                </View>\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n\r\nexport const PartyViewer = (props: { controller: DoodlePartyController }) => {\r\n    return (\r\n        <View>\r\n            <Text>Players</Text>\r\n            <DoodlePartyPlayerList controller={props.controller} />\r\n            <Text>Rounds</Text>\r\n            <Text>{`${props.controller.gameState.history.rounds.length}`}</Text>\r\n            {props.controller.gameState.history.rounds.map((x, i) => (\r\n                <View key={`${i}`} style={{ flexDirection: `row`, alignItems: `center` }}>\r\n                    {x.completed.map(p => (\r\n                        <AssignmentView key={p.clientKey} player={p} />\r\n                    ))}\r\n                </View>\r\n            ))}\r\n        </View>\r\n    );\r\n};\r\n\r\nconst AssignmentView = (props: { player: PlayerState }) => {\r\n    const p = props.player;\r\n    const { assignment } = props.player;\r\n    return (\r\n        <View style={{ flexDirection: `column`, alignItems: `center` }}>\r\n            <Text>{p.name}</Text>\r\n            <Text>{p.emoji}</Text>\r\n            {!!assignment?.doodle && (\r\n                <DoodleDisplayView style={{ width: 104, height: 104, color: `#FFFFFF`, backgroundColor: `#000000` }} drawing={decodeDoodleDrawing(assignment.doodle)} shouldAnimate enableRedraw />\r\n            )}\r\n            <Text>{assignment?.prompt ?? ``}</Text>\r\n        </View>\r\n    );\r\n};\r\n\r\nexport const DoodlePartyPlayView = (props: { controller: DoodlePartyController }) => {\r\n    const { gameState } = props.controller;\r\n    const { clientKey } = gameState.client.clientPlayer;\r\n    const assigment = gameState.players.find(x => x.clientKey === clientKey)?.assignment;\r\n    const [text, setText] = useState(``);\r\n\r\n    useEffect(() => {\r\n        setText(``);\r\n    }, [assigment]);\r\n\r\n    if (!assigment) {\r\n        return (\r\n            <>\r\n                <View style={{ padding: 8 }}>\r\n                    <Text>Please Wait Until Next Round</Text>\r\n                </View>\r\n                <PartyViewer controller={props.controller} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    if (assigment.kind === `describe` && assigment.doodle) {\r\n        const onDoneDescribe = () => {\r\n            assigment.prompt = text;\r\n            props.controller.sendAssignment(assigment);\r\n        };\r\n\r\n        return (\r\n            <>\r\n                <View style={{ flexDirection: `column`, alignItems: `center` }}>\r\n                    <Text style={{ fontSize: 20, margin: 8 }}>Describe</Text>\r\n                    <DoodleDisplayView style={{ width: 312, height: 312, color: `#FFFFFF`, backgroundColor: `#000000` }} drawing={decodeDoodleDrawing(assigment.doodle)} shouldAnimate enableRedraw />\r\n                    {!assigment.prompt && (\r\n                        <>\r\n                            <Text style={{ fontSize: 20, margin: 8, color: `#FFFF00` }}>What is this?</Text>\r\n                            <C.Input_Text value={text} onChange={setText} onSubmit={onDoneDescribe} />\r\n                            <C.Button_FieldInline onPress={onDoneDescribe}>Done</C.Button_FieldInline>\r\n                        </>\r\n                    )}\r\n                    {assigment.prompt && (\r\n                        <Text style={{ fontSize: 20, margin: 8, color: `#FFFF00` }}>{assigment.prompt}</Text>\r\n                    )}\r\n                </View>\r\n            </>\r\n        );\r\n    }\r\n\r\n    // Doodle\r\n    if (assigment.doodle) {\r\n        return (\r\n            <>\r\n                <View style={{ flexDirection: `column`, alignItems: `center` }}>\r\n                    <Text style={{ fontSize: 20, margin: 8 }}>Draw</Text>\r\n                    <DoodleDisplayView style={{ width: 312, height: 312, color: `#FFFFFF`, backgroundColor: `#000000` }} drawing={decodeDoodleDrawing(assigment.doodle)} shouldAnimate enableRedraw />\r\n                    <Text style={{ fontSize: 20, margin: 8, color: `#FFFF00` }}>Waiting for other players</Text>\r\n                    <ActivityIndicator size='large' color='#FFFF00' />\r\n                </View>\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Text style={{ fontSize: 20, margin: 8 }}>Draw</Text>\r\n            <DoodleGameView_DrawWord prompt={assigment.prompt ?? ``} onDone={(x) => {\r\n                assigment.doodle = encodeDoodleDrawing(x);\r\n                props.controller.sendAssignment(assigment);\r\n            }} />\r\n        </>\r\n    );\r\n};\r\n","/* eslint-disable react/no-array-index-key */\r\nimport React, { useState } from 'react';\r\nimport { View, Text, ActivityIndicator } from 'react-native-lite';\r\nimport { useDoodlePartyController, DoodlePartyController } from './doodle-party-state';\r\nimport { DoodlePartyProfileView } from './doodle-party-user-profile';\r\nimport { DoodlePartyStatusBar, DoodlePartyPlayView, PartyViewer } from './doodle-party-components';\r\n\r\nexport const DoodlePartyView = () => {\r\n\r\n    const controller = useDoodlePartyController();\r\n    return (\r\n        <>\r\n            <DoodlePartyStatusBar controller={controller} />\r\n            <DoodlePartyView_Inner controller={controller} />\r\n        </>\r\n    );\r\n};\r\n\r\nexport const DoodlePartyView_Inner = ({ controller }: { controller: DoodlePartyController }) => {\r\n\r\n    const [mode, setMode] = useState(`profile` as 'profile' | 'play' | 'viewer');\r\n\r\n    const onProfileDone = () => {\r\n        // console.log(`onProfileDone`);\r\n        setMode(`play`);\r\n    };\r\n\r\n    if (controller.loading) {\r\n        return (\r\n            <ActivityIndicator size='large' color='#FFFF00' />\r\n        );\r\n    }\r\n\r\n    // Debug\r\n    if (controller.gameState.client.role === `debug`) {\r\n        return (\r\n            <DebugView controller={controller} />\r\n        );\r\n    }\r\n\r\n    // Viewer\r\n    if (controller.gameState.client.role === `viewer`) {\r\n        return (\r\n            <PartyViewer controller={controller} />\r\n        );\r\n    }\r\n\r\n    // Player\r\n\r\n    // Profile\r\n    if (mode === `profile`) {\r\n        // console.log(`DoodlePartyView profile`, { controller });\r\n        return (\r\n            <DoodlePartyProfileView controller={controller} onDone={onProfileDone} />\r\n        );\r\n    }\r\n\r\n    // // Waiting\r\n    // if (controller.gameState.players.some(x => !x.isReady)) {\r\n    //     return (\r\n    //         <PartyViewer controller={controller} />\r\n    //     );\r\n    // }\r\n\r\n    // Play View\r\n    return (\r\n        <DoodlePartyPlayView controller={controller} />\r\n    );\r\n};\r\n\r\nconst DebugView = (props: { controller: DoodlePartyController }) => {\r\n    const { gameState, _messages, _events } = props.controller;\r\n    return (\r\n        <>\r\n            <PartyViewer controller={props.controller} />\r\n            <View style={{ marginTop: 64, background: `#555555` }}>\r\n\r\n                <Text style={{ fontSize: 20 }}>Debug</Text>\r\n                <View>\r\n                    <Text>{`Query: ${JSON.stringify(gameState.client._query)}`}</Text>\r\n                    <Text>{`Room: ${gameState.client.room}`}</Text>\r\n                    <Text>{`Role: ${gameState.client.role}`}</Text>\r\n                </View>\r\n                <Text style={{ fontSize: 20 }}>Web Sockets</Text>\r\n                <View>\r\n                    <View style={{ padding: 4 }}>\r\n                        <Text style={{ whiteSpace: `pre-wrap`, fontSize: 18 }}>Events</Text>\r\n                        {_events.map((x, i) => (\r\n                            <Text key={i} style={{ whiteSpace: `pre-wrap`, fontSize: 14 }}>{JSON.stringify(x)}</Text>\r\n                        ))}\r\n                    </View>\r\n                    <View style={{ padding: 4 }}>\r\n                        <Text style={{ whiteSpace: `pre-wrap`, fontSize: 18 }}>Messages</Text>\r\n                        {_messages.map((x, i) => (\r\n                            <Text key={i} style={{ whiteSpace: `pre-wrap`, fontSize: 14 }}>{`${x.timestamp} ${x.receivedAtTimestamp - x.timestamp}: ${JSON.stringify(x)}`}</Text>\r\n                        ))}\r\n                    </View>\r\n                </View>\r\n            </View>\r\n        </>\r\n    );\r\n};\r\n"],"sourceRoot":""}