{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/art/artwork/gears.tsx"],"names":["drawGear","g","options","colorMode","position","x","y","radiusInner","radiusOuter","radiusAxis","teeth","rotationAngle","color","randomSeed","randomConstant","createRandomGenerator","random","Math","round","randomSym","stroke","h","s","b","a","noFill","toothAngle","TWO_PI","radI","radO","jitterSize","angle0","angle1","PI","j","noStroke","fill","curveTightness","beginShape","i","curveVertex","cos","sin","endShape","drawFace","faceType","radSmile","e","r","ex","ey","art_gears","key","title","description","artist","getTokenDescription","tokenId","renderArt","hostElement","hash","randomMain","tick","brightness","canvasSize","window","innerWidth","innerHeight","speed","halfSize","minGearRadius","maxGearRadius","gearCount","floor","lastGear","radius","gears","Array","map","targetRadius","targetDistance","lastPos","angleQuandrant","targetAngle","pos","xDelta","yDelta","actualRadius","sqrt","noise","noiseDebounceTime","Date","now","toggleNoise","disconnect","p5","Noise","amp","start","setup","createCanvas","mousePressed","mouseX","mouseY","touchStarted","t","touches","draw","background","faceCount","faceCreepyCount","entries","gear","direction","ceil","teethPassed","pow","result","translate","rotate"],"mappings":"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","file":"23-3009661e3a2c5fd57e99.js","sourcesContent":["/* eslint-disable new-cap */\r\n/* eslint-disable no-new */\r\nimport p5 from 'p5';\r\nimport { createRandomGenerator } from '../rando';\r\nimport { ArtWork } from '../artwork-type';\r\n\r\ntype Vector2 = { x: number, y: number };\r\ntype ColorHsb = {\r\n    /** 0-360 */\r\n    h: number;\r\n    /** 0-100 */\r\n    s: number;\r\n    /** 0-100 */\r\n    b: number;\r\n    /** 0-1 */\r\n    a: number;\r\n};\r\nconst drawGear = (g: p5,\r\n    options: {\r\n        position: Vector2;\r\n        radiusInner: number;\r\n        radiusOuter: number;\r\n        radiusAxis: number;\r\n        teeth: number;\r\n        rotationAngle: number;\r\n        color: ColorHsb;\r\n        randomSeed: string;\r\n    }) => {\r\n    g.colorMode(`hsl`);\r\n\r\n    const { position: { x, y }, radiusInner, radiusOuter, radiusAxis, teeth, rotationAngle, color, randomSeed } = options;\r\n\r\n    const angleRandomKs = 16;\r\n    // const angleRandomKs = 8;\r\n    const { random: randomConstant } = createRandomGenerator(`${randomSeed}`);\r\n    const { random } = createRandomGenerator(`${randomSeed}${Math.round(rotationAngle * angleRandomKs)}`);\r\n    const randomSym = () => 1 - 2 * random();\r\n\r\n    // g.fill(color.h, color.s, color.b, color.a);\r\n    // g.stroke(0, 0, 0, 1);\r\n    // g.stroke(0, 0, 0, color.a);\r\n    // g.stroke(0, 0, 0, 0);\r\n    // g.circle(x, y, radiusOuter * 2);\r\n    // g.circle(x, y, radius * 2);\r\n\r\n    g.stroke(color.h, color.s, color.b, color.a);\r\n    g.noFill();\r\n\r\n    // g.circle(x, y, radiusOuter * 2);\r\n\r\n    const toothAngle = g.TWO_PI / teeth;\r\n    const radI = radiusInner;\r\n    const radO = radiusOuter;\r\n    let jitterSize = 2.5;\r\n    const angle0 = rotationAngle;\r\n    const angle1 = angle0 + Math.PI * 2 * randomConstant();\r\n\r\n    jitterSize = radiusOuter * 0.5;\r\n    for (let j = 0; j < 4; j++) {\r\n\r\n        g.noStroke();\r\n        g.fill(color.h, color.s, color.b * 0.25, 0.4);\r\n        // g.fill(color.h, color.s, color.b, 0.25);\r\n        // g.fill(0, 0, 0);\r\n        g.curveTightness(0.9);\r\n        g.beginShape();\r\n        for (let i = 0; i <= teeth; i++) {\r\n            // g.curveVertex(x + diaI * g.cos((i + 0) * toothAngle), y + diaI * g.sin((i + 0) * toothAngle));\r\n            if (i !== 0) {\r\n                g.curveVertex(x + (radI - jitterSize * random()) * g.cos((i + 0.2) * toothAngle + angle0), y + (radI - jitterSize * random()) * g.sin((i + 0.2) * toothAngle + angle0));\r\n            }\r\n\r\n            g.curveVertex(x + (radO - jitterSize * random()) * g.cos((i + 0.3) * toothAngle + angle0), y + (radO - jitterSize * random()) * g.sin((i + 0.3) * toothAngle + angle0));\r\n            g.curveVertex(x + (radO - jitterSize * random()) * g.cos((i + 0.7) * toothAngle + angle0), y + (radO - jitterSize * random()) * g.sin((i + 0.7) * toothAngle + angle0));\r\n            g.curveVertex(x + (radI - jitterSize * random()) * g.cos((i + 0.8) * toothAngle + angle0), y + (radI - jitterSize * random()) * g.sin((i + 0.8) * toothAngle + angle0));\r\n            // g.curveVertex(x + diaI * g.cos((i + 1) * toothAngle), y + diaI * g.sin((i + 1) * toothAngle));\r\n            // g.arc(x, y, diaI, diaI, (i + 0) * toothAngle, (i + 0.5) * toothAngle);\r\n            // g.arc(x, y, diaO, diaO, (i + 0.5) * toothAngle, (i + 1) * toothAngle);\r\n        }\r\n        g.endShape();\r\n    }\r\n\r\n    jitterSize = 2.5;\r\n    g.noFill();\r\n    g.stroke(color.h, color.s, color.b, color.a);\r\n\r\n    // Draw face\r\n    const drawFace = randomConstant() > 0.5;\r\n    const faceType = random() > 0.5 ? `happy` as const : `creepy` as const;\r\n    if (drawFace) {\r\n        const radSmile = 0.5 * radI;\r\n        for (let j = 0; j < 4; j++) {\r\n\r\n            // Smile\r\n            if (faceType === `creepy`) {\r\n                jitterSize = 12;\r\n            }\r\n            g.noFill();\r\n            g.curveTightness(0.9);\r\n            g.beginShape();\r\n            for (let i = 0; i <= teeth / 3; i++) {\r\n                g.curveVertex(x + radSmile * g.cos((i + 0.2) * toothAngle + angle1) + jitterSize * randomSym(), y + radSmile * g.sin((i + 0.2) * toothAngle + angle1) + jitterSize * randomSym());\r\n            }\r\n            g.endShape();\r\n\r\n            // jitterSize = 2.5;\r\n\r\n            // Left Eye\r\n            for (let e = 0; e <= 1; e++) {\r\n                const r = e === 0 ? 1.1 : 1.6;\r\n                const ex = radSmile * Math.cos(r * Math.PI + angle1);\r\n                const ey = radSmile * Math.sin(r * Math.PI + angle1);\r\n                g.fill(0, 0, 0);\r\n                g.beginShape();\r\n                for (let i = 0; i <= teeth + 2; i++) {\r\n                    g.curveVertex(ex + x + radiusAxis * g.cos((i + 0.3) * toothAngle + angle1) + jitterSize * randomSym(), ey + y + radiusAxis * g.sin((i + 0.3) * toothAngle + angle1) + jitterSize * randomSym());\r\n                }\r\n                g.endShape();\r\n            }\r\n        }\r\n    }\r\n\r\n    if (drawFace && faceType === `creepy`) {\r\n        jitterSize = 5;\r\n    }\r\n\r\n    // jitterSize = 2.5;\r\n    for (let j = 0; j < 4; j++) {\r\n\r\n        g.noFill();\r\n        // g.fill(0, 0, 0, 0.1);\r\n        // g.fill(color.h, color.s, color.b, 0.05);\r\n        g.curveTightness(0.9);\r\n        g.beginShape();\r\n        for (let i = 0; i <= teeth; i++) {\r\n            // g.curveVertex(x + diaI * g.cos((i + 0) * toothAngle), y + diaI * g.sin((i + 0) * toothAngle));\r\n            if (i !== 0) {\r\n                g.curveVertex(x + radI * g.cos((i + 0.2) * toothAngle + angle0) + jitterSize * randomSym(), y + radI * g.sin((i + 0.2) * toothAngle + angle0) + jitterSize * randomSym());\r\n            }\r\n\r\n            g.curveVertex(x + radO * g.cos((i + 0.3) * toothAngle + angle0) + jitterSize * randomSym(), y + radO * g.sin((i + 0.3) * toothAngle + angle0) + jitterSize * randomSym());\r\n            g.curveVertex(x + radO * g.cos((i + 0.7) * toothAngle + angle0) + jitterSize * randomSym(), y + radO * g.sin((i + 0.7) * toothAngle + angle0) + jitterSize * randomSym());\r\n            g.curveVertex(x + radI * g.cos((i + 0.8) * toothAngle + angle0) + jitterSize * randomSym(), y + radI * g.sin((i + 0.8) * toothAngle + angle0) + jitterSize * randomSym());\r\n            // g.curveVertex(x + diaI * g.cos((i + 1) * toothAngle), y + diaI * g.sin((i + 1) * toothAngle));\r\n            // g.arc(x, y, diaI, diaI, (i + 0) * toothAngle, (i + 0.5) * toothAngle);\r\n            // g.arc(x, y, diaO, diaO, (i + 0.5) * toothAngle, (i + 1) * toothAngle);\r\n        }\r\n        g.endShape();\r\n\r\n        // Inner circle\r\n        g.fill(0, 0, 0);\r\n        g.beginShape();\r\n        for (let i = 0; i <= teeth + 2; i++) {\r\n            g.curveVertex(x + radiusAxis * g.cos((i + 0.3) * toothAngle + angle0) + jitterSize * randomSym(), y + radiusAxis * g.sin((i + 0.3) * toothAngle + angle0) + jitterSize * randomSym());\r\n        }\r\n        g.endShape();\r\n    }\r\n\r\n    return { faceType: drawFace ? faceType : null };\r\n};\r\n\r\nexport const art_gears: ArtWork = {\r\n    key: `gears`,\r\n    title: `Gears`,\r\n    description: `Are the gears of conflict twisting our perceptions of others?\r\n(Press image for sound)`,\r\n    artist: `Rick Love`,\r\n    getTokenDescription: (tokenId: string) => {\r\n        return null;\r\n    },\r\n    renderArt: (hostElement: HTMLElement, hash = `This is my hash!`) => {\r\n        (async () => await import(`p5/lib/addons/p5.sound`))();\r\n\r\n        const { random: randomMain } = createRandomGenerator(hash);\r\n\r\n        let tick = 0;\r\n\r\n        // const sat = 65 - 10 * Math.random();\r\n        const sat = 100;\r\n        const brightness = 60 - 20 * Math.random();\r\n\r\n        const TARGET_SIZE = 600;\r\n        const SMALL_SIZE = 300;\r\n        const canvasSize = window.innerWidth > TARGET_SIZE && window.innerHeight > TARGET_SIZE ? TARGET_SIZE : SMALL_SIZE;\r\n        const speed = canvasSize === TARGET_SIZE ? 1 / (100 - 70 * randomMain()) : 1 / (200 - 100 * randomMain());\r\n\r\n        const halfSize = canvasSize * 0.5;\r\n        const minGearRadius = canvasSize / 16;\r\n        const maxGearRadius = canvasSize / 3;\r\n        const minGearCount = 3;\r\n        const maxGearCount = 8;\r\n        const gearCount = Math.floor(minGearCount + (maxGearCount - minGearCount) * randomMain());\r\n\r\n        let lastGear = {\r\n            position: { x: canvasSize * randomMain(), y: canvasSize * randomMain() },\r\n            radius: minGearRadius,\r\n            // position: { x: canvasSize * randomMain(), y: canvasSize * randomMain() },\r\n            // size: minGearSize + (maxGearSize - minGearSize) * randomMain(),\r\n            randomSeed: `${randomMain()}`,\r\n            color: { h: 360 * randomMain(), s: 50, b: 50, a: 0.5 },\r\n        };\r\n        const gears = [...new Array(gearCount)].map(() => {\r\n\r\n            const targetRadius = minGearRadius + (maxGearRadius - minGearRadius) * randomMain();\r\n            const targetDistance = lastGear.radius + targetRadius;\r\n            const lastPos = lastGear.position;\r\n\r\n            // Try to bring back to center\r\n            const angleQuandrant = (lastPos.x > halfSize && lastPos.y > halfSize) ? (Math.PI * 1)\r\n                : (lastPos.x < halfSize && lastPos.y > halfSize) ? (Math.PI * 1.5)\r\n                    : (lastPos.x > halfSize && lastPos.y < halfSize) ? (Math.PI * 0.5)\r\n                        : 0;\r\n            // console.log(`angleQuandrant`, { angleQuandrant, lastPos, halfSize });\r\n            const targetAngle = Math.PI / 2 * randomMain() + angleQuandrant;\r\n\r\n            const posRaw = {\r\n                x: lastPos.x + targetDistance * Math.cos(targetAngle),\r\n                y: lastPos.y + targetDistance * Math.sin(targetAngle),\r\n            };\r\n            const pos = posRaw;\r\n            // const pos = {\r\n            //     x: 0.8 * posRaw.x + 0.2 * halfSize,\r\n            //     y: 0.8 * posRaw.y + 0.2 * halfSize,\r\n            // };\r\n\r\n            const xDelta = pos.x - lastPos.x;\r\n            const yDelta = pos.y - lastPos.y;\r\n            const actualRadius = Math.sqrt(xDelta * xDelta + yDelta * yDelta) - lastGear.radius;\r\n\r\n            // eslint-disable-next-line no-return-assign\r\n            return lastGear = {\r\n                position: pos,\r\n                radius: actualRadius,\r\n                randomSeed: `${randomMain()}`,\r\n                color: { h: 360 * randomMain(), s: sat, b: brightness, a: 0.5 },\r\n            };\r\n        });\r\n\r\n        let noise = null as null | p5.Noise;\r\n        let noiseDebounceTime = Date.now();\r\n\r\n        const toggleNoise = () => {\r\n            if (Date.now() < noiseDebounceTime + 500) { return; }\r\n            noiseDebounceTime = Date.now();\r\n\r\n            if (noise) {\r\n                noise.disconnect();\r\n                noise = null;\r\n                return;\r\n            }\r\n            noise = new p5.Noise(`white`);\r\n            noise.amp(0);\r\n            noise.start();\r\n        };\r\n\r\n        return new p5((s: p5) => {\r\n            s.setup = () => {\r\n                s.createCanvas(canvasSize, canvasSize);\r\n            };\r\n            s.mousePressed = () => { if (s.mouseX < 0 || s.mouseX > canvasSize || s.mouseY < 0 || s.mouseY > canvasSize) { return; } toggleNoise(); };\r\n            s.touchStarted = () => { const t = s.touches[0] as Vector2; if (t.x < 0 || t.x > canvasSize || t.y < 0 || t.y > canvasSize) { return; } toggleNoise(); };\r\n            // s.keyPressed = () => { toggleNoise(); };\r\n            s.draw = () => {\r\n                s.background(0);\r\n                // noise?.amp(0);\r\n\r\n                // s.background(10, 10, 10);\r\n                const g = s;\r\n                // const g = s.createGraphics(canvasSize * 2, canvasSize * 2);\r\n                // g.translate(canvasSize, canvasSize);\r\n                // g.scale(0.25);\r\n\r\n                let faceCount = 0;\r\n                let faceCreepyCount = 0;\r\n                for (const [i, gear] of gears.entries()) {\r\n                    const direction = i % 2 === 0 ? 1 : -1;\r\n                    const teethDepth = 5;\r\n                    const teeth = Math.ceil(gear.radius * Math.PI * 2 / (4 * teethDepth));\r\n                    const teethPassed = tick * speed * Math.pow(1.25, i + 1);\r\n                    const rotationAngle = s.TWO_PI * teethPassed / teeth;\r\n\r\n                    const result = drawGear(g, {\r\n                        position: gear.position,\r\n                        // radiusInner: gear.size * 0.93,\r\n                        // radiusOuter: gear.size * 1.07,\r\n                        radiusInner: gear.radius - teethDepth,\r\n                        radiusOuter: gear.radius + teethDepth,\r\n                        // radiusAxis: gear.radius * 0.15,\r\n                        radiusAxis: gear.radius * 0.1,\r\n                        // radiusAxis: teethDepth,\r\n                        teeth,\r\n                        color: gear.color,\r\n                        rotationAngle: direction * rotationAngle,\r\n                        randomSeed: gear.randomSeed,\r\n                    });\r\n\r\n                    if (result.faceType) {\r\n                        faceCount++;\r\n                    }\r\n                    if (result.faceType === `creepy`) {\r\n                        // Not actual position\r\n                        //  const distanceToCenterX = Math.abs(gear.position.x - halfSize);\r\n                        //  const distanceToCenterY = Math.abs(gear.position.y - halfSize);\r\n                        //  const distRatioToEdge = (halfSize - Math.sqrt(distanceToCenterX * distanceToCenterX + distanceToCenterY * distanceToCenterY)) / halfSize;\r\n                        // faceCreepyCount += Math.max(0, distRatioToEdge);\r\n                        faceCreepyCount++;\r\n                    }\r\n\r\n                    // Rotate slightly\r\n                    g.translate(gear.position.x, gear.position.y);\r\n                    g.rotate(s.TWO_PI * teethPassed / (teeth * 4));\r\n                    g.translate(-gear.position.x, -gear.position.y);\r\n                }\r\n                // s.image(g, 0, 0, canvasSize, canvasSize);\r\n\r\n                // console.log(`noiseLevel`, { level: faceCreepyCount / faceCount });\r\n                noise?.amp(faceCount > 0 ? faceCreepyCount / faceCount : 0);\r\n\r\n                // for (let i = 0; i < 10; i++) {\r\n                //     const color = s.color((cr * i) % 255, (cg * i) % 255, (cb * i) % 255, ca);\r\n                //     s.noFill();\r\n                //     s.stroke(color);\r\n                //     for (let j = 0; j < 36; j++) {\r\n                //         s.circle(200 - a / 2 + j % a, 200 - b / 2 + j % b, 270 - (i * 5) % c);\r\n                //     }\r\n                //     s.translate(200, 200);\r\n                //     // s.rotate((a + b + c + tick * 0.001) % 2);\r\n                //     s.rotate((a + b + c + tick * 0.001));\r\n                //     s.translate(-200, -200);\r\n                //     tick++;\r\n                // }\r\n\r\n                tick++;\r\n            };\r\n        }, hostElement);\r\n    },\r\n};\r\n"],"sourceRoot":""}