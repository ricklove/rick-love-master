diff --git a/dist/debug/index.js b/dist/debug/index.js
index 888cc2121ab5a3588ef126592f11b92be9b0fa14..1289fdeb924396592729729983a66e6ee7802e18 100644
--- a/dist/debug/index.js
+++ b/dist/debug/index.js
@@ -11553,6 +11553,7 @@ function useBody(type, fn, argsFn, fwdRef, deps) {
         sleepSpeedLimit: makeAtomic('sleepSpeedLimit', index),
         sleepTimeLimit: makeAtomic('sleepTimeLimit', index),
         userData: makeAtomic('userData', index),
+        uuid: getUUID(ref, index),
         velocity: makeVec('velocity', index),
         wakeUp() {
           const uuid = getUUID(ref, index);
@@ -12024,6 +12025,12 @@ function PhysicsProvider(_ref) {
     } = _ref2;
     const cb = (_events$target = events[target]) == null ? void 0 : _events$target.collide;
     cb && cb({
+      data: {
+        body,
+        target,
+        bi,
+        bj
+      },
       body: refs[body],
       contact: {
         bi: refs[bi],
@@ -12042,6 +12049,10 @@ function PhysicsProvider(_ref) {
     } = _ref3;
     const cbA = (_events$bodyA = events[bodyA]) == null ? void 0 : _events$bodyA.collideBegin;
     cbA && cbA({
+      data: {
+        body: bodyB,
+        target: bodyA
+      },
       body: refs[bodyB],
       op: 'event',
       target: refs[bodyA],
@@ -12049,6 +12060,10 @@ function PhysicsProvider(_ref) {
     });
     const cbB = (_events$bodyB = events[bodyB]) == null ? void 0 : _events$bodyB.collideBegin;
     cbB && cbB({
+      data: {
+        body: bodyA,
+        target: bodyB
+      },
       body: refs[bodyA],
       op: 'event',
       target: refs[bodyB],
@@ -12063,6 +12078,10 @@ function PhysicsProvider(_ref) {
     } = _ref4;
     const cbA = (_events$bodyA2 = events[bodyA]) == null ? void 0 : _events$bodyA2.collideEnd;
     cbA && cbA({
+      data: {
+        body: bodyB,
+        target: bodyA
+      },
       body: refs[bodyB],
       op: 'event',
       target: refs[bodyA],
@@ -12070,6 +12089,10 @@ function PhysicsProvider(_ref) {
     });
     const cbB = (_events$bodyB2 = events[bodyB]) == null ? void 0 : _events$bodyB2.collideEnd;
     cbB && cbB({
+      data: {
+        body: bodyA,
+        target: bodyB
+      },
       body: refs[bodyA],
       op: 'event',
       target: refs[bodyB],
diff --git a/dist/hooks.d.ts b/dist/hooks.d.ts
index 889f8b7fa6a2720b471ffa673ea809193466fc21..e100943c50092296a5fb5734a377ee77db2eb161 100644
--- a/dist/hooks.d.ts
+++ b/dist/hooks.d.ts
@@ -30,6 +30,7 @@ export declare type WorkerApi = {
     rotation: VectorApi;
     scaleOverride: (scale: Triplet) => void;
     sleep: () => void;
+    uuid: string | null;
     wakeUp: () => void;
 };
 export interface PublicApi extends WorkerApi {
diff --git a/dist/index.js b/dist/index.js
index 888cc2121ab5a3588ef126592f11b92be9b0fa14..1289fdeb924396592729729983a66e6ee7802e18 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -11553,6 +11553,7 @@ function useBody(type, fn, argsFn, fwdRef, deps) {
         sleepSpeedLimit: makeAtomic('sleepSpeedLimit', index),
         sleepTimeLimit: makeAtomic('sleepTimeLimit', index),
         userData: makeAtomic('userData', index),
+        uuid: getUUID(ref, index),
         velocity: makeVec('velocity', index),
         wakeUp() {
           const uuid = getUUID(ref, index);
@@ -12024,6 +12025,12 @@ function PhysicsProvider(_ref) {
     } = _ref2;
     const cb = (_events$target = events[target]) == null ? void 0 : _events$target.collide;
     cb && cb({
+      data: {
+        body,
+        target,
+        bi,
+        bj
+      },
       body: refs[body],
       contact: {
         bi: refs[bi],
@@ -12042,6 +12049,10 @@ function PhysicsProvider(_ref) {
     } = _ref3;
     const cbA = (_events$bodyA = events[bodyA]) == null ? void 0 : _events$bodyA.collideBegin;
     cbA && cbA({
+      data: {
+        body: bodyB,
+        target: bodyA
+      },
       body: refs[bodyB],
       op: 'event',
       target: refs[bodyA],
@@ -12049,6 +12060,10 @@ function PhysicsProvider(_ref) {
     });
     const cbB = (_events$bodyB = events[bodyB]) == null ? void 0 : _events$bodyB.collideBegin;
     cbB && cbB({
+      data: {
+        body: bodyA,
+        target: bodyB
+      },
       body: refs[bodyA],
       op: 'event',
       target: refs[bodyB],
@@ -12063,6 +12078,10 @@ function PhysicsProvider(_ref) {
     } = _ref4;
     const cbA = (_events$bodyA2 = events[bodyA]) == null ? void 0 : _events$bodyA2.collideEnd;
     cbA && cbA({
+      data: {
+        body: bodyB,
+        target: bodyA
+      },
       body: refs[bodyB],
       op: 'event',
       target: refs[bodyA],
@@ -12070,6 +12089,10 @@ function PhysicsProvider(_ref) {
     });
     const cbB = (_events$bodyB2 = events[bodyB]) == null ? void 0 : _events$bodyB2.collideEnd;
     cbB && cbB({
+      data: {
+        body: bodyA,
+        target: bodyB
+      },
       body: refs[bodyA],
       op: 'event',
       target: refs[bodyB],
diff --git a/dist/physics-context.d.ts b/dist/physics-context.d.ts
index 634f048057e80152a215604b194cb4595848b563..3ffd351924cc117ed5804f505d4276fb1303a8fa 100644
--- a/dist/physics-context.d.ts
+++ b/dist/physics-context.d.ts
@@ -1,7 +1,27 @@
 /// <reference types="react" />
 import type { CannonWorkerAPI, CollideBeginEvent, CollideEndEvent, CollideEvent, RayhitEvent, Refs, Subscriptions } from '@pmndrs/cannon-worker-api';
 import type { Vector3 } from 'three';
-declare type CannonEvent = CollideBeginEvent | CollideEndEvent | CollideEvent | RayhitEvent;
+export declare type CollideEventWithData = CollideEvent & {
+    data: {
+        bi: string;
+        bj: string;
+        body: string;
+        target: string;
+    };
+};
+export declare type CollideBeginEventWithData = CollideBeginEvent & {
+    data: {
+        body: string;
+        target: string;
+    };
+};
+export declare type CollideEndEventWithData = CollideEndEvent & {
+    data: {
+        body: string;
+        target: string;
+    };
+};
+declare type CannonEvent = CollideBeginEventWithData | CollideEndEventWithData | CollideEventWithData | RayhitEvent;
 declare type CallbackByType<T extends {
     type: string;
 }> = {
diff --git a/src/hooks.ts b/src/hooks.ts
index 7acaba89ff5d55bccd2c5f761ba560c6e8074f11..25cff01d24e0a9e30c35a94b7776275e06ea5e53 100644
--- a/src/hooks.ts
+++ b/src/hooks.ts
@@ -77,6 +77,7 @@ export type WorkerApi = {
   rotation: VectorApi
   scaleOverride: (scale: Triplet) => void
   sleep: () => void
+  uuid: string | null
   wakeUp: () => void
 }
 
@@ -345,6 +346,7 @@ function useBody<B extends BodyProps<unknown[]>, O extends Object3D>(
         sleepSpeedLimit: makeAtomic('sleepSpeedLimit', index),
         sleepTimeLimit: makeAtomic('sleepTimeLimit', index),
         userData: makeAtomic('userData', index),
+        uuid: getUUID(ref, index),
         velocity: makeVec('velocity', index),
         wakeUp() {
           const uuid = getUUID(ref, index)
diff --git a/src/physics-context.ts b/src/physics-context.ts
index eaa65b9cd74a0b0e389318ae08ba7580adf4d486..5f033de106358cb9af2ae4b92d759ea7b63da7d5 100644
--- a/src/physics-context.ts
+++ b/src/physics-context.ts
@@ -10,7 +10,28 @@ import type {
 import { createContext, useContext } from 'react'
 import type { Vector3 } from 'three'
 
-type CannonEvent = CollideBeginEvent | CollideEndEvent | CollideEvent | RayhitEvent
+export type CollideEventWithData = CollideEvent & {
+  data: {
+    bi: string
+    bj: string
+    body: string
+    target: string
+  }
+}
+export type CollideBeginEventWithData = CollideBeginEvent & {
+  data: {
+    body: string
+    target: string
+  }
+}
+export type CollideEndEventWithData = CollideEndEvent & {
+  data: {
+    body: string
+    target: string
+  }
+}
+
+type CannonEvent = CollideBeginEventWithData | CollideEndEventWithData | CollideEventWithData | RayhitEvent
 type CallbackByType<T extends { type: string }> = {
   [K in T['type']]?: T extends { type: K } ? (e: T) => void : never
 }
diff --git a/src/physics-provider.tsx b/src/physics-provider.tsx
index c5ac21c1ceb8f5dc547d82bb4540ae137d239258..50887bbe668d8142d0e43ff41ceb648de27bef93 100644
--- a/src/physics-provider.tsx
+++ b/src/physics-provider.tsx
@@ -116,6 +116,7 @@ export function PhysicsProvider({
     const cb = events[target]?.collide
     cb &&
       cb({
+        data: { body, target, bi, bj },
         body: refs[body],
         contact: {
           bi: refs[bi],
@@ -131,6 +132,7 @@ export function PhysicsProvider({
     const cbA = events[bodyA]?.collideBegin
     cbA &&
       cbA({
+        data: { body: bodyB, target: bodyA },
         body: refs[bodyB],
         op: 'event',
         target: refs[bodyA],
@@ -139,6 +141,7 @@ export function PhysicsProvider({
     const cbB = events[bodyB]?.collideBegin
     cbB &&
       cbB({
+        data: { body: bodyA, target: bodyB },
         body: refs[bodyA],
         op: 'event',
         target: refs[bodyB],
@@ -150,6 +153,7 @@ export function PhysicsProvider({
     const cbA = events[bodyA]?.collideEnd
     cbA &&
       cbA({
+        data: { body: bodyB, target: bodyA },
         body: refs[bodyB],
         op: 'event',
         target: refs[bodyA],
@@ -158,6 +162,7 @@ export function PhysicsProvider({
     const cbB = events[bodyB]?.collideEnd
     cbB &&
       cbB({
+        data: { body: bodyA, target: bodyB },
         body: refs[bodyA],
         op: 'event',
         target: refs[bodyB],