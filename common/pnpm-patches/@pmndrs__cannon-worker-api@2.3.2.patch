diff --git a/dist/debug/index.js b/dist/debug/index.js
index 1bdbc06db54399ffe9760a573566bb3e22492647..8bf56588fde89aa06f026885fed09fd44a31f9e7 100644
--- a/dist/debug/index.js
+++ b/dist/debug/index.js
@@ -506,7 +506,7 @@ function createBase64WorkerFactory(base64, sourcemapArg, enableUnicodeArg) {
     };
 }
 
-var WorkerFactory = createBase64WorkerFactory('/* rollup-plugin-web-worker-loader */
(function () {
  'use strict';

  /**
   * Records what objects are colliding with each other
   */

  /**
   * A 3x3 matrix.
   * Authored by {@link http://github.com/schteppe/ schteppe}
   */
  class Mat3 {
    /**
     * A vector of length 9, containing all matrix elements.
     */

    /**
     * @param elements A vector of length 9, containing all matrix elements.
     */
    constructor(elements) {
      if (elements === void 0) {
        elements = [0, 0, 0, 0, 0, 0, 0, 0, 0];
      }

      this.elements = elements;
    }
    /**
     * Sets the matrix to identity
     * @todo Should perhaps be renamed to `setIdentity()` to be more clear.
     * @todo Create another function that immediately creates an identity matrix eg. `eye()`
     */


    identity() {
      const e = this.elements;
      e[0] = 1;
      e[1] = 0;
      e[2] = 0;
      e[3] = 0;
      e[4] = 1;
      e[5] = 0;
      e[6] = 0;
      e[7] = 0;
      e[8] = 1;
    }
    /**
     * Set all elements to zero
     */


    setZero() {
      const e = this.elements;
      e[0] = 0;
      e[1] = 0;
      e[2] = 0;
      e[3] = 0;
      e[4] = 0;
      e[5] = 0;
      e[6] = 0;
      e[7] = 0;
      e[8] = 0;
    }
    /**
     * Sets the matrix diagonal elements from a Vec3
     */


    setTrace(vector) {
      const e = this.elements;
      e[0] = vector.x;
      e[4] = vector.y;
      e[8] = vector.z;
    }
    /**
     * Gets the matrix diagonal elements
     */


    getTrace(target) {
      if (target === void 0) {
        target = new Vec3();
      }

      const e = this.elements;
      target.x = e[0];
      target.y = e[4];
      target.z = e[8];
      return target;
    }
    /**
     * Matrix-Vector multiplication
     * @param v The vector to multiply with
     * @param target Optional, target to save the result in.
     */


    vmult(v, target) {
      if (target === void 0) {
        target = new Vec3();
      }

      const e = this.elements;
      const x = v.x;
      const y = v.y;
      const z = v.z;
      target.x = e[0] * x + e[1] * y + e[2] * z;
      target.y = e[3] * x + e[4] * y + e[5] * z;
      target.z = e[6] * x + e[7] * y + e[8] * z;
      return target;
    }
    /**
     * Matrix-scalar multiplication
     */


    smult(s) {
      for (let i = 0; i < this.elements.length; i++) {
        this.elements[i] *= s;
      }
    }
    /**
     * Matrix multiplication
     * @param matrix Matrix to multiply with from left side.
     */


    mmult(matrix, target) {
      if (target === void 0) {
        target = new Mat3();
      }

      const A = this.elements;
      const B = matrix.elements;
      const T = target.elements;
      const a11 = A[0],
            a12 = A[1],
            a13 = A[2],
            a21 = A[3],
            a22 = A[4],
            a23 = A[5],
            a31 = A[6],
            a32 = A[7],
            a33 = A[8];
      const b11 = B[0],
            b12 = B[1],
            b13 = B[2],
            b21 = B[3],
            b22 = B[4],
            b23 = B[5],
            b31 = B[6],
            b32 = B[7],
            b33 = B[8];
      T[0] = a11 * b11 + a12 * b21 + a13 * b31;
      T[1] = a11 * b12 + a12 * b22 + a13 * b32;
      T[2] = a11 * b13 + a12 * b23 + a13 * b33;
      T[3] = a21 * b11 + a22 * b21 + a23 * b31;
      T[4] = a21 * b12 + a22 * b22 + a23 * b32;
      T[5] = a21 * b13 + a22 * b23 + a23 * b33;
      T[6] = a31 * b11 + a32 * b21 + a33 * b31;
      T[7] = a31 * b12 + a32 * b22 + a33 * b32;
      T[8] = a31 * b13 + a32 * b23 + a33 * b33;
      return target;
    }
    /**
     * Scale each column of the matrix
     */


    scale(vector, target) {
      if (target === void 0) {
        target = new Mat3();
      }

      const e = this.elements;
      const t = target.elements;

      for (let i = 0; i !== 3; i++) {
        t[3 * i + 0] = vector.x * e[3 * i + 0];
        t[3 * i + 1] = vector.y * e[3 * i + 1];
        t[3 * i + 2] = vector.z * e[3 * i + 2];
      }

      return target;
    }
    /**
     * Solve Ax=b
     * @param b The right hand side
     * @param target Optional. Target vector to save in.
     * @return The solution x
     * @todo should reuse arrays
     */


    solve(b, target) {
      if (target === void 0) {
        target = new Vec3();
      }

      // Construct equations
      const nr = 3; // num rows

      const nc = 4; // num cols

      const eqns = [];
      let i;
      let j;

      for (i = 0; i < nr * nc; i++) {
        eqns.push(0);
      }

      for (i = 0; i < 3; i++) {
        for (j = 0; j < 3; j++) {
          eqns[i + nc * j] = this.elements[i + 3 * j];
        }
      }

      eqns[3 + 4 * 0] = b.x;
      eqns[3 + 4 * 1] = b.y;
      eqns[3 + 4 * 2] = b.z; // Compute right upper triangular version of the matrix - Gauss elimination

      let n = 3;
      const k = n;
      let np;
      const kp = 4; // num rows

      let p;

      do {
        i = k - n;

        if (eqns[i + nc * i] === 0) {
          // the pivot is null, swap lines
          for (j = i + 1; j < k; j++) {
            if (eqns[i + nc * j] !== 0) {
              np = kp;

              do {
                // do ligne( i ) = ligne( i ) + ligne( k )
                p = kp - np;
                eqns[p + nc * i] += eqns[p + nc * j];
              } while (--np);

              break;
            }
          }
        }

        if (eqns[i + nc * i] !== 0) {
          for (j = i + 1; j < k; j++) {
            const multiplier = eqns[i + nc * j] / eqns[i + nc * i];
            np = kp;

            do {
              // do ligne( k ) = ligne( k ) - multiplier * ligne( i )
              p = kp - np;
              eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;
            } while (--np);
          }
        }
      } while (--n); // Get the solution


      target.z = eqns[2 * nc + 3] / eqns[2 * nc + 2];
      target.y = (eqns[1 * nc + 3] - eqns[1 * nc + 2] * target.z) / eqns[1 * nc + 1];
      target.x = (eqns[0 * nc + 3] - eqns[0 * nc + 2] * target.z - eqns[0 * nc + 1] * target.y) / eqns[0 * nc + 0];

      if (isNaN(target.x) || isNaN(target.y) || isNaN(target.z) || target.x === Infinity || target.y === Infinity || target.z === Infinity) {
        throw `Could not solve equation! Got x=[${target.toString()}], b=[${b.toString()}], A=[${this.toString()}]`;
      }

      return target;
    }
    /**
     * Get an element in the matrix by index. Index starts at 0, not 1!!!
     * @param value If provided, the matrix element will be set to this value.
     */


    e(row, column, value) {
      if (value === undefined) {
        return this.elements[column + 3 * row];
      } else {
        // Set value
        this.elements[column + 3 * row] = value;
      }
    }
    /**
     * Copy another matrix into this matrix object.
     */


    copy(matrix) {
      for (let i = 0; i < matrix.elements.length; i++) {
        this.elements[i] = matrix.elements[i];
      }

      return this;
    }
    /**
     * Returns a string representation of the matrix.
     */


    toString() {
      let r = '';
      const sep = ',';

      for (let i = 0; i < 9; i++) {
        r += this.elements[i] + sep;
      }

      return r;
    }
    /**
     * reverse the matrix
     * @param target Target matrix to save in.
     * @return The solution x
     */


    reverse(target) {
      if (target === void 0) {
        target = new Mat3();
      }

      // Construct equations
      const nr = 3; // num rows

      const nc = 6; // num cols

      const eqns = reverse_eqns;
      let i;
      let j;

      for (i = 0; i < 3; i++) {
        for (j = 0; j < 3; j++) {
          eqns[i + nc * j] = this.elements[i + 3 * j];
        }
      }

      eqns[3 + 6 * 0] = 1;
      eqns[3 + 6 * 1] = 0;
      eqns[3 + 6 * 2] = 0;
      eqns[4 + 6 * 0] = 0;
      eqns[4 + 6 * 1] = 1;
      eqns[4 + 6 * 2] = 0;
      eqns[5 + 6 * 0] = 0;
      eqns[5 + 6 * 1] = 0;
      eqns[5 + 6 * 2] = 1; // Compute right upper triangular version of the matrix - Gauss elimination

      let n = 3;
      const k = n;
      let np;
      const kp = nc; // num rows

      let p;

      do {
        i = k - n;

        if (eqns[i + nc * i] === 0) {
          // the pivot is null, swap lines
          for (j = i + 1; j < k; j++) {
            if (eqns[i + nc * j] !== 0) {
              np = kp;

              do {
                // do line( i ) = line( i ) + line( k )
                p = kp - np;
                eqns[p + nc * i] += eqns[p + nc * j];
              } while (--np);

              break;
            }
          }
        }

        if (eqns[i + nc * i] !== 0) {
          for (j = i + 1; j < k; j++) {
            const multiplier = eqns[i + nc * j] / eqns[i + nc * i];
            np = kp;

            do {
              // do line( k ) = line( k ) - multiplier * line( i )
              p = kp - np;
              eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;
            } while (--np);
          }
        }
      } while (--n); // eliminate the upper left triangle of the matrix


      i = 2;

      do {
        j = i - 1;

        do {
          const multiplier = eqns[i + nc * j] / eqns[i + nc * i];
          np = nc;

          do {
            p = nc - np;
            eqns[p + nc * j] = eqns[p + nc * j] - eqns[p + nc * i] * multiplier;
          } while (--np);
        } while (j--);
      } while (--i); // operations on the diagonal


      i = 2;

      do {
        const multiplier = 1 / eqns[i + nc * i];
        np = nc;

        do {
          p = nc - np;
          eqns[p + nc * i] = eqns[p + nc * i] * multiplier;
        } while (--np);
      } while (i--);

      i = 2;

      do {
        j = 2;

        do {
          p = eqns[nr + j + nc * i];

          if (isNaN(p) || p === Infinity) {
            throw `Could not reverse! A=[${this.toString()}]`;
          }

          target.e(i, j, p);
        } while (j--);
      } while (i--);

      return target;
    }
    /**
     * Set the matrix from a quaterion
     */


    setRotationFromQuaternion(q) {
      const x = q.x;
      const y = q.y;
      const z = q.z;
      const w = q.w;
      const x2 = x + x;
      const y2 = y + y;
      const z2 = z + z;
      const xx = x * x2;
      const xy = x * y2;
      const xz = x * z2;
      const yy = y * y2;
      const yz = y * z2;
      const zz = z * z2;
      const wx = w * x2;
      const wy = w * y2;
      const wz = w * z2;
      const e = this.elements;
      e[3 * 0 + 0] = 1 - (yy + zz);
      e[3 * 0 + 1] = xy - wz;
      e[3 * 0 + 2] = xz + wy;
      e[3 * 1 + 0] = xy + wz;
      e[3 * 1 + 1] = 1 - (xx + zz);
      e[3 * 1 + 2] = yz - wx;
      e[3 * 2 + 0] = xz - wy;
      e[3 * 2 + 1] = yz + wx;
      e[3 * 2 + 2] = 1 - (xx + yy);
      return this;
    }
    /**
     * Transpose the matrix
     * @param target Optional. Where to store the result.
     * @return The target Mat3, or a new Mat3 if target was omitted.
     */


    transpose(target) {
      if (target === void 0) {
        target = new Mat3();
      }

      const M = this.elements;
      const T = target.elements;
      let tmp; //Set diagonals

      T[0] = M[0];
      T[4] = M[4];
      T[8] = M[8];
      tmp = M[1];
      T[1] = M[3];
      T[3] = tmp;
      tmp = M[2];
      T[2] = M[6];
      T[6] = tmp;
      tmp = M[5];
      T[5] = M[7];
      T[7] = tmp;
      return target;
    }

  }
  const reverse_eqns = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

  /**
   * 3-dimensional vector
   * @example
   *     const v = new Vec3(1, 2, 3)
   *     console.log('x=' + v.x) // x=1
   */

  class Vec3 {
    constructor(x, y, z) {
      if (x === void 0) {
        x = 0.0;
      }

      if (y === void 0) {
        y = 0.0;
      }

      if (z === void 0) {
        z = 0.0;
      }

      this.x = x;
      this.y = y;
      this.z = z;
    }
    /**
     * Vector cross product
     * @param target Optional target to save in.
     */


    cross(vector, target) {
      if (target === void 0) {
        target = new Vec3();
      }

      const vx = vector.x;
      const vy = vector.y;
      const vz = vector.z;
      const x = this.x;
      const y = this.y;
      const z = this.z;
      target.x = y * vz - z * vy;
      target.y = z * vx - x * vz;
      target.z = x * vy - y * vx;
      return target;
    }
    /**
     * Set the vectors' 3 elements
     */


    set(x, y, z) {
      this.x = x;
      this.y = y;
      this.z = z;
      return this;
    }
    /**
     * Set all components of the vector to zero.
     */


    setZero() {
      this.x = this.y = this.z = 0;
    }
    /**
     * Vector addition
     */


    vadd(vector, target) {
      if (target) {
        target.x = vector.x + this.x;
        target.y = vector.y + this.y;
        target.z = vector.z + this.z;
      } else {
        return new Vec3(this.x + vector.x, this.y + vector.y, this.z + vector.z);
      }
    }
    /**
     * Vector subtraction
     * @param target Optional target to save in.
     */


    vsub(vector, target) {
      if (target) {
        target.x = this.x - vector.x;
        target.y = this.y - vector.y;
        target.z = this.z - vector.z;
      } else {
        return new Vec3(this.x - vector.x, this.y - vector.y, this.z - vector.z);
      }
    }
    /**
     * Get the cross product matrix a_cross from a vector, such that a x b = a_cross * b = c
     *
     * See {@link https://www8.cs.umu.se/kurser/TDBD24/VT06/lectures/Lecture6.pdf Umeå University Lecture}
     */


    crossmat() {
      return new Mat3([0, -this.z, this.y, this.z, 0, -this.x, -this.y, this.x, 0]);
    }
    /**
     * Normalize the vector. Note that this changes the values in the vector.
      * @return Returns the norm of the vector
     */


    normalize() {
      const x = this.x;
      const y = this.y;
      const z = this.z;
      const n = Math.sqrt(x * x + y * y + z * z);

      if (n > 0.0) {
        const invN = 1 / n;
        this.x *= invN;
        this.y *= invN;
        this.z *= invN;
      } else {
        // Make something up
        this.x = 0;
        this.y = 0;
        this.z = 0;
      }

      return n;
    }
    /**
     * Get the version of this vector that is of length 1.
     * @param target Optional target to save in
     * @return Returns the unit vector
     */


    unit(target) {
      if (target === void 0) {
        target = new Vec3();
      }

      const x = this.x;
      const y = this.y;
      const z = this.z;
      let ninv = Math.sqrt(x * x + y * y + z * z);

      if (ninv > 0.0) {
        ninv = 1.0 / ninv;
        target.x = x * ninv;
        target.y = y * ninv;
        target.z = z * ninv;
      } else {
        target.x = 1;
        target.y = 0;
        target.z = 0;
      }

      return target;
    }
    /**
     * Get the length of the vector
     */


    length() {
      const x = this.x;
      const y = this.y;
      const z = this.z;
      return Math.sqrt(x * x + y * y + z * z);
    }
    /**
     * Get the squared length of the vector.
     */


    lengthSquared() {
      return this.dot(this);
    }
    /**
     * Get distance from this point to another point
     */


    distanceTo(p) {
      const x = this.x;
      const y = this.y;
      const z = this.z;
      const px = p.x;
      const py = p.y;
      const pz = p.z;
      return Math.sqrt((px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z));
    }
    /**
     * Get squared distance from this point to another point
     */


    distanceSquared(p) {
      const x = this.x;
      const y = this.y;
      const z = this.z;
      const px = p.x;
      const py = p.y;
      const pz = p.z;
      return (px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z);
    }
    /**
     * Multiply all the components of the vector with a scalar.
     * @param target The vector to save the result in.
     */


    scale(scalar, target) {
      if (target === void 0) {
        target = new Vec3();
      }

      const x = this.x;
      const y = this.y;
      const z = this.z;
      target.x = scalar * x;
      target.y = scalar * y;
      target.z = scalar * z;
      return target;
    }
    /**
     * Multiply the vector with an other vector, component-wise.
     * @param target The vector to save the result in.
     */


    vmul(vector, target) {
      if (target === void 0) {
        target = new Vec3();
      }

      target.x = vector.x * this.x;
      target.y = vector.y * this.y;
      target.z = vector.z * this.z;
      return target;
    }
    /**
     * Scale a vector and add it to this vector. Save the result in "target". (target = this + vector * scalar)
     * @param target The vector to save the result in.
     */


    addScaledVector(scalar, vector, target) {
      if (target === void 0) {
        target = new Vec3();
      }

      target.x = this.x + scalar * vector.x;
      target.y = this.y + scalar * vector.y;
      target.z = this.z + scalar * vector.z;
      return target;
    }
    /**
     * Calculate dot product
     * @param vector
     */


    dot(vector) {
      return this.x * vector.x + this.y * vector.y + this.z * vector.z;
    }

    isZero() {
      return this.x === 0 && this.y === 0 && this.z === 0;
    }
    /**
     * Make the vector point in the opposite direction.
     * @param target Optional target to save in
     */


    negate(target) {
      if (target === void 0) {
        target = new Vec3();
      }

      target.x = -this.x;
      target.y = -this.y;
      target.z = -this.z;
      return target;
    }
    /**
     * Compute two artificial tangents to the vector
     * @param t1 Vector object to save the first tangent in
     * @param t2 Vector object to save the second tangent in
     */


    tangents(t1, t2) {
      const norm = this.length();

      if (norm > 0.0) {
        const n = Vec3_tangents_n;
        const inorm = 1 / norm;
        n.set(this.x * inorm, this.y * inorm, this.z * inorm);
        const randVec = Vec3_tangents_randVec;

        if (Math.abs(n.x) < 0.9) {
          randVec.set(1, 0, 0);
          n.cross(randVec, t1);
        } else {
          randVec.set(0, 1, 0);
          n.cross(randVec, t1);
        }

        n.cross(t1, t2);
      } else {
        // The normal length is zero, make something up
        t1.set(1, 0, 0);
        t2.set(0, 1, 0);
      }
    }
    /**
     * Converts to a more readable format
     */


    toString() {
      return `${this.x},${this.y},${this.z}`;
    }
    /**
     * Converts to an array
     */


    toArray() {
      return [this.x, this.y, this.z];
    }
    /**
     * Copies value of source to this vector.
     */


    copy(vector) {
      this.x = vector.x;
      this.y = vector.y;
      this.z = vector.z;
      return this;
    }
    /**
     * Do a linear interpolation between two vectors
     * @param t A number between 0 and 1. 0 will make this function return u, and 1 will make it return v. Numbers in between will generate a vector in between them.
     */


    lerp(vector, t, target) {
      const x = this.x;
      const y = this.y;
      const z = this.z;
      target.x = x + (vector.x - x) * t;
      target.y = y + (vector.y - y) * t;
      target.z = z + (vector.z - z) * t;
    }
    /**
     * Check if a vector equals is almost equal to another one.
     */


    almostEquals(vector, precision) {
      if (precision === void 0) {
        precision = 1e-6;
      }

      if (Math.abs(this.x - vector.x) > precision || Math.abs(this.y - vector.y) > precision || Math.abs(this.z - vector.z) > precision) {
        return false;
      }

      return true;
    }
    /**
     * Check if a vector is almost zero
     */


    almostZero(precision) {
      if (precision === void 0) {
        precision = 1e-6;
      }

      if (Math.abs(this.x) > precision || Math.abs(this.y) > precision || Math.abs(this.z) > precision) {
        return false;
      }

      return true;
    }
    /**
     * Check if the vector is anti-parallel to another vector.
     * @param precision Set to zero for exact comparisons
     */


    isAntiparallelTo(vector, precision) {
      this.negate(antip_neg);
      return antip_neg.almostEquals(vector, precision);
    }
    /**
     * Clone the vector
     */


    clone() {
      return new Vec3(this.x, this.y, this.z);
    }

  }
  Vec3.ZERO = new Vec3(0, 0, 0);
  Vec3.UNIT_X = new Vec3(1, 0, 0);
  Vec3.UNIT_Y = new Vec3(0, 1, 0);
  Vec3.UNIT_Z = new Vec3(0, 0, 1);
  const Vec3_tangents_n = new Vec3();
  const Vec3_tangents_randVec = new Vec3();
  const antip_neg = new Vec3();

  /**
   * Axis aligned bounding box class.
   */
  class AABB {
    /**
     * The lower bound of the bounding box
     */

    /**
     * The upper bound of the bounding box
     */
    constructor(options) {
      if (options === void 0) {
        options = {};
      }

      this.lowerBound = new Vec3();
      this.upperBound = new Vec3();

      if (options.lowerBound) {
        this.lowerBound.copy(options.lowerBound);
      }

      if (options.upperBound) {
        this.upperBound.copy(options.upperBound);
      }
    }
    /**
     * Set the AABB bounds from a set of points.
     * @param points An array of Vec3's.
     * @return The self object
     */


    setFromPoints(points, position, quaternion, skinSize) {
      const l = this.lowerBound;
      const u = this.upperBound;
      const q = quaternion; // Set to the first point

      l.copy(points[0]);

      if (q) {
        q.vmult(l, l);
      }

      u.copy(l);

      for (let i = 1; i < points.length; i++) {
        let p = points[i];

        if (q) {
          q.vmult(p, tmp$1);
          p = tmp$1;
        }

        if (p.x > u.x) {
          u.x = p.x;
        }

        if (p.x < l.x) {
          l.x = p.x;
        }

        if (p.y > u.y) {
          u.y = p.y;
        }

        if (p.y < l.y) {
          l.y = p.y;
        }

        if (p.z > u.z) {
          u.z = p.z;
        }

        if (p.z < l.z) {
          l.z = p.z;
        }
      } // Add offset


      if (position) {
        position.vadd(l, l);
        position.vadd(u, u);
      }

      if (skinSize) {
        l.x -= skinSize;
        l.y -= skinSize;
        l.z -= skinSize;
        u.x += skinSize;
        u.y += skinSize;
        u.z += skinSize;
      }

      return this;
    }
    /**
     * Copy bounds from an AABB to this AABB
     * @param aabb Source to copy from
     * @return The this object, for chainability
     */


    copy(aabb) {
      this.lowerBound.copy(aabb.lowerBound);
      this.upperBound.copy(aabb.upperBound);
      return this;
    }
    /**
     * Clone an AABB
     */


    clone() {
      return new AABB().copy(this);
    }
    /**
     * Extend this AABB so that it covers the given AABB too.
     */


    extend(aabb) {
      this.lowerBound.x = Math.min(this.lowerBound.x, aabb.lowerBound.x);
      this.upperBound.x = Math.max(this.upperBound.x, aabb.upperBound.x);
      this.lowerBound.y = Math.min(this.lowerBound.y, aabb.lowerBound.y);
      this.upperBound.y = Math.max(this.upperBound.y, aabb.upperBound.y);
      this.lowerBound.z = Math.min(this.lowerBound.z, aabb.lowerBound.z);
      this.upperBound.z = Math.max(this.upperBound.z, aabb.upperBound.z);
    }
    /**
     * Returns true if the given AABB overlaps this AABB.
     */


    overlaps(aabb) {
      const l1 = this.lowerBound;
      const u1 = this.upperBound;
      const l2 = aabb.lowerBound;
      const u2 = aabb.upperBound; //      l2        u2
      //      |---------|
      // |--------|
      // l1       u1

      const overlapsX = l2.x <= u1.x && u1.x <= u2.x || l1.x <= u2.x && u2.x <= u1.x;
      const overlapsY = l2.y <= u1.y && u1.y <= u2.y || l1.y <= u2.y && u2.y <= u1.y;
      const overlapsZ = l2.z <= u1.z && u1.z <= u2.z || l1.z <= u2.z && u2.z <= u1.z;
      return overlapsX && overlapsY && overlapsZ;
    } // Mostly for debugging


    volume() {
      const l = this.lowerBound;
      const u = this.upperBound;
      return (u.x - l.x) * (u.y - l.y) * (u.z - l.z);
    }
    /**
     * Returns true if the given AABB is fully contained in this AABB.
     */


    contains(aabb) {
      const l1 = this.lowerBound;
      const u1 = this.upperBound;
      const l2 = aabb.lowerBound;
      const u2 = aabb.upperBound; //      l2        u2
      //      |---------|
      // |---------------|
      // l1              u1

      return l1.x <= l2.x && u1.x >= u2.x && l1.y <= l2.y && u1.y >= u2.y && l1.z <= l2.z && u1.z >= u2.z;
    }

    getCorners(a, b, c, d, e, f, g, h) {
      const l = this.lowerBound;
      const u = this.upperBound;
      a.copy(l);
      b.set(u.x, l.y, l.z);
      c.set(u.x, u.y, l.z);
      d.set(l.x, u.y, u.z);
      e.set(u.x, l.y, u.z);
      f.set(l.x, u.y, l.z);
      g.set(l.x, l.y, u.z);
      h.copy(u);
    }
    /**
     * Get the representation of an AABB in another frame.
     * @return The "target" AABB object.
     */


    toLocalFrame(frame, target) {
      const corners = transformIntoFrame_corners;
      const a = corners[0];
      const b = corners[1];
      const c = corners[2];
      const d = corners[3];
      const e = corners[4];
      const f = corners[5];
      const g = corners[6];
      const h = corners[7]; // Get corners in current frame

      this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame

      for (let i = 0; i !== 8; i++) {
        const corner = corners[i];
        frame.pointToLocal(corner, corner);
      }

      return target.setFromPoints(corners);
    }
    /**
     * Get the representation of an AABB in the global frame.
     * @return The "target" AABB object.
     */


    toWorldFrame(frame, target) {
      const corners = transformIntoFrame_corners;
      const a = corners[0];
      const b = corners[1];
      const c = corners[2];
      const d = corners[3];
      const e = corners[4];
      const f = corners[5];
      const g = corners[6];
      const h = corners[7]; // Get corners in current frame

      this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame

      for (let i = 0; i !== 8; i++) {
        const corner = corners[i];
        frame.pointToWorld(corner, corner);
      }

      return target.setFromPoints(corners);
    }
    /**
     * Check if the AABB is hit by a ray.
     */


    overlapsRay(ray) {
      const {
        direction,
        from
      } = ray; // const t = 0
      // ray.direction is unit direction vector of ray

      const dirFracX = 1 / direction.x;
      const dirFracY = 1 / direction.y;
      const dirFracZ = 1 / direction.z; // this.lowerBound is the corner of AABB with minimal coordinates - left bottom, rt is maximal corner

      const t1 = (this.lowerBound.x - from.x) * dirFracX;
      const t2 = (this.upperBound.x - from.x) * dirFracX;
      const t3 = (this.lowerBound.y - from.y) * dirFracY;
      const t4 = (this.upperBound.y - from.y) * dirFracY;
      const t5 = (this.lowerBound.z - from.z) * dirFracZ;
      const t6 = (this.upperBound.z - from.z) * dirFracZ; // const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)));
      // const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)));

      const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)), Math.min(t5, t6));
      const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)), Math.max(t5, t6)); // if tmax < 0, ray (line) is intersecting AABB, but whole AABB is behing us

      if (tmax < 0) {
        //t = tmax;
        return false;
      } // if tmin > tmax, ray doesn't intersect AABB


      if (tmin > tmax) {
        //t = tmax;
        return false;
      }

      return true;
    }

  }
  const tmp$1 = new Vec3();
  const transformIntoFrame_corners = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];

  /**
   * Collision "matrix".
   * It's actually a triangular-shaped array of whether two bodies are touching this step, for reference next step
   */
  class ArrayCollisionMatrix {
    /**
     * The matrix storage.
     */
    constructor() {
      this.matrix = [];
    }
    /**
     * Get an element
     */


    get(bi, bj) {
      let {
        index: i
      } = bi;
      let {
        index: j
      } = bj;

      if (j > i) {
        const temp = j;
        j = i;
        i = temp;
      }

      return this.matrix[(i * (i + 1) >> 1) + j - 1];
    }
    /**
     * Set an element
     */


    set(bi, bj, value) {
      let {
        index: i
      } = bi;
      let {
        index: j
      } = bj;

      if (j > i) {
        const temp = j;
        j = i;
        i = temp;
      }

      this.matrix[(i * (i + 1) >> 1) + j - 1] = value ? 1 : 0;
    }
    /**
     * Sets all elements to zero
     */


    reset() {
      for (let i = 0, l = this.matrix.length; i !== l; i++) {
        this.matrix[i] = 0;
      }
    }
    /**
     * Sets the max number of objects
     */


    setNumObjects(n) {
      this.matrix.length = n * (n - 1) >> 1;
    }

  }

  /**
   * Base class for objects that dispatches events.
   */
  class EventTarget {
    /**
     * Add an event listener
     * @return The self object, for chainability.
     */
    addEventListener(type, listener) {
      if (this._listeners === undefined) {
        this._listeners = {};
      }

      const listeners = this._listeners;

      if (listeners[type] === undefined) {
        listeners[type] = [];
      }

      if (!listeners[type].includes(listener)) {
        listeners[type].push(listener);
      }

      return this;
    }
    /**
     * Check if an event listener is added
     */


    hasEventListener(type, listener) {
      if (this._listeners === undefined) {
        return false;
      }

      const listeners = this._listeners;

      if (listeners[type] !== undefined && listeners[type].includes(listener)) {
        return true;
      }

      return false;
    }
    /**
     * Check if any event listener of the given type is added
     */


    hasAnyEventListener(type) {
      if (this._listeners === undefined) {
        return false;
      }

      const listeners = this._listeners;
      return listeners[type] !== undefined;
    }
    /**
     * Remove an event listener
     * @return The self object, for chainability.
     */


    removeEventListener(type, listener) {
      if (this._listeners === undefined) {
        return this;
      }

      const listeners = this._listeners;

      if (listeners[type] === undefined) {
        return this;
      }

      const index = listeners[type].indexOf(listener);

      if (index !== -1) {
        listeners[type].splice(index, 1);
      }

      return this;
    }
    /**
     * Emit an event.
     * @return The self object, for chainability.
     */


    dispatchEvent(event) {
      if (this._listeners === undefined) {
        return this;
      }

      const listeners = this._listeners;
      const listenerArray = listeners[event.type];

      if (listenerArray !== undefined) {
        event.target = this;

        for (let i = 0, l = listenerArray.length; i < l; i++) {
          listenerArray[i].call(this, event);
        }
      }

      return this;
    }

  }

  /**
   * A Quaternion describes a rotation in 3D space. The Quaternion is mathematically defined as Q = x*i + y*j + z*k + w, where (i,j,k) are imaginary basis vectors. (x,y,z) can be seen as a vector related to the axis of rotation, while the real multiplier, w, is related to the amount of rotation.
   * @param x Multiplier of the imaginary basis vector i.
   * @param y Multiplier of the imaginary basis vector j.
   * @param z Multiplier of the imaginary basis vector k.
   * @param w Multiplier of the real part.
   * @see http://en.wikipedia.org/wiki/Quaternion
   */

  class Quaternion {
    constructor(x, y, z, w) {
      if (x === void 0) {
        x = 0;
      }

      if (y === void 0) {
        y = 0;
      }

      if (z === void 0) {
        z = 0;
      }

      if (w === void 0) {
        w = 1;
      }

      this.x = x;
      this.y = y;
      this.z = z;
      this.w = w;
    }
    /**
     * Set the value of the quaternion.
     */


    set(x, y, z, w) {
      this.x = x;
      this.y = y;
      this.z = z;
      this.w = w;
      return this;
    }
    /**
     * Convert to a readable format
     * @return "x,y,z,w"
     */


    toString() {
      return `${this.x},${this.y},${this.z},${this.w}`;
    }
    /**
     * Convert to an Array
     * @return [x, y, z, w]
     */


    toArray() {
      return [this.x, this.y, this.z, this.w];
    }
    /**
     * Set the quaternion components given an axis and an angle in radians.
     */


    setFromAxisAngle(vector, angle) {
      const s = Math.sin(angle * 0.5);
      this.x = vector.x * s;
      this.y = vector.y * s;
      this.z = vector.z * s;
      this.w = Math.cos(angle * 0.5);
      return this;
    }
    /**
     * Converts the quaternion to [ axis, angle ] representation.
     * @param targetAxis A vector object to reuse for storing the axis.
     * @return An array, first element is the axis and the second is the angle in radians.
     */


    toAxisAngle(targetAxis) {
      if (targetAxis === void 0) {
        targetAxis = new Vec3();
      }

      this.normalize(); // if w>1 acos and sqrt will produce errors, this cant happen if quaternion is normalised

      const angle = 2 * Math.acos(this.w);
      const s = Math.sqrt(1 - this.w * this.w); // assuming quaternion normalised then w is less than 1, so term always positive.

      if (s < 0.001) {
        // test to avoid divide by zero, s is always positive due to sqrt
        // if s close to zero then direction of axis not important
        targetAxis.x = this.x; // if it is important that axis is normalised then replace with x=1; y=z=0;

        targetAxis.y = this.y;
        targetAxis.z = this.z;
      } else {
        targetAxis.x = this.x / s; // normalise axis

        targetAxis.y = this.y / s;
        targetAxis.z = this.z / s;
      }

      return [targetAxis, angle];
    }
    /**
     * Set the quaternion value given two vectors. The resulting rotation will be the needed rotation to rotate u to v.
     */


    setFromVectors(u, v) {
      if (u.isAntiparallelTo(v)) {
        const t1 = sfv_t1;
        const t2 = sfv_t2;
        u.tangents(t1, t2);
        this.setFromAxisAngle(t1, Math.PI);
      } else {
        const a = u.cross(v);
        this.x = a.x;
        this.y = a.y;
        this.z = a.z;
        this.w = Math.sqrt(u.length() ** 2 * v.length() ** 2) + u.dot(v);
        this.normalize();
      }

      return this;
    }
    /**
     * Multiply the quaternion with an other quaternion.
     */


    mult(quat, target) {
      if (target === void 0) {
        target = new Quaternion();
      }

      const ax = this.x;
      const ay = this.y;
      const az = this.z;
      const aw = this.w;
      const bx = quat.x;
      const by = quat.y;
      const bz = quat.z;
      const bw = quat.w;
      target.x = ax * bw + aw * bx + ay * bz - az * by;
      target.y = ay * bw + aw * by + az * bx - ax * bz;
      target.z = az * bw + aw * bz + ax * by - ay * bx;
      target.w = aw * bw - ax * bx - ay * by - az * bz;
      return target;
    }
    /**
     * Get the inverse quaternion rotation.
     */


    inverse(target) {
      if (target === void 0) {
        target = new Quaternion();
      }

      const x = this.x;
      const y = this.y;
      const z = this.z;
      const w = this.w;
      this.conjugate(target);
      const inorm2 = 1 / (x * x + y * y + z * z + w * w);
      target.x *= inorm2;
      target.y *= inorm2;
      target.z *= inorm2;
      target.w *= inorm2;
      return target;
    }
    /**
     * Get the quaternion conjugate
     */


    conjugate(target) {
      if (target === void 0) {
        target = new Quaternion();
      }

      target.x = -this.x;
      target.y = -this.y;
      target.z = -this.z;
      target.w = this.w;
      return target;
    }
    /**
     * Normalize the quaternion. Note that this changes the values of the quaternion.
     */


    normalize() {
      let l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);

      if (l === 0) {
        this.x = 0;
        this.y = 0;
        this.z = 0;
        this.w = 0;
      } else {
        l = 1 / l;
        this.x *= l;
        this.y *= l;
        this.z *= l;
        this.w *= l;
      }

      return this;
    }
    /**
     * Approximation of quaternion normalization. Works best when quat is already almost-normalized.
     * @author unphased, https://github.com/unphased
     */


    normalizeFast() {
      const f = (3.0 - (this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)) / 2.0;

      if (f === 0) {
        this.x = 0;
        this.y = 0;
        this.z = 0;
        this.w = 0;
      } else {
        this.x *= f;
        this.y *= f;
        this.z *= f;
        this.w *= f;
      }

      return this;
    }
    /**
     * Multiply the quaternion by a vector
     */


    vmult(v, target) {
      if (target === void 0) {
        target = new Vec3();
      }

      const x = v.x;
      const y = v.y;
      const z = v.z;
      const qx = this.x;
      const qy = this.y;
      const qz = this.z;
      const qw = this.w; // q*v

      const ix = qw * x + qy * z - qz * y;
      const iy = qw * y + qz * x - qx * z;
      const iz = qw * z + qx * y - qy * x;
      const iw = -qx * x - qy * y - qz * z;
      target.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
      target.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
      target.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
      return target;
    }
    /**
     * Copies value of source to this quaternion.
     * @return this
     */


    copy(quat) {
      this.x = quat.x;
      this.y = quat.y;
      this.z = quat.z;
      this.w = quat.w;
      return this;
    }
    /**
     * Convert the quaternion to euler angle representation. Order: YZX, as this page describes: https://www.euclideanspace.com/maths/standards/index.htm
     * @param order Three-character string, defaults to "YZX"
     */


    toEuler(target, order) {
      if (order === void 0) {
        order = 'YZX';
      }

      let heading;
      let attitude;
      let bank;
      const x = this.x;
      const y = this.y;
      const z = this.z;
      const w = this.w;

      switch (order) {
        case 'YZX':
          const test = x * y + z * w;

          if (test > 0.499) {
            // singularity at north pole
            heading = 2 * Math.atan2(x, w);
            attitude = Math.PI / 2;
            bank = 0;
          }

          if (test < -0.499) {
            // singularity at south pole
            heading = -2 * Math.atan2(x, w);
            attitude = -Math.PI / 2;
            bank = 0;
          }

          if (heading === undefined) {
            const sqx = x * x;
            const sqy = y * y;
            const sqz = z * z;
            heading = Math.atan2(2 * y * w - 2 * x * z, 1 - 2 * sqy - 2 * sqz); // Heading

            attitude = Math.asin(2 * test); // attitude

            bank = Math.atan2(2 * x * w - 2 * y * z, 1 - 2 * sqx - 2 * sqz); // bank
          }

          break;

        default:
          throw new Error(`Euler order ${order} not supported yet.`);
      }

      target.y = heading;
      target.z = attitude;
      target.x = bank;
    }
    /**
     * Set the quaternion components given Euler angle representation.
     *
     * @param order The order to apply angles: 'XYZ' or 'YXZ' or any other combination.
     *
     * See {@link https://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors MathWorks} reference
     */


    setFromEuler(x, y, z, order) {
      if (order === void 0) {
        order = 'XYZ';
      }

      const c1 = Math.cos(x / 2);
      const c2 = Math.cos(y / 2);
      const c3 = Math.cos(z / 2);
      const s1 = Math.sin(x / 2);
      const s2 = Math.sin(y / 2);
      const s3 = Math.sin(z / 2);

      if (order === 'XYZ') {
        this.x = s1 * c2 * c3 + c1 * s2 * s3;
        this.y = c1 * s2 * c3 - s1 * c2 * s3;
        this.z = c1 * c2 * s3 + s1 * s2 * c3;
        this.w = c1 * c2 * c3 - s1 * s2 * s3;
      } else if (order === 'YXZ') {
        this.x = s1 * c2 * c3 + c1 * s2 * s3;
        this.y = c1 * s2 * c3 - s1 * c2 * s3;
        this.z = c1 * c2 * s3 - s1 * s2 * c3;
        this.w = c1 * c2 * c3 + s1 * s2 * s3;
      } else if (order === 'ZXY') {
        this.x = s1 * c2 * c3 - c1 * s2 * s3;
        this.y = c1 * s2 * c3 + s1 * c2 * s3;
        this.z = c1 * c2 * s3 + s1 * s2 * c3;
        this.w = c1 * c2 * c3 - s1 * s2 * s3;
      } else if (order === 'ZYX') {
        this.x = s1 * c2 * c3 - c1 * s2 * s3;
        this.y = c1 * s2 * c3 + s1 * c2 * s3;
        this.z = c1 * c2 * s3 - s1 * s2 * c3;
        this.w = c1 * c2 * c3 + s1 * s2 * s3;
      } else if (order === 'YZX') {
        this.x = s1 * c2 * c3 + c1 * s2 * s3;
        this.y = c1 * s2 * c3 + s1 * c2 * s3;
        this.z = c1 * c2 * s3 - s1 * s2 * c3;
        this.w = c1 * c2 * c3 - s1 * s2 * s3;
      } else if (order === 'XZY') {
        this.x = s1 * c2 * c3 - c1 * s2 * s3;
        this.y = c1 * s2 * c3 - s1 * c2 * s3;
        this.z = c1 * c2 * s3 + s1 * s2 * c3;
        this.w = c1 * c2 * c3 + s1 * s2 * s3;
      }

      return this;
    }

    clone() {
      return new Quaternion(this.x, this.y, this.z, this.w);
    }
    /**
     * Performs a spherical linear interpolation between two quat
     *
     * @param toQuat second operand
     * @param t interpolation amount between the self quaternion and toQuat
     * @param target A quaternion to store the result in. If not provided, a new one will be created.
     * @returns {Quaternion} The "target" object
     */


    slerp(toQuat, t, target) {
      if (target === void 0) {
        target = new Quaternion();
      }

      const ax = this.x;
      const ay = this.y;
      const az = this.z;
      const aw = this.w;
      let bx = toQuat.x;
      let by = toQuat.y;
      let bz = toQuat.z;
      let bw = toQuat.w;
      let omega;
      let cosom;
      let sinom;
      let scale0;
      let scale1; // calc cosine

      cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)

      if (cosom < 0.0) {
        cosom = -cosom;
        bx = -bx;
        by = -by;
        bz = -bz;
        bw = -bw;
      } // calculate coefficients


      if (1.0 - cosom > 0.000001) {
        // standard case (slerp)
        omega = Math.acos(cosom);
        sinom = Math.sin(omega);
        scale0 = Math.sin((1.0 - t) * omega) / sinom;
        scale1 = Math.sin(t * omega) / sinom;
      } else {
        // "from" and "to" quaternions are very close
        //  ... so we can do a linear interpolation
        scale0 = 1.0 - t;
        scale1 = t;
      } // calculate final values


      target.x = scale0 * ax + scale1 * bx;
      target.y = scale0 * ay + scale1 * by;
      target.z = scale0 * az + scale1 * bz;
      target.w = scale0 * aw + scale1 * bw;
      return target;
    }
    /**
     * Rotate an absolute orientation quaternion given an angular velocity and a time step.
     */


    integrate(angularVelocity, dt, angularFactor, target) {
      if (target === void 0) {
        target = new Quaternion();
      }

      const ax = angularVelocity.x * angularFactor.x,
            ay = angularVelocity.y * angularFactor.y,
            az = angularVelocity.z * angularFactor.z,
            bx = this.x,
            by = this.y,
            bz = this.z,
            bw = this.w;
      const half_dt = dt * 0.5;
      target.x += half_dt * (ax * bw + ay * bz - az * by);
      target.y += half_dt * (ay * bw + az * bx - ax * bz);
      target.z += half_dt * (az * bw + ax * by - ay * bx);
      target.w += half_dt * (-ax * bx - ay * by - az * bz);
      return target;
    }

  }
  const sfv_t1 = new Vec3();
  const sfv_t2 = new Vec3();

  /**
   * The available shape types.
   */
  const SHAPE_TYPES = {
    /** SPHERE */
    SPHERE: 1,

    /** PLANE */
    PLANE: 2,

    /** BOX */
    BOX: 4,

    /** COMPOUND */
    COMPOUND: 8,

    /** CONVEXPOLYHEDRON */
    CONVEXPOLYHEDRON: 16,

    /** HEIGHTFIELD */
    HEIGHTFIELD: 32,

    /** PARTICLE */
    PARTICLE: 64,

    /** CYLINDER */
    CYLINDER: 128,

    /** TRIMESH */
    TRIMESH: 256
  };
  /**
   * ShapeType
   */

  /**
   * Base class for shapes
   */
  class Shape {
    /**
     * Identifier of the Shape.
     */

    /**
     * The type of this shape. Must be set to an int > 0 by subclasses.
     */

    /**
     * The local bounding sphere radius of this shape.
     */

    /**
     * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.
     * @default true
     */

    /**
     * @default 1
     */

    /**
     * @default -1
     */

    /**
     * Optional material of the shape that regulates contact properties.
     */

    /**
     * The body to which the shape is added to.
     */

    /**
     * All the Shape types.
     */
    constructor(options) {
      if (options === void 0) {
        options = {};
      }

      this.id = Shape.idCounter++;
      this.type = options.type || 0;
      this.boundingSphereRadius = 0;
      this.collisionResponse = options.collisionResponse ? options.collisionResponse : true;
      this.collisionFilterGroup = options.collisionFilterGroup !== undefined ? options.collisionFilterGroup : 1;
      this.collisionFilterMask = options.collisionFilterMask !== undefined ? options.collisionFilterMask : -1;
      this.material = options.material ? options.material : null;
      this.body = null;
    }
    /**
     * Computes the bounding sphere radius.
     * The result is stored in the property `.boundingSphereRadius`
     */


    updateBoundingSphereRadius() {
      throw `computeBoundingSphereRadius() not implemented for shape type ${this.type}`;
    }
    /**
     * Get the volume of this shape
     */


    volume() {
      throw `volume() not implemented for shape type ${this.type}`;
    }
    /**
     * Calculates the inertia in the local frame for this shape.
     * @see http://en.wikipedia.org/wiki/List_of_moments_of_inertia
     */


    calculateLocalInertia(mass, target) {
      throw `calculateLocalInertia() not implemented for shape type ${this.type}`;
    }
    /**
     * @todo use abstract for these kind of methods
     */


    calculateWorldAABB(pos, quat, min, max) {
      throw `calculateWorldAABB() not implemented for shape type ${this.type}`;
    }

  }
  Shape.idCounter = 0;
  Shape.types = SHAPE_TYPES;

  /**
   * Transformation utilities.
   */
  class Transform {
    /**
     * position
     */

    /**
     * quaternion
     */
    constructor(options) {
      if (options === void 0) {
        options = {};
      }

      this.position = new Vec3();
      this.quaternion = new Quaternion();

      if (options.position) {
        this.position.copy(options.position);
      }

      if (options.quaternion) {
        this.quaternion.copy(options.quaternion);
      }
    }
    /**
     * Get a global point in local transform coordinates.
     */


    pointToLocal(worldPoint, result) {
      return Transform.pointToLocalFrame(this.position, this.quaternion, worldPoint, result);
    }
    /**
     * Get a local point in global transform coordinates.
     */


    pointToWorld(localPoint, result) {
      return Transform.pointToWorldFrame(this.position, this.quaternion, localPoint, result);
    }
    /**
     * vectorToWorldFrame
     */


    vectorToWorldFrame(localVector, result) {
      if (result === void 0) {
        result = new Vec3();
      }

      this.quaternion.vmult(localVector, result);
      return result;
    }
    /**
     * pointToLocalFrame
     */


    static pointToLocalFrame(position, quaternion, worldPoint, result) {
      if (result === void 0) {
        result = new Vec3();
      }

      worldPoint.vsub(position, result);
      quaternion.conjugate(tmpQuat$1);
      tmpQuat$1.vmult(result, result);
      return result;
    }
    /**
     * pointToWorldFrame
     */


    static pointToWorldFrame(position, quaternion, localPoint, result) {
      if (result === void 0) {
        result = new Vec3();
      }

      quaternion.vmult(localPoint, result);
      result.vadd(position, result);
      return result;
    }
    /**
     * vectorToWorldFrame
     */


    static vectorToWorldFrame(quaternion, localVector, result) {
      if (result === void 0) {
        result = new Vec3();
      }

      quaternion.vmult(localVector, result);
      return result;
    }
    /**
     * vectorToLocalFrame
     */


    static vectorToLocalFrame(position, quaternion, worldVector, result) {
      if (result === void 0) {
        result = new Vec3();
      }

      quaternion.w *= -1;
      quaternion.vmult(worldVector, result);
      quaternion.w *= -1;
      return result;
    }

  }
  const tmpQuat$1 = new Quaternion();

  /**
   * A set of polygons describing a convex shape.
   *
   * The shape MUST be convex for the code to work properly. No polygons may be coplanar (contained
   * in the same 3D plane), instead these should be merged into one polygon.
   *
   * @author qiao / https://github.com/qiao (original author, see https://github.com/qiao/three.js/commit/85026f0c769e4000148a67d45a9e9b9c5108836f)
   * @author schteppe / https://github.com/schteppe
   * @see https://www.altdevblogaday.com/2011/05/13/contact-generation-between-3d-convex-meshes/
   *
   * @todo Move the clipping functions to ContactGenerator?
   * @todo Automatically merge coplanar polygons in constructor.
   * @example
   *     const convexShape = new CANNON.ConvexPolyhedron({ vertices, faces })
   *     const convexBody = new CANNON.Body({ mass: 1, shape: convexShape })
   *     world.addBody(convexBody)
   */
  class ConvexPolyhedron extends Shape {
    /** vertices */

    /**
     * Array of integer arrays, indicating which vertices each face consists of
     */

    /** faceNormals */

    /** worldVertices */

    /** worldVerticesNeedsUpdate */

    /** worldFaceNormals */

    /** worldFaceNormalsNeedsUpdate */

    /**
     * If given, these locally defined, normalized axes are the only ones being checked when doing separating axis check.
     */

    /** uniqueEdges */

    /**
     * @param vertices An array of Vec3's
     * @param faces Array of integer arrays, describing which vertices that is included in each face.
     */
    constructor(props) {
      if (props === void 0) {
        props = {};
      }

      const {
        vertices = [],
        faces = [],
        normals = [],
        axes,
        boundingSphereRadius
      } = props;
      super({
        type: Shape.types.CONVEXPOLYHEDRON
      });
      this.vertices = vertices;
      this.faces = faces;
      this.faceNormals = normals;

      if (this.faceNormals.length === 0) {
        this.computeNormals();
      }

      if (!boundingSphereRadius) {
        this.updateBoundingSphereRadius();
      } else {
        this.boundingSphereRadius = boundingSphereRadius;
      }

      this.worldVertices = []; // World transformed version of .vertices

      this.worldVerticesNeedsUpdate = true;
      this.worldFaceNormals = []; // World transformed version of .faceNormals

      this.worldFaceNormalsNeedsUpdate = true;
      this.uniqueAxes = axes ? axes.slice() : null;
      this.uniqueEdges = [];
      this.computeEdges();
    }
    /**
     * Computes uniqueEdges
     */


    computeEdges() {
      const faces = this.faces;
      const vertices = this.vertices;
      const edges = this.uniqueEdges;
      edges.length = 0;
      const edge = new Vec3();

      for (let i = 0; i !== faces.length; i++) {
        const face = faces[i];
        const numVertices = face.length;

        for (let j = 0; j !== numVertices; j++) {
          const k = (j + 1) % numVertices;
          vertices[face[j]].vsub(vertices[face[k]], edge);
          edge.normalize();
          let found = false;

          for (let p = 0; p !== edges.length; p++) {
            if (edges[p].almostEquals(edge) || edges[p].almostEquals(edge)) {
              found = true;
              break;
            }
          }

          if (!found) {
            edges.push(edge.clone());
          }
        }
      }
    }
    /**
     * Compute the normals of the faces.
     * Will reuse existing Vec3 objects in the `faceNormals` array if they exist.
     */


    computeNormals() {
      this.faceNormals.length = this.faces.length; // Generate normals

      for (let i = 0; i < this.faces.length; i++) {
        // Check so all vertices exists for this face
        for (let j = 0; j < this.faces[i].length; j++) {
          if (!this.vertices[this.faces[i][j]]) {
            throw new Error(`Vertex ${this.faces[i][j]} not found!`);
          }
        }

        const n = this.faceNormals[i] || new Vec3();
        this.getFaceNormal(i, n);
        n.negate(n);
        this.faceNormals[i] = n;
        const vertex = this.vertices[this.faces[i][0]];

        if (n.dot(vertex) < 0) {
          console.error(`.faceNormals[${i}] = Vec3(${n.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);

          for (let j = 0; j < this.faces[i].length; j++) {
            console.warn(`.vertices[${this.faces[i][j]}] = Vec3(${this.vertices[this.faces[i][j]].toString()})`);
          }
        }
      }
    }
    /**
     * Compute the normal of a face from its vertices
     */


    getFaceNormal(i, target) {
      const f = this.faces[i];
      const va = this.vertices[f[0]];
      const vb = this.vertices[f[1]];
      const vc = this.vertices[f[2]];
      ConvexPolyhedron.computeNormal(va, vb, vc, target);
    }
    /**
     * Get face normal given 3 vertices
     */


    static computeNormal(va, vb, vc, target) {
      const cb = new Vec3();
      const ab = new Vec3();
      vb.vsub(va, ab);
      vc.vsub(vb, cb);
      cb.cross(ab, target);

      if (!target.isZero()) {
        target.normalize();
      }
    }
    /**
     * @param minDist Clamp distance
     * @param result The an array of contact point objects, see clipFaceAgainstHull
     */


    clipAgainstHull(posA, quatA, hullB, posB, quatB, separatingNormal, minDist, maxDist, result) {
      const WorldNormal = new Vec3();
      let closestFaceB = -1;
      let dmax = -Number.MAX_VALUE;

      for (let face = 0; face < hullB.faces.length; face++) {
        WorldNormal.copy(hullB.faceNormals[face]);
        quatB.vmult(WorldNormal, WorldNormal);
        const d = WorldNormal.dot(separatingNormal);

        if (d > dmax) {
          dmax = d;
          closestFaceB = face;
        }
      }

      const worldVertsB1 = [];

      for (let i = 0; i < hullB.faces[closestFaceB].length; i++) {
        const b = hullB.vertices[hullB.faces[closestFaceB][i]];
        const worldb = new Vec3();
        worldb.copy(b);
        quatB.vmult(worldb, worldb);
        posB.vadd(worldb, worldb);
        worldVertsB1.push(worldb);
      }

      if (closestFaceB >= 0) {
        this.clipFaceAgainstHull(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist, result);
      }
    }
    /**
     * Find the separating axis between this hull and another
     * @param target The target vector to save the axis in
     * @return Returns false if a separation is found, else true
     */


    findSeparatingAxis(hullB, posA, quatA, posB, quatB, target, faceListA, faceListB) {
      const faceANormalWS3 = new Vec3();
      const Worldnormal1 = new Vec3();
      const deltaC = new Vec3();
      const worldEdge0 = new Vec3();
      const worldEdge1 = new Vec3();
      const Cross = new Vec3();
      let dmin = Number.MAX_VALUE;
      const hullA = this;

      if (!hullA.uniqueAxes) {
        const numFacesA = faceListA ? faceListA.length : hullA.faces.length; // Test face normals from hullA

        for (let i = 0; i < numFacesA; i++) {
          const fi = faceListA ? faceListA[i] : i; // Get world face normal

          faceANormalWS3.copy(hullA.faceNormals[fi]);
          quatA.vmult(faceANormalWS3, faceANormalWS3);
          const d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);

          if (d === false) {
            return false;
          }

          if (d < dmin) {
            dmin = d;
            target.copy(faceANormalWS3);
          }
        }
      } else {
        // Test unique axes
        for (let i = 0; i !== hullA.uniqueAxes.length; i++) {
          // Get world axis
          quatA.vmult(hullA.uniqueAxes[i], faceANormalWS3);
          const d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);

          if (d === false) {
            return false;
          }

          if (d < dmin) {
            dmin = d;
            target.copy(faceANormalWS3);
          }
        }
      }

      if (!hullB.uniqueAxes) {
        // Test face normals from hullB
        const numFacesB = faceListB ? faceListB.length : hullB.faces.length;

        for (let i = 0; i < numFacesB; i++) {
          const fi = faceListB ? faceListB[i] : i;
          Worldnormal1.copy(hullB.faceNormals[fi]);
          quatB.vmult(Worldnormal1, Worldnormal1);
          const d = hullA.testSepAxis(Worldnormal1, hullB, posA, quatA, posB, quatB);

          if (d === false) {
            return false;
          }

          if (d < dmin) {
            dmin = d;
            target.copy(Worldnormal1);
          }
        }
      } else {
        // Test unique axes in B
        for (let i = 0; i !== hullB.uniqueAxes.length; i++) {
          quatB.vmult(hullB.uniqueAxes[i], Worldnormal1);
          const d = hullA.testSepAxis(Worldnormal1, hullB, posA, quatA, posB, quatB);

          if (d === false) {
            return false;
          }

          if (d < dmin) {
            dmin = d;
            target.copy(Worldnormal1);
          }
        }
      } // Test edges


      for (let e0 = 0; e0 !== hullA.uniqueEdges.length; e0++) {
        // Get world edge
        quatA.vmult(hullA.uniqueEdges[e0], worldEdge0);

        for (let e1 = 0; e1 !== hullB.uniqueEdges.length; e1++) {
          // Get world edge 2
          quatB.vmult(hullB.uniqueEdges[e1], worldEdge1);
          worldEdge0.cross(worldEdge1, Cross);

          if (!Cross.almostZero()) {
            Cross.normalize();
            const dist = hullA.testSepAxis(Cross, hullB, posA, quatA, posB, quatB);

            if (dist === false) {
              return false;
            }

            if (dist < dmin) {
              dmin = dist;
              target.copy(Cross);
            }
          }
        }
      }

      posB.vsub(posA, deltaC);

      if (deltaC.dot(target) > 0.0) {
        target.negate(target);
      }

      return true;
    }
    /**
     * Test separating axis against two hulls. Both hulls are projected onto the axis and the overlap size is returned if there is one.
     * @return The overlap depth, or FALSE if no penetration.
     */


    testSepAxis(axis, hullB, posA, quatA, posB, quatB) {
      const hullA = this;
      ConvexPolyhedron.project(hullA, axis, posA, quatA, maxminA);
      ConvexPolyhedron.project(hullB, axis, posB, quatB, maxminB);
      const maxA = maxminA[0];
      const minA = maxminA[1];
      const maxB = maxminB[0];
      const minB = maxminB[1];

      if (maxA < minB || maxB < minA) {
        return false; // Separated
      }

      const d0 = maxA - minB;
      const d1 = maxB - minA;
      const depth = d0 < d1 ? d0 : d1;
      return depth;
    }
    /**
     * calculateLocalInertia
     */


    calculateLocalInertia(mass, target) {
      // Approximate with box inertia
      // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it
      const aabbmax = new Vec3();
      const aabbmin = new Vec3();
      this.computeLocalAABB(aabbmin, aabbmax);
      const x = aabbmax.x - aabbmin.x;
      const y = aabbmax.y - aabbmin.y;
      const z = aabbmax.z - aabbmin.z;
      target.x = 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * z * 2 * z);
      target.y = 1.0 / 12.0 * mass * (2 * x * 2 * x + 2 * z * 2 * z);
      target.z = 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * x * 2 * x);
    }
    /**
     * @param face_i Index of the face
     */


    getPlaneConstantOfFace(face_i) {
      const f = this.faces[face_i];
      const n = this.faceNormals[face_i];
      const v = this.vertices[f[0]];
      const c = -n.dot(v);
      return c;
    }
    /**
     * Clip a face against a hull.
     * @param worldVertsB1 An array of Vec3 with vertices in the world frame.
     * @param minDist Distance clamping
     * @param Array result Array to store resulting contact points in. Will be objects with properties: point, depth, normal. These are represented in world coordinates.
     */


    clipFaceAgainstHull(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist, result) {
      const faceANormalWS = new Vec3();
      const edge0 = new Vec3();
      const WorldEdge0 = new Vec3();
      const worldPlaneAnormal1 = new Vec3();
      const planeNormalWS1 = new Vec3();
      const worldA1 = new Vec3();
      const localPlaneNormal = new Vec3();
      const planeNormalWS = new Vec3();
      const hullA = this;
      const worldVertsB2 = [];
      const pVtxIn = worldVertsB1;
      const pVtxOut = worldVertsB2;
      let closestFaceA = -1;
      let dmin = Number.MAX_VALUE; // Find the face with normal closest to the separating axis

      for (let face = 0; face < hullA.faces.length; face++) {
        faceANormalWS.copy(hullA.faceNormals[face]);
        quatA.vmult(faceANormalWS, faceANormalWS);
        const d = faceANormalWS.dot(separatingNormal);

        if (d < dmin) {
          dmin = d;
          closestFaceA = face;
        }
      }

      if (closestFaceA < 0) {
        return;
      } // Get the face and construct connected faces


      const polyA = hullA.faces[closestFaceA];
      polyA.connectedFaces = [];

      for (let i = 0; i < hullA.faces.length; i++) {
        for (let j = 0; j < hullA.faces[i].length; j++) {
          if (
          /* Sharing a vertex*/
          polyA.indexOf(hullA.faces[i][j]) !== -1 &&
          /* Not the one we are looking for connections from */
          i !== closestFaceA &&
          /* Not already added */
          polyA.connectedFaces.indexOf(i) === -1) {
            polyA.connectedFaces.push(i);
          }
        }
      } // Clip the polygon to the back of the planes of all faces of hull A,
      // that are adjacent to the witness face


      const numVerticesA = polyA.length;

      for (let i = 0; i < numVerticesA; i++) {
        const a = hullA.vertices[polyA[i]];
        const b = hullA.vertices[polyA[(i + 1) % numVerticesA]];
        a.vsub(b, edge0);
        WorldEdge0.copy(edge0);
        quatA.vmult(WorldEdge0, WorldEdge0);
        posA.vadd(WorldEdge0, WorldEdge0);
        worldPlaneAnormal1.copy(this.faceNormals[closestFaceA]);
        quatA.vmult(worldPlaneAnormal1, worldPlaneAnormal1);
        posA.vadd(worldPlaneAnormal1, worldPlaneAnormal1);
        WorldEdge0.cross(worldPlaneAnormal1, planeNormalWS1);
        planeNormalWS1.negate(planeNormalWS1);
        worldA1.copy(a);
        quatA.vmult(worldA1, worldA1);
        posA.vadd(worldA1, worldA1);
        const otherFace = polyA.connectedFaces[i];
        localPlaneNormal.copy(this.faceNormals[otherFace]);
        const localPlaneEq = this.getPlaneConstantOfFace(otherFace);
        planeNormalWS.copy(localPlaneNormal);
        quatA.vmult(planeNormalWS, planeNormalWS);
        const planeEqWS = localPlaneEq - planeNormalWS.dot(posA); // Clip face against our constructed plane

        this.clipFaceAgainstPlane(pVtxIn, pVtxOut, planeNormalWS, planeEqWS); // Throw away all clipped points, but save the remaining until next clip

        while (pVtxIn.length) {
          pVtxIn.shift();
        }

        while (pVtxOut.length) {
          pVtxIn.push(pVtxOut.shift());
        }
      } // only keep contact points that are behind the witness face


      localPlaneNormal.copy(this.faceNormals[closestFaceA]);
      const localPlaneEq = this.getPlaneConstantOfFace(closestFaceA);
      planeNormalWS.copy(localPlaneNormal);
      quatA.vmult(planeNormalWS, planeNormalWS);
      const planeEqWS = localPlaneEq - planeNormalWS.dot(posA);

      for (let i = 0; i < pVtxIn.length; i++) {
        let depth = planeNormalWS.dot(pVtxIn[i]) + planeEqWS; // ???

        if (depth <= minDist) {
          console.log(`clamped: depth=${depth} to minDist=${minDist}`);
          depth = minDist;
        }

        if (depth <= maxDist) {
          const point = pVtxIn[i];

          if (depth <= 1e-6) {
            const p = {
              point,
              normal: planeNormalWS,
              depth
            };
            result.push(p);
          }
        }
      }
    }
    /**
     * Clip a face in a hull against the back of a plane.
     * @param planeConstant The constant in the mathematical plane equation
     */


    clipFaceAgainstPlane(inVertices, outVertices, planeNormal, planeConstant) {
      let n_dot_first;
      let n_dot_last;
      const numVerts = inVertices.length;

      if (numVerts < 2) {
        return outVertices;
      }

      let firstVertex = inVertices[inVertices.length - 1];
      let lastVertex = inVertices[0];
      n_dot_first = planeNormal.dot(firstVertex) + planeConstant;

      for (let vi = 0; vi < numVerts; vi++) {
        lastVertex = inVertices[vi];
        n_dot_last = planeNormal.dot(lastVertex) + planeConstant;

        if (n_dot_first < 0) {
          if (n_dot_last < 0) {
            // Start < 0, end < 0, so output lastVertex
            const newv = new Vec3();
            newv.copy(lastVertex);
            outVertices.push(newv);
          } else {
            // Start < 0, end >= 0, so output intersection
            const newv = new Vec3();
            firstVertex.lerp(lastVertex, n_dot_first / (n_dot_first - n_dot_last), newv);
            outVertices.push(newv);
          }
        } else {
          if (n_dot_last < 0) {
            // Start >= 0, end < 0 so output intersection and end
            const newv = new Vec3();
            firstVertex.lerp(lastVertex, n_dot_first / (n_dot_first - n_dot_last), newv);
            outVertices.push(newv);
            outVertices.push(lastVertex);
          }
        }

        firstVertex = lastVertex;
        n_dot_first = n_dot_last;
      }

      return outVertices;
    }
    /**
     * Updates `.worldVertices` and sets `.worldVerticesNeedsUpdate` to false.
     */


    computeWorldVertices(position, quat) {
      while (this.worldVertices.length < this.vertices.length) {
        this.worldVertices.push(new Vec3());
      }

      const verts = this.vertices;
      const worldVerts = this.worldVertices;

      for (let i = 0; i !== this.vertices.length; i++) {
        quat.vmult(verts[i], worldVerts[i]);
        position.vadd(worldVerts[i], worldVerts[i]);
      }

      this.worldVerticesNeedsUpdate = false;
    }

    computeLocalAABB(aabbmin, aabbmax) {
      const vertices = this.vertices;
      aabbmin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
      aabbmax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);

      for (let i = 0; i < this.vertices.length; i++) {
        const v = vertices[i];

        if (v.x < aabbmin.x) {
          aabbmin.x = v.x;
        } else if (v.x > aabbmax.x) {
          aabbmax.x = v.x;
        }

        if (v.y < aabbmin.y) {
          aabbmin.y = v.y;
        } else if (v.y > aabbmax.y) {
          aabbmax.y = v.y;
        }

        if (v.z < aabbmin.z) {
          aabbmin.z = v.z;
        } else if (v.z > aabbmax.z) {
          aabbmax.z = v.z;
        }
      }
    }
    /**
     * Updates `worldVertices` and sets `worldVerticesNeedsUpdate` to false.
     */


    computeWorldFaceNormals(quat) {
      const N = this.faceNormals.length;

      while (this.worldFaceNormals.length < N) {
        this.worldFaceNormals.push(new Vec3());
      }

      const normals = this.faceNormals;
      const worldNormals = this.worldFaceNormals;

      for (let i = 0; i !== N; i++) {
        quat.vmult(normals[i], worldNormals[i]);
      }

      this.worldFaceNormalsNeedsUpdate = false;
    }
    /**
     * updateBoundingSphereRadius
     */


    updateBoundingSphereRadius() {
      // Assume points are distributed with local (0,0,0) as center
      let max2 = 0;
      const verts = this.vertices;

      for (let i = 0; i !== verts.length; i++) {
        const norm2 = verts[i].lengthSquared();

        if (norm2 > max2) {
          max2 = norm2;
        }
      }

      this.boundingSphereRadius = Math.sqrt(max2);
    }
    /**
     * calculateWorldAABB
     */


    calculateWorldAABB(pos, quat, min, max) {
      const verts = this.vertices;
      let minx;
      let miny;
      let minz;
      let maxx;
      let maxy;
      let maxz;
      let tempWorldVertex = new Vec3();

      for (let i = 0; i < verts.length; i++) {
        tempWorldVertex.copy(verts[i]);
        quat.vmult(tempWorldVertex, tempWorldVertex);
        pos.vadd(tempWorldVertex, tempWorldVertex);
        const v = tempWorldVertex;

        if (minx === undefined || v.x < minx) {
          minx = v.x;
        }

        if (maxx === undefined || v.x > maxx) {
          maxx = v.x;
        }

        if (miny === undefined || v.y < miny) {
          miny = v.y;
        }

        if (maxy === undefined || v.y > maxy) {
          maxy = v.y;
        }

        if (minz === undefined || v.z < minz) {
          minz = v.z;
        }

        if (maxz === undefined || v.z > maxz) {
          maxz = v.z;
        }
      }

      min.set(minx, miny, minz);
      max.set(maxx, maxy, maxz);
    }
    /**
     * Get approximate convex volume
     */


    volume() {
      return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;
    }
    /**
     * Get an average of all the vertices positions
     */


    getAveragePointLocal(target) {
      if (target === void 0) {
        target = new Vec3();
      }

      const verts = this.vertices;

      for (let i = 0; i < verts.length; i++) {
        target.vadd(verts[i], target);
      }

      target.scale(1 / verts.length, target);
      return target;
    }
    /**
     * Transform all local points. Will change the .vertices
     */


    transformAllPoints(offset, quat) {
      const n = this.vertices.length;
      const verts = this.vertices; // Apply rotation

      if (quat) {
        // Rotate vertices
        for (let i = 0; i < n; i++) {
          const v = verts[i];
          quat.vmult(v, v);
        } // Rotate face normals


        for (let i = 0; i < this.faceNormals.length; i++) {
          const v = this.faceNormals[i];
          quat.vmult(v, v);
        }
        /*
              // Rotate edges
              for(let i=0; i<this.uniqueEdges.length; i++){
                  const v = this.uniqueEdges[i];
                  quat.vmult(v,v);
              }*/

      } // Apply offset


      if (offset) {
        for (let i = 0; i < n; i++) {
          const v = verts[i];
          v.vadd(offset, v);
        }
      }
    }
    /**
     * Checks whether p is inside the polyhedra. Must be in local coords.
     * The point lies outside of the convex hull of the other points if and only if the direction
     * of all the vectors from it to those other points are on less than one half of a sphere around it.
     * @param p A point given in local coordinates
     */


    pointIsInside(p) {
      const verts = this.vertices;
      const faces = this.faces;
      const normals = this.faceNormals;
      const positiveResult = null;
      const pointInside = new Vec3();
      this.getAveragePointLocal(pointInside);

      for (let i = 0; i < this.faces.length; i++) {
        let n = normals[i];
        const v = verts[faces[i][0]]; // We only need one point in the face
        // This dot product determines which side of the edge the point is

        const vToP = new Vec3();
        p.vsub(v, vToP);
        const r1 = n.dot(vToP);
        const vToPointInside = new Vec3();
        pointInside.vsub(v, vToPointInside);
        const r2 = n.dot(vToPointInside);

        if (r1 < 0 && r2 > 0 || r1 > 0 && r2 < 0) {
          return false; // Encountered some other sign. Exit.
        }
      } // If we got here, all dot products were of the same sign.


      return positiveResult ? 1 : -1;
    }
    /**
     * Get max and min dot product of a convex hull at position (pos,quat) projected onto an axis.
     * Results are saved in the array maxmin.
     * @param result result[0] and result[1] will be set to maximum and minimum, respectively.
     */


    static project(shape, axis, pos, quat, result) {
      const n = shape.vertices.length;
      const localAxis = project_localAxis;
      let max = 0;
      let min = 0;
      const localOrigin = project_localOrigin;
      const vs = shape.vertices;
      localOrigin.setZero(); // Transform the axis to local

      Transform.vectorToLocalFrame(pos, quat, axis, localAxis);
      Transform.pointToLocalFrame(pos, quat, localOrigin, localOrigin);
      const add = localOrigin.dot(localAxis);
      min = max = vs[0].dot(localAxis);

      for (let i = 1; i < n; i++) {
        const val = vs[i].dot(localAxis);

        if (val > max) {
          max = val;
        }

        if (val < min) {
          min = val;
        }
      }

      min -= add;
      max -= add;

      if (min > max) {
        // Inconsistent - swap
        const temp = min;
        min = max;
        max = temp;
      } // Output


      result[0] = max;
      result[1] = min;
    }

  }
  const maxminA = [];
  const maxminB = [];
  new Vec3();
  const project_localAxis = new Vec3();
  const project_localOrigin = new Vec3();

  /**
   * A 3d box shape.
   * @example
   *     const size = 1
   *     const halfExtents = new CANNON.Vec3(size, size, size)
   *     const boxShape = new CANNON.Box(halfExtents)
   *     const boxBody = new CANNON.Body({ mass: 1, shape: boxShape })
   *     world.addBody(boxBody)
   */
  class Box extends Shape {
    /**
     * The half extents of the box.
     */

    /**
     * Used by the contact generator to make contacts with other convex polyhedra for example.
     */
    constructor(halfExtents) {
      super({
        type: Shape.types.BOX
      });
      this.halfExtents = halfExtents;
      this.convexPolyhedronRepresentation = null;
      this.updateConvexPolyhedronRepresentation();
      this.updateBoundingSphereRadius();
    }
    /**
     * Updates the local convex polyhedron representation used for some collisions.
     */


    updateConvexPolyhedronRepresentation() {
      const sx = this.halfExtents.x;
      const sy = this.halfExtents.y;
      const sz = this.halfExtents.z;
      const V = Vec3;
      const vertices = [new V(-sx, -sy, -sz), new V(sx, -sy, -sz), new V(sx, sy, -sz), new V(-sx, sy, -sz), new V(-sx, -sy, sz), new V(sx, -sy, sz), new V(sx, sy, sz), new V(-sx, sy, sz)];
      const faces = [[3, 2, 1, 0], // -z
      [4, 5, 6, 7], // +z
      [5, 4, 0, 1], // -y
      [2, 3, 7, 6], // +y
      [0, 4, 7, 3], // -x
      [1, 2, 6, 5] // +x
      ];
      const axes = [new V(0, 0, 1), new V(0, 1, 0), new V(1, 0, 0)];
      const h = new ConvexPolyhedron({
        vertices,
        faces,
        axes
      });
      this.convexPolyhedronRepresentation = h;
      h.material = this.material;
    }
    /**
     * Calculate the inertia of the box.
     */


    calculateLocalInertia(mass, target) {
      if (target === void 0) {
        target = new Vec3();
      }

      Box.calculateInertia(this.halfExtents, mass, target);
      return target;
    }

    static calculateInertia(halfExtents, mass, target) {
      const e = halfExtents;
      target.x = 1.0 / 12.0 * mass * (2 * e.y * 2 * e.y + 2 * e.z * 2 * e.z);
      target.y = 1.0 / 12.0 * mass * (2 * e.x * 2 * e.x + 2 * e.z * 2 * e.z);
      target.z = 1.0 / 12.0 * mass * (2 * e.y * 2 * e.y + 2 * e.x * 2 * e.x);
    }
    /**
     * Get the box 6 side normals
     * @param sixTargetVectors An array of 6 vectors, to store the resulting side normals in.
     * @param quat Orientation to apply to the normal vectors. If not provided, the vectors will be in respect to the local frame.
     */


    getSideNormals(sixTargetVectors, quat) {
      const sides = sixTargetVectors;
      const ex = this.halfExtents;
      sides[0].set(ex.x, 0, 0);
      sides[1].set(0, ex.y, 0);
      sides[2].set(0, 0, ex.z);
      sides[3].set(-ex.x, 0, 0);
      sides[4].set(0, -ex.y, 0);
      sides[5].set(0, 0, -ex.z);

      if (quat !== undefined) {
        for (let i = 0; i !== sides.length; i++) {
          quat.vmult(sides[i], sides[i]);
        }
      }

      return sides;
    }
    /**
     * Returns the volume of the box.
     */


    volume() {
      return 8.0 * this.halfExtents.x * this.halfExtents.y * this.halfExtents.z;
    }
    /**
     * updateBoundingSphereRadius
     */


    updateBoundingSphereRadius() {
      this.boundingSphereRadius = this.halfExtents.length();
    }
    /**
     * forEachWorldCorner
     */


    forEachWorldCorner(pos, quat, callback) {
      const e = this.halfExtents;
      const corners = [[e.x, e.y, e.z], [-e.x, e.y, e.z], [-e.x, -e.y, e.z], [-e.x, -e.y, -e.z], [e.x, -e.y, -e.z], [e.x, e.y, -e.z], [-e.x, e.y, -e.z], [e.x, -e.y, e.z]];

      for (let i = 0; i < corners.length; i++) {
        worldCornerTempPos.set(corners[i][0], corners[i][1], corners[i][2]);
        quat.vmult(worldCornerTempPos, worldCornerTempPos);
        pos.vadd(worldCornerTempPos, worldCornerTempPos);
        callback(worldCornerTempPos.x, worldCornerTempPos.y, worldCornerTempPos.z);
      }
    }
    /**
     * calculateWorldAABB
     */


    calculateWorldAABB(pos, quat, min, max) {
      const e = this.halfExtents;
      worldCornersTemp[0].set(e.x, e.y, e.z);
      worldCornersTemp[1].set(-e.x, e.y, e.z);
      worldCornersTemp[2].set(-e.x, -e.y, e.z);
      worldCornersTemp[3].set(-e.x, -e.y, -e.z);
      worldCornersTemp[4].set(e.x, -e.y, -e.z);
      worldCornersTemp[5].set(e.x, e.y, -e.z);
      worldCornersTemp[6].set(-e.x, e.y, -e.z);
      worldCornersTemp[7].set(e.x, -e.y, e.z);
      const wc = worldCornersTemp[0];
      quat.vmult(wc, wc);
      pos.vadd(wc, wc);
      max.copy(wc);
      min.copy(wc);

      for (let i = 1; i < 8; i++) {
        const wc = worldCornersTemp[i];
        quat.vmult(wc, wc);
        pos.vadd(wc, wc);
        const x = wc.x;
        const y = wc.y;
        const z = wc.z;

        if (x > max.x) {
          max.x = x;
        }

        if (y > max.y) {
          max.y = y;
        }

        if (z > max.z) {
          max.z = z;
        }

        if (x < min.x) {
          min.x = x;
        }

        if (y < min.y) {
          min.y = y;
        }

        if (z < min.z) {
          min.z = z;
        }
      } // Get each axis max
      // min.set(Infinity,Infinity,Infinity);
      // max.set(-Infinity,-Infinity,-Infinity);
      // this.forEachWorldCorner(pos,quat,function(x,y,z){
      //     if(x > max.x){
      //         max.x = x;
      //     }
      //     if(y > max.y){
      //         max.y = y;
      //     }
      //     if(z > max.z){
      //         max.z = z;
      //     }
      //     if(x < min.x){
      //         min.x = x;
      //     }
      //     if(y < min.y){
      //         min.y = y;
      //     }
      //     if(z < min.z){
      //         min.z = z;
      //     }
      // });

    }

  }
  const worldCornerTempPos = new Vec3();
  const worldCornersTemp = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];

  /**
   * BODY_TYPES
   */
  const BODY_TYPES = {
    /** DYNAMIC */
    DYNAMIC: 1,

    /** STATIC */
    STATIC: 2,

    /** KINEMATIC */
    KINEMATIC: 4
  };
  /**
   * BodyType
   */

  /**
   * BODY_SLEEP_STATES
   */
  const BODY_SLEEP_STATES = {
    /** AWAKE */
    AWAKE: 0,

    /** SLEEPY */
    SLEEPY: 1,

    /** SLEEPING */
    SLEEPING: 2
  };
  /**
   * BodySleepState
   */

  /**
   * Base class for all body types.
   * @example
   *     const shape = new CANNON.Sphere(1)
   *     const body = new CANNON.Body({
   *       mass: 1,
   *       shape,
   *     })
   *     world.addBody(body)
   */
  class Body extends EventTarget {
    /**
     * Dispatched after two bodies collide. This event is dispatched on each
     * of the two bodies involved in the collision.
     * @event collide
     * @param body The body that was involved in the collision.
     * @param contact The details of the collision.
     */

    /**
     * A dynamic body is fully simulated. Can be moved manually by the user, but normally they move according to forces. A dynamic body can collide with all body types. A dynamic body always has finite, non-zero mass.
     */

    /**
     * A static body does not move during simulation and behaves as if it has infinite mass. Static bodies can be moved manually by setting the position of the body. The velocity of a static body is always zero. Static bodies do not collide with other static or kinematic bodies.
     */

    /**
     * A kinematic body moves under simulation according to its velocity. They do not respond to forces. They can be moved manually, but normally a kinematic body is moved by setting its velocity. A kinematic body behaves as if it has infinite mass. Kinematic bodies do not collide with other static or kinematic bodies.
     */

    /**
     * AWAKE
     */

    /**
     * SLEEPY
     */

    /**
     * SLEEPING
     */

    /**
     * Dispatched after a sleeping body has woken up.
     * @event wakeup
     */

    /**
     * Dispatched after a body has gone in to the sleepy state.
     * @event sleepy
     */

    /**
     * Dispatched after a body has fallen asleep.
     * @event sleep
     */
    constructor(options) {
      if (options === void 0) {
        options = {};
      }

      super();
      this.id = Body.idCounter++;
      this.index = -1;
      this.world = null;
      this.vlambda = new Vec3();
      this.collisionFilterGroup = typeof options.collisionFilterGroup === 'number' ? options.collisionFilterGroup : 1;
      this.collisionFilterMask = typeof options.collisionFilterMask === 'number' ? options.collisionFilterMask : -1;
      this.collisionResponse = typeof options.collisionResponse === 'boolean' ? options.collisionResponse : true;
      this.position = new Vec3();
      this.previousPosition = new Vec3();
      this.interpolatedPosition = new Vec3();
      this.initPosition = new Vec3();

      if (options.position) {
        this.position.copy(options.position);
        this.previousPosition.copy(options.position);
        this.interpolatedPosition.copy(options.position);
        this.initPosition.copy(options.position);
      }

      this.velocity = new Vec3();

      if (options.velocity) {
        this.velocity.copy(options.velocity);
      }

      this.initVelocity = new Vec3();
      this.force = new Vec3();
      const mass = typeof options.mass === 'number' ? options.mass : 0;
      this.mass = mass;
      this.invMass = mass > 0 ? 1.0 / mass : 0;
      this.material = options.material || null;
      this.linearDamping = typeof options.linearDamping === 'number' ? options.linearDamping : 0.01;
      this.type = mass <= 0.0 ? Body.STATIC : Body.DYNAMIC;

      if (typeof options.type === typeof Body.STATIC) {
        this.type = options.type;
      }

      this.allowSleep = typeof options.allowSleep !== 'undefined' ? options.allowSleep : true;
      this.sleepState = Body.AWAKE;
      this.sleepSpeedLimit = typeof options.sleepSpeedLimit !== 'undefined' ? options.sleepSpeedLimit : 0.1;
      this.sleepTimeLimit = typeof options.sleepTimeLimit !== 'undefined' ? options.sleepTimeLimit : 1;
      this.timeLastSleepy = 0;
      this.wakeUpAfterNarrowphase = false;
      this.torque = new Vec3();
      this.quaternion = new Quaternion();
      this.initQuaternion = new Quaternion();
      this.previousQuaternion = new Quaternion();
      this.interpolatedQuaternion = new Quaternion();

      if (options.quaternion) {
        this.quaternion.copy(options.quaternion);
        this.initQuaternion.copy(options.quaternion);
        this.previousQuaternion.copy(options.quaternion);
        this.interpolatedQuaternion.copy(options.quaternion);
      }

      this.angularVelocity = new Vec3();

      if (options.angularVelocity) {
        this.angularVelocity.copy(options.angularVelocity);
      }

      this.initAngularVelocity = new Vec3();
      this.shapes = [];
      this.shapeOffsets = [];
      this.shapeOrientations = [];
      this.inertia = new Vec3();
      this.invInertia = new Vec3();
      this.invInertiaWorld = new Mat3();
      this.invMassSolve = 0;
      this.invInertiaSolve = new Vec3();
      this.invInertiaWorldSolve = new Mat3();
      this.fixedRotation = typeof options.fixedRotation !== 'undefined' ? options.fixedRotation : false;
      this.angularDamping = typeof options.angularDamping !== 'undefined' ? options.angularDamping : 0.01;
      this.linearFactor = new Vec3(1, 1, 1);

      if (options.linearFactor) {
        this.linearFactor.copy(options.linearFactor);
      }

      this.angularFactor = new Vec3(1, 1, 1);

      if (options.angularFactor) {
        this.angularFactor.copy(options.angularFactor);
      }

      this.aabb = new AABB();
      this.aabbNeedsUpdate = true;
      this.boundingRadius = 0;
      this.wlambda = new Vec3();
      this.isTrigger = Boolean(options.isTrigger);

      if (options.shape) {
        this.addShape(options.shape);
      }

      this.updateMassProperties();
    }
    /**
     * Wake the body up.
     */


    wakeUp() {
      const prevState = this.sleepState;
      this.sleepState = Body.AWAKE;
      this.wakeUpAfterNarrowphase = false;

      if (prevState === Body.SLEEPING) {
        this.dispatchEvent(Body.wakeupEvent);
      }
    }
    /**
     * Force body sleep
     */


    sleep() {
      this.sleepState = Body.SLEEPING;
      this.velocity.set(0, 0, 0);
      this.angularVelocity.set(0, 0, 0);
      this.wakeUpAfterNarrowphase = false;
    }
    /**
     * Called every timestep to update internal sleep timer and change sleep state if needed.
     * @param time The world time in seconds
     */


    sleepTick(time) {
      if (this.allowSleep) {
        const sleepState = this.sleepState;
        const speedSquared = this.velocity.lengthSquared() + this.angularVelocity.lengthSquared();
        const speedLimitSquared = this.sleepSpeedLimit ** 2;

        if (sleepState === Body.AWAKE && speedSquared < speedLimitSquared) {
          this.sleepState = Body.SLEEPY; // Sleepy

          this.timeLastSleepy = time;
          this.dispatchEvent(Body.sleepyEvent);
        } else if (sleepState === Body.SLEEPY && speedSquared > speedLimitSquared) {
          this.wakeUp(); // Wake up
        } else if (sleepState === Body.SLEEPY && time - this.timeLastSleepy > this.sleepTimeLimit) {
          this.sleep(); // Sleeping

          this.dispatchEvent(Body.sleepEvent);
        }
      }
    }
    /**
     * If the body is sleeping, it should be immovable / have infinite mass during solve. We solve it by having a separate "solve mass".
     */


    updateSolveMassProperties() {
      if (this.sleepState === Body.SLEEPING || this.type === Body.KINEMATIC) {
        this.invMassSolve = 0;
        this.invInertiaSolve.setZero();
        this.invInertiaWorldSolve.setZero();
      } else {
        this.invMassSolve = this.invMass;
        this.invInertiaSolve.copy(this.invInertia);
        this.invInertiaWorldSolve.copy(this.invInertiaWorld);
      }
    }
    /**
     * Convert a world point to local body frame.
     */


    pointToLocalFrame(worldPoint, result) {
      if (result === void 0) {
        result = new Vec3();
      }

      worldPoint.vsub(this.position, result);
      this.quaternion.conjugate().vmult(result, result);
      return result;
    }
    /**
     * Convert a world vector to local body frame.
     */


    vectorToLocalFrame(worldVector, result) {
      if (result === void 0) {
        result = new Vec3();
      }

      this.quaternion.conjugate().vmult(worldVector, result);
      return result;
    }
    /**
     * Convert a local body point to world frame.
     */


    pointToWorldFrame(localPoint, result) {
      if (result === void 0) {
        result = new Vec3();
      }

      this.quaternion.vmult(localPoint, result);
      result.vadd(this.position, result);
      return result;
    }
    /**
     * Convert a local body point to world frame.
     */


    vectorToWorldFrame(localVector, result) {
      if (result === void 0) {
        result = new Vec3();
      }

      this.quaternion.vmult(localVector, result);
      return result;
    }
    /**
     * Add a shape to the body with a local offset and orientation.
     * @return The body object, for chainability.
     */


    addShape(shape, _offset, _orientation) {
      const offset = new Vec3();
      const orientation = new Quaternion();

      if (_offset) {
        offset.copy(_offset);
      }

      if (_orientation) {
        orientation.copy(_orientation);
      }

      this.shapes.push(shape);
      this.shapeOffsets.push(offset);
      this.shapeOrientations.push(orientation);
      this.updateMassProperties();
      this.updateBoundingRadius();
      this.aabbNeedsUpdate = true;
      shape.body = this;
      return this;
    }
    /**
     * Remove a shape from the body.
     * @return The body object, for chainability.
     */


    removeShape(shape) {
      const index = this.shapes.indexOf(shape);

      if (index === -1) {
        console.warn('Shape does not belong to the body');
        return this;
      }

      this.shapes.splice(index, 1);
      this.shapeOffsets.splice(index, 1);
      this.shapeOrientations.splice(index, 1);
      this.updateMassProperties();
      this.updateBoundingRadius();
      this.aabbNeedsUpdate = true;
      shape.body = null;
      return this;
    }
    /**
     * Update the bounding radius of the body. Should be done if any of the shapes are changed.
     */


    updateBoundingRadius() {
      const shapes = this.shapes;
      const shapeOffsets = this.shapeOffsets;
      const N = shapes.length;
      let radius = 0;

      for (let i = 0; i !== N; i++) {
        const shape = shapes[i];
        shape.updateBoundingSphereRadius();
        const offset = shapeOffsets[i].length();
        const r = shape.boundingSphereRadius;

        if (offset + r > radius) {
          radius = offset + r;
        }
      }

      this.boundingRadius = radius;
    }
    /**
     * Updates the .aabb
     */


    updateAABB() {
      const shapes = this.shapes;
      const shapeOffsets = this.shapeOffsets;
      const shapeOrientations = this.shapeOrientations;
      const N = shapes.length;
      const offset = tmpVec;
      const orientation = tmpQuat;
      const bodyQuat = this.quaternion;
      const aabb = this.aabb;
      const shapeAABB = updateAABB_shapeAABB;

      for (let i = 0; i !== N; i++) {
        const shape = shapes[i]; // Get shape world position

        bodyQuat.vmult(shapeOffsets[i], offset);
        offset.vadd(this.position, offset); // Get shape world quaternion

        bodyQuat.mult(shapeOrientations[i], orientation); // Get shape AABB

        shape.calculateWorldAABB(offset, orientation, shapeAABB.lowerBound, shapeAABB.upperBound);

        if (i === 0) {
          aabb.copy(shapeAABB);
        } else {
          aabb.extend(shapeAABB);
        }
      }

      this.aabbNeedsUpdate = false;
    }
    /**
     * Update `.inertiaWorld` and `.invInertiaWorld`
     */


    updateInertiaWorld(force) {
      const I = this.invInertia;

      if (I.x === I.y && I.y === I.z && !force) ; else {
        const m1 = uiw_m1;
        const m2 = uiw_m2;
        m1.setRotationFromQuaternion(this.quaternion);
        m1.transpose(m2);
        m1.scale(I, m1);
        m1.mmult(m2, this.invInertiaWorld);
      }
    }
    /**
     * Apply force to a point of the body. This could for example be a point on the Body surface.
     * Applying force this way will add to Body.force and Body.torque.
     * @param force The amount of force to add.
     * @param relativePoint A point relative to the center of mass to apply the force on.
     */


    applyForce(force, relativePoint) {
      if (relativePoint === void 0) {
        relativePoint = new Vec3();
      }

      // Needed?
      if (this.type !== Body.DYNAMIC) {
        return;
      }

      if (this.sleepState === Body.SLEEPING) {
        this.wakeUp();
      } // Compute produced rotational force


      const rotForce = Body_applyForce_rotForce;
      relativePoint.cross(force, rotForce); // Add linear force

      this.force.vadd(force, this.force); // Add rotational force

      this.torque.vadd(rotForce, this.torque);
    }
    /**
     * Apply force to a local point in the body.
     * @param force The force vector to apply, defined locally in the body frame.
     * @param localPoint A local point in the body to apply the force on.
     */


    applyLocalForce(localForce, localPoint) {
      if (localPoint === void 0) {
        localPoint = new Vec3();
      }

      if (this.type !== Body.DYNAMIC) {
        return;
      }

      const worldForce = Body_applyLocalForce_worldForce;
      const relativePointWorld = Body_applyLocalForce_relativePointWorld; // Transform the force vector to world space

      this.vectorToWorldFrame(localForce, worldForce);
      this.vectorToWorldFrame(localPoint, relativePointWorld);
      this.applyForce(worldForce, relativePointWorld);
    }
    /**
     * Apply torque to the body.
     * @param torque The amount of torque to add.
     */


    applyTorque(torque) {
      if (this.type !== Body.DYNAMIC) {
        return;
      }

      if (this.sleepState === Body.SLEEPING) {
        this.wakeUp();
      } // Add rotational force


      this.torque.vadd(torque, this.torque);
    }
    /**
     * Apply impulse to a point of the body. This could for example be a point on the Body surface.
     * An impulse is a force added to a body during a short period of time (impulse = force * time).
     * Impulses will be added to Body.velocity and Body.angularVelocity.
     * @param impulse The amount of impulse to add.
     * @param relativePoint A point relative to the center of mass to apply the force on.
     */


    applyImpulse(impulse, relativePoint) {
      if (relativePoint === void 0) {
        relativePoint = new Vec3();
      }

      if (this.type !== Body.DYNAMIC) {
        return;
      }

      if (this.sleepState === Body.SLEEPING) {
        this.wakeUp();
      } // Compute point position relative to the body center


      const r = relativePoint; // Compute produced central impulse velocity

      const velo = Body_applyImpulse_velo;
      velo.copy(impulse);
      velo.scale(this.invMass, velo); // Add linear impulse

      this.velocity.vadd(velo, this.velocity); // Compute produced rotational impulse velocity

      const rotVelo = Body_applyImpulse_rotVelo;
      r.cross(impulse, rotVelo);
      /*
       rotVelo.x *= this.invInertia.x;
       rotVelo.y *= this.invInertia.y;
       rotVelo.z *= this.invInertia.z;
       */

      this.invInertiaWorld.vmult(rotVelo, rotVelo); // Add rotational Impulse

      this.angularVelocity.vadd(rotVelo, this.angularVelocity);
    }
    /**
     * Apply locally-defined impulse to a local point in the body.
     * @param force The force vector to apply, defined locally in the body frame.
     * @param localPoint A local point in the body to apply the force on.
     */


    applyLocalImpulse(localImpulse, localPoint) {
      if (localPoint === void 0) {
        localPoint = new Vec3();
      }

      if (this.type !== Body.DYNAMIC) {
        return;
      }

      const worldImpulse = Body_applyLocalImpulse_worldImpulse;
      const relativePointWorld = Body_applyLocalImpulse_relativePoint; // Transform the force vector to world space

      this.vectorToWorldFrame(localImpulse, worldImpulse);
      this.vectorToWorldFrame(localPoint, relativePointWorld);
      this.applyImpulse(worldImpulse, relativePointWorld);
    }
    /**
     * Should be called whenever you change the body shape or mass.
     */


    updateMassProperties() {
      const halfExtents = Body_updateMassProperties_halfExtents;
      this.invMass = this.mass > 0 ? 1.0 / this.mass : 0;
      const I = this.inertia;
      const fixed = this.fixedRotation; // Approximate with AABB box

      this.updateAABB();
      halfExtents.set((this.aabb.upperBound.x - this.aabb.lowerBound.x) / 2, (this.aabb.upperBound.y - this.aabb.lowerBound.y) / 2, (this.aabb.upperBound.z - this.aabb.lowerBound.z) / 2);
      Box.calculateInertia(halfExtents, this.mass, I);
      this.invInertia.set(I.x > 0 && !fixed ? 1.0 / I.x : 0, I.y > 0 && !fixed ? 1.0 / I.y : 0, I.z > 0 && !fixed ? 1.0 / I.z : 0);
      this.updateInertiaWorld(true);
    }
    /**
     * Get world velocity of a point in the body.
     * @param worldPoint
     * @param result
     * @return The result vector.
     */


    getVelocityAtWorldPoint(worldPoint, result) {
      const r = new Vec3();
      worldPoint.vsub(this.position, r);
      this.angularVelocity.cross(r, result);
      this.velocity.vadd(result, result);
      return result;
    }
    /**
     * Move the body forward in time.
     * @param dt Time step
     * @param quatNormalize Set to true to normalize the body quaternion
     * @param quatNormalizeFast If the quaternion should be normalized using "fast" quaternion normalization
     */


    integrate(dt, quatNormalize, quatNormalizeFast) {
      // Save previous position
      this.previousPosition.copy(this.position);
      this.previousQuaternion.copy(this.quaternion);

      if (!(this.type === Body.DYNAMIC || this.type === Body.KINEMATIC) || this.sleepState === Body.SLEEPING) {
        // Only for dynamic
        return;
      }

      const velo = this.velocity;
      const angularVelo = this.angularVelocity;
      const pos = this.position;
      const force = this.force;
      const torque = this.torque;
      const quat = this.quaternion;
      const invMass = this.invMass;
      const invInertia = this.invInertiaWorld;
      const linearFactor = this.linearFactor;
      const iMdt = invMass * dt;
      velo.x += force.x * iMdt * linearFactor.x;
      velo.y += force.y * iMdt * linearFactor.y;
      velo.z += force.z * iMdt * linearFactor.z;
      const e = invInertia.elements;
      const angularFactor = this.angularFactor;
      const tx = torque.x * angularFactor.x;
      const ty = torque.y * angularFactor.y;
      const tz = torque.z * angularFactor.z;
      angularVelo.x += dt * (e[0] * tx + e[1] * ty + e[2] * tz);
      angularVelo.y += dt * (e[3] * tx + e[4] * ty + e[5] * tz);
      angularVelo.z += dt * (e[6] * tx + e[7] * ty + e[8] * tz); // Use new velocity  - leap frog

      pos.x += velo.x * dt;
      pos.y += velo.y * dt;
      pos.z += velo.z * dt;
      quat.integrate(this.angularVelocity, dt, this.angularFactor, quat);

      if (quatNormalize) {
        if (quatNormalizeFast) {
          quat.normalizeFast();
        } else {
          quat.normalize();
        }
      }

      this.aabbNeedsUpdate = true; // Update world inertia

      this.updateInertiaWorld();
    }

  }
  Body.idCounter = 0;
  Body.COLLIDE_EVENT_NAME = 'collide';
  Body.DYNAMIC = BODY_TYPES.DYNAMIC;
  Body.STATIC = BODY_TYPES.STATIC;
  Body.KINEMATIC = BODY_TYPES.KINEMATIC;
  Body.AWAKE = BODY_SLEEP_STATES.AWAKE;
  Body.SLEEPY = BODY_SLEEP_STATES.SLEEPY;
  Body.SLEEPING = BODY_SLEEP_STATES.SLEEPING;
  Body.wakeupEvent = {
    type: 'wakeup'
  };
  Body.sleepyEvent = {
    type: 'sleepy'
  };
  Body.sleepEvent = {
    type: 'sleep'
  };
  const tmpVec = new Vec3();
  const tmpQuat = new Quaternion();
  const updateAABB_shapeAABB = new AABB();
  const uiw_m1 = new Mat3();
  const uiw_m2 = new Mat3();
  new Mat3();
  const Body_applyForce_rotForce = new Vec3();
  const Body_applyLocalForce_worldForce = new Vec3();
  const Body_applyLocalForce_relativePointWorld = new Vec3();
  const Body_applyImpulse_velo = new Vec3();
  const Body_applyImpulse_rotVelo = new Vec3();
  const Body_applyLocalImpulse_worldImpulse = new Vec3();
  const Body_applyLocalImpulse_relativePoint = new Vec3();
  const Body_updateMassProperties_halfExtents = new Vec3();

  /**
   * Base class for broadphase implementations
   * @author schteppe
   */
  class Broadphase {
    /**
     * The world to search for collisions in.
     */

    /**
     * If set to true, the broadphase uses bounding boxes for intersection tests, else it uses bounding spheres.
     */

    /**
     * Set to true if the objects in the world moved.
     */
    constructor() {
      this.world = null;
      this.useBoundingBoxes = false;
      this.dirty = true;
    }
    /**
     * Get the collision pairs from the world
     * @param world The world to search in
     * @param p1 Empty array to be filled with body objects
     * @param p2 Empty array to be filled with body objects
     */


    collisionPairs(world, p1, p2) {
      throw new Error('collisionPairs not implemented for this BroadPhase class!');
    }
    /**
     * Check if a body pair needs to be intersection tested at all.
     */


    needBroadphaseCollision(bodyA, bodyB) {
      // Check collision filter masks
      if ((bodyA.collisionFilterGroup & bodyB.collisionFilterMask) === 0 || (bodyB.collisionFilterGroup & bodyA.collisionFilterMask) === 0) {
        return false;
      } // Check types


      if (((bodyA.type & Body.STATIC) !== 0 || bodyA.sleepState === Body.SLEEPING) && ((bodyB.type & Body.STATIC) !== 0 || bodyB.sleepState === Body.SLEEPING)) {
        // Both bodies are static or sleeping. Skip.
        return false;
      }

      return true;
    }
    /**
     * Check if the bounding volumes of two bodies intersect.
     */


    intersectionTest(bodyA, bodyB, pairs1, pairs2) {
      if (this.useBoundingBoxes) {
        this.doBoundingBoxBroadphase(bodyA, bodyB, pairs1, pairs2);
      } else {
        this.doBoundingSphereBroadphase(bodyA, bodyB, pairs1, pairs2);
      }
    }
    /**
     * Check if the bounding spheres of two bodies are intersecting.
     * @param pairs1 bodyA is appended to this array if intersection
     * @param pairs2 bodyB is appended to this array if intersection
     */


    doBoundingSphereBroadphase(bodyA, bodyB, pairs1, pairs2) {
      const r = Broadphase_collisionPairs_r;
      bodyB.position.vsub(bodyA.position, r);
      const boundingRadiusSum2 = (bodyA.boundingRadius + bodyB.boundingRadius) ** 2;
      const norm2 = r.lengthSquared();

      if (norm2 < boundingRadiusSum2) {
        pairs1.push(bodyA);
        pairs2.push(bodyB);
      }
    }
    /**
     * Check if the bounding boxes of two bodies are intersecting.
     */


    doBoundingBoxBroadphase(bodyA, bodyB, pairs1, pairs2) {
      if (bodyA.aabbNeedsUpdate) {
        bodyA.updateAABB();
      }

      if (bodyB.aabbNeedsUpdate) {
        bodyB.updateAABB();
      } // Check AABB / AABB


      if (bodyA.aabb.overlaps(bodyB.aabb)) {
        pairs1.push(bodyA);
        pairs2.push(bodyB);
      }
    }
    /**
     * Removes duplicate pairs from the pair arrays.
     */


    makePairsUnique(pairs1, pairs2) {
      const t = Broadphase_makePairsUnique_temp;
      const p1 = Broadphase_makePairsUnique_p1;
      const p2 = Broadphase_makePairsUnique_p2;
      const N = pairs1.length;

      for (let i = 0; i !== N; i++) {
        p1[i] = pairs1[i];
        p2[i] = pairs2[i];
      }

      pairs1.length = 0;
      pairs2.length = 0;

      for (let i = 0; i !== N; i++) {
        const id1 = p1[i].id;
        const id2 = p2[i].id;
        const key = id1 < id2 ? `${id1},${id2}` : `${id2},${id1}`;
        t[key] = i;
        t.keys.push(key);
      }

      for (let i = 0; i !== t.keys.length; i++) {
        const key = t.keys.pop();
        const pairIndex = t[key];
        pairs1.push(p1[pairIndex]);
        pairs2.push(p2[pairIndex]);
        delete t[key];
      }
    }
    /**
     * To be implemented by subcasses
     */


    setWorld(world) {}
    /**
     * Check if the bounding spheres of two bodies overlap.
     */


    static boundingSphereCheck(bodyA, bodyB) {
      const dist = new Vec3(); // bsc_dist;

      bodyA.position.vsub(bodyB.position, dist);
      const sa = bodyA.shapes[0];
      const sb = bodyB.shapes[0];
      return Math.pow(sa.boundingSphereRadius + sb.boundingSphereRadius, 2) > dist.lengthSquared();
    }
    /**
     * Returns all the bodies within the AABB.
     */


    aabbQuery(world, aabb, result) {
      console.warn('.aabbQuery is not implemented in this Broadphase subclass.');
      return [];
    }

  } // Temp objects

  const Broadphase_collisionPairs_r = new Vec3();
  new Vec3();
  new Quaternion();
  new Vec3();
  const Broadphase_makePairsUnique_temp = {
    keys: []
  };
  const Broadphase_makePairsUnique_p1 = [];
  const Broadphase_makePairsUnique_p2 = [];
  new Vec3();
  new Vec3();
  new Vec3();

  /**
   * Naive broadphase implementation, used in lack of better ones.
   *
   * The naive broadphase looks at all possible pairs without restriction, therefore it has complexity N^2 _(which is bad)_
   */
  class NaiveBroadphase extends Broadphase {
    /**
     * @todo Remove useless constructor
     */
    constructor() {
      super();
    }
    /**
     * Get all the collision pairs in the physics world
     */


    collisionPairs(world, pairs1, pairs2) {
      const bodies = world.bodies;
      const n = bodies.length;
      let bi;
      let bj; // Naive N^2 ftw!

      for (let i = 0; i !== n; i++) {
        for (let j = 0; j !== i; j++) {
          bi = bodies[i];
          bj = bodies[j];

          if (!this.needBroadphaseCollision(bi, bj)) {
            continue;
          }

          this.intersectionTest(bi, bj, pairs1, pairs2);
        }
      }
    }
    /**
     * Returns all the bodies within an AABB.
     * @param result An array to store resulting bodies in.
     */


    aabbQuery(world, aabb, result) {
      if (result === void 0) {
        result = [];
      }

      for (let i = 0; i < world.bodies.length; i++) {
        const b = world.bodies[i];

        if (b.aabbNeedsUpdate) {
          b.updateAABB();
        } // Ugly hack until Body gets aabb


        if (b.aabb.overlaps(aabb)) {
          result.push(b);
        }
      }

      return result;
    }

  }

  /**
   * Storage for Ray casting data
   */
  class RaycastResult {
    /**
     * rayFromWorld
     */

    /**
     * rayToWorld
     */

    /**
     * hitNormalWorld
     */

    /**
     * hitPointWorld
     */

    /**
     * hasHit
     */

    /**
     * shape
     */

    /**
     * body
     */

    /**
     * The index of the hit triangle, if the hit shape was a trimesh
     */

    /**
     * Distance to the hit. Will be set to -1 if there was no hit
     */

    /**
     * If the ray should stop traversing the bodies
     */
    constructor() {
      this.rayFromWorld = new Vec3();
      this.rayToWorld = new Vec3();
      this.hitNormalWorld = new Vec3();
      this.hitPointWorld = new Vec3();
      this.hasHit = false;
      this.shape = null;
      this.body = null;
      this.hitFaceIndex = -1;
      this.distance = -1;
      this.shouldStop = false;
    }
    /**
     * Reset all result data.
     */


    reset() {
      this.rayFromWorld.setZero();
      this.rayToWorld.setZero();
      this.hitNormalWorld.setZero();
      this.hitPointWorld.setZero();
      this.hasHit = false;
      this.shape = null;
      this.body = null;
      this.hitFaceIndex = -1;
      this.distance = -1;
      this.shouldStop = false;
    }
    /**
     * abort
     */


    abort() {
      this.shouldStop = true;
    }
    /**
     * Set result data.
     */


    set(rayFromWorld, rayToWorld, hitNormalWorld, hitPointWorld, shape, body, distance) {
      this.rayFromWorld.copy(rayFromWorld);
      this.rayToWorld.copy(rayToWorld);
      this.hitNormalWorld.copy(hitNormalWorld);
      this.hitPointWorld.copy(hitPointWorld);
      this.shape = shape;
      this.body = body;
      this.distance = distance;
    }

  }

  let _Shape$types$SPHERE, _Shape$types$PLANE, _Shape$types$BOX, _Shape$types$CYLINDER, _Shape$types$CONVEXPO, _Shape$types$HEIGHTFI, _Shape$types$TRIMESH;

  /**
   * RAY_MODES
   */
  const RAY_MODES = {
    /** CLOSEST */
    CLOSEST: 1,

    /** ANY */
    ANY: 2,

    /** ALL */
    ALL: 4
  };
  /**
   * RayMode
   */

  _Shape$types$SPHERE = Shape.types.SPHERE;
  _Shape$types$PLANE = Shape.types.PLANE;
  _Shape$types$BOX = Shape.types.BOX;
  _Shape$types$CYLINDER = Shape.types.CYLINDER;
  _Shape$types$CONVEXPO = Shape.types.CONVEXPOLYHEDRON;
  _Shape$types$HEIGHTFI = Shape.types.HEIGHTFIELD;
  _Shape$types$TRIMESH = Shape.types.TRIMESH;

  /**
   * A line in 3D space that intersects bodies and return points.
   */
  class Ray {
    /**
     * from
     */

    /**
     * to
     */

    /**
     * direction
     */

    /**
     * The precision of the ray. Used when checking parallelity etc.
     * @default 0.0001
     */

    /**
     * Set to `false` if you don't want the Ray to take `collisionResponse` flags into account on bodies and shapes.
     * @default true
     */

    /**
     * If set to `true`, the ray skips any hits with normal.dot(rayDirection) < 0.
     * @default false
     */

    /**
     * collisionFilterMask
     * @default -1
     */

    /**
     * collisionFilterGroup
     * @default -1
     */

    /**
     * The intersection mode. Should be Ray.ANY, Ray.ALL or Ray.CLOSEST.
     * @default RAY.ANY
     */

    /**
     * Current result object.
     */

    /**
     * Will be set to `true` during intersectWorld() if the ray hit anything.
     */

    /**
     * User-provided result callback. Will be used if mode is Ray.ALL.
     */

    /**
     * CLOSEST
     */

    /**
     * ANY
     */

    /**
     * ALL
     */
    get [_Shape$types$SPHERE]() {
      return this._intersectSphere;
    }

    get [_Shape$types$PLANE]() {
      return this._intersectPlane;
    }

    get [_Shape$types$BOX]() {
      return this._intersectBox;
    }

    get [_Shape$types$CYLINDER]() {
      return this._intersectConvex;
    }

    get [_Shape$types$CONVEXPO]() {
      return this._intersectConvex;
    }

    get [_Shape$types$HEIGHTFI]() {
      return this._intersectHeightfield;
    }

    get [_Shape$types$TRIMESH]() {
      return this._intersectTrimesh;
    }

    constructor(from, to) {
      if (from === void 0) {
        from = new Vec3();
      }

      if (to === void 0) {
        to = new Vec3();
      }

      this.from = from.clone();
      this.to = to.clone();
      this.direction = new Vec3();
      this.precision = 0.0001;
      this.checkCollisionResponse = true;
      this.skipBackfaces = false;
      this.collisionFilterMask = -1;
      this.collisionFilterGroup = -1;
      this.mode = Ray.ANY;
      this.result = new RaycastResult();
      this.hasHit = false;

      this.callback = result => {};
    }
    /**
     * Do itersection against all bodies in the given World.
     * @return True if the ray hit anything, otherwise false.
     */


    intersectWorld(world, options) {
      this.mode = options.mode || Ray.ANY;
      this.result = options.result || new RaycastResult();
      this.skipBackfaces = !!options.skipBackfaces;
      this.collisionFilterMask = typeof options.collisionFilterMask !== 'undefined' ? options.collisionFilterMask : -1;
      this.collisionFilterGroup = typeof options.collisionFilterGroup !== 'undefined' ? options.collisionFilterGroup : -1;
      this.checkCollisionResponse = typeof options.checkCollisionResponse !== 'undefined' ? options.checkCollisionResponse : true;

      if (options.from) {
        this.from.copy(options.from);
      }

      if (options.to) {
        this.to.copy(options.to);
      }

      this.callback = options.callback || (() => {});

      this.hasHit = false;
      this.result.reset();
      this.updateDirection();
      this.getAABB(tmpAABB$1);
      tmpArray.length = 0;
      world.broadphase.aabbQuery(world, tmpAABB$1, tmpArray);
      this.intersectBodies(tmpArray);
      return this.hasHit;
    }
    /**
     * Shoot a ray at a body, get back information about the hit.
     * @deprecated @param result set the result property of the Ray instead.
     */


    intersectBody(body, result) {
      if (result) {
        this.result = result;
        this.updateDirection();
      }

      const checkCollisionResponse = this.checkCollisionResponse;

      if (checkCollisionResponse && !body.collisionResponse) {
        return;
      }

      if ((this.collisionFilterGroup & body.collisionFilterMask) === 0 || (body.collisionFilterGroup & this.collisionFilterMask) === 0) {
        return;
      }

      const xi = intersectBody_xi;
      const qi = intersectBody_qi;

      for (let i = 0, N = body.shapes.length; i < N; i++) {
        const shape = body.shapes[i];

        if (checkCollisionResponse && !shape.collisionResponse) {
          continue; // Skip
        }

        body.quaternion.mult(body.shapeOrientations[i], qi);
        body.quaternion.vmult(body.shapeOffsets[i], xi);
        xi.vadd(body.position, xi);
        this.intersectShape(shape, qi, xi, body);

        if (this.result.shouldStop) {
          break;
        }
      }
    }
    /**
     * Shoot a ray at an array bodies, get back information about the hit.
     * @param bodies An array of Body objects.
     * @deprecated @param result set the result property of the Ray instead.
     *
     */


    intersectBodies(bodies, result) {
      if (result) {
        this.result = result;
        this.updateDirection();
      }

      for (let i = 0, l = bodies.length; !this.result.shouldStop && i < l; i++) {
        this.intersectBody(bodies[i]);
      }
    }
    /**
     * Updates the direction vector.
     */


    updateDirection() {
      this.to.vsub(this.from, this.direction);
      this.direction.normalize();
    }

    intersectShape(shape, quat, position, body) {
      const from = this.from; // Checking boundingSphere

      const distance = distanceFromIntersection(from, this.direction, position);

      if (distance > shape.boundingSphereRadius) {
        return;
      }

      const intersectMethod = this[shape.type];

      if (intersectMethod) {
        intersectMethod.call(this, shape, quat, position, body, shape);
      }
    }

    _intersectBox(box, quat, position, body, reportedShape) {
      return this._intersectConvex(box.convexPolyhedronRepresentation, quat, position, body, reportedShape);
    }

    _intersectPlane(shape, quat, position, body, reportedShape) {
      const from = this.from;
      const to = this.to;
      const direction = this.direction; // Get plane normal

      const worldNormal = new Vec3(0, 0, 1);
      quat.vmult(worldNormal, worldNormal);
      const len = new Vec3();
      from.vsub(position, len);
      const planeToFrom = len.dot(worldNormal);
      to.vsub(position, len);
      const planeToTo = len.dot(worldNormal);

      if (planeToFrom * planeToTo > 0) {
        // "from" and "to" are on the same side of the plane... bail out
        return;
      }

      if (from.distanceTo(to) < planeToFrom) {
        return;
      }

      const n_dot_dir = worldNormal.dot(direction);

      if (Math.abs(n_dot_dir) < this.precision) {
        // No intersection
        return;
      }

      const planePointToFrom = new Vec3();
      const dir_scaled_with_t = new Vec3();
      const hitPointWorld = new Vec3();
      from.vsub(position, planePointToFrom);
      const t = -worldNormal.dot(planePointToFrom) / n_dot_dir;
      direction.scale(t, dir_scaled_with_t);
      from.vadd(dir_scaled_with_t, hitPointWorld);
      this.reportIntersection(worldNormal, hitPointWorld, reportedShape, body, -1);
    }
    /**
     * Get the world AABB of the ray.
     */


    getAABB(aabb) {
      const {
        lowerBound,
        upperBound
      } = aabb;
      const to = this.to;
      const from = this.from;
      lowerBound.x = Math.min(to.x, from.x);
      lowerBound.y = Math.min(to.y, from.y);
      lowerBound.z = Math.min(to.z, from.z);
      upperBound.x = Math.max(to.x, from.x);
      upperBound.y = Math.max(to.y, from.y);
      upperBound.z = Math.max(to.z, from.z);
    }

    _intersectHeightfield(shape, quat, position, body, reportedShape) {
      shape.data;
      shape.elementSize; // Convert the ray to local heightfield coordinates

      const localRay = intersectHeightfield_localRay; //new Ray(this.from, this.to);

      localRay.from.copy(this.from);
      localRay.to.copy(this.to);
      Transform.pointToLocalFrame(position, quat, localRay.from, localRay.from);
      Transform.pointToLocalFrame(position, quat, localRay.to, localRay.to);
      localRay.updateDirection(); // Get the index of the data points to test against

      const index = intersectHeightfield_index;
      let iMinX;
      let iMinY;
      let iMaxX;
      let iMaxY; // Set to max

      iMinX = iMinY = 0;
      iMaxX = iMaxY = shape.data.length - 1;
      const aabb = new AABB();
      localRay.getAABB(aabb);
      shape.getIndexOfPosition(aabb.lowerBound.x, aabb.lowerBound.y, index, true);
      iMinX = Math.max(iMinX, index[0]);
      iMinY = Math.max(iMinY, index[1]);
      shape.getIndexOfPosition(aabb.upperBound.x, aabb.upperBound.y, index, true);
      iMaxX = Math.min(iMaxX, index[0] + 1);
      iMaxY = Math.min(iMaxY, index[1] + 1);

      for (let i = iMinX; i < iMaxX; i++) {
        for (let j = iMinY; j < iMaxY; j++) {
          if (this.result.shouldStop) {
            return;
          }

          shape.getAabbAtIndex(i, j, aabb);

          if (!aabb.overlapsRay(localRay)) {
            continue;
          } // Lower triangle


          shape.getConvexTrianglePillar(i, j, false);
          Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);

          this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);

          if (this.result.shouldStop) {
            return;
          } // Upper triangle


          shape.getConvexTrianglePillar(i, j, true);
          Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);

          this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);
        }
      }
    }

    _intersectSphere(sphere, quat, position, body, reportedShape) {
      const from = this.from;
      const to = this.to;
      const r = sphere.radius;
      const a = (to.x - from.x) ** 2 + (to.y - from.y) ** 2 + (to.z - from.z) ** 2;
      const b = 2 * ((to.x - from.x) * (from.x - position.x) + (to.y - from.y) * (from.y - position.y) + (to.z - from.z) * (from.z - position.z));
      const c = (from.x - position.x) ** 2 + (from.y - position.y) ** 2 + (from.z - position.z) ** 2 - r ** 2;
      const delta = b ** 2 - 4 * a * c;
      const intersectionPoint = Ray_intersectSphere_intersectionPoint;
      const normal = Ray_intersectSphere_normal;

      if (delta < 0) {
        // No intersection
        return;
      } else if (delta === 0) {
        // single intersection point
        from.lerp(to, delta, intersectionPoint);
        intersectionPoint.vsub(position, normal);
        normal.normalize();
        this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);
      } else {
        const d1 = (-b - Math.sqrt(delta)) / (2 * a);
        const d2 = (-b + Math.sqrt(delta)) / (2 * a);

        if (d1 >= 0 && d1 <= 1) {
          from.lerp(to, d1, intersectionPoint);
          intersectionPoint.vsub(position, normal);
          normal.normalize();
          this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);
        }

        if (this.result.shouldStop) {
          return;
        }

        if (d2 >= 0 && d2 <= 1) {
          from.lerp(to, d2, intersectionPoint);
          intersectionPoint.vsub(position, normal);
          normal.normalize();
          this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);
        }
      }
    }

    _intersectConvex(shape, quat, position, body, reportedShape, options) {
      const normal = intersectConvex_normal;
      const vector = intersectConvex_vector;
      const faceList = options && options.faceList || null; // Checking faces

      const faces = shape.faces;
      const vertices = shape.vertices;
      const normals = shape.faceNormals;
      const direction = this.direction;
      const from = this.from;
      const to = this.to;
      const fromToDistance = from.distanceTo(to);
      const Nfaces = faceList ? faceList.length : faces.length;
      const result = this.result;

      for (let j = 0; !result.shouldStop && j < Nfaces; j++) {
        const fi = faceList ? faceList[j] : j;
        const face = faces[fi];
        const faceNormal = normals[fi];
        const q = quat;
        const x = position; // determine if ray intersects the plane of the face
        // note: this works regardless of the direction of the face normal
        // Get plane point in world coordinates...

        vector.copy(vertices[face[0]]);
        q.vmult(vector, vector);
        vector.vadd(x, vector); // ...but make it relative to the ray from. We'll fix this later.

        vector.vsub(from, vector); // Get plane normal

        q.vmult(faceNormal, normal); // If this dot product is negative, we have something interesting

        const dot = direction.dot(normal); // Bail out if ray and plane are parallel

        if (Math.abs(dot) < this.precision) {
          continue;
        } // calc distance to plane


        const scalar = normal.dot(vector) / dot; // if negative distance, then plane is behind ray

        if (scalar < 0) {
          continue;
        } // if (dot < 0) {
        // Intersection point is from + direction * scalar


        direction.scale(scalar, intersectPoint);
        intersectPoint.vadd(from, intersectPoint); // a is the point we compare points b and c with.

        a.copy(vertices[face[0]]);
        q.vmult(a, a);
        x.vadd(a, a);

        for (let i = 1; !result.shouldStop && i < face.length - 1; i++) {
          // Transform 3 vertices to world coords
          b.copy(vertices[face[i]]);
          c.copy(vertices[face[i + 1]]);
          q.vmult(b, b);
          q.vmult(c, c);
          x.vadd(b, b);
          x.vadd(c, c);
          const distance = intersectPoint.distanceTo(from);

          if (!(Ray.pointInTriangle(intersectPoint, a, b, c) || Ray.pointInTriangle(intersectPoint, b, a, c)) || distance > fromToDistance) {
            continue;
          }

          this.reportIntersection(normal, intersectPoint, reportedShape, body, fi);
        } // }

      }
    }
    /**
     * @todo Optimize by transforming the world to local space first.
     * @todo Use Octree lookup
     */


    _intersectTrimesh(mesh, quat, position, body, reportedShape, options) {
      const normal = intersectTrimesh_normal;
      const triangles = intersectTrimesh_triangles;
      const treeTransform = intersectTrimesh_treeTransform;
      const vector = intersectConvex_vector;
      const localDirection = intersectTrimesh_localDirection;
      const localFrom = intersectTrimesh_localFrom;
      const localTo = intersectTrimesh_localTo;
      const worldIntersectPoint = intersectTrimesh_worldIntersectPoint;
      const worldNormal = intersectTrimesh_worldNormal; // Checking faces

      const indices = mesh.indices;
      mesh.vertices; // const normals = mesh.faceNormals

      const from = this.from;
      const to = this.to;
      const direction = this.direction;
      treeTransform.position.copy(position);
      treeTransform.quaternion.copy(quat); // Transform ray to local space!

      Transform.vectorToLocalFrame(position, quat, direction, localDirection);
      Transform.pointToLocalFrame(position, quat, from, localFrom);
      Transform.pointToLocalFrame(position, quat, to, localTo);
      localTo.x *= mesh.scale.x;
      localTo.y *= mesh.scale.y;
      localTo.z *= mesh.scale.z;
      localFrom.x *= mesh.scale.x;
      localFrom.y *= mesh.scale.y;
      localFrom.z *= mesh.scale.z;
      localTo.vsub(localFrom, localDirection);
      localDirection.normalize();
      const fromToDistanceSquared = localFrom.distanceSquared(localTo);
      mesh.tree.rayQuery(this, treeTransform, triangles);

      for (let i = 0, N = triangles.length; !this.result.shouldStop && i !== N; i++) {
        const trianglesIndex = triangles[i];
        mesh.getNormal(trianglesIndex, normal); // determine if ray intersects the plane of the face
        // note: this works regardless of the direction of the face normal
        // Get plane point in world coordinates...

        mesh.getVertex(indices[trianglesIndex * 3], a); // ...but make it relative to the ray from. We'll fix this later.

        a.vsub(localFrom, vector); // If this dot product is negative, we have something interesting

        const dot = localDirection.dot(normal); // Bail out if ray and plane are parallel
        // if (Math.abs( dot ) < this.precision){
        //     continue;
        // }
        // calc distance to plane

        const scalar = normal.dot(vector) / dot; // if negative distance, then plane is behind ray

        if (scalar < 0) {
          continue;
        } // Intersection point is from + direction * scalar


        localDirection.scale(scalar, intersectPoint);
        intersectPoint.vadd(localFrom, intersectPoint); // Get triangle vertices

        mesh.getVertex(indices[trianglesIndex * 3 + 1], b);
        mesh.getVertex(indices[trianglesIndex * 3 + 2], c);
        const squaredDistance = intersectPoint.distanceSquared(localFrom);

        if (!(Ray.pointInTriangle(intersectPoint, b, a, c) || Ray.pointInTriangle(intersectPoint, a, b, c)) || squaredDistance > fromToDistanceSquared) {
          continue;
        } // transform intersectpoint and normal to world


        Transform.vectorToWorldFrame(quat, normal, worldNormal);
        Transform.pointToWorldFrame(position, quat, intersectPoint, worldIntersectPoint);
        this.reportIntersection(worldNormal, worldIntersectPoint, reportedShape, body, trianglesIndex);
      }

      triangles.length = 0;
    }
    /**
     * @return True if the intersections should continue
     */


    reportIntersection(normal, hitPointWorld, shape, body, hitFaceIndex) {
      const from = this.from;
      const to = this.to;
      const distance = from.distanceTo(hitPointWorld);
      const result = this.result; // Skip back faces?

      if (this.skipBackfaces && normal.dot(this.direction) > 0) {
        return;
      }

      result.hitFaceIndex = typeof hitFaceIndex !== 'undefined' ? hitFaceIndex : -1;

      switch (this.mode) {
        case Ray.ALL:
          this.hasHit = true;
          result.set(from, to, normal, hitPointWorld, shape, body, distance);
          result.hasHit = true;
          this.callback(result);
          break;

        case Ray.CLOSEST:
          // Store if closer than current closest
          if (distance < result.distance || !result.hasHit) {
            this.hasHit = true;
            result.hasHit = true;
            result.set(from, to, normal, hitPointWorld, shape, body, distance);
          }

          break;

        case Ray.ANY:
          // Report and stop.
          this.hasHit = true;
          result.hasHit = true;
          result.set(from, to, normal, hitPointWorld, shape, body, distance);
          result.shouldStop = true;
          break;
      }
    }
    /**
     * As per "Barycentric Technique" as named
     * {@link https://www.blackpawn.com/texts/pointinpoly/default.html here} but without the division
     */


    static pointInTriangle(p, a, b, c) {
      c.vsub(a, v0);
      b.vsub(a, v1);
      p.vsub(a, v2);
      const dot00 = v0.dot(v0);
      const dot01 = v0.dot(v1);
      const dot02 = v0.dot(v2);
      const dot11 = v1.dot(v1);
      const dot12 = v1.dot(v2);
      let u;
      let v;
      return (u = dot11 * dot02 - dot01 * dot12) >= 0 && (v = dot00 * dot12 - dot01 * dot02) >= 0 && u + v < dot00 * dot11 - dot01 * dot01;
    }

  }
  Ray.CLOSEST = RAY_MODES.CLOSEST;
  Ray.ANY = RAY_MODES.ANY;
  Ray.ALL = RAY_MODES.ALL;
  const tmpAABB$1 = new AABB();
  const tmpArray = [];
  const v1 = new Vec3();
  const v2 = new Vec3();
  const intersectBody_xi = new Vec3();
  const intersectBody_qi = new Quaternion();
  const intersectPoint = new Vec3();
  const a = new Vec3();
  const b = new Vec3();
  const c = new Vec3();
  new Vec3();
  new RaycastResult();
  const intersectConvexOptions = {
    faceList: [0]
  };
  const worldPillarOffset = new Vec3();
  const intersectHeightfield_localRay = new Ray();
  const intersectHeightfield_index = [];
  const Ray_intersectSphere_intersectionPoint = new Vec3();
  const Ray_intersectSphere_normal = new Vec3();
  const intersectConvex_normal = new Vec3();
  new Vec3();
  new Vec3();
  const intersectConvex_vector = new Vec3();
  const intersectTrimesh_normal = new Vec3();
  const intersectTrimesh_localDirection = new Vec3();
  const intersectTrimesh_localFrom = new Vec3();
  const intersectTrimesh_localTo = new Vec3();
  const intersectTrimesh_worldNormal = new Vec3();
  const intersectTrimesh_worldIntersectPoint = new Vec3();
  new AABB();
  const intersectTrimesh_triangles = [];
  const intersectTrimesh_treeTransform = new Transform();
  const v0 = new Vec3();
  const intersect = new Vec3();

  function distanceFromIntersection(from, direction, position) {
    // v0 is vector from from to position
    position.vsub(from, v0);
    const dot = v0.dot(direction); // intersect = direction*dot + from

    direction.scale(dot, intersect);
    intersect.vadd(from, intersect);
    const distance = position.distanceTo(intersect);
    return distance;
  }

  /**
   * Sweep and prune broadphase along one axis.
   */
  class SAPBroadphase extends Broadphase {
    /**
     * List of bodies currently in the broadphase.
     */

    /**
     * The world to search in.
     */

    /**
     * Axis to sort the bodies along.
     * Set to 0 for x axis, and 1 for y axis.
     * For best performance, pick the axis where bodies are most distributed.
     */

    /**
     * Check if the bounds of two bodies overlap, along the given SAP axis.
     */
    static checkBounds(bi, bj, axisIndex) {
      let biPos;
      let bjPos;

      if (axisIndex === 0) {
        biPos = bi.position.x;
        bjPos = bj.position.x;
      } else if (axisIndex === 1) {
        biPos = bi.position.y;
        bjPos = bj.position.y;
      } else if (axisIndex === 2) {
        biPos = bi.position.z;
        bjPos = bj.position.z;
      }

      const ri = bi.boundingRadius,
            rj = bj.boundingRadius,
            boundA2 = biPos + ri,
            boundB1 = bjPos - rj;
      return boundB1 < boundA2;
    } // Note: these are identical, save for x/y/z lowerbound

    /**
     * insertionSortX
     */


    static insertionSortX(a) {
      for (let i = 1, l = a.length; i < l; i++) {
        const v = a[i];
        let j;

        for (j = i - 1; j >= 0; j--) {
          if (a[j].aabb.lowerBound.x <= v.aabb.lowerBound.x) {
            break;
          }

          a[j + 1] = a[j];
        }

        a[j + 1] = v;
      }

      return a;
    }
    /**
     * insertionSortY
     */


    static insertionSortY(a) {
      for (let i = 1, l = a.length; i < l; i++) {
        const v = a[i];
        let j;

        for (j = i - 1; j >= 0; j--) {
          if (a[j].aabb.lowerBound.y <= v.aabb.lowerBound.y) {
            break;
          }

          a[j + 1] = a[j];
        }

        a[j + 1] = v;
      }

      return a;
    }
    /**
     * insertionSortZ
     */


    static insertionSortZ(a) {
      for (let i = 1, l = a.length; i < l; i++) {
        const v = a[i];
        let j;

        for (j = i - 1; j >= 0; j--) {
          if (a[j].aabb.lowerBound.z <= v.aabb.lowerBound.z) {
            break;
          }

          a[j + 1] = a[j];
        }

        a[j + 1] = v;
      }

      return a;
    }

    constructor(world) {
      super();
      this.axisList = [];
      this.world = null;
      this.axisIndex = 0;
      const axisList = this.axisList;

      this._addBodyHandler = event => {
        axisList.push(event.body);
      };

      this._removeBodyHandler = event => {
        const idx = axisList.indexOf(event.body);

        if (idx !== -1) {
          axisList.splice(idx, 1);
        }
      };

      if (world) {
        this.setWorld(world);
      }
    }
    /**
     * Change the world
     */


    setWorld(world) {
      // Clear the old axis array
      this.axisList.length = 0; // Add all bodies from the new world

      for (let i = 0; i < world.bodies.length; i++) {
        this.axisList.push(world.bodies[i]);
      } // Remove old handlers, if any


      world.removeEventListener('addBody', this._addBodyHandler);
      world.removeEventListener('removeBody', this._removeBodyHandler); // Add handlers to update the list of bodies.

      world.addEventListener('addBody', this._addBodyHandler);
      world.addEventListener('removeBody', this._removeBodyHandler);
      this.world = world;
      this.dirty = true;
    }
    /**
     * Collect all collision pairs
     */


    collisionPairs(world, p1, p2) {
      const bodies = this.axisList;
      const N = bodies.length;
      const axisIndex = this.axisIndex;
      let i;
      let j;

      if (this.dirty) {
        this.sortList();
        this.dirty = false;
      } // Look through the list


      for (i = 0; i !== N; i++) {
        const bi = bodies[i];

        for (j = i + 1; j < N; j++) {
          const bj = bodies[j];

          if (!this.needBroadphaseCollision(bi, bj)) {
            continue;
          }

          if (!SAPBroadphase.checkBounds(bi, bj, axisIndex)) {
            break;
          }

          this.intersectionTest(bi, bj, p1, p2);
        }
      }
    }

    sortList() {
      const axisList = this.axisList;
      const axisIndex = this.axisIndex;
      const N = axisList.length; // Update AABBs

      for (let i = 0; i !== N; i++) {
        const bi = axisList[i];

        if (bi.aabbNeedsUpdate) {
          bi.updateAABB();
        }
      } // Sort the list


      if (axisIndex === 0) {
        SAPBroadphase.insertionSortX(axisList);
      } else if (axisIndex === 1) {
        SAPBroadphase.insertionSortY(axisList);
      } else if (axisIndex === 2) {
        SAPBroadphase.insertionSortZ(axisList);
      }
    }
    /**
     * Computes the variance of the body positions and estimates the best axis to use.
     * Will automatically set property `axisIndex`.
     */


    autoDetectAxis() {
      let sumX = 0;
      let sumX2 = 0;
      let sumY = 0;
      let sumY2 = 0;
      let sumZ = 0;
      let sumZ2 = 0;
      const bodies = this.axisList;
      const N = bodies.length;
      const invN = 1 / N;

      for (let i = 0; i !== N; i++) {
        const b = bodies[i];
        const centerX = b.position.x;
        sumX += centerX;
        sumX2 += centerX * centerX;
        const centerY = b.position.y;
        sumY += centerY;
        sumY2 += centerY * centerY;
        const centerZ = b.position.z;
        sumZ += centerZ;
        sumZ2 += centerZ * centerZ;
      }

      const varianceX = sumX2 - sumX * sumX * invN;
      const varianceY = sumY2 - sumY * sumY * invN;
      const varianceZ = sumZ2 - sumZ * sumZ * invN;

      if (varianceX > varianceY) {
        if (varianceX > varianceZ) {
          this.axisIndex = 0;
        } else {
          this.axisIndex = 2;
        }
      } else if (varianceY > varianceZ) {
        this.axisIndex = 1;
      } else {
        this.axisIndex = 2;
      }
    }
    /**
     * Returns all the bodies within an AABB.
     * @param result An array to store resulting bodies in.
     */


    aabbQuery(world, aabb, result) {
      if (result === void 0) {
        result = [];
      }

      if (this.dirty) {
        this.sortList();
        this.dirty = false;
      }

      const axisIndex = this.axisIndex;
      let axis = 'x';

      if (axisIndex === 1) {
        axis = 'y';
      }

      if (axisIndex === 2) {
        axis = 'z';
      }

      const axisList = this.axisList;
      aabb.lowerBound[axis];
      aabb.upperBound[axis];

      for (let i = 0; i < axisList.length; i++) {
        const b = axisList[i];

        if (b.aabbNeedsUpdate) {
          b.updateAABB();
        }

        if (b.aabb.overlaps(aabb)) {
          result.push(b);
        }
      }

      return result;
    }

  }

  class Utils {
    /**
     * Extend an options object with default values.
     * @param options The options object. May be falsy: in this case, a new object is created and returned.
     * @param defaults An object containing default values.
     * @return The modified options object.
     */
    static defaults(options, defaults) {
      if (options === void 0) {
        options = {};
      }

      for (let key in defaults) {
        if (!(key in options)) {
          options[key] = defaults[key];
        }
      }

      return options;
    }

  }

  /**
   * Constraint base class
   */
  class Constraint {
    /**
     * Equations to be solved in this constraint.
     */

    /**
     * Body A.
     */

    /**
     * Body B.
     */

    /**
     * Set to false if you don't want the bodies to collide when they are connected.
     */
    constructor(bodyA, bodyB, options) {
      if (options === void 0) {
        options = {};
      }

      options = Utils.defaults(options, {
        collideConnected: true,
        wakeUpBodies: true
      });
      this.equations = [];
      this.bodyA = bodyA;
      this.bodyB = bodyB;
      this.id = Constraint.idCounter++;
      this.collideConnected = options.collideConnected;

      if (options.wakeUpBodies) {
        if (bodyA) {
          bodyA.wakeUp();
        }

        if (bodyB) {
          bodyB.wakeUp();
        }
      }
    }
    /**
     * Update all the equations with data.
     */


    update() {
      throw new Error('method update() not implmemented in this Constraint subclass!');
    }
    /**
     * Enables all equations in the constraint.
     */


    enable() {
      const eqs = this.equations;

      for (let i = 0; i < eqs.length; i++) {
        eqs[i].enabled = true;
      }
    }
    /**
     * Disables all equations in the constraint.
     */


    disable() {
      const eqs = this.equations;

      for (let i = 0; i < eqs.length; i++) {
        eqs[i].enabled = false;
      }
    }

  }
  Constraint.idCounter = 0;

  /**
   * An element containing 6 entries, 3 spatial and 3 rotational degrees of freedom.
   */

  class JacobianElement {
    /**
     * spatial
     */

    /**
     * rotational
     */
    constructor() {
      this.spatial = new Vec3();
      this.rotational = new Vec3();
    }
    /**
     * Multiply with other JacobianElement
     */


    multiplyElement(element) {
      return element.spatial.dot(this.spatial) + element.rotational.dot(this.rotational);
    }
    /**
     * Multiply with two vectors
     */


    multiplyVectors(spatial, rotational) {
      return spatial.dot(this.spatial) + rotational.dot(this.rotational);
    }

  }

  /**
   * Equation base class.
   *
   * `a`, `b` and `eps` are {@link https://www8.cs.umu.se/kurser/5DV058/VT15/lectures/SPOOKlabnotes.pdf SPOOK} parameters that default to `0.0`. See {@link https://github.com/schteppe/cannon.js/issues/238#issuecomment-147172327 this exchange} for more details on Cannon's physics implementation.
   */
  class Equation {
    /**
     * Minimum (read: negative max) force to be applied by the constraint.
     */

    /**
     * Maximum (read: positive max) force to be applied by the constraint.
     */

    /**
     * SPOOK parameter
     */

    /**
     * SPOOK parameter
     */

    /**
     * SPOOK parameter
     */

    /**
     * A number, proportional to the force added to the bodies.
     */
    constructor(bi, bj, minForce, maxForce) {
      if (minForce === void 0) {
        minForce = -1e6;
      }

      if (maxForce === void 0) {
        maxForce = 1e6;
      }

      this.id = Equation.idCounter++;
      this.minForce = minForce;
      this.maxForce = maxForce;
      this.bi = bi;
      this.bj = bj;
      this.a = 0.0; // SPOOK parameter

      this.b = 0.0; // SPOOK parameter

      this.eps = 0.0; // SPOOK parameter

      this.jacobianElementA = new JacobianElement();
      this.jacobianElementB = new JacobianElement();
      this.enabled = true;
      this.multiplier = 0;
      this.setSpookParams(1e7, 4, 1 / 60); // Set typical spook params
    }
    /**
     * Recalculates a, b, and eps.
     *
     * The Equation constructor sets typical SPOOK parameters as such:
     * * `stiffness` = 1e7
     * * `relaxation` = 4
     * * `timeStep`= 1 / 60, _note the hardcoded refresh rate._
     */


    setSpookParams(stiffness, relaxation, timeStep) {
      const d = relaxation;
      const k = stiffness;
      const h = timeStep;
      this.a = 4.0 / (h * (1 + 4 * d));
      this.b = 4.0 * d / (1 + 4 * d);
      this.eps = 4.0 / (h * h * k * (1 + 4 * d));
    }
    /**
     * Computes the right hand side of the SPOOK equation
     */


    computeB(a, b, h) {
      const GW = this.computeGW();
      const Gq = this.computeGq();
      const GiMf = this.computeGiMf();
      return -Gq * a - GW * b - GiMf * h;
    }
    /**
     * Computes G*q, where q are the generalized body coordinates
     */


    computeGq() {
      const GA = this.jacobianElementA;
      const GB = this.jacobianElementB;
      const bi = this.bi;
      const bj = this.bj;
      const xi = bi.position;
      const xj = bj.position;
      return GA.spatial.dot(xi) + GB.spatial.dot(xj);
    }
    /**
     * Computes G*W, where W are the body velocities
     */


    computeGW() {
      const GA = this.jacobianElementA;
      const GB = this.jacobianElementB;
      const bi = this.bi;
      const bj = this.bj;
      const vi = bi.velocity;
      const vj = bj.velocity;
      const wi = bi.angularVelocity;
      const wj = bj.angularVelocity;
      return GA.multiplyVectors(vi, wi) + GB.multiplyVectors(vj, wj);
    }
    /**
     * Computes G*Wlambda, where W are the body velocities
     */


    computeGWlambda() {
      const GA = this.jacobianElementA;
      const GB = this.jacobianElementB;
      const bi = this.bi;
      const bj = this.bj;
      const vi = bi.vlambda;
      const vj = bj.vlambda;
      const wi = bi.wlambda;
      const wj = bj.wlambda;
      return GA.multiplyVectors(vi, wi) + GB.multiplyVectors(vj, wj);
    }
    /**
     * Computes G*inv(M)*f, where M is the mass matrix with diagonal blocks for each body, and f are the forces on the bodies.
     */


    computeGiMf() {
      const GA = this.jacobianElementA;
      const GB = this.jacobianElementB;
      const bi = this.bi;
      const bj = this.bj;
      const fi = bi.force;
      const ti = bi.torque;
      const fj = bj.force;
      const tj = bj.torque;
      const invMassi = bi.invMassSolve;
      const invMassj = bj.invMassSolve;
      fi.scale(invMassi, iMfi);
      fj.scale(invMassj, iMfj);
      bi.invInertiaWorldSolve.vmult(ti, invIi_vmult_taui);
      bj.invInertiaWorldSolve.vmult(tj, invIj_vmult_tauj);
      return GA.multiplyVectors(iMfi, invIi_vmult_taui) + GB.multiplyVectors(iMfj, invIj_vmult_tauj);
    }
    /**
     * Computes G*inv(M)*G'
     */


    computeGiMGt() {
      const GA = this.jacobianElementA;
      const GB = this.jacobianElementB;
      const bi = this.bi;
      const bj = this.bj;
      const invMassi = bi.invMassSolve;
      const invMassj = bj.invMassSolve;
      const invIi = bi.invInertiaWorldSolve;
      const invIj = bj.invInertiaWorldSolve;
      let result = invMassi + invMassj;
      invIi.vmult(GA.rotational, tmp);
      result += tmp.dot(GA.rotational);
      invIj.vmult(GB.rotational, tmp);
      result += tmp.dot(GB.rotational);
      return result;
    }
    /**
     * Add constraint velocity to the bodies.
     */


    addToWlambda(deltalambda) {
      const GA = this.jacobianElementA;
      const GB = this.jacobianElementB;
      const bi = this.bi;
      const bj = this.bj;
      const temp = addToWlambda_temp; // Add to linear velocity
      // v_lambda += inv(M) * delta_lamba * G

      bi.vlambda.addScaledVector(bi.invMassSolve * deltalambda, GA.spatial, bi.vlambda);
      bj.vlambda.addScaledVector(bj.invMassSolve * deltalambda, GB.spatial, bj.vlambda); // Add to angular velocity

      bi.invInertiaWorldSolve.vmult(GA.rotational, temp);
      bi.wlambda.addScaledVector(deltalambda, temp, bi.wlambda);
      bj.invInertiaWorldSolve.vmult(GB.rotational, temp);
      bj.wlambda.addScaledVector(deltalambda, temp, bj.wlambda);
    }
    /**
     * Compute the denominator part of the SPOOK equation: C = G*inv(M)*G' + eps
     */


    computeC() {
      return this.computeGiMGt() + this.eps;
    }

  }
  Equation.idCounter = 0;
  const iMfi = new Vec3();
  const iMfj = new Vec3();
  const invIi_vmult_taui = new Vec3();
  const invIj_vmult_tauj = new Vec3();
  const tmp = new Vec3();
  const addToWlambda_temp = new Vec3();

  /**
   * Contact/non-penetration constraint equation
   */
  class ContactEquation extends Equation {
    /**
     * "bounciness": u1 = -e*u0
     */

    /**
     * World-oriented vector that goes from the center of bi to the contact point.
     */

    /**
     * World-oriented vector that starts in body j position and goes to the contact point.
     */

    /**
     * Contact normal, pointing out of body i.
     */
    constructor(bodyA, bodyB, maxForce) {
      if (maxForce === void 0) {
        maxForce = 1e6;
      }

      super(bodyA, bodyB, 0, maxForce);
      this.restitution = 0.0;
      this.ri = new Vec3();
      this.rj = new Vec3();
      this.ni = new Vec3();
    }

    computeB(h) {
      const a = this.a;
      const b = this.b;
      const bi = this.bi;
      const bj = this.bj;
      const ri = this.ri;
      const rj = this.rj;
      const rixn = ContactEquation_computeB_temp1;
      const rjxn = ContactEquation_computeB_temp2;
      const vi = bi.velocity;
      const wi = bi.angularVelocity;
      bi.force;
      bi.torque;
      const vj = bj.velocity;
      const wj = bj.angularVelocity;
      bj.force;
      bj.torque;
      const penetrationVec = ContactEquation_computeB_temp3;
      const GA = this.jacobianElementA;
      const GB = this.jacobianElementB;
      const n = this.ni; // Caluclate cross products

      ri.cross(n, rixn);
      rj.cross(n, rjxn); // g = xj+rj -(xi+ri)
      // G = [ -ni  -rixn  ni  rjxn ]

      n.negate(GA.spatial);
      rixn.negate(GA.rotational);
      GB.spatial.copy(n);
      GB.rotational.copy(rjxn); // Calculate the penetration vector

      penetrationVec.copy(bj.position);
      penetrationVec.vadd(rj, penetrationVec);
      penetrationVec.vsub(bi.position, penetrationVec);
      penetrationVec.vsub(ri, penetrationVec);
      const g = n.dot(penetrationVec); // Compute iteration

      const ePlusOne = this.restitution + 1;
      const GW = ePlusOne * vj.dot(n) - ePlusOne * vi.dot(n) + wj.dot(rjxn) - wi.dot(rixn);
      const GiMf = this.computeGiMf();
      const B = -g * a - GW * b - h * GiMf;
      return B;
    }
    /**
     * Get the current relative velocity in the contact point.
     */


    getImpactVelocityAlongNormal() {
      const vi = ContactEquation_getImpactVelocityAlongNormal_vi;
      const vj = ContactEquation_getImpactVelocityAlongNormal_vj;
      const xi = ContactEquation_getImpactVelocityAlongNormal_xi;
      const xj = ContactEquation_getImpactVelocityAlongNormal_xj;
      const relVel = ContactEquation_getImpactVelocityAlongNormal_relVel;
      this.bi.position.vadd(this.ri, xi);
      this.bj.position.vadd(this.rj, xj);
      this.bi.getVelocityAtWorldPoint(xi, vi);
      this.bj.getVelocityAtWorldPoint(xj, vj);
      vi.vsub(vj, relVel);
      return this.ni.dot(relVel);
    }

  }
  const ContactEquation_computeB_temp1 = new Vec3(); // Temp vectors

  const ContactEquation_computeB_temp2 = new Vec3();
  const ContactEquation_computeB_temp3 = new Vec3();
  const ContactEquation_getImpactVelocityAlongNormal_vi = new Vec3();
  const ContactEquation_getImpactVelocityAlongNormal_vj = new Vec3();
  const ContactEquation_getImpactVelocityAlongNormal_xi = new Vec3();
  const ContactEquation_getImpactVelocityAlongNormal_xj = new Vec3();
  const ContactEquation_getImpactVelocityAlongNormal_relVel = new Vec3();

  /**
   * Connects two bodies at given offset points.
   * @example
   *     const bodyA = new Body({ mass: 1 })
   *     const bodyB = new Body({ mass: 1 })
   *     bodyA.position.set(-1, 0, 0)
   *     bodyB.position.set(1, 0, 0)
   *     bodyA.addShape(shapeA)
   *     bodyB.addShape(shapeB)
   *     world.addBody(bodyA)
   *     world.addBody(bodyB)
   *     const localPivotA = new Vec3(1, 0, 0)
   *     const localPivotB = new Vec3(-1, 0, 0)
   *     const constraint = new PointToPointConstraint(bodyA, localPivotA, bodyB, localPivotB)
   *     world.addConstraint(constraint)
   */
  class PointToPointConstraint extends Constraint {
    /**
     * Pivot, defined locally in bodyA.
     */

    /**
     * Pivot, defined locally in bodyB.
     */

    /**
     * @param pivotA The point relative to the center of mass of bodyA which bodyA is constrained to.
     * @param bodyB Body that will be constrained in a similar way to the same point as bodyA. We will therefore get a link between bodyA and bodyB. If not specified, bodyA will be constrained to a static point.
     * @param pivotB The point relative to the center of mass of bodyB which bodyB is constrained to.
     * @param maxForce The maximum force that should be applied to constrain the bodies.
     */
    constructor(bodyA, pivotA, bodyB, pivotB, maxForce) {
      if (pivotA === void 0) {
        pivotA = new Vec3();
      }

      if (pivotB === void 0) {
        pivotB = new Vec3();
      }

      if (maxForce === void 0) {
        maxForce = 1e6;
      }

      super(bodyA, bodyB);
      this.pivotA = pivotA.clone();
      this.pivotB = pivotB.clone();
      const x = this.equationX = new ContactEquation(bodyA, bodyB);
      const y = this.equationY = new ContactEquation(bodyA, bodyB);
      const z = this.equationZ = new ContactEquation(bodyA, bodyB); // Equations to be fed to the solver

      this.equations.push(x, y, z); // Make the equations bidirectional

      x.minForce = y.minForce = z.minForce = -maxForce;
      x.maxForce = y.maxForce = z.maxForce = maxForce;
      x.ni.set(1, 0, 0);
      y.ni.set(0, 1, 0);
      z.ni.set(0, 0, 1);
    }

    update() {
      const bodyA = this.bodyA;
      const bodyB = this.bodyB;
      const x = this.equationX;
      const y = this.equationY;
      const z = this.equationZ; // Rotate the pivots to world space

      bodyA.quaternion.vmult(this.pivotA, x.ri);
      bodyB.quaternion.vmult(this.pivotB, x.rj);
      y.ri.copy(x.ri);
      y.rj.copy(x.rj);
      z.ri.copy(x.ri);
      z.rj.copy(x.rj);
    }

  }

  /**
   * Cone equation. Works to keep the given body world vectors aligned, or tilted within a given angle from each other.
   */
  class ConeEquation extends Equation {
    /**
     * Local axis in A
     */

    /**
     * Local axis in B
     */

    /**
     * The "cone angle" to keep
     */
    constructor(bodyA, bodyB, options) {
      if (options === void 0) {
        options = {};
      }

      const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;
      super(bodyA, bodyB, -maxForce, maxForce);
      this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);
      this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);
      this.angle = typeof options.angle !== 'undefined' ? options.angle : 0;
    }

    computeB(h) {
      const a = this.a;
      const b = this.b;
      const ni = this.axisA;
      const nj = this.axisB;
      const nixnj = tmpVec1$2;
      const njxni = tmpVec2$2;
      const GA = this.jacobianElementA;
      const GB = this.jacobianElementB; // Caluclate cross products

      ni.cross(nj, nixnj);
      nj.cross(ni, njxni); // The angle between two vector is:
      // cos(theta) = a * b / (length(a) * length(b) = { len(a) = len(b) = 1 } = a * b
      // g = a * b
      // gdot = (b x a) * wi + (a x b) * wj
      // G = [0 bxa 0 axb]
      // W = [vi wi vj wj]

      GA.rotational.copy(njxni);
      GB.rotational.copy(nixnj);
      const g = Math.cos(this.angle) - ni.dot(nj);
      const GW = this.computeGW();
      const GiMf = this.computeGiMf();
      const B = -g * a - GW * b - h * GiMf;
      return B;
    }

  }
  const tmpVec1$2 = new Vec3();
  const tmpVec2$2 = new Vec3();

  /**
   * Rotational constraint. Works to keep the local vectors orthogonal to each other in world space.
   */
  class RotationalEquation extends Equation {
    /**
     * World oriented rotational axis.
     */

    /**
     * World oriented rotational axis.
     */

    /**
     * maxAngle
     */
    constructor(bodyA, bodyB, options) {
      if (options === void 0) {
        options = {};
      }

      const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;
      super(bodyA, bodyB, -maxForce, maxForce);
      this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);
      this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);
      this.maxAngle = Math.PI / 2;
    }

    computeB(h) {
      const a = this.a;
      const b = this.b;
      const ni = this.axisA;
      const nj = this.axisB;
      const nixnj = tmpVec1$1;
      const njxni = tmpVec2$1;
      const GA = this.jacobianElementA;
      const GB = this.jacobianElementB; // Caluclate cross products

      ni.cross(nj, nixnj);
      nj.cross(ni, njxni); // g = ni * nj
      // gdot = (nj x ni) * wi + (ni x nj) * wj
      // G = [0 njxni 0 nixnj]
      // W = [vi wi vj wj]

      GA.rotational.copy(njxni);
      GB.rotational.copy(nixnj);
      const g = Math.cos(this.maxAngle) - ni.dot(nj);
      const GW = this.computeGW();
      const GiMf = this.computeGiMf();
      const B = -g * a - GW * b - h * GiMf;
      return B;
    }

  }
  const tmpVec1$1 = new Vec3();
  const tmpVec2$1 = new Vec3();

  /**
   * A Cone Twist constraint, useful for ragdolls.
   */
  class ConeTwistConstraint extends PointToPointConstraint {
    /**
     * The axis direction for the constraint of the body A.
     */

    /**
     * The axis direction for the constraint of the body B.
     */

    /**
     * The aperture angle of the cone.
     */

    /**
     * The twist angle of the joint.
     */
    constructor(bodyA, bodyB, options) {
      if (options === void 0) {
        options = {};
      }

      const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6; // Set pivot point in between

      const pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();
      const pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();
      super(bodyA, pivotA, bodyB, pivotB, maxForce);
      this.axisA = options.axisA ? options.axisA.clone() : new Vec3();
      this.axisB = options.axisB ? options.axisB.clone() : new Vec3();
      this.collideConnected = !!options.collideConnected;
      this.angle = typeof options.angle !== 'undefined' ? options.angle : 0;
      const c = this.coneEquation = new ConeEquation(bodyA, bodyB, options);
      const t = this.twistEquation = new RotationalEquation(bodyA, bodyB, options);
      this.twistAngle = typeof options.twistAngle !== 'undefined' ? options.twistAngle : 0; // Make the cone equation push the bodies toward the cone axis, not outward

      c.maxForce = 0;
      c.minForce = -maxForce; // Make the twist equation add torque toward the initial position

      t.maxForce = 0;
      t.minForce = -maxForce;
      this.equations.push(c, t);
    }

    update() {
      const bodyA = this.bodyA;
      const bodyB = this.bodyB;
      const cone = this.coneEquation;
      const twist = this.twistEquation;
      super.update(); // Update the axes to the cone constraint

      bodyA.vectorToWorldFrame(this.axisA, cone.axisA);
      bodyB.vectorToWorldFrame(this.axisB, cone.axisB); // Update the world axes in the twist constraint

      this.axisA.tangents(twist.axisA, twist.axisA);
      bodyA.vectorToWorldFrame(twist.axisA, twist.axisA);
      this.axisB.tangents(twist.axisB, twist.axisB);
      bodyB.vectorToWorldFrame(twist.axisB, twist.axisB);
      cone.angle = this.angle;
      twist.maxAngle = this.twistAngle;
    }

  }
  new Vec3();
  new Vec3();

  /**
   * Constrains two bodies to be at a constant distance from each others center of mass.
   */
  class DistanceConstraint extends Constraint {
    /**
     * The distance to keep. If undefined, it will be set to the current distance between bodyA and bodyB
     */

    /**
     * @param distance The distance to keep. If undefined, it will be set to the current distance between bodyA and bodyB.
     * @param maxForce The maximum force that should be applied to constrain the bodies.
     */
    constructor(bodyA, bodyB, distance, maxForce) {
      if (maxForce === void 0) {
        maxForce = 1e6;
      }

      super(bodyA, bodyB);

      if (typeof distance === 'undefined') {
        distance = bodyA.position.distanceTo(bodyB.position);
      }

      this.distance = distance;
      const eq = this.distanceEquation = new ContactEquation(bodyA, bodyB);
      this.equations.push(eq); // Make it bidirectional

      eq.minForce = -maxForce;
      eq.maxForce = maxForce;
    }
    /**
     * update
     */


    update() {
      const bodyA = this.bodyA;
      const bodyB = this.bodyB;
      const eq = this.distanceEquation;
      const halfDist = this.distance * 0.5;
      const normal = eq.ni;
      bodyB.position.vsub(bodyA.position, normal);
      normal.normalize();
      normal.scale(halfDist, eq.ri);
      normal.scale(-halfDist, eq.rj);
    }

  }

  /**
   * Lock constraint. Will remove all degrees of freedom between the bodies.
   */
  class LockConstraint extends PointToPointConstraint {
    constructor(bodyA, bodyB, options) {
      if (options === void 0) {
        options = {};
      }

      const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6; // Set pivot point in between

      const pivotA = new Vec3();
      const pivotB = new Vec3();
      const halfWay = new Vec3();
      bodyA.position.vadd(bodyB.position, halfWay);
      halfWay.scale(0.5, halfWay);
      bodyB.pointToLocalFrame(halfWay, pivotB);
      bodyA.pointToLocalFrame(halfWay, pivotA); // The point-to-point constraint will keep a point shared between the bodies

      super(bodyA, pivotA, bodyB, pivotB, maxForce); // Store initial rotation of the bodies as unit vectors in the local body spaces

      this.xA = bodyA.vectorToLocalFrame(Vec3.UNIT_X);
      this.xB = bodyB.vectorToLocalFrame(Vec3.UNIT_X);
      this.yA = bodyA.vectorToLocalFrame(Vec3.UNIT_Y);
      this.yB = bodyB.vectorToLocalFrame(Vec3.UNIT_Y);
      this.zA = bodyA.vectorToLocalFrame(Vec3.UNIT_Z);
      this.zB = bodyB.vectorToLocalFrame(Vec3.UNIT_Z); // ...and the following rotational equations will keep all rotational DOF's in place

      const r1 = this.rotationalEquation1 = new RotationalEquation(bodyA, bodyB, options);
      const r2 = this.rotationalEquation2 = new RotationalEquation(bodyA, bodyB, options);
      const r3 = this.rotationalEquation3 = new RotationalEquation(bodyA, bodyB, options);
      this.equations.push(r1, r2, r3);
    }
    /**
     * update
     */


    update() {
      const bodyA = this.bodyA;
      const bodyB = this.bodyB;
      this.motorEquation;
      const r1 = this.rotationalEquation1;
      const r2 = this.rotationalEquation2;
      const r3 = this.rotationalEquation3;
      super.update(); // These vector pairs must be orthogonal

      bodyA.vectorToWorldFrame(this.xA, r1.axisA);
      bodyB.vectorToWorldFrame(this.yB, r1.axisB);
      bodyA.vectorToWorldFrame(this.yA, r2.axisA);
      bodyB.vectorToWorldFrame(this.zB, r2.axisB);
      bodyA.vectorToWorldFrame(this.zA, r3.axisA);
      bodyB.vectorToWorldFrame(this.xB, r3.axisB);
    }

  }
  new Vec3();
  new Vec3();

  /**
   * Rotational motor constraint. Tries to keep the relative angular velocity of the bodies to a given value.
   */
  class RotationalMotorEquation extends Equation {
    /**
     * World oriented rotational axis.
     */

    /**
     * World oriented rotational axis.
     */

    /**
     * Motor velocity.
     */
    constructor(bodyA, bodyB, maxForce) {
      if (maxForce === void 0) {
        maxForce = 1e6;
      }

      super(bodyA, bodyB, -maxForce, maxForce);
      this.axisA = new Vec3();
      this.axisB = new Vec3();
      this.targetVelocity = 0;
    }

    computeB(h) {
      this.a;
      const b = this.b;
      this.bi;
      this.bj;
      const axisA = this.axisA;
      const axisB = this.axisB;
      const GA = this.jacobianElementA;
      const GB = this.jacobianElementB; // g = 0
      // gdot = axisA * wi - axisB * wj
      // gdot = G * W = G * [vi wi vj wj]
      // =>
      // G = [0 axisA 0 -axisB]

      GA.rotational.copy(axisA);
      axisB.negate(GB.rotational);
      const GW = this.computeGW() - this.targetVelocity;
      const GiMf = this.computeGiMf();
      const B = -GW * b - h * GiMf;
      return B;
    }

  }

  /**
   * Hinge constraint. Think of it as a door hinge. It tries to keep the door in the correct place and with the correct orientation.
   */
  class HingeConstraint extends PointToPointConstraint {
    /**
     * Rotation axis, defined locally in bodyA.
     */

    /**
     * Rotation axis, defined locally in bodyB.
     */
    constructor(bodyA, bodyB, options) {
      if (options === void 0) {
        options = {};
      }

      const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;
      const pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();
      const pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();
      super(bodyA, pivotA, bodyB, pivotB, maxForce);
      const axisA = this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);
      axisA.normalize();
      const axisB = this.axisB = options.axisB ? options.axisB.clone() : new Vec3(1, 0, 0);
      axisB.normalize();
      this.collideConnected = !!options.collideConnected;
      const rotational1 = this.rotationalEquation1 = new RotationalEquation(bodyA, bodyB, options);
      const rotational2 = this.rotationalEquation2 = new RotationalEquation(bodyA, bodyB, options);
      const motor = this.motorEquation = new RotationalMotorEquation(bodyA, bodyB, maxForce);
      motor.enabled = false; // Not enabled by default
      // Equations to be fed to the solver

      this.equations.push(rotational1, rotational2, motor);
    }
    /**
     * enableMotor
     */


    enableMotor() {
      this.motorEquation.enabled = true;
    }
    /**
     * disableMotor
     */


    disableMotor() {
      this.motorEquation.enabled = false;
    }
    /**
     * setMotorSpeed
     */


    setMotorSpeed(speed) {
      this.motorEquation.targetVelocity = speed;
    }
    /**
     * setMotorMaxForce
     */


    setMotorMaxForce(maxForce) {
      this.motorEquation.maxForce = maxForce;
      this.motorEquation.minForce = -maxForce;
    }
    /**
     * update
     */


    update() {
      const bodyA = this.bodyA;
      const bodyB = this.bodyB;
      const motor = this.motorEquation;
      const r1 = this.rotationalEquation1;
      const r2 = this.rotationalEquation2;
      const worldAxisA = HingeConstraint_update_tmpVec1;
      const worldAxisB = HingeConstraint_update_tmpVec2;
      const axisA = this.axisA;
      const axisB = this.axisB;
      super.update(); // Get world axes

      bodyA.quaternion.vmult(axisA, worldAxisA);
      bodyB.quaternion.vmult(axisB, worldAxisB);
      worldAxisA.tangents(r1.axisA, r2.axisA);
      r1.axisB.copy(worldAxisB);
      r2.axisB.copy(worldAxisB);

      if (this.motorEquation.enabled) {
        bodyA.quaternion.vmult(this.axisA, motor.axisA);
        bodyB.quaternion.vmult(this.axisB, motor.axisB);
      }
    }

  }
  const HingeConstraint_update_tmpVec1 = new Vec3();
  const HingeConstraint_update_tmpVec2 = new Vec3();

  /**
   * Constrains the slipping in a contact along a tangent
   */
  class FrictionEquation extends Equation {
    // Tangent

    /**
     * @param slipForce should be +-F_friction = +-mu * F_normal = +-mu * m * g
     */
    constructor(bodyA, bodyB, slipForce) {
      super(bodyA, bodyB, -slipForce, slipForce);
      this.ri = new Vec3();
      this.rj = new Vec3();
      this.t = new Vec3();
    }

    computeB(h) {
      this.a;
      const b = this.b;
      this.bi;
      this.bj;
      const ri = this.ri;
      const rj = this.rj;
      const rixt = FrictionEquation_computeB_temp1;
      const rjxt = FrictionEquation_computeB_temp2;
      const t = this.t; // Caluclate cross products

      ri.cross(t, rixt);
      rj.cross(t, rjxt); // G = [-t -rixt t rjxt]
      // And remember, this is a pure velocity constraint, g is always zero!

      const GA = this.jacobianElementA;
      const GB = this.jacobianElementB;
      t.negate(GA.spatial);
      rixt.negate(GA.rotational);
      GB.spatial.copy(t);
      GB.rotational.copy(rjxt);
      const GW = this.computeGW();
      const GiMf = this.computeGiMf();
      const B = -GW * b - h * GiMf;
      return B;
    }

  }
  const FrictionEquation_computeB_temp1 = new Vec3();
  const FrictionEquation_computeB_temp2 = new Vec3();

  /**
   * Defines what happens when two materials meet.
   * @todo Refactor materials to materialA and materialB
   */
  class ContactMaterial {
    /**
     * Identifier of this material.
     */

    /**
     * Participating materials.
     */

    /**
     * Friction coefficient.
     * @default 0.3
     */

    /**
     * Restitution coefficient.
     * @default 0.3
     */

    /**
     * Stiffness of the produced contact equations.
     * @default 1e7
     */

    /**
     * Relaxation time of the produced contact equations.
     * @default 3
     */

    /**
     * Stiffness of the produced friction equations.
     * @default 1e7
     */

    /**
     * Relaxation time of the produced friction equations
     * @default 3
     */
    constructor(m1, m2, options) {
      options = Utils.defaults(options, {
        friction: 0.3,
        restitution: 0.3,
        contactEquationStiffness: 1e7,
        contactEquationRelaxation: 3,
        frictionEquationStiffness: 1e7,
        frictionEquationRelaxation: 3
      });
      this.id = ContactMaterial.idCounter++;
      this.materials = [m1, m2];
      this.friction = options.friction;
      this.restitution = options.restitution;
      this.contactEquationStiffness = options.contactEquationStiffness;
      this.contactEquationRelaxation = options.contactEquationRelaxation;
      this.frictionEquationStiffness = options.frictionEquationStiffness;
      this.frictionEquationRelaxation = options.frictionEquationRelaxation;
    }

  }
  ContactMaterial.idCounter = 0;

  /**
   * Defines a physics material.
   */
  class Material {
    /**
     * Material name.
     * If options is a string, name will be set to that string.
     * @todo Deprecate this
     */

    /** Material id. */

    /**
     * Friction for this material.
     * If non-negative, it will be used instead of the friction given by ContactMaterials. If there's no matching ContactMaterial, the value from `defaultContactMaterial` in the World will be used.
     */

    /**
     * Restitution for this material.
     * If non-negative, it will be used instead of the restitution given by ContactMaterials. If there's no matching ContactMaterial, the value from `defaultContactMaterial` in the World will be used.
     */
    constructor(options) {
      if (options === void 0) {
        options = {};
      }

      let name = ''; // Backwards compatibility fix

      if (typeof options === 'string') {
        //console.warn(`Passing a string to MaterialOptions is deprecated, and has no effect`)
        name = options;
        options = {};
      }

      this.name = name;
      this.id = Material.idCounter++;
      this.friction = typeof options.friction !== 'undefined' ? options.friction : -1;
      this.restitution = typeof options.restitution !== 'undefined' ? options.restitution : -1;
    }

  }
  Material.idCounter = 0;

  /**
   * A spring, connecting two bodies.
   * @example
   *     const spring = new Spring(boxBody, sphereBody, {
   *       restLength: 0,
   *       stiffness: 50,
   *       damping: 1,
   *     })
   *
   *     // Compute the force after each step
   *     world.addEventListener('postStep', (event) => {
   *       spring.applyForce()
   *     })
   */
  class Spring {
    /**
     * Rest length of the spring. A number > 0.
     * @default 1
     */

    /**
     * Stiffness of the spring. A number >= 0.
     * @default 100
     */

    /**
     * Damping of the spring. A number >= 0.
     * @default 1
     */

    /**
     * First connected body.
     */

    /**
     * Second connected body.
     */

    /**
     * Anchor for bodyA in local bodyA coordinates.
     * Where to hook the spring to body A, in local body coordinates.
     * @default new Vec3()
     */

    /**
     * Anchor for bodyB in local bodyB coordinates.
     * Where to hook the spring to body B, in local body coordinates.
     * @default new Vec3()
     */
    constructor(bodyA, bodyB, options) {
      if (options === void 0) {
        options = {};
      }

      this.restLength = typeof options.restLength === 'number' ? options.restLength : 1;
      this.stiffness = options.stiffness || 100;
      this.damping = options.damping || 1;
      this.bodyA = bodyA;
      this.bodyB = bodyB;
      this.localAnchorA = new Vec3();
      this.localAnchorB = new Vec3();

      if (options.localAnchorA) {
        this.localAnchorA.copy(options.localAnchorA);
      }

      if (options.localAnchorB) {
        this.localAnchorB.copy(options.localAnchorB);
      }

      if (options.worldAnchorA) {
        this.setWorldAnchorA(options.worldAnchorA);
      }

      if (options.worldAnchorB) {
        this.setWorldAnchorB(options.worldAnchorB);
      }
    }
    /**
     * Set the anchor point on body A, using world coordinates.
     */


    setWorldAnchorA(worldAnchorA) {
      this.bodyA.pointToLocalFrame(worldAnchorA, this.localAnchorA);
    }
    /**
     * Set the anchor point on body B, using world coordinates.
     */


    setWorldAnchorB(worldAnchorB) {
      this.bodyB.pointToLocalFrame(worldAnchorB, this.localAnchorB);
    }
    /**
     * Get the anchor point on body A, in world coordinates.
     * @param result The vector to store the result in.
     */


    getWorldAnchorA(result) {
      this.bodyA.pointToWorldFrame(this.localAnchorA, result);
    }
    /**
     * Get the anchor point on body B, in world coordinates.
     * @param result The vector to store the result in.
     */


    getWorldAnchorB(result) {
      this.bodyB.pointToWorldFrame(this.localAnchorB, result);
    }
    /**
     * Apply the spring force to the connected bodies.
     */


    applyForce() {
      const k = this.stiffness;
      const d = this.damping;
      const l = this.restLength;
      const bodyA = this.bodyA;
      const bodyB = this.bodyB;
      const r = applyForce_r;
      const r_unit = applyForce_r_unit;
      const u = applyForce_u;
      const f = applyForce_f;
      const tmp = applyForce_tmp;
      const worldAnchorA = applyForce_worldAnchorA;
      const worldAnchorB = applyForce_worldAnchorB;
      const ri = applyForce_ri;
      const rj = applyForce_rj;
      const ri_x_f = applyForce_ri_x_f;
      const rj_x_f = applyForce_rj_x_f; // Get world anchors

      this.getWorldAnchorA(worldAnchorA);
      this.getWorldAnchorB(worldAnchorB); // Get offset points

      worldAnchorA.vsub(bodyA.position, ri);
      worldAnchorB.vsub(bodyB.position, rj); // Compute distance vector between world anchor points

      worldAnchorB.vsub(worldAnchorA, r);
      const rlen = r.length();
      r_unit.copy(r);
      r_unit.normalize(); // Compute relative velocity of the anchor points, u

      bodyB.velocity.vsub(bodyA.velocity, u); // Add rotational velocity

      bodyB.angularVelocity.cross(rj, tmp);
      u.vadd(tmp, u);
      bodyA.angularVelocity.cross(ri, tmp);
      u.vsub(tmp, u); // F = - k * ( x - L ) - D * ( u )

      r_unit.scale(-k * (rlen - l) - d * u.dot(r_unit), f); // Add forces to bodies

      bodyA.force.vsub(f, bodyA.force);
      bodyB.force.vadd(f, bodyB.force); // Angular force

      ri.cross(f, ri_x_f);
      rj.cross(f, rj_x_f);
      bodyA.torque.vsub(ri_x_f, bodyA.torque);
      bodyB.torque.vadd(rj_x_f, bodyB.torque);
    }

  }
  const applyForce_r = new Vec3();
  const applyForce_r_unit = new Vec3();
  const applyForce_u = new Vec3();
  const applyForce_f = new Vec3();
  const applyForce_worldAnchorA = new Vec3();
  const applyForce_worldAnchorB = new Vec3();
  const applyForce_ri = new Vec3();
  const applyForce_rj = new Vec3();
  const applyForce_ri_x_f = new Vec3();
  const applyForce_rj_x_f = new Vec3();
  const applyForce_tmp = new Vec3();

  /**
   * WheelInfo
   */
  class WheelInfo {
    /**
     * Max travel distance of the suspension, in meters.
     * @default 1
     */

    /**
     * Speed to apply to the wheel rotation when the wheel is sliding.
     * @default -0.1
     */

    /**
     * If the customSlidingRotationalSpeed should be used.
     * @default false
     */

    /**
     * sliding
     */

    /**
     * Connection point, defined locally in the chassis body frame.
     */

    /**
     * chassisConnectionPointWorld
     */

    /**
     * directionLocal
     */

    /**
     * directionWorld
     */

    /**
     * axleLocal
     */

    /**
     * axleWorld
     */

    /**
     * suspensionRestLength
     * @default 1
     */

    /**
     * suspensionMaxLength
     * @default 2
     */

    /**
     * radius
     * @default 1
     */

    /**
     * suspensionStiffness
     * @default 100
     */

    /**
     * dampingCompression
     * @default 10
     */

    /**
     * dampingRelaxation
     * @default 10
     */

    /**
     * frictionSlip
     * @default 10.5
     */

    /** forwardAcceleration */

    /** sideAcceleration */

    /**
     * steering
     * @default 0
     */

    /**
     * Rotation value, in radians.
     * @default 0
     */

    /**
     * deltaRotation
     * @default 0
     */

    /**
     * rollInfluence
     * @default 0.01
     */

    /**
     * maxSuspensionForce
     */

    /**
     * engineForce
     */

    /**
     * brake
     */

    /**
     * isFrontWheel
     * @default true
     */

    /**
     * clippedInvContactDotSuspension
     * @default 1
     */

    /**
     * suspensionRelativeVelocity
     * @default 0
     */

    /**
     * suspensionForce
     * @default 0
     */

    /**
     * slipInfo
     */

    /**
     * skidInfo
     * @default 0
     */

    /**
     * suspensionLength
     * @default 0
     */

    /**
     * sideImpulse
     */

    /**
     * forwardImpulse
     */

    /**
     * The result from raycasting.
     */

    /**
     * Wheel world transform.
     */

    /**
     * isInContact
     */
    constructor(options) {
      if (options === void 0) {
        options = {};
      }

      options = Utils.defaults(options, {
        chassisConnectionPointLocal: new Vec3(),
        chassisConnectionPointWorld: new Vec3(),
        directionLocal: new Vec3(),
        directionWorld: new Vec3(),
        axleLocal: new Vec3(),
        axleWorld: new Vec3(),
        suspensionRestLength: 1,
        suspensionMaxLength: 2,
        radius: 1,
        suspensionStiffness: 100,
        dampingCompression: 10,
        dampingRelaxation: 10,
        frictionSlip: 10.5,
        forwardAcceleration: 1,
        sideAcceleration: 1,
        steering: 0,
        rotation: 0,
        deltaRotation: 0,
        rollInfluence: 0.01,
        maxSuspensionForce: Number.MAX_VALUE,
        isFrontWheel: true,
        clippedInvContactDotSuspension: 1,
        suspensionRelativeVelocity: 0,
        suspensionForce: 0,
        slipInfo: 0,
        skidInfo: 0,
        suspensionLength: 0,
        maxSuspensionTravel: 1,
        useCustomSlidingRotationalSpeed: false,
        customSlidingRotationalSpeed: -0.1
      });
      this.maxSuspensionTravel = options.maxSuspensionTravel;
      this.customSlidingRotationalSpeed = options.customSlidingRotationalSpeed;
      this.useCustomSlidingRotationalSpeed = options.useCustomSlidingRotationalSpeed;
      this.sliding = false;
      this.chassisConnectionPointLocal = options.chassisConnectionPointLocal.clone();
      this.chassisConnectionPointWorld = options.chassisConnectionPointWorld.clone();
      this.directionLocal = options.directionLocal.clone();
      this.directionWorld = options.directionWorld.clone();
      this.axleLocal = options.axleLocal.clone();
      this.axleWorld = options.axleWorld.clone();
      this.suspensionRestLength = options.suspensionRestLength;
      this.suspensionMaxLength = options.suspensionMaxLength;
      this.radius = options.radius;
      this.suspensionStiffness = options.suspensionStiffness;
      this.dampingCompression = options.dampingCompression;
      this.dampingRelaxation = options.dampingRelaxation;
      this.frictionSlip = options.frictionSlip;
      this.forwardAcceleration = options.forwardAcceleration;
      this.sideAcceleration = options.sideAcceleration;
      this.steering = 0;
      this.rotation = 0;
      this.deltaRotation = 0;
      this.rollInfluence = options.rollInfluence;
      this.maxSuspensionForce = options.maxSuspensionForce;
      this.engineForce = 0;
      this.brake = 0;
      this.isFrontWheel = options.isFrontWheel;
      this.clippedInvContactDotSuspension = 1;
      this.suspensionRelativeVelocity = 0;
      this.suspensionForce = 0;
      this.slipInfo = 0;
      this.skidInfo = 0;
      this.suspensionLength = 0;
      this.sideImpulse = 0;
      this.forwardImpulse = 0;
      this.raycastResult = new RaycastResult();
      this.worldTransform = new Transform();
      this.isInContact = false;
    }

    updateWheel(chassis) {
      const raycastResult = this.raycastResult;

      if (this.isInContact) {
        const project = raycastResult.hitNormalWorld.dot(raycastResult.directionWorld);
        raycastResult.hitPointWorld.vsub(chassis.position, relpos);
        chassis.getVelocityAtWorldPoint(relpos, chassis_velocity_at_contactPoint);
        const projVel = raycastResult.hitNormalWorld.dot(chassis_velocity_at_contactPoint);

        if (project >= -0.1) {
          this.suspensionRelativeVelocity = 0.0;
          this.clippedInvContactDotSuspension = 1.0 / 0.1;
        } else {
          const inv = -1 / project;
          this.suspensionRelativeVelocity = projVel * inv;
          this.clippedInvContactDotSuspension = inv;
        }
      } else {
        // Not in contact : position wheel in a nice (rest length) position
        raycastResult.suspensionLength = this.suspensionRestLength;
        this.suspensionRelativeVelocity = 0.0;
        raycastResult.directionWorld.scale(-1, raycastResult.hitNormalWorld);
        this.clippedInvContactDotSuspension = 1.0;
      }
    }

  }
  const chassis_velocity_at_contactPoint = new Vec3();
  const relpos = new Vec3();

  /**
   * Vehicle helper class that casts rays from the wheel positions towards the ground and applies forces.
   */
  class RaycastVehicle {
    /** The car chassis body. */

    /** The wheels. */

    /** Will be set to true if the car is sliding. */

    /** Index of the right axis. x=0, y=1, z=2 */

    /** Index of the forward axis. x=0, y=1, z=2 */

    /** Index of the up axis. x=0, y=1, z=2 */

    /** The constraints. */

    /** Optional pre-step callback. */

    /** Number of wheels on the ground. */
    constructor(options) {
      this.chassisBody = options.chassisBody;
      this.wheelInfos = [];
      this.sliding = false;
      this.world = null;
      this.indexRightAxis = typeof options.indexRightAxis !== 'undefined' ? options.indexRightAxis : 2;
      this.indexForwardAxis = typeof options.indexForwardAxis !== 'undefined' ? options.indexForwardAxis : 0;
      this.indexUpAxis = typeof options.indexUpAxis !== 'undefined' ? options.indexUpAxis : 1;
      this.constraints = [];

      this.preStepCallback = () => {};

      this.currentVehicleSpeedKmHour = 0;
      this.numWheelsOnGround = 0;
    }
    /**
     * Add a wheel. For information about the options, see `WheelInfo`.
     */


    addWheel(options) {
      if (options === void 0) {
        options = {};
      }

      const info = new WheelInfo(options);
      const index = this.wheelInfos.length;
      this.wheelInfos.push(info);
      return index;
    }
    /**
     * Set the steering value of a wheel.
     */


    setSteeringValue(value, wheelIndex) {
      const wheel = this.wheelInfos[wheelIndex];
      wheel.steering = value;
    }
    /**
     * Set the wheel force to apply on one of the wheels each time step
     */


    applyEngineForce(value, wheelIndex) {
      this.wheelInfos[wheelIndex].engineForce = value;
    }
    /**
     * Set the braking force of a wheel
     */


    setBrake(brake, wheelIndex) {
      this.wheelInfos[wheelIndex].brake = brake;
    }
    /**
     * Add the vehicle including its constraints to the world.
     */


    addToWorld(world) {
      world.addBody(this.chassisBody);
      const that = this;

      this.preStepCallback = () => {
        that.updateVehicle(world.dt);
      };

      world.addEventListener('preStep', this.preStepCallback);
      this.world = world;
    }
    /**
     * Get one of the wheel axles, world-oriented.
     */


    getVehicleAxisWorld(axisIndex, result) {
      result.set(axisIndex === 0 ? 1 : 0, axisIndex === 1 ? 1 : 0, axisIndex === 2 ? 1 : 0);
      this.chassisBody.vectorToWorldFrame(result, result);
    }

    updateVehicle(timeStep) {
      const wheelInfos = this.wheelInfos;
      const numWheels = wheelInfos.length;
      const chassisBody = this.chassisBody;

      for (let i = 0; i < numWheels; i++) {
        this.updateWheelTransform(i);
      }

      this.currentVehicleSpeedKmHour = 3.6 * chassisBody.velocity.length();
      const forwardWorld = new Vec3();
      this.getVehicleAxisWorld(this.indexForwardAxis, forwardWorld);

      if (forwardWorld.dot(chassisBody.velocity) < 0) {
        this.currentVehicleSpeedKmHour *= -1;
      } // simulate suspension


      for (let i = 0; i < numWheels; i++) {
        this.castRay(wheelInfos[i]);
      }

      this.updateSuspension(timeStep);
      const impulse = new Vec3();
      const relpos = new Vec3();

      for (let i = 0; i < numWheels; i++) {
        //apply suspension force
        const wheel = wheelInfos[i];
        let suspensionForce = wheel.suspensionForce;

        if (suspensionForce > wheel.maxSuspensionForce) {
          suspensionForce = wheel.maxSuspensionForce;
        }

        wheel.raycastResult.hitNormalWorld.scale(suspensionForce * timeStep, impulse);
        wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, relpos);
        chassisBody.applyImpulse(impulse, relpos);
      }

      this.updateFriction(timeStep);
      const hitNormalWorldScaledWithProj = new Vec3();
      const fwd = new Vec3();
      const vel = new Vec3();

      for (let i = 0; i < numWheels; i++) {
        const wheel = wheelInfos[i]; //const relpos = new Vec3();
        //wheel.chassisConnectionPointWorld.vsub(chassisBody.position, relpos);

        chassisBody.getVelocityAtWorldPoint(wheel.chassisConnectionPointWorld, vel); // Hack to get the rotation in the correct direction

        let m = 1;

        switch (this.indexUpAxis) {
          case 1:
            m = -1;
            break;
        }

        if (wheel.isInContact) {
          this.getVehicleAxisWorld(this.indexForwardAxis, fwd);
          const proj = fwd.dot(wheel.raycastResult.hitNormalWorld);
          wheel.raycastResult.hitNormalWorld.scale(proj, hitNormalWorldScaledWithProj);
          fwd.vsub(hitNormalWorldScaledWithProj, fwd);
          const proj2 = fwd.dot(vel);
          wheel.deltaRotation = m * proj2 * timeStep / wheel.radius;
        }

        if ((wheel.sliding || !wheel.isInContact) && wheel.engineForce !== 0 && wheel.useCustomSlidingRotationalSpeed) {
          // Apply custom rotation when accelerating and sliding
          wheel.deltaRotation = (wheel.engineForce > 0 ? 1 : -1) * wheel.customSlidingRotationalSpeed * timeStep;
        } // Lock wheels


        if (Math.abs(wheel.brake) > Math.abs(wheel.engineForce)) {
          wheel.deltaRotation = 0;
        }

        wheel.rotation += wheel.deltaRotation; // Use the old value

        wheel.deltaRotation *= 0.99; // damping of rotation when not in contact
      }
    }

    updateSuspension(deltaTime) {
      const chassisBody = this.chassisBody;
      const chassisMass = chassisBody.mass;
      const wheelInfos = this.wheelInfos;
      const numWheels = wheelInfos.length;

      for (let w_it = 0; w_it < numWheels; w_it++) {
        const wheel = wheelInfos[w_it];

        if (wheel.isInContact) {
          let force; // Spring

          const susp_length = wheel.suspensionRestLength;
          const current_length = wheel.suspensionLength;
          const length_diff = susp_length - current_length;
          force = wheel.suspensionStiffness * length_diff * wheel.clippedInvContactDotSuspension; // Damper

          const projected_rel_vel = wheel.suspensionRelativeVelocity;
          let susp_damping;

          if (projected_rel_vel < 0) {
            susp_damping = wheel.dampingCompression;
          } else {
            susp_damping = wheel.dampingRelaxation;
          }

          force -= susp_damping * projected_rel_vel;
          wheel.suspensionForce = force * chassisMass;

          if (wheel.suspensionForce < 0) {
            wheel.suspensionForce = 0;
          }
        } else {
          wheel.suspensionForce = 0;
        }
      }
    }
    /**
     * Remove the vehicle including its constraints from the world.
     */


    removeFromWorld(world) {
      this.constraints;
      world.removeBody(this.chassisBody);
      world.removeEventListener('preStep', this.preStepCallback);
      this.world = null;
    }

    castRay(wheel) {
      const rayvector = castRay_rayvector;
      const target = castRay_target;
      this.updateWheelTransformWorld(wheel);
      const chassisBody = this.chassisBody;
      let depth = -1;
      const raylen = wheel.suspensionRestLength + wheel.radius;
      wheel.directionWorld.scale(raylen, rayvector);
      const source = wheel.chassisConnectionPointWorld;
      source.vadd(rayvector, target);
      const raycastResult = wheel.raycastResult;
      raycastResult.reset(); // Turn off ray collision with the chassis temporarily

      const oldState = chassisBody.collisionResponse;
      chassisBody.collisionResponse = false; // Cast ray against world

      this.world.rayTest(source, target, raycastResult);
      chassisBody.collisionResponse = oldState;
      const object = raycastResult.body;
      wheel.raycastResult.groundObject = 0;

      if (object) {
        depth = raycastResult.distance;
        wheel.raycastResult.hitNormalWorld = raycastResult.hitNormalWorld;
        wheel.isInContact = true;
        const hitDistance = raycastResult.distance;
        wheel.suspensionLength = hitDistance - wheel.radius; // clamp on max suspension travel

        const minSuspensionLength = wheel.suspensionRestLength - wheel.maxSuspensionTravel;
        const maxSuspensionLength = wheel.suspensionRestLength + wheel.maxSuspensionTravel;

        if (wheel.suspensionLength < minSuspensionLength) {
          wheel.suspensionLength = minSuspensionLength;
        }

        if (wheel.suspensionLength > maxSuspensionLength) {
          wheel.suspensionLength = maxSuspensionLength;
          wheel.raycastResult.reset();
        }

        const denominator = wheel.raycastResult.hitNormalWorld.dot(wheel.directionWorld);
        const chassis_velocity_at_contactPoint = new Vec3();
        chassisBody.getVelocityAtWorldPoint(wheel.raycastResult.hitPointWorld, chassis_velocity_at_contactPoint);
        const projVel = wheel.raycastResult.hitNormalWorld.dot(chassis_velocity_at_contactPoint);

        if (denominator >= -0.1) {
          wheel.suspensionRelativeVelocity = 0;
          wheel.clippedInvContactDotSuspension = 1 / 0.1;
        } else {
          const inv = -1 / denominator;
          wheel.suspensionRelativeVelocity = projVel * inv;
          wheel.clippedInvContactDotSuspension = inv;
        }
      } else {
        //put wheel info as in rest position
        wheel.suspensionLength = wheel.suspensionRestLength + 0 * wheel.maxSuspensionTravel;
        wheel.suspensionRelativeVelocity = 0.0;
        wheel.directionWorld.scale(-1, wheel.raycastResult.hitNormalWorld);
        wheel.clippedInvContactDotSuspension = 1.0;
      }

      return depth;
    }

    updateWheelTransformWorld(wheel) {
      wheel.isInContact = false;
      const chassisBody = this.chassisBody;
      chassisBody.pointToWorldFrame(wheel.chassisConnectionPointLocal, wheel.chassisConnectionPointWorld);
      chassisBody.vectorToWorldFrame(wheel.directionLocal, wheel.directionWorld);
      chassisBody.vectorToWorldFrame(wheel.axleLocal, wheel.axleWorld);
    }
    /**
     * Update one of the wheel transform.
     * Note when rendering wheels: during each step, wheel transforms are updated BEFORE the chassis; ie. their position becomes invalid after the step. Thus when you render wheels, you must update wheel transforms before rendering them. See raycastVehicle demo for an example.
     * @param wheelIndex The wheel index to update.
     */


    updateWheelTransform(wheelIndex) {
      const up = tmpVec4;
      const right = tmpVec5;
      const fwd = tmpVec6;
      const wheel = this.wheelInfos[wheelIndex];
      this.updateWheelTransformWorld(wheel);
      wheel.directionLocal.scale(-1, up);
      right.copy(wheel.axleLocal);
      up.cross(right, fwd);
      fwd.normalize();
      right.normalize(); // Rotate around steering over the wheelAxle

      const steering = wheel.steering;
      const steeringOrn = new Quaternion();
      steeringOrn.setFromAxisAngle(up, steering);
      const rotatingOrn = new Quaternion();
      rotatingOrn.setFromAxisAngle(right, wheel.rotation); // World rotation of the wheel

      const q = wheel.worldTransform.quaternion;
      this.chassisBody.quaternion.mult(steeringOrn, q);
      q.mult(rotatingOrn, q);
      q.normalize(); // world position of the wheel

      const p = wheel.worldTransform.position;
      p.copy(wheel.directionWorld);
      p.scale(wheel.suspensionLength, p);
      p.vadd(wheel.chassisConnectionPointWorld, p);
    }
    /**
     * Get the world transform of one of the wheels
     */


    getWheelTransformWorld(wheelIndex) {
      return this.wheelInfos[wheelIndex].worldTransform;
    }

    updateFriction(timeStep) {
      const surfNormalWS_scaled_proj = updateFriction_surfNormalWS_scaled_proj; //calculate the impulse, so that the wheels don't move sidewards

      const wheelInfos = this.wheelInfos;
      const numWheels = wheelInfos.length;
      const chassisBody = this.chassisBody;
      const forwardWS = updateFriction_forwardWS;
      const axle = updateFriction_axle;
      this.numWheelsOnGround = 0;

      for (let i = 0; i < numWheels; i++) {
        const wheel = wheelInfos[i];
        const groundObject = wheel.raycastResult.body;

        if (groundObject) {
          this.numWheelsOnGround++;
        }

        wheel.sideImpulse = 0;
        wheel.forwardImpulse = 0;

        if (!forwardWS[i]) {
          forwardWS[i] = new Vec3();
        }

        if (!axle[i]) {
          axle[i] = new Vec3();
        }
      }

      for (let i = 0; i < numWheels; i++) {
        const wheel = wheelInfos[i];
        const groundObject = wheel.raycastResult.body;

        if (groundObject) {
          const axlei = axle[i];
          const wheelTrans = this.getWheelTransformWorld(i); // Get world axle

          wheelTrans.vectorToWorldFrame(directions[this.indexRightAxis], axlei);
          const surfNormalWS = wheel.raycastResult.hitNormalWorld;
          const proj = axlei.dot(surfNormalWS);
          surfNormalWS.scale(proj, surfNormalWS_scaled_proj);
          axlei.vsub(surfNormalWS_scaled_proj, axlei);
          axlei.normalize();
          surfNormalWS.cross(axlei, forwardWS[i]);
          forwardWS[i].normalize();
          wheel.sideImpulse = resolveSingleBilateral(chassisBody, wheel.raycastResult.hitPointWorld, groundObject, wheel.raycastResult.hitPointWorld, axlei);
          wheel.sideImpulse *= sideFrictionStiffness2;
        }
      }

      const sideFactor = 1;
      const fwdFactor = 0.5;
      this.sliding = false;

      for (let i = 0; i < numWheels; i++) {
        const wheel = wheelInfos[i];
        const groundObject = wheel.raycastResult.body;
        let rollingFriction = 0;
        wheel.slipInfo = 1;

        if (groundObject) {
          const defaultRollingFrictionImpulse = 0;
          const maxImpulse = wheel.brake ? wheel.brake : defaultRollingFrictionImpulse; // btWheelContactPoint contactPt(chassisBody,groundObject,wheelInfraycastInfo.hitPointWorld,forwardWS[wheel],maxImpulse);
          // rollingFriction = calcRollingFriction(contactPt);

          rollingFriction = calcRollingFriction(chassisBody, groundObject, wheel.raycastResult.hitPointWorld, forwardWS[i], maxImpulse);
          rollingFriction += wheel.engineForce * timeStep; // rollingFriction = 0;

          const factor = maxImpulse / rollingFriction;
          wheel.slipInfo *= factor;
        } //switch between active rolling (throttle), braking and non-active rolling friction (nthrottle/break)


        wheel.forwardImpulse = 0;
        wheel.skidInfo = 1;

        if (groundObject) {
          wheel.skidInfo = 1;
          const maximp = wheel.suspensionForce * timeStep * wheel.frictionSlip;
          const maximpSide = maximp;
          const maximpSquared = maximp * maximpSide;
          wheel.forwardImpulse = rollingFriction; //wheelInfo.engineForce* timeStep;

          const x = wheel.forwardImpulse * fwdFactor / wheel.forwardAcceleration;
          const y = wheel.sideImpulse * sideFactor / wheel.sideAcceleration;
          const impulseSquared = x * x + y * y;
          wheel.sliding = false;

          if (impulseSquared > maximpSquared) {
            this.sliding = true;
            wheel.sliding = true;
            const factor = maximp / Math.sqrt(impulseSquared);
            wheel.skidInfo *= factor;
          }
        }
      }

      if (this.sliding) {
        for (let i = 0; i < numWheels; i++) {
          const wheel = wheelInfos[i];

          if (wheel.sideImpulse !== 0) {
            if (wheel.skidInfo < 1) {
              wheel.forwardImpulse *= wheel.skidInfo;
              wheel.sideImpulse *= wheel.skidInfo;
            }
          }
        }
      } // apply the impulses


      for (let i = 0; i < numWheels; i++) {
        const wheel = wheelInfos[i];
        const rel_pos = new Vec3();
        wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, rel_pos); // cannons applyimpulse is using world coord for the position
        //rel_pos.copy(wheel.raycastResult.hitPointWorld);

        if (wheel.forwardImpulse !== 0) {
          const impulse = new Vec3();
          forwardWS[i].scale(wheel.forwardImpulse, impulse);
          chassisBody.applyImpulse(impulse, rel_pos);
        }

        if (wheel.sideImpulse !== 0) {
          const groundObject = wheel.raycastResult.body;
          const rel_pos2 = new Vec3();
          wheel.raycastResult.hitPointWorld.vsub(groundObject.position, rel_pos2); //rel_pos2.copy(wheel.raycastResult.hitPointWorld);

          const sideImp = new Vec3();
          axle[i].scale(wheel.sideImpulse, sideImp); // Scale the relative position in the up direction with rollInfluence.
          // If rollInfluence is 1, the impulse will be applied on the hitPoint (easy to roll over), if it is zero it will be applied in the same plane as the center of mass (not easy to roll over).

          chassisBody.vectorToLocalFrame(rel_pos, rel_pos);
          rel_pos['xyz'[this.indexUpAxis]] *= wheel.rollInfluence;
          chassisBody.vectorToWorldFrame(rel_pos, rel_pos);
          chassisBody.applyImpulse(sideImp, rel_pos); //apply friction impulse on the ground

          sideImp.scale(-1, sideImp);
          groundObject.applyImpulse(sideImp, rel_pos2);
        }
      }
    }

  }
  new Vec3();
  new Vec3();
  new Vec3();
  const tmpVec4 = new Vec3();
  const tmpVec5 = new Vec3();
  const tmpVec6 = new Vec3();
  new Ray();
  new Vec3();
  const castRay_rayvector = new Vec3();
  const castRay_target = new Vec3();
  const directions = [new Vec3(1, 0, 0), new Vec3(0, 1, 0), new Vec3(0, 0, 1)];
  const updateFriction_surfNormalWS_scaled_proj = new Vec3();
  const updateFriction_axle = [];
  const updateFriction_forwardWS = [];
  const sideFrictionStiffness2 = 1;
  const calcRollingFriction_vel1 = new Vec3();
  const calcRollingFriction_vel2 = new Vec3();
  const calcRollingFriction_vel = new Vec3();

  function calcRollingFriction(body0, body1, frictionPosWorld, frictionDirectionWorld, maxImpulse) {
    let j1 = 0;
    const contactPosWorld = frictionPosWorld; // const rel_pos1 = new Vec3();
    // const rel_pos2 = new Vec3();

    const vel1 = calcRollingFriction_vel1;
    const vel2 = calcRollingFriction_vel2;
    const vel = calcRollingFriction_vel; // contactPosWorld.vsub(body0.position, rel_pos1);
    // contactPosWorld.vsub(body1.position, rel_pos2);

    body0.getVelocityAtWorldPoint(contactPosWorld, vel1);
    body1.getVelocityAtWorldPoint(contactPosWorld, vel2);
    vel1.vsub(vel2, vel);
    const vrel = frictionDirectionWorld.dot(vel);
    const denom0 = computeImpulseDenominator(body0, frictionPosWorld, frictionDirectionWorld);
    const denom1 = computeImpulseDenominator(body1, frictionPosWorld, frictionDirectionWorld);
    const relaxation = 1;
    const jacDiagABInv = relaxation / (denom0 + denom1); // calculate j that moves us to zero relative velocity

    j1 = -vrel * jacDiagABInv;

    if (maxImpulse < j1) {
      j1 = maxImpulse;
    }

    if (j1 < -maxImpulse) {
      j1 = -maxImpulse;
    }

    return j1;
  }

  const computeImpulseDenominator_r0 = new Vec3();
  const computeImpulseDenominator_c0 = new Vec3();
  const computeImpulseDenominator_vec = new Vec3();
  const computeImpulseDenominator_m = new Vec3();

  function computeImpulseDenominator(body, pos, normal) {
    const r0 = computeImpulseDenominator_r0;
    const c0 = computeImpulseDenominator_c0;
    const vec = computeImpulseDenominator_vec;
    const m = computeImpulseDenominator_m;
    pos.vsub(body.position, r0);
    r0.cross(normal, c0);
    body.invInertiaWorld.vmult(c0, m);
    m.cross(r0, vec);
    return body.invMass + normal.dot(vec);
  }

  const resolveSingleBilateral_vel1 = new Vec3();
  const resolveSingleBilateral_vel2 = new Vec3();
  const resolveSingleBilateral_vel = new Vec3(); // bilateral constraint between two dynamic objects

  function resolveSingleBilateral(body1, pos1, body2, pos2, normal) {
    const normalLenSqr = normal.lengthSquared();

    if (normalLenSqr > 1.1) {
      return 0; // no impulse
    } // const rel_pos1 = new Vec3();
    // const rel_pos2 = new Vec3();
    // pos1.vsub(body1.position, rel_pos1);
    // pos2.vsub(body2.position, rel_pos2);


    const vel1 = resolveSingleBilateral_vel1;
    const vel2 = resolveSingleBilateral_vel2;
    const vel = resolveSingleBilateral_vel;
    body1.getVelocityAtWorldPoint(pos1, vel1);
    body2.getVelocityAtWorldPoint(pos2, vel2);
    vel1.vsub(vel2, vel);
    const rel_vel = normal.dot(vel);
    const contactDamping = 0.2;
    const massTerm = 1 / (body1.invMass + body2.invMass);
    const impulse = -contactDamping * rel_vel * massTerm;
    return impulse;
  }

  /**
   * Spherical shape
   * @example
   *     const radius = 1
   *     const sphereShape = new CANNON.Sphere(radius)
   *     const sphereBody = new CANNON.Body({ mass: 1, shape: sphereShape })
   *     world.addBody(sphereBody)
   */
  class Sphere extends Shape {
    /**
     * The radius of the sphere.
     */

    /**
     *
     * @param radius The radius of the sphere, a non-negative number.
     */
    constructor(radius) {
      super({
        type: Shape.types.SPHERE
      });
      this.radius = radius !== undefined ? radius : 1.0;

      if (this.radius < 0) {
        throw new Error('The sphere radius cannot be negative.');
      }

      this.updateBoundingSphereRadius();
    }
    /** calculateLocalInertia */


    calculateLocalInertia(mass, target) {
      if (target === void 0) {
        target = new Vec3();
      }

      const I = 2.0 * mass * this.radius * this.radius / 5.0;
      target.x = I;
      target.y = I;
      target.z = I;
      return target;
    }
    /** volume */


    volume() {
      return 4.0 * Math.PI * Math.pow(this.radius, 3) / 3.0;
    }

    updateBoundingSphereRadius() {
      this.boundingSphereRadius = this.radius;
    }

    calculateWorldAABB(pos, quat, min, max) {
      const r = this.radius;
      const axes = ['x', 'y', 'z'];

      for (let i = 0; i < axes.length; i++) {
        const ax = axes[i];
        min[ax] = pos[ax] - r;
        max[ax] = pos[ax] + r;
      }
    }

  }
  new Vec3();
  new Vec3();
  new Vec3(); // Temp vectors for calculation

  new Vec3(); // Relative velocity

  new Vec3();
  new Vec3();
  new Vec3();
  new Vec3();
  new Vec3();

  /**
   * Cylinder class.
   * @example
   *     const radiusTop = 0.5
   *     const radiusBottom = 0.5
   *     const height = 2
   *     const numSegments = 12
   *     const cylinderShape = new CANNON.Cylinder(radiusTop, radiusBottom, height, numSegments)
   *     const cylinderBody = new CANNON.Body({ mass: 1, shape: cylinderShape })
   *     world.addBody(cylinderBody)
   */

  class Cylinder extends ConvexPolyhedron {
    /** The radius of the top of the Cylinder. */

    /** The radius of the bottom of the Cylinder. */

    /** The height of the Cylinder. */

    /** The number of segments to build the cylinder out of. */

    /**
     * @param radiusTop The radius of the top of the Cylinder.
     * @param radiusBottom The radius of the bottom of the Cylinder.
     * @param height The height of the Cylinder.
     * @param numSegments The number of segments to build the cylinder out of.
     */
    constructor(radiusTop, radiusBottom, height, numSegments) {
      if (radiusTop === void 0) {
        radiusTop = 1;
      }

      if (radiusBottom === void 0) {
        radiusBottom = 1;
      }

      if (height === void 0) {
        height = 1;
      }

      if (numSegments === void 0) {
        numSegments = 8;
      }

      if (radiusTop < 0) {
        throw new Error('The cylinder radiusTop cannot be negative.');
      }

      if (radiusBottom < 0) {
        throw new Error('The cylinder radiusBottom cannot be negative.');
      }

      const N = numSegments;
      const vertices = [];
      const axes = [];
      const faces = [];
      const bottomface = [];
      const topface = [];
      const cos = Math.cos;
      const sin = Math.sin; // First bottom point

      vertices.push(new Vec3(-radiusBottom * sin(0), -height * 0.5, radiusBottom * cos(0)));
      bottomface.push(0); // First top point

      vertices.push(new Vec3(-radiusTop * sin(0), height * 0.5, radiusTop * cos(0)));
      topface.push(1);

      for (let i = 0; i < N; i++) {
        const theta = 2 * Math.PI / N * (i + 1);
        const thetaN = 2 * Math.PI / N * (i + 0.5);

        if (i < N - 1) {
          // Bottom
          vertices.push(new Vec3(-radiusBottom * sin(theta), -height * 0.5, radiusBottom * cos(theta)));
          bottomface.push(2 * i + 2); // Top

          vertices.push(new Vec3(-radiusTop * sin(theta), height * 0.5, radiusTop * cos(theta)));
          topface.push(2 * i + 3); // Face

          faces.push([2 * i, 2 * i + 1, 2 * i + 3, 2 * i + 2]);
        } else {
          faces.push([2 * i, 2 * i + 1, 1, 0]); // Connect
        } // Axis: we can cut off half of them if we have even number of segments


        if (N % 2 === 1 || i < N / 2) {
          axes.push(new Vec3(-sin(thetaN), 0, cos(thetaN)));
        }
      }

      faces.push(bottomface);
      axes.push(new Vec3(0, 1, 0)); // Reorder top face

      const temp = [];

      for (let i = 0; i < topface.length; i++) {
        temp.push(topface[topface.length - i - 1]);
      }

      faces.push(temp);
      super({
        vertices,
        faces,
        axes
      });
      this.type = Shape.types.CYLINDER;
      this.radiusTop = radiusTop;
      this.radiusBottom = radiusBottom;
      this.height = height;
      this.numSegments = numSegments;
    }

  }

  /**
   * Particle shape.
   * @example
   *     const particleShape = new CANNON.Particle()
   *     const particleBody = new CANNON.Body({ mass: 1, shape: particleShape })
   *     world.addBody(particleBody)
   */
  class Particle extends Shape {
    constructor() {
      super({
        type: Shape.types.PARTICLE
      });
    }
    /**
     * calculateLocalInertia
     */


    calculateLocalInertia(mass, target) {
      if (target === void 0) {
        target = new Vec3();
      }

      target.set(0, 0, 0);
      return target;
    }

    volume() {
      return 0;
    }

    updateBoundingSphereRadius() {
      this.boundingSphereRadius = 0;
    }

    calculateWorldAABB(pos, quat, min, max) {
      // Get each axis max
      min.copy(pos);
      max.copy(pos);
    }

  }

  /**
   * A plane, facing in the Z direction. The plane has its surface at z=0 and everything below z=0 is assumed to be solid plane. To make the plane face in some other direction than z, you must put it inside a Body and rotate that body. See the demos.
   * @example
   *     const planeShape = new CANNON.Plane()
   *     const planeBody = new CANNON.Body({ mass: 0, shape:  planeShape })
   *     planeBody.quaternion.setFromEuler(-Math.PI / 2, 0, 0) // make it face up
   *     world.addBody(planeBody)
   */
  class Plane extends Shape {
    /** worldNormal */

    /** worldNormalNeedsUpdate */
    constructor() {
      super({
        type: Shape.types.PLANE
      }); // World oriented normal

      this.worldNormal = new Vec3();
      this.worldNormalNeedsUpdate = true;
      this.boundingSphereRadius = Number.MAX_VALUE;
    }
    /** computeWorldNormal */


    computeWorldNormal(quat) {
      const n = this.worldNormal;
      n.set(0, 0, 1);
      quat.vmult(n, n);
      this.worldNormalNeedsUpdate = false;
    }

    calculateLocalInertia(mass, target) {
      if (target === void 0) {
        target = new Vec3();
      }

      return target;
    }

    volume() {
      return (// The plane is infinite...
        Number.MAX_VALUE
      );
    }

    calculateWorldAABB(pos, quat, min, max) {
      // The plane AABB is infinite, except if the normal is pointing along any axis
      tempNormal.set(0, 0, 1); // Default plane normal is z

      quat.vmult(tempNormal, tempNormal);
      const maxVal = Number.MAX_VALUE;
      min.set(-maxVal, -maxVal, -maxVal);
      max.set(maxVal, maxVal, maxVal);

      if (tempNormal.x === 1) {
        max.x = pos.x;
      } else if (tempNormal.x === -1) {
        min.x = pos.x;
      }

      if (tempNormal.y === 1) {
        max.y = pos.y;
      } else if (tempNormal.y === -1) {
        min.y = pos.y;
      }

      if (tempNormal.z === 1) {
        max.z = pos.z;
      } else if (tempNormal.z === -1) {
        min.z = pos.z;
      }
    }

    updateBoundingSphereRadius() {
      this.boundingSphereRadius = Number.MAX_VALUE;
    }

  }
  const tempNormal = new Vec3();

  /**
   * Heightfield shape class. Height data is given as an array. These data points are spread out evenly with a given distance.
   * @todo Should be possible to use along all axes, not just y
   * @todo should be possible to scale along all axes
   * @todo Refactor elementSize to elementSizeX and elementSizeY
   *
   * @example
   *     // Generate some height data (y-values).
   *     const data = []
   *     for (let i = 0; i < 1000; i++) {
   *         const y = 0.5 * Math.cos(0.2 * i)
   *         data.push(y)
   *     }
   *
   *     // Create the heightfield shape
   *     const heightfieldShape = new CANNON.Heightfield(data, {
   *         elementSize: 1 // Distance between the data points in X and Y directions
   *     })
   *     const heightfieldBody = new CANNON.Body({ shape: heightfieldShape })
   *     world.addBody(heightfieldBody)
   */
  class Heightfield extends Shape {
    /**
     * An array of numbers, or height values, that are spread out along the x axis.
     */

    /**
     * Max value of the data points in the data array.
     */

    /**
     * Minimum value of the data points in the data array.
     */

    /**
     * World spacing between the data points in X and Y direction.
     * @todo elementSizeX and Y
     * @default 1
     */

    /**
     * @default true
     */

    /**
     * @param data An array of numbers, or height values, that are spread out along the x axis.
     */
    constructor(data, options) {
      if (options === void 0) {
        options = {};
      }

      options = Utils.defaults(options, {
        maxValue: null,
        minValue: null,
        elementSize: 1
      });
      super({
        type: Shape.types.HEIGHTFIELD
      });
      this.data = data;
      this.maxValue = options.maxValue;
      this.minValue = options.minValue;
      this.elementSize = options.elementSize;

      if (options.minValue === null) {
        this.updateMinValue();
      }

      if (options.maxValue === null) {
        this.updateMaxValue();
      }

      this.cacheEnabled = true;
      this.pillarConvex = new ConvexPolyhedron();
      this.pillarOffset = new Vec3();
      this.updateBoundingSphereRadius(); // "i_j_isUpper" => { convex: ..., offset: ... }
      // for example:
      // _cachedPillars["0_2_1"]

      this._cachedPillars = {};
    }
    /**
     * Call whenever you change the data array.
     */


    update() {
      this._cachedPillars = {};
    }
    /**
     * Update the `minValue` property
     */


    updateMinValue() {
      const data = this.data;
      let minValue = data[0][0];

      for (let i = 0; i !== data.length; i++) {
        for (let j = 0; j !== data[i].length; j++) {
          const v = data[i][j];

          if (v < minValue) {
            minValue = v;
          }
        }
      }

      this.minValue = minValue;
    }
    /**
     * Update the `maxValue` property
     */


    updateMaxValue() {
      const data = this.data;
      let maxValue = data[0][0];

      for (let i = 0; i !== data.length; i++) {
        for (let j = 0; j !== data[i].length; j++) {
          const v = data[i][j];

          if (v > maxValue) {
            maxValue = v;
          }
        }
      }

      this.maxValue = maxValue;
    }
    /**
     * Set the height value at an index. Don't forget to update maxValue and minValue after you're done.
     */


    setHeightValueAtIndex(xi, yi, value) {
      const data = this.data;
      data[xi][yi] = value; // Invalidate cache

      this.clearCachedConvexTrianglePillar(xi, yi, false);

      if (xi > 0) {
        this.clearCachedConvexTrianglePillar(xi - 1, yi, true);
        this.clearCachedConvexTrianglePillar(xi - 1, yi, false);
      }

      if (yi > 0) {
        this.clearCachedConvexTrianglePillar(xi, yi - 1, true);
        this.clearCachedConvexTrianglePillar(xi, yi - 1, false);
      }

      if (yi > 0 && xi > 0) {
        this.clearCachedConvexTrianglePillar(xi - 1, yi - 1, true);
      }
    }
    /**
     * Get max/min in a rectangle in the matrix data
     * @param result An array to store the results in.
     * @return The result array, if it was passed in. Minimum will be at position 0 and max at 1.
     */


    getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, result) {
      if (result === void 0) {
        result = [];
      }

      // Get max and min of the data
      const data = this.data; // Set first value

      let max = this.minValue;

      for (let i = iMinX; i <= iMaxX; i++) {
        for (let j = iMinY; j <= iMaxY; j++) {
          const height = data[i][j];

          if (height > max) {
            max = height;
          }
        }
      }

      result[0] = this.minValue;
      result[1] = max;
    }
    /**
     * Get the index of a local position on the heightfield. The indexes indicate the rectangles, so if your terrain is made of N x N height data points, you will have rectangle indexes ranging from 0 to N-1.
     * @param result Two-element array
     * @param clamp If the position should be clamped to the heightfield edge.
     */


    getIndexOfPosition(x, y, result, clamp) {
      // Get the index of the data points to test against
      const w = this.elementSize;
      const data = this.data;
      let xi = Math.floor(x / w);
      let yi = Math.floor(y / w);
      result[0] = xi;
      result[1] = yi;

      if (clamp) {
        // Clamp index to edges
        if (xi < 0) {
          xi = 0;
        }

        if (yi < 0) {
          yi = 0;
        }

        if (xi >= data.length - 1) {
          xi = data.length - 1;
        }

        if (yi >= data[0].length - 1) {
          yi = data[0].length - 1;
        }
      } // Bail out if we are out of the terrain


      if (xi < 0 || yi < 0 || xi >= data.length - 1 || yi >= data[0].length - 1) {
        return false;
      }

      return true;
    }

    getTriangleAt(x, y, edgeClamp, a, b, c) {
      const idx = getHeightAt_idx;
      this.getIndexOfPosition(x, y, idx, edgeClamp);
      let xi = idx[0];
      let yi = idx[1];
      const data = this.data;

      if (edgeClamp) {
        xi = Math.min(data.length - 2, Math.max(0, xi));
        yi = Math.min(data[0].length - 2, Math.max(0, yi));
      }

      const elementSize = this.elementSize;
      const lowerDist2 = (x / elementSize - xi) ** 2 + (y / elementSize - yi) ** 2;
      const upperDist2 = (x / elementSize - (xi + 1)) ** 2 + (y / elementSize - (yi + 1)) ** 2;
      const upper = lowerDist2 > upperDist2;
      this.getTriangle(xi, yi, upper, a, b, c);
      return upper;
    }

    getNormalAt(x, y, edgeClamp, result) {
      const a = getNormalAt_a;
      const b = getNormalAt_b;
      const c = getNormalAt_c;
      const e0 = getNormalAt_e0;
      const e1 = getNormalAt_e1;
      this.getTriangleAt(x, y, edgeClamp, a, b, c);
      b.vsub(a, e0);
      c.vsub(a, e1);
      e0.cross(e1, result);
      result.normalize();
    }
    /**
     * Get an AABB of a square in the heightfield
     * @param xi
     * @param yi
     * @param result
     */


    getAabbAtIndex(xi, yi, _ref) {
      let {
        lowerBound,
        upperBound
      } = _ref;
      const data = this.data;
      const elementSize = this.elementSize;
      lowerBound.set(xi * elementSize, yi * elementSize, data[xi][yi]);
      upperBound.set((xi + 1) * elementSize, (yi + 1) * elementSize, data[xi + 1][yi + 1]);
    }
    /**
     * Get the height in the heightfield at a given position
     */


    getHeightAt(x, y, edgeClamp) {
      const data = this.data;
      const a = getHeightAt_a;
      const b = getHeightAt_b;
      const c = getHeightAt_c;
      const idx = getHeightAt_idx;
      this.getIndexOfPosition(x, y, idx, edgeClamp);
      let xi = idx[0];
      let yi = idx[1];

      if (edgeClamp) {
        xi = Math.min(data.length - 2, Math.max(0, xi));
        yi = Math.min(data[0].length - 2, Math.max(0, yi));
      }

      const upper = this.getTriangleAt(x, y, edgeClamp, a, b, c);
      barycentricWeights(x, y, a.x, a.y, b.x, b.y, c.x, c.y, getHeightAt_weights);
      const w = getHeightAt_weights;

      if (upper) {
        // Top triangle verts
        return data[xi + 1][yi + 1] * w.x + data[xi][yi + 1] * w.y + data[xi + 1][yi] * w.z;
      } else {
        // Top triangle verts
        return data[xi][yi] * w.x + data[xi + 1][yi] * w.y + data[xi][yi + 1] * w.z;
      }
    }

    getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle) {
      return `${xi}_${yi}_${getUpperTriangle ? 1 : 0}`;
    }

    getCachedConvexTrianglePillar(xi, yi, getUpperTriangle) {
      return this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];
    }

    setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, convex, offset) {
      this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)] = {
        convex,
        offset
      };
    }

    clearCachedConvexTrianglePillar(xi, yi, getUpperTriangle) {
      delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];
    }
    /**
     * Get a triangle from the heightfield
     */


    getTriangle(xi, yi, upper, a, b, c) {
      const data = this.data;
      const elementSize = this.elementSize;

      if (upper) {
        // Top triangle verts
        a.set((xi + 1) * elementSize, (yi + 1) * elementSize, data[xi + 1][yi + 1]);
        b.set(xi * elementSize, (yi + 1) * elementSize, data[xi][yi + 1]);
        c.set((xi + 1) * elementSize, yi * elementSize, data[xi + 1][yi]);
      } else {
        // Top triangle verts
        a.set(xi * elementSize, yi * elementSize, data[xi][yi]);
        b.set((xi + 1) * elementSize, yi * elementSize, data[xi + 1][yi]);
        c.set(xi * elementSize, (yi + 1) * elementSize, data[xi][yi + 1]);
      }
    }
    /**
     * Get a triangle in the terrain in the form of a triangular convex shape.
     */


    getConvexTrianglePillar(xi, yi, getUpperTriangle) {
      let result = this.pillarConvex;
      let offsetResult = this.pillarOffset;

      if (this.cacheEnabled) {
        const data = this.getCachedConvexTrianglePillar(xi, yi, getUpperTriangle);

        if (data) {
          this.pillarConvex = data.convex;
          this.pillarOffset = data.offset;
          return;
        }

        result = new ConvexPolyhedron();
        offsetResult = new Vec3();
        this.pillarConvex = result;
        this.pillarOffset = offsetResult;
      }

      const data = this.data;
      const elementSize = this.elementSize;
      const faces = result.faces; // Reuse verts if possible

      result.vertices.length = 6;

      for (let i = 0; i < 6; i++) {
        if (!result.vertices[i]) {
          result.vertices[i] = new Vec3();
        }
      } // Reuse faces if possible


      faces.length = 5;

      for (let i = 0; i < 5; i++) {
        if (!faces[i]) {
          faces[i] = [];
        }
      }

      const verts = result.vertices;
      const h = (Math.min(data[xi][yi], data[xi + 1][yi], data[xi][yi + 1], data[xi + 1][yi + 1]) - this.minValue) / 2 + this.minValue;

      if (!getUpperTriangle) {
        // Center of the triangle pillar - all polygons are given relative to this one
        offsetResult.set((xi + 0.25) * elementSize, // sort of center of a triangle
        (yi + 0.25) * elementSize, h // vertical center
        ); // Top triangle verts

        verts[0].set(-0.25 * elementSize, -0.25 * elementSize, data[xi][yi] - h);
        verts[1].set(0.75 * elementSize, -0.25 * elementSize, data[xi + 1][yi] - h);
        verts[2].set(-0.25 * elementSize, 0.75 * elementSize, data[xi][yi + 1] - h); // bottom triangle verts

        verts[3].set(-0.25 * elementSize, -0.25 * elementSize, -Math.abs(h) - 1);
        verts[4].set(0.75 * elementSize, -0.25 * elementSize, -Math.abs(h) - 1);
        verts[5].set(-0.25 * elementSize, 0.75 * elementSize, -Math.abs(h) - 1); // top triangle

        faces[0][0] = 0;
        faces[0][1] = 1;
        faces[0][2] = 2; // bottom triangle

        faces[1][0] = 5;
        faces[1][1] = 4;
        faces[1][2] = 3; // -x facing quad

        faces[2][0] = 0;
        faces[2][1] = 2;
        faces[2][2] = 5;
        faces[2][3] = 3; // -y facing quad

        faces[3][0] = 1;
        faces[3][1] = 0;
        faces[3][2] = 3;
        faces[3][3] = 4; // +xy facing quad

        faces[4][0] = 4;
        faces[4][1] = 5;
        faces[4][2] = 2;
        faces[4][3] = 1;
      } else {
        // Center of the triangle pillar - all polygons are given relative to this one
        offsetResult.set((xi + 0.75) * elementSize, // sort of center of a triangle
        (yi + 0.75) * elementSize, h // vertical center
        ); // Top triangle verts

        verts[0].set(0.25 * elementSize, 0.25 * elementSize, data[xi + 1][yi + 1] - h);
        verts[1].set(-0.75 * elementSize, 0.25 * elementSize, data[xi][yi + 1] - h);
        verts[2].set(0.25 * elementSize, -0.75 * elementSize, data[xi + 1][yi] - h); // bottom triangle verts

        verts[3].set(0.25 * elementSize, 0.25 * elementSize, -Math.abs(h) - 1);
        verts[4].set(-0.75 * elementSize, 0.25 * elementSize, -Math.abs(h) - 1);
        verts[5].set(0.25 * elementSize, -0.75 * elementSize, -Math.abs(h) - 1); // Top triangle

        faces[0][0] = 0;
        faces[0][1] = 1;
        faces[0][2] = 2; // bottom triangle

        faces[1][0] = 5;
        faces[1][1] = 4;
        faces[1][2] = 3; // +x facing quad

        faces[2][0] = 2;
        faces[2][1] = 5;
        faces[2][2] = 3;
        faces[2][3] = 0; // +y facing quad

        faces[3][0] = 3;
        faces[3][1] = 4;
        faces[3][2] = 1;
        faces[3][3] = 0; // -xy facing quad

        faces[4][0] = 1;
        faces[4][1] = 4;
        faces[4][2] = 5;
        faces[4][3] = 2;
      }

      result.computeNormals();
      result.computeEdges();
      result.updateBoundingSphereRadius();
      this.setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, result, offsetResult);
    }

    calculateLocalInertia(mass, target) {
      if (target === void 0) {
        target = new Vec3();
      }

      target.set(0, 0, 0);
      return target;
    }

    volume() {
      return (// The terrain is infinite
        Number.MAX_VALUE
      );
    }

    calculateWorldAABB(pos, quat, min, max) {
      /** @TODO do it properly */
      min.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);
      max.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
    }

    updateBoundingSphereRadius() {
      // Use the bounding box of the min/max values
      const data = this.data;
      const s = this.elementSize;
      this.boundingSphereRadius = new Vec3(data.length * s, data[0].length * s, Math.max(Math.abs(this.maxValue), Math.abs(this.minValue))).length();
    }
    /**
     * Sets the height values from an image. Currently only supported in browser.
     */


    setHeightsFromImage(image, scale) {
      const {
        x,
        z,
        y
      } = scale;
      const canvas = document.createElement('canvas');
      canvas.width = image.width;
      canvas.height = image.height;
      const context = canvas.getContext('2d');
      context.drawImage(image, 0, 0);
      const imageData = context.getImageData(0, 0, image.width, image.height);
      const matrix = this.data;
      matrix.length = 0;
      this.elementSize = Math.abs(x) / imageData.width;

      for (let i = 0; i < imageData.height; i++) {
        const row = [];

        for (let j = 0; j < imageData.width; j++) {
          const a = imageData.data[(i * imageData.height + j) * 4];
          const b = imageData.data[(i * imageData.height + j) * 4 + 1];
          const c = imageData.data[(i * imageData.height + j) * 4 + 2];
          const height = (a + b + c) / 4 / 255 * z;

          if (x < 0) {
            row.push(height);
          } else {
            row.unshift(height);
          }
        }

        if (y < 0) {
          matrix.unshift(row);
        } else {
          matrix.push(row);
        }
      }

      this.updateMaxValue();
      this.updateMinValue();
      this.update();
    }

  }
  const getHeightAt_idx = [];
  const getHeightAt_weights = new Vec3();
  const getHeightAt_a = new Vec3();
  const getHeightAt_b = new Vec3();
  const getHeightAt_c = new Vec3();
  const getNormalAt_a = new Vec3();
  const getNormalAt_b = new Vec3();
  const getNormalAt_c = new Vec3();
  const getNormalAt_e0 = new Vec3();
  const getNormalAt_e1 = new Vec3(); // from https://en.wikipedia.org/wiki/Barycentric_coordinate_system

  function barycentricWeights(x, y, ax, ay, bx, by, cx, cy, result) {
    result.x = ((by - cy) * (x - cx) + (cx - bx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));
    result.y = ((cy - ay) * (x - cx) + (ax - cx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));
    result.z = 1 - result.x - result.y;
  }

  /**
   * OctreeNode
   */
  class OctreeNode {
    /** The root node */

    /** Boundary of this node */

    /** Contained data at the current node level */

    /** Children to this node */
    constructor(options) {
      if (options === void 0) {
        options = {};
      }

      this.root = options.root || null;
      this.aabb = options.aabb ? options.aabb.clone() : new AABB();
      this.data = [];
      this.children = [];
    }
    /**
     * reset
     */


    reset() {
      this.children.length = this.data.length = 0;
    }
    /**
     * Insert data into this node
     * @return True if successful, otherwise false
     */


    insert(aabb, elementData, level) {
      if (level === void 0) {
        level = 0;
      }

      const nodeData = this.data; // Ignore objects that do not belong in this node

      if (!this.aabb.contains(aabb)) {
        return false; // object cannot be added
      }

      const children = this.children;
      const maxDepth = this.maxDepth || this.root.maxDepth;

      if (level < maxDepth) {
        // Subdivide if there are no children yet
        let subdivided = false;

        if (!children.length) {
          this.subdivide();
          subdivided = true;
        } // add to whichever node will accept it


        for (let i = 0; i !== 8; i++) {
          if (children[i].insert(aabb, elementData, level + 1)) {
            return true;
          }
        }

        if (subdivided) {
          // No children accepted! Might as well just remove em since they contain none
          children.length = 0;
        }
      } // Too deep, or children didnt want it. add it in current node


      nodeData.push(elementData);
      return true;
    }
    /**
     * Create 8 equally sized children nodes and put them in the `children` array.
     */


    subdivide() {
      const aabb = this.aabb;
      const l = aabb.lowerBound;
      const u = aabb.upperBound;
      const children = this.children;
      children.push(new OctreeNode({
        aabb: new AABB({
          lowerBound: new Vec3(0, 0, 0)
        })
      }), new OctreeNode({
        aabb: new AABB({
          lowerBound: new Vec3(1, 0, 0)
        })
      }), new OctreeNode({
        aabb: new AABB({
          lowerBound: new Vec3(1, 1, 0)
        })
      }), new OctreeNode({
        aabb: new AABB({
          lowerBound: new Vec3(1, 1, 1)
        })
      }), new OctreeNode({
        aabb: new AABB({
          lowerBound: new Vec3(0, 1, 1)
        })
      }), new OctreeNode({
        aabb: new AABB({
          lowerBound: new Vec3(0, 0, 1)
        })
      }), new OctreeNode({
        aabb: new AABB({
          lowerBound: new Vec3(1, 0, 1)
        })
      }), new OctreeNode({
        aabb: new AABB({
          lowerBound: new Vec3(0, 1, 0)
        })
      }));
      u.vsub(l, halfDiagonal);
      halfDiagonal.scale(0.5, halfDiagonal);
      const root = this.root || this;

      for (let i = 0; i !== 8; i++) {
        const child = children[i]; // Set current node as root

        child.root = root; // Compute bounds

        const lowerBound = child.aabb.lowerBound;
        lowerBound.x *= halfDiagonal.x;
        lowerBound.y *= halfDiagonal.y;
        lowerBound.z *= halfDiagonal.z;
        lowerBound.vadd(l, lowerBound); // Upper bound is always lower bound + halfDiagonal

        lowerBound.vadd(halfDiagonal, child.aabb.upperBound);
      }
    }
    /**
     * Get all data, potentially within an AABB
     * @return The "result" object
     */


    aabbQuery(aabb, result) {
      this.data; // abort if the range does not intersect this node
      // if (!this.aabb.overlaps(aabb)){
      //     return result;
      // }
      // Add objects at this level
      // Array.prototype.push.apply(result, nodeData);
      // Add child data
      // @todo unwrap recursion into a queue / loop, that's faster in JS

      this.children; // for (let i = 0, N = this.children.length; i !== N; i++) {
      //     children[i].aabbQuery(aabb, result);
      // }

      const queue = [this];

      while (queue.length) {
        const node = queue.pop();

        if (node.aabb.overlaps(aabb)) {
          Array.prototype.push.apply(result, node.data);
        }

        Array.prototype.push.apply(queue, node.children);
      }

      return result;
    }
    /**
     * Get all data, potentially intersected by a ray.
     * @return The "result" object
     */


    rayQuery(ray, treeTransform, result) {
      // Use aabb query for now.

      /** @todo implement real ray query which needs less lookups */
      ray.getAABB(tmpAABB);
      tmpAABB.toLocalFrame(treeTransform, tmpAABB);
      this.aabbQuery(tmpAABB, result);
      return result;
    }
    /**
     * removeEmptyNodes
     */


    removeEmptyNodes() {
      for (let i = this.children.length - 1; i >= 0; i--) {
        this.children[i].removeEmptyNodes();

        if (!this.children[i].children.length && !this.children[i].data.length) {
          this.children.splice(i, 1);
        }
      }
    }

  }
  /**
   * Octree
   */


  class Octree extends OctreeNode {
    /**
     * Maximum subdivision depth
     * @default 8
     */

    /**
     * @param aabb The total AABB of the tree
     */
    constructor(aabb, options) {
      if (options === void 0) {
        options = {};
      }

      super({
        root: null,
        aabb
      });
      this.maxDepth = typeof options.maxDepth !== 'undefined' ? options.maxDepth : 8;
    }

  }
  const halfDiagonal = new Vec3();
  const tmpAABB = new AABB();

  /**
   * Trimesh.
   * @example
   *     // How to make a mesh with a single triangle
   *     const vertices = [
   *         0, 0, 0, // vertex 0
   *         1, 0, 0, // vertex 1
   *         0, 1, 0  // vertex 2
   *     ]
   *     const indices = [
   *         0, 1, 2  // triangle 0
   *     ]
   *     const trimeshShape = new CANNON.Trimesh(vertices, indices)
   */
  class Trimesh extends Shape {
    /**
     * vertices
     */

    /**
     * Array of integers, indicating which vertices each triangle consists of. The length of this array is thus 3 times the number of triangles.
     */

    /**
     * The normals data.
     */

    /**
     * The local AABB of the mesh.
     */

    /**
     * References to vertex pairs, making up all unique edges in the trimesh.
     */

    /**
     * Local scaling of the mesh. Use .setScale() to set it.
     */

    /**
     * The indexed triangles. Use .updateTree() to update it.
     */
    constructor(vertices, indices) {
      super({
        type: Shape.types.TRIMESH
      });
      this.vertices = new Float32Array(vertices);
      this.indices = new Int16Array(indices);
      this.normals = new Float32Array(indices.length);
      this.aabb = new AABB();
      this.edges = null;
      this.scale = new Vec3(1, 1, 1);
      this.tree = new Octree();
      this.updateEdges();
      this.updateNormals();
      this.updateAABB();
      this.updateBoundingSphereRadius();
      this.updateTree();
    }
    /**
     * updateTree
     */


    updateTree() {
      const tree = this.tree;
      tree.reset();
      tree.aabb.copy(this.aabb);
      const scale = this.scale; // The local mesh AABB is scaled, but the octree AABB should be unscaled

      tree.aabb.lowerBound.x *= 1 / scale.x;
      tree.aabb.lowerBound.y *= 1 / scale.y;
      tree.aabb.lowerBound.z *= 1 / scale.z;
      tree.aabb.upperBound.x *= 1 / scale.x;
      tree.aabb.upperBound.y *= 1 / scale.y;
      tree.aabb.upperBound.z *= 1 / scale.z; // Insert all triangles

      const triangleAABB = new AABB();
      const a = new Vec3();
      const b = new Vec3();
      const c = new Vec3();
      const points = [a, b, c];

      for (let i = 0; i < this.indices.length / 3; i++) {
        //this.getTriangleVertices(i, a, b, c);
        // Get unscaled triangle verts
        const i3 = i * 3;

        this._getUnscaledVertex(this.indices[i3], a);

        this._getUnscaledVertex(this.indices[i3 + 1], b);

        this._getUnscaledVertex(this.indices[i3 + 2], c);

        triangleAABB.setFromPoints(points);
        tree.insert(triangleAABB, i);
      }

      tree.removeEmptyNodes();
    }
    /**
     * Get triangles in a local AABB from the trimesh.
     * @param result An array of integers, referencing the queried triangles.
     */


    getTrianglesInAABB(aabb, result) {
      unscaledAABB.copy(aabb); // Scale it to local

      const scale = this.scale;
      const isx = scale.x;
      const isy = scale.y;
      const isz = scale.z;
      const l = unscaledAABB.lowerBound;
      const u = unscaledAABB.upperBound;
      l.x /= isx;
      l.y /= isy;
      l.z /= isz;
      u.x /= isx;
      u.y /= isy;
      u.z /= isz;
      return this.tree.aabbQuery(unscaledAABB, result);
    }
    /**
     * setScale
     */


    setScale(scale) {
      const wasUniform = this.scale.x === this.scale.y && this.scale.y === this.scale.z;
      const isUniform = scale.x === scale.y && scale.y === scale.z;

      if (!(wasUniform && isUniform)) {
        // Non-uniform scaling. Need to update normals.
        this.updateNormals();
      }

      this.scale.copy(scale);
      this.updateAABB();
      this.updateBoundingSphereRadius();
    }
    /**
     * Compute the normals of the faces. Will save in the `.normals` array.
     */


    updateNormals() {
      const n = computeNormals_n; // Generate normals

      const normals = this.normals;

      for (let i = 0; i < this.indices.length / 3; i++) {
        const i3 = i * 3;
        const a = this.indices[i3];
        const b = this.indices[i3 + 1];
        const c = this.indices[i3 + 2];
        this.getVertex(a, va);
        this.getVertex(b, vb);
        this.getVertex(c, vc);
        Trimesh.computeNormal(vb, va, vc, n);
        normals[i3] = n.x;
        normals[i3 + 1] = n.y;
        normals[i3 + 2] = n.z;
      }
    }
    /**
     * Update the `.edges` property
     */


    updateEdges() {
      const edges = {};

      const add = (a, b) => {
        const key = a < b ? `${a}_${b}` : `${b}_${a}`;
        edges[key] = true;
      };

      for (let i = 0; i < this.indices.length / 3; i++) {
        const i3 = i * 3;
        const a = this.indices[i3];
        const b = this.indices[i3 + 1];
        const c = this.indices[i3 + 2];
        add(a, b);
        add(b, c);
        add(c, a);
      }

      const keys = Object.keys(edges);
      this.edges = new Int16Array(keys.length * 2);

      for (let i = 0; i < keys.length; i++) {
        const indices = keys[i].split('_');
        this.edges[2 * i] = parseInt(indices[0], 10);
        this.edges[2 * i + 1] = parseInt(indices[1], 10);
      }
    }
    /**
     * Get an edge vertex
     * @param firstOrSecond 0 or 1, depending on which one of the vertices you need.
     * @param vertexStore Where to store the result
     */


    getEdgeVertex(edgeIndex, firstOrSecond, vertexStore) {
      const vertexIndex = this.edges[edgeIndex * 2 + (firstOrSecond ? 1 : 0)];
      this.getVertex(vertexIndex, vertexStore);
    }
    /**
     * Get a vector along an edge.
     */


    getEdgeVector(edgeIndex, vectorStore) {
      const va = getEdgeVector_va;
      const vb = getEdgeVector_vb;
      this.getEdgeVertex(edgeIndex, 0, va);
      this.getEdgeVertex(edgeIndex, 1, vb);
      vb.vsub(va, vectorStore);
    }
    /**
     * Get face normal given 3 vertices
     */


    static computeNormal(va, vb, vc, target) {
      vb.vsub(va, ab);
      vc.vsub(vb, cb);
      cb.cross(ab, target);

      if (!target.isZero()) {
        target.normalize();
      }
    }
    /**
     * Get vertex i.
     * @return The "out" vector object
     */


    getVertex(i, out) {
      const scale = this.scale;

      this._getUnscaledVertex(i, out);

      out.x *= scale.x;
      out.y *= scale.y;
      out.z *= scale.z;
      return out;
    }
    /**
     * Get raw vertex i
     * @return The "out" vector object
     */


    _getUnscaledVertex(i, out) {
      const i3 = i * 3;
      const vertices = this.vertices;
      return out.set(vertices[i3], vertices[i3 + 1], vertices[i3 + 2]);
    }
    /**
     * Get a vertex from the trimesh,transformed by the given position and quaternion.
     * @return The "out" vector object
     */


    getWorldVertex(i, pos, quat, out) {
      this.getVertex(i, out);
      Transform.pointToWorldFrame(pos, quat, out, out);
      return out;
    }
    /**
     * Get the three vertices for triangle i.
     */


    getTriangleVertices(i, a, b, c) {
      const i3 = i * 3;
      this.getVertex(this.indices[i3], a);
      this.getVertex(this.indices[i3 + 1], b);
      this.getVertex(this.indices[i3 + 2], c);
    }
    /**
     * Compute the normal of triangle i.
     * @return The "target" vector object
     */


    getNormal(i, target) {
      const i3 = i * 3;
      return target.set(this.normals[i3], this.normals[i3 + 1], this.normals[i3 + 2]);
    }
    /**
     * @return The "target" vector object
     */


    calculateLocalInertia(mass, target) {
      // Approximate with box inertia
      // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it
      this.computeLocalAABB(cli_aabb);
      const x = cli_aabb.upperBound.x - cli_aabb.lowerBound.x;
      const y = cli_aabb.upperBound.y - cli_aabb.lowerBound.y;
      const z = cli_aabb.upperBound.z - cli_aabb.lowerBound.z;
      return target.set(1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * z * 2 * z), 1.0 / 12.0 * mass * (2 * x * 2 * x + 2 * z * 2 * z), 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * x * 2 * x));
    }
    /**
     * Compute the local AABB for the trimesh
     */


    computeLocalAABB(aabb) {
      const l = aabb.lowerBound;
      const u = aabb.upperBound;
      const n = this.vertices.length;
      this.vertices;
      const v = computeLocalAABB_worldVert;
      this.getVertex(0, v);
      l.copy(v);
      u.copy(v);

      for (let i = 0; i !== n; i++) {
        this.getVertex(i, v);

        if (v.x < l.x) {
          l.x = v.x;
        } else if (v.x > u.x) {
          u.x = v.x;
        }

        if (v.y < l.y) {
          l.y = v.y;
        } else if (v.y > u.y) {
          u.y = v.y;
        }

        if (v.z < l.z) {
          l.z = v.z;
        } else if (v.z > u.z) {
          u.z = v.z;
        }
      }
    }
    /**
     * Update the `.aabb` property
     */


    updateAABB() {
      this.computeLocalAABB(this.aabb);
    }
    /**
     * Will update the `.boundingSphereRadius` property
     */


    updateBoundingSphereRadius() {
      // Assume points are distributed with local (0,0,0) as center
      let max2 = 0;
      const vertices = this.vertices;
      const v = new Vec3();

      for (let i = 0, N = vertices.length / 3; i !== N; i++) {
        this.getVertex(i, v);
        const norm2 = v.lengthSquared();

        if (norm2 > max2) {
          max2 = norm2;
        }
      }

      this.boundingSphereRadius = Math.sqrt(max2);
    }
    /**
     * calculateWorldAABB
     */


    calculateWorldAABB(pos, quat, min, max) {
      /*
          const n = this.vertices.length / 3,
              verts = this.vertices;
          const minx,miny,minz,maxx,maxy,maxz;
           const v = tempWorldVertex;
          for(let i=0; i<n; i++){
              this.getVertex(i, v);
              quat.vmult(v, v);
              pos.vadd(v, v);
              if (v.x < minx || minx===undefined){
                  minx = v.x;
              } else if(v.x > maxx || maxx===undefined){
                  maxx = v.x;
              }
               if (v.y < miny || miny===undefined){
                  miny = v.y;
              } else if(v.y > maxy || maxy===undefined){
                  maxy = v.y;
              }
               if (v.z < minz || minz===undefined){
                  minz = v.z;
              } else if(v.z > maxz || maxz===undefined){
                  maxz = v.z;
              }
          }
          min.set(minx,miny,minz);
          max.set(maxx,maxy,maxz);
          */
      // Faster approximation using local AABB
      const frame = calculateWorldAABB_frame;
      const result = calculateWorldAABB_aabb;
      frame.position = pos;
      frame.quaternion = quat;
      this.aabb.toWorldFrame(frame, result);
      min.copy(result.lowerBound);
      max.copy(result.upperBound);
    }
    /**
     * Get approximate volume
     */


    volume() {
      return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;
    }
    /**
     * Create a Trimesh instance, shaped as a torus.
     */


    static createTorus(radius, tube, radialSegments, tubularSegments, arc) {
      if (radius === void 0) {
        radius = 1;
      }

      if (tube === void 0) {
        tube = 0.5;
      }

      if (radialSegments === void 0) {
        radialSegments = 8;
      }

      if (tubularSegments === void 0) {
        tubularSegments = 6;
      }

      if (arc === void 0) {
        arc = Math.PI * 2;
      }

      const vertices = [];
      const indices = [];

      for (let j = 0; j <= radialSegments; j++) {
        for (let i = 0; i <= tubularSegments; i++) {
          const u = i / tubularSegments * arc;
          const v = j / radialSegments * Math.PI * 2;
          const x = (radius + tube * Math.cos(v)) * Math.cos(u);
          const y = (radius + tube * Math.cos(v)) * Math.sin(u);
          const z = tube * Math.sin(v);
          vertices.push(x, y, z);
        }
      }

      for (let j = 1; j <= radialSegments; j++) {
        for (let i = 1; i <= tubularSegments; i++) {
          const a = (tubularSegments + 1) * j + i - 1;
          const b = (tubularSegments + 1) * (j - 1) + i - 1;
          const c = (tubularSegments + 1) * (j - 1) + i;
          const d = (tubularSegments + 1) * j + i;
          indices.push(a, b, d);
          indices.push(b, c, d);
        }
      }

      return new Trimesh(vertices, indices);
    }

  }
  const computeNormals_n = new Vec3();
  const unscaledAABB = new AABB();
  const getEdgeVector_va = new Vec3();
  const getEdgeVector_vb = new Vec3();
  const cb = new Vec3();
  const ab = new Vec3();
  const va = new Vec3();
  const vb = new Vec3();
  const vc = new Vec3();
  const cli_aabb = new AABB();
  const computeLocalAABB_worldVert = new Vec3();
  const calculateWorldAABB_frame = new Transform();
  const calculateWorldAABB_aabb = new AABB();

  /**
   * Constraint equation solver base class.
   */
  class Solver {
    /**
     * All equations to be solved
     */

    /**
     * @todo remove useless constructor
     */
    constructor() {
      this.equations = [];
    }
    /**
     * Should be implemented in subclasses!
     * @todo use abstract
     * @return number of iterations performed
     */


    solve(dt, world) {
      return (// Should return the number of iterations done!
        0
      );
    }
    /**
     * Add an equation
     */


    addEquation(eq) {
      if (eq.enabled && !eq.bi.isTrigger && !eq.bj.isTrigger) {
        this.equations.push(eq);
      }
    }
    /**
     * Remove an equation
     */


    removeEquation(eq) {
      const eqs = this.equations;
      const i = eqs.indexOf(eq);

      if (i !== -1) {
        eqs.splice(i, 1);
      }
    }
    /**
     * Add all equations
     */


    removeAllEquations() {
      this.equations.length = 0;
    }

  }

  /**
   * Constraint equation Gauss-Seidel solver.
   * @todo The spook parameters should be specified for each constraint, not globally.
   * @see https://www8.cs.umu.se/kurser/5DV058/VT09/lectures/spooknotes.pdf
   */
  class GSSolver extends Solver {
    /**
     * The number of solver iterations determines quality of the constraints in the world.
     * The more iterations, the more correct simulation. More iterations need more computations though. If you have a large gravity force in your world, you will need more iterations.
     */

    /**
     * When tolerance is reached, the system is assumed to be converged.
     */

    /**
     * @todo remove useless constructor
     */
    constructor() {
      super();
      this.iterations = 10;
      this.tolerance = 1e-7;
    }
    /**
     * Solve
     * @return number of iterations performed
     */


    solve(dt, world) {
      let iter = 0;
      const maxIter = this.iterations;
      const tolSquared = this.tolerance * this.tolerance;
      const equations = this.equations;
      const Neq = equations.length;
      const bodies = world.bodies;
      const Nbodies = bodies.length;
      const h = dt;
      let B;
      let invC;
      let deltalambda;
      let deltalambdaTot;
      let GWlambda;
      let lambdaj; // Update solve mass

      if (Neq !== 0) {
        for (let i = 0; i !== Nbodies; i++) {
          bodies[i].updateSolveMassProperties();
        }
      } // Things that do not change during iteration can be computed once


      const invCs = GSSolver_solve_invCs;
      const Bs = GSSolver_solve_Bs;
      const lambda = GSSolver_solve_lambda;
      invCs.length = Neq;
      Bs.length = Neq;
      lambda.length = Neq;

      for (let i = 0; i !== Neq; i++) {
        const c = equations[i];
        lambda[i] = 0.0;
        Bs[i] = c.computeB(h);
        invCs[i] = 1.0 / c.computeC();
      }

      if (Neq !== 0) {
        // Reset vlambda
        for (let i = 0; i !== Nbodies; i++) {
          const b = bodies[i];
          const vlambda = b.vlambda;
          const wlambda = b.wlambda;
          vlambda.set(0, 0, 0);
          wlambda.set(0, 0, 0);
        } // Iterate over equations


        for (iter = 0; iter !== maxIter; iter++) {
          // Accumulate the total error for each iteration.
          deltalambdaTot = 0.0;

          for (let j = 0; j !== Neq; j++) {
            const c = equations[j]; // Compute iteration

            B = Bs[j];
            invC = invCs[j];
            lambdaj = lambda[j];
            GWlambda = c.computeGWlambda();
            deltalambda = invC * (B - GWlambda - c.eps * lambdaj); // Clamp if we are not within the min/max interval

            if (lambdaj + deltalambda < c.minForce) {
              deltalambda = c.minForce - lambdaj;
            } else if (lambdaj + deltalambda > c.maxForce) {
              deltalambda = c.maxForce - lambdaj;
            }

            lambda[j] += deltalambda;
            deltalambdaTot += deltalambda > 0.0 ? deltalambda : -deltalambda; // abs(deltalambda)

            c.addToWlambda(deltalambda);
          } // If the total error is small enough - stop iterate


          if (deltalambdaTot * deltalambdaTot < tolSquared) {
            break;
          }
        } // Add result to velocity


        for (let i = 0; i !== Nbodies; i++) {
          const b = bodies[i];
          const v = b.velocity;
          const w = b.angularVelocity;
          b.vlambda.vmul(b.linearFactor, b.vlambda);
          v.vadd(b.vlambda, v);
          b.wlambda.vmul(b.angularFactor, b.wlambda);
          w.vadd(b.wlambda, w);
        } // Set the `.multiplier` property of each equation


        let l = equations.length;
        const invDt = 1 / h;

        while (l--) {
          equations[l].multiplier = lambda[l] * invDt;
        }
      }

      return iter;
    }

  } // Just temporary number holders that we want to reuse each iteration.

  const GSSolver_solve_lambda = [];
  const GSSolver_solve_invCs = [];
  const GSSolver_solve_Bs = [];

  /**
   * Splits the equations into islands and solves them independently. Can improve performance.
   */
  class SplitSolver extends Solver {
    /**
     * The number of solver iterations determines quality of the constraints in the world. The more iterations, the more correct simulation. More iterations need more computations though. If you have a large gravity force in your world, you will need more iterations.
     */

    /**
     * When tolerance is reached, the system is assumed to be converged.
     */

    /** subsolver */
    constructor(subsolver) {
      super();
      this.iterations = 10;
      this.tolerance = 1e-7;
      this.subsolver = subsolver;
      this.nodes = [];
      this.nodePool = []; // Create needed nodes, reuse if possible

      while (this.nodePool.length < 128) {
        this.nodePool.push(this.createNode());
      }
    }
    /**
     * createNode
     */


    createNode() {
      return {
        body: null,
        children: [],
        eqs: [],
        visited: false
      };
    }
    /**
     * Solve the subsystems
     * @return number of iterations performed
     */


    solve(dt, world) {
      const nodes = SplitSolver_solve_nodes;
      const nodePool = this.nodePool;
      const bodies = world.bodies;
      const equations = this.equations;
      const Neq = equations.length;
      const Nbodies = bodies.length;
      const subsolver = this.subsolver; // Create needed nodes, reuse if possible

      while (nodePool.length < Nbodies) {
        nodePool.push(this.createNode());
      }

      nodes.length = Nbodies;

      for (let i = 0; i < Nbodies; i++) {
        nodes[i] = nodePool[i];
      } // Reset node values


      for (let i = 0; i !== Nbodies; i++) {
        const node = nodes[i];
        node.body = bodies[i];
        node.children.length = 0;
        node.eqs.length = 0;
        node.visited = false;
      }

      for (let k = 0; k !== Neq; k++) {
        const eq = equations[k];
        const i = bodies.indexOf(eq.bi);
        const j = bodies.indexOf(eq.bj);
        const ni = nodes[i];
        const nj = nodes[j];
        ni.children.push(nj);
        ni.eqs.push(eq);
        nj.children.push(ni);
        nj.eqs.push(eq);
      }

      let child;
      let n = 0;
      let eqs = SplitSolver_solve_eqs;
      subsolver.tolerance = this.tolerance;
      subsolver.iterations = this.iterations;
      const dummyWorld = SplitSolver_solve_dummyWorld;

      while (child = getUnvisitedNode(nodes)) {
        eqs.length = 0;
        dummyWorld.bodies.length = 0;
        bfs(child, visitFunc, dummyWorld.bodies, eqs);
        const Neqs = eqs.length;
        eqs = eqs.sort(sortById);

        for (let i = 0; i !== Neqs; i++) {
          subsolver.addEquation(eqs[i]);
        }

        subsolver.solve(dt, dummyWorld);
        subsolver.removeAllEquations();
        n++;
      }

      return n;
    }

  } // Returns the number of subsystems

  const SplitSolver_solve_nodes = []; // All allocated node objects

  const SplitSolver_solve_eqs = []; // Temp array

  const SplitSolver_solve_dummyWorld = {
    bodies: []
  }; // Temp object

  const STATIC = Body.STATIC;

  function getUnvisitedNode(nodes) {
    const Nnodes = nodes.length;

    for (let i = 0; i !== Nnodes; i++) {
      const node = nodes[i];

      if (!node.visited && !(node.body.type & STATIC)) {
        return node;
      }
    }

    return false;
  }

  const queue = [];

  function bfs(root, visitFunc, bds, eqs) {
    queue.push(root);
    root.visited = true;
    visitFunc(root, bds, eqs);

    while (queue.length) {
      const node = queue.pop(); // Loop over unvisited child nodes

      let child;

      while (child = getUnvisitedNode(node.children)) {
        child.visited = true;
        visitFunc(child, bds, eqs);
        queue.push(child);
      }
    }
  }

  function visitFunc(node, bds, eqs) {
    bds.push(node.body);
    const Neqs = node.eqs.length;

    for (let i = 0; i !== Neqs; i++) {
      const eq = node.eqs[i];

      if (!eqs.includes(eq)) {
        eqs.push(eq);
      }
    }
  }

  function sortById(a, b) {
    return b.id - a.id;
  }

  /**
   * For pooling objects that can be reused.
   */
  class Pool {
    constructor() {
      this.objects = [];
      this.type = Object;
    }

    /**
     * Release an object after use
     */
    release() {
      const Nargs = arguments.length;

      for (let i = 0; i !== Nargs; i++) {
        this.objects.push(i < 0 || arguments.length <= i ? undefined : arguments[i]);
      }

      return this;
    }
    /**
     * Get an object
     */


    get() {
      if (this.objects.length === 0) {
        return this.constructObject();
      } else {
        return this.objects.pop();
      }
    }
    /**
     * Construct an object. Should be implemented in each subclass.
     */


    constructObject() {
      throw new Error('constructObject() not implemented in this Pool subclass yet!');
    }
    /**
     * @return Self, for chaining
     */


    resize(size) {
      const objects = this.objects;

      while (objects.length > size) {
        objects.pop();
      }

      while (objects.length < size) {
        objects.push(this.constructObject());
      }

      return this;
    }

  }

  /**
   * Vec3Pool
   */

  class Vec3Pool extends Pool {
    constructor() {
      super(...arguments);
      this.type = Vec3;
    }

    /**
     * Construct a vector
     */
    constructObject() {
      return new Vec3();
    }

  }

  // Naming rule: based of the order in SHAPE_TYPES,
  // the first part of the method is formed by the
  // shape type that comes before, in the second part
  // there is the shape type that comes after in the SHAPE_TYPES list
  const COLLISION_TYPES = {
    sphereSphere: Shape.types.SPHERE,
    spherePlane: Shape.types.SPHERE | Shape.types.PLANE,
    boxBox: Shape.types.BOX | Shape.types.BOX,
    sphereBox: Shape.types.SPHERE | Shape.types.BOX,
    planeBox: Shape.types.PLANE | Shape.types.BOX,
    convexConvex: Shape.types.CONVEXPOLYHEDRON,
    sphereConvex: Shape.types.SPHERE | Shape.types.CONVEXPOLYHEDRON,
    planeConvex: Shape.types.PLANE | Shape.types.CONVEXPOLYHEDRON,
    boxConvex: Shape.types.BOX | Shape.types.CONVEXPOLYHEDRON,
    sphereHeightfield: Shape.types.SPHERE | Shape.types.HEIGHTFIELD,
    boxHeightfield: Shape.types.BOX | Shape.types.HEIGHTFIELD,
    convexHeightfield: Shape.types.CONVEXPOLYHEDRON | Shape.types.HEIGHTFIELD,
    sphereParticle: Shape.types.PARTICLE | Shape.types.SPHERE,
    planeParticle: Shape.types.PLANE | Shape.types.PARTICLE,
    boxParticle: Shape.types.BOX | Shape.types.PARTICLE,
    convexParticle: Shape.types.PARTICLE | Shape.types.CONVEXPOLYHEDRON,
    cylinderCylinder: Shape.types.CYLINDER,
    sphereCylinder: Shape.types.SPHERE | Shape.types.CYLINDER,
    planeCylinder: Shape.types.PLANE | Shape.types.CYLINDER,
    boxCylinder: Shape.types.BOX | Shape.types.CYLINDER,
    convexCylinder: Shape.types.CONVEXPOLYHEDRON | Shape.types.CYLINDER,
    heightfieldCylinder: Shape.types.HEIGHTFIELD | Shape.types.CYLINDER,
    particleCylinder: Shape.types.PARTICLE | Shape.types.CYLINDER,
    sphereTrimesh: Shape.types.SPHERE | Shape.types.TRIMESH,
    planeTrimesh: Shape.types.PLANE | Shape.types.TRIMESH
  };

  /**
   * Helper class for the World. Generates ContactEquations.
   * @todo Sphere-ConvexPolyhedron contacts
   * @todo Contact reduction
   * @todo should move methods to prototype
   */
  class Narrowphase {
    /**
     * Internal storage of pooled contact points.
     */

    /**
     * Pooled vectors.
     */
    get [COLLISION_TYPES.sphereSphere]() {
      return this.sphereSphere;
    }

    get [COLLISION_TYPES.spherePlane]() {
      return this.spherePlane;
    }

    get [COLLISION_TYPES.boxBox]() {
      return this.boxBox;
    }

    get [COLLISION_TYPES.sphereBox]() {
      return this.sphereBox;
    }

    get [COLLISION_TYPES.planeBox]() {
      return this.planeBox;
    }

    get [COLLISION_TYPES.convexConvex]() {
      return this.convexConvex;
    }

    get [COLLISION_TYPES.sphereConvex]() {
      return this.sphereConvex;
    }

    get [COLLISION_TYPES.planeConvex]() {
      return this.planeConvex;
    }

    get [COLLISION_TYPES.boxConvex]() {
      return this.boxConvex;
    }

    get [COLLISION_TYPES.sphereHeightfield]() {
      return this.sphereHeightfield;
    }

    get [COLLISION_TYPES.boxHeightfield]() {
      return this.boxHeightfield;
    }

    get [COLLISION_TYPES.convexHeightfield]() {
      return this.convexHeightfield;
    }

    get [COLLISION_TYPES.sphereParticle]() {
      return this.sphereParticle;
    }

    get [COLLISION_TYPES.planeParticle]() {
      return this.planeParticle;
    }

    get [COLLISION_TYPES.boxParticle]() {
      return this.boxParticle;
    }

    get [COLLISION_TYPES.convexParticle]() {
      return this.convexParticle;
    }

    get [COLLISION_TYPES.cylinderCylinder]() {
      return this.convexConvex;
    }

    get [COLLISION_TYPES.sphereCylinder]() {
      return this.sphereConvex;
    }

    get [COLLISION_TYPES.planeCylinder]() {
      return this.planeConvex;
    }

    get [COLLISION_TYPES.boxCylinder]() {
      return this.boxConvex;
    }

    get [COLLISION_TYPES.convexCylinder]() {
      return this.convexConvex;
    }

    get [COLLISION_TYPES.heightfieldCylinder]() {
      return this.heightfieldCylinder;
    }

    get [COLLISION_TYPES.particleCylinder]() {
      return this.particleCylinder;
    }

    get [COLLISION_TYPES.sphereTrimesh]() {
      return this.sphereTrimesh;
    }

    get [COLLISION_TYPES.planeTrimesh]() {
      return this.planeTrimesh;
    } // get [COLLISION_TYPES.convexTrimesh]() {
    //   return this.convexTrimesh
    // }


    constructor(world) {
      this.contactPointPool = [];
      this.frictionEquationPool = [];
      this.result = [];
      this.frictionResult = [];
      this.v3pool = new Vec3Pool();
      this.world = world;
      this.currentContactMaterial = world.defaultContactMaterial;
      this.enableFrictionReduction = false;
    }
    /**
     * Make a contact object, by using the internal pool or creating a new one.
     */


    createContactEquation(bi, bj, si, sj, overrideShapeA, overrideShapeB) {
      let c;

      if (this.contactPointPool.length) {
        c = this.contactPointPool.pop();
        c.bi = bi;
        c.bj = bj;
      } else {
        c = new ContactEquation(bi, bj);
      }

      c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;
      const cm = this.currentContactMaterial;
      c.restitution = cm.restitution;
      c.setSpookParams(cm.contactEquationStiffness, cm.contactEquationRelaxation, this.world.dt);
      const matA = si.material || bi.material;
      const matB = sj.material || bj.material;

      if (matA && matB && matA.restitution >= 0 && matB.restitution >= 0) {
        c.restitution = matA.restitution * matB.restitution;
      }

      c.si = overrideShapeA || si;
      c.sj = overrideShapeB || sj;
      return c;
    }

    createFrictionEquationsFromContact(contactEquation, outArray) {
      const bodyA = contactEquation.bi;
      const bodyB = contactEquation.bj;
      const shapeA = contactEquation.si;
      const shapeB = contactEquation.sj;
      const world = this.world;
      const cm = this.currentContactMaterial; // If friction or restitution were specified in the material, use them

      let friction = cm.friction;
      const matA = shapeA.material || bodyA.material;
      const matB = shapeB.material || bodyB.material;

      if (matA && matB && matA.friction >= 0 && matB.friction >= 0) {
        friction = matA.friction * matB.friction;
      }

      if (friction > 0) {
        // Create 2 tangent equations
        // Users may provide a force different from global gravity to use when computing contact friction.
        const mug = friction * (world.frictionGravity || world.gravity).length();
        let reducedMass = bodyA.invMass + bodyB.invMass;

        if (reducedMass > 0) {
          reducedMass = 1 / reducedMass;
        }

        const pool = this.frictionEquationPool;
        const c1 = pool.length ? pool.pop() : new FrictionEquation(bodyA, bodyB, mug * reducedMass);
        const c2 = pool.length ? pool.pop() : new FrictionEquation(bodyA, bodyB, mug * reducedMass);
        c1.bi = c2.bi = bodyA;
        c1.bj = c2.bj = bodyB;
        c1.minForce = c2.minForce = -mug * reducedMass;
        c1.maxForce = c2.maxForce = mug * reducedMass; // Copy over the relative vectors

        c1.ri.copy(contactEquation.ri);
        c1.rj.copy(contactEquation.rj);
        c2.ri.copy(contactEquation.ri);
        c2.rj.copy(contactEquation.rj); // Construct tangents

        contactEquation.ni.tangents(c1.t, c2.t); // Set spook params

        c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);
        c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);
        c1.enabled = c2.enabled = contactEquation.enabled;
        outArray.push(c1, c2);
        return true;
      }

      return false;
    }
    /**
     * Take the average N latest contact point on the plane.
     */


    createFrictionFromAverage(numContacts) {
      // The last contactEquation
      let c = this.result[this.result.length - 1]; // Create the result: two "average" friction equations

      if (!this.createFrictionEquationsFromContact(c, this.frictionResult) || numContacts === 1) {
        return;
      }

      const f1 = this.frictionResult[this.frictionResult.length - 2];
      const f2 = this.frictionResult[this.frictionResult.length - 1];
      averageNormal.setZero();
      averageContactPointA.setZero();
      averageContactPointB.setZero();
      const bodyA = c.bi;
      c.bj;

      for (let i = 0; i !== numContacts; i++) {
        c = this.result[this.result.length - 1 - i];

        if (c.bi !== bodyA) {
          averageNormal.vadd(c.ni, averageNormal);
          averageContactPointA.vadd(c.ri, averageContactPointA);
          averageContactPointB.vadd(c.rj, averageContactPointB);
        } else {
          averageNormal.vsub(c.ni, averageNormal);
          averageContactPointA.vadd(c.rj, averageContactPointA);
          averageContactPointB.vadd(c.ri, averageContactPointB);
        }
      }

      const invNumContacts = 1 / numContacts;
      averageContactPointA.scale(invNumContacts, f1.ri);
      averageContactPointB.scale(invNumContacts, f1.rj);
      f2.ri.copy(f1.ri); // Should be the same

      f2.rj.copy(f1.rj);
      averageNormal.normalize();
      averageNormal.tangents(f1.t, f2.t); // return eq;
    }
    /**
     * Generate all contacts between a list of body pairs
     * @param p1 Array of body indices
     * @param p2 Array of body indices
     * @param result Array to store generated contacts
     * @param oldcontacts Optional. Array of reusable contact objects
     */


    getContacts(p1, p2, world, result, oldcontacts, frictionResult, frictionPool) {
      // Save old contact objects
      this.contactPointPool = oldcontacts;
      this.frictionEquationPool = frictionPool;
      this.result = result;
      this.frictionResult = frictionResult;
      const qi = tmpQuat1;
      const qj = tmpQuat2;
      const xi = tmpVec1;
      const xj = tmpVec2;

      for (let k = 0, N = p1.length; k !== N; k++) {
        // Get current collision bodies
        const bi = p1[k];
        const bj = p2[k]; // Get contact material

        let bodyContactMaterial = null;

        if (bi.material && bj.material) {
          bodyContactMaterial = world.getContactMaterial(bi.material, bj.material) || null;
        }

        const justTest = bi.type & Body.KINEMATIC && bj.type & Body.STATIC || bi.type & Body.STATIC && bj.type & Body.KINEMATIC || bi.type & Body.KINEMATIC && bj.type & Body.KINEMATIC;

        for (let i = 0; i < bi.shapes.length; i++) {
          bi.quaternion.mult(bi.shapeOrientations[i], qi);
          bi.quaternion.vmult(bi.shapeOffsets[i], xi);
          xi.vadd(bi.position, xi);
          const si = bi.shapes[i];

          for (let j = 0; j < bj.shapes.length; j++) {
            // Compute world transform of shapes
            bj.quaternion.mult(bj.shapeOrientations[j], qj);
            bj.quaternion.vmult(bj.shapeOffsets[j], xj);
            xj.vadd(bj.position, xj);
            const sj = bj.shapes[j];

            if (!(si.collisionFilterMask & sj.collisionFilterGroup && sj.collisionFilterMask & si.collisionFilterGroup)) {
              continue;
            }

            if (xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius) {
              continue;
            } // Get collision material


            let shapeContactMaterial = null;

            if (si.material && sj.material) {
              shapeContactMaterial = world.getContactMaterial(si.material, sj.material) || null;
            }

            this.currentContactMaterial = shapeContactMaterial || bodyContactMaterial || world.defaultContactMaterial; // Get contacts

            const resolverIndex = si.type | sj.type;
            const resolver = this[resolverIndex];

            if (resolver) {
              let retval = false; // TO DO: investigate why sphereParticle and convexParticle
              // resolvers expect si and sj shapes to be in reverse order
              // (i.e. larger integer value type first instead of smaller first)

              if (si.type < sj.type) {
                retval = resolver.call(this, si, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);
              } else {
                retval = resolver.call(this, sj, si, xj, xi, qj, qi, bj, bi, si, sj, justTest);
              }

              if (retval && justTest) {
                // Register overlap
                world.shapeOverlapKeeper.set(si.id, sj.id);
                world.bodyOverlapKeeper.set(bi.id, bj.id);
              }
            }
          }
        }
      }
    }

    sphereSphere(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {
      if (justTest) {
        return xi.distanceSquared(xj) < (si.radius + sj.radius) ** 2;
      } // We will have only one contact in this case


      const contactEq = this.createContactEquation(bi, bj, si, sj, rsi, rsj); // Contact normal

      xj.vsub(xi, contactEq.ni);
      contactEq.ni.normalize(); // Contact point locations

      contactEq.ri.copy(contactEq.ni);
      contactEq.rj.copy(contactEq.ni);
      contactEq.ri.scale(si.radius, contactEq.ri);
      contactEq.rj.scale(-sj.radius, contactEq.rj);
      contactEq.ri.vadd(xi, contactEq.ri);
      contactEq.ri.vsub(bi.position, contactEq.ri);
      contactEq.rj.vadd(xj, contactEq.rj);
      contactEq.rj.vsub(bj.position, contactEq.rj);
      this.result.push(contactEq);
      this.createFrictionEquationsFromContact(contactEq, this.frictionResult);
    }

    spherePlane(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {
      // We will have one contact in this case
      const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj); // Contact normal

      r.ni.set(0, 0, 1);
      qj.vmult(r.ni, r.ni);
      r.ni.negate(r.ni); // body i is the sphere, flip normal

      r.ni.normalize(); // Needed?
      // Vector from sphere center to contact point

      r.ni.scale(si.radius, r.ri); // Project down sphere on plane

      xi.vsub(xj, point_on_plane_to_sphere);
      r.ni.scale(r.ni.dot(point_on_plane_to_sphere), plane_to_sphere_ortho);
      point_on_plane_to_sphere.vsub(plane_to_sphere_ortho, r.rj); // The sphere position projected to plane

      if (-point_on_plane_to_sphere.dot(r.ni) <= si.radius) {
        if (justTest) {
          return true;
        } // Make it relative to the body


        const ri = r.ri;
        const rj = r.rj;
        ri.vadd(xi, ri);
        ri.vsub(bi.position, ri);
        rj.vadd(xj, rj);
        rj.vsub(bj.position, rj);
        this.result.push(r);
        this.createFrictionEquationsFromContact(r, this.frictionResult);
      }
    }

    boxBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {
      si.convexPolyhedronRepresentation.material = si.material;
      sj.convexPolyhedronRepresentation.material = sj.material;
      si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;
      sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;
      return this.convexConvex(si.convexPolyhedronRepresentation, sj.convexPolyhedronRepresentation, xi, xj, qi, qj, bi, bj, si, sj, justTest);
    }

    sphereBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {
      const v3pool = this.v3pool; // we refer to the box as body j

      const sides = sphereBox_sides;
      xi.vsub(xj, box_to_sphere);
      sj.getSideNormals(sides, qj);
      const R = si.radius;

      let found = false; // Store the resulting side penetration info

      const side_ns = sphereBox_side_ns;
      const side_ns1 = sphereBox_side_ns1;
      const side_ns2 = sphereBox_side_ns2;
      let side_h = null;
      let side_penetrations = 0;
      let side_dot1 = 0;
      let side_dot2 = 0;
      let side_distance = null;

      for (let idx = 0, nsides = sides.length; idx !== nsides && found === false; idx++) {
        // Get the plane side normal (ns)
        const ns = sphereBox_ns;
        ns.copy(sides[idx]);
        const h = ns.length();
        ns.normalize(); // The normal/distance dot product tells which side of the plane we are

        const dot = box_to_sphere.dot(ns);

        if (dot < h + R && dot > 0) {
          // Intersects plane. Now check the other two dimensions
          const ns1 = sphereBox_ns1;
          const ns2 = sphereBox_ns2;
          ns1.copy(sides[(idx + 1) % 3]);
          ns2.copy(sides[(idx + 2) % 3]);
          const h1 = ns1.length();
          const h2 = ns2.length();
          ns1.normalize();
          ns2.normalize();
          const dot1 = box_to_sphere.dot(ns1);
          const dot2 = box_to_sphere.dot(ns2);

          if (dot1 < h1 && dot1 > -h1 && dot2 < h2 && dot2 > -h2) {
            const dist = Math.abs(dot - h - R);

            if (side_distance === null || dist < side_distance) {
              side_distance = dist;
              side_dot1 = dot1;
              side_dot2 = dot2;
              side_h = h;
              side_ns.copy(ns);
              side_ns1.copy(ns1);
              side_ns2.copy(ns2);
              side_penetrations++;

              if (justTest) {
                return true;
              }
            }
          }
        }
      }

      if (side_penetrations) {
        found = true;
        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
        side_ns.scale(-R, r.ri); // Sphere r

        r.ni.copy(side_ns);
        r.ni.negate(r.ni); // Normal should be out of sphere

        side_ns.scale(side_h, side_ns);
        side_ns1.scale(side_dot1, side_ns1);
        side_ns.vadd(side_ns1, side_ns);
        side_ns2.scale(side_dot2, side_ns2);
        side_ns.vadd(side_ns2, r.rj); // Make relative to bodies

        r.ri.vadd(xi, r.ri);
        r.ri.vsub(bi.position, r.ri);
        r.rj.vadd(xj, r.rj);
        r.rj.vsub(bj.position, r.rj);
        this.result.push(r);
        this.createFrictionEquationsFromContact(r, this.frictionResult);
      } // Check corners


      let rj = v3pool.get();
      const sphere_to_corner = sphereBox_sphere_to_corner;

      for (let j = 0; j !== 2 && !found; j++) {
        for (let k = 0; k !== 2 && !found; k++) {
          for (let l = 0; l !== 2 && !found; l++) {
            rj.set(0, 0, 0);

            if (j) {
              rj.vadd(sides[0], rj);
            } else {
              rj.vsub(sides[0], rj);
            }

            if (k) {
              rj.vadd(sides[1], rj);
            } else {
              rj.vsub(sides[1], rj);
            }

            if (l) {
              rj.vadd(sides[2], rj);
            } else {
              rj.vsub(sides[2], rj);
            } // World position of corner


            xj.vadd(rj, sphere_to_corner);
            sphere_to_corner.vsub(xi, sphere_to_corner);

            if (sphere_to_corner.lengthSquared() < R * R) {
              if (justTest) {
                return true;
              }

              found = true;
              const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
              r.ri.copy(sphere_to_corner);
              r.ri.normalize();
              r.ni.copy(r.ri);
              r.ri.scale(R, r.ri);
              r.rj.copy(rj); // Make relative to bodies

              r.ri.vadd(xi, r.ri);
              r.ri.vsub(bi.position, r.ri);
              r.rj.vadd(xj, r.rj);
              r.rj.vsub(bj.position, r.rj);
              this.result.push(r);
              this.createFrictionEquationsFromContact(r, this.frictionResult);
            }
          }
        }
      }

      v3pool.release(rj);
      rj = null; // Check edges

      const edgeTangent = v3pool.get();
      const edgeCenter = v3pool.get();
      const r = v3pool.get(); // r = edge center to sphere center

      const orthogonal = v3pool.get();
      const dist = v3pool.get();
      const Nsides = sides.length;

      for (let j = 0; j !== Nsides && !found; j++) {
        for (let k = 0; k !== Nsides && !found; k++) {
          if (j % 3 !== k % 3) {
            // Get edge tangent
            sides[k].cross(sides[j], edgeTangent);
            edgeTangent.normalize();
            sides[j].vadd(sides[k], edgeCenter);
            r.copy(xi);
            r.vsub(edgeCenter, r);
            r.vsub(xj, r);
            const orthonorm = r.dot(edgeTangent); // distance from edge center to sphere center in the tangent direction

            edgeTangent.scale(orthonorm, orthogonal); // Vector from edge center to sphere center in the tangent direction
            // Find the third side orthogonal to this one

            let l = 0;

            while (l === j % 3 || l === k % 3) {
              l++;
            } // vec from edge center to sphere projected to the plane orthogonal to the edge tangent


            dist.copy(xi);
            dist.vsub(orthogonal, dist);
            dist.vsub(edgeCenter, dist);
            dist.vsub(xj, dist); // Distances in tangent direction and distance in the plane orthogonal to it

            const tdist = Math.abs(orthonorm);
            const ndist = dist.length();

            if (tdist < sides[l].length() && ndist < R) {
              if (justTest) {
                return true;
              }

              found = true;
              const res = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
              edgeCenter.vadd(orthogonal, res.rj); // box rj

              res.rj.copy(res.rj);
              dist.negate(res.ni);
              res.ni.normalize();
              res.ri.copy(res.rj);
              res.ri.vadd(xj, res.ri);
              res.ri.vsub(xi, res.ri);
              res.ri.normalize();
              res.ri.scale(R, res.ri); // Make relative to bodies

              res.ri.vadd(xi, res.ri);
              res.ri.vsub(bi.position, res.ri);
              res.rj.vadd(xj, res.rj);
              res.rj.vsub(bj.position, res.rj);
              this.result.push(res);
              this.createFrictionEquationsFromContact(res, this.frictionResult);
            }
          }
        }
      }

      v3pool.release(edgeTangent, edgeCenter, r, orthogonal, dist);
    }

    planeBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {
      sj.convexPolyhedronRepresentation.material = sj.material;
      sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;
      sj.convexPolyhedronRepresentation.id = sj.id;
      return this.planeConvex(si, sj.convexPolyhedronRepresentation, xi, xj, qi, qj, bi, bj, si, sj, justTest);
    }

    convexConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest, faceListA, faceListB) {
      const sepAxis = convexConvex_sepAxis;

      if (xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius) {
        return;
      }

      if (si.findSeparatingAxis(sj, xi, qi, xj, qj, sepAxis, faceListA, faceListB)) {
        const res = [];
        const q = convexConvex_q;
        si.clipAgainstHull(xi, qi, sj, xj, qj, sepAxis, -100, 100, res);
        let numContacts = 0;

        for (let j = 0; j !== res.length; j++) {
          if (justTest) {
            return true;
          }

          const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
          const ri = r.ri;
          const rj = r.rj;
          sepAxis.negate(r.ni);
          res[j].normal.negate(q);
          q.scale(res[j].depth, q);
          res[j].point.vadd(q, ri);
          rj.copy(res[j].point); // Contact points are in world coordinates. Transform back to relative

          ri.vsub(xi, ri);
          rj.vsub(xj, rj); // Make relative to bodies

          ri.vadd(xi, ri);
          ri.vsub(bi.position, ri);
          rj.vadd(xj, rj);
          rj.vsub(bj.position, rj);
          this.result.push(r);
          numContacts++;

          if (!this.enableFrictionReduction) {
            this.createFrictionEquationsFromContact(r, this.frictionResult);
          }
        }

        if (this.enableFrictionReduction && numContacts) {
          this.createFrictionFromAverage(numContacts);
        }
      }
    }

    sphereConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {
      const v3pool = this.v3pool;
      xi.vsub(xj, convex_to_sphere);
      const normals = sj.faceNormals;
      const faces = sj.faces;
      const verts = sj.vertices;
      const R = si.radius;
      //     return;
      // }

      let found = false; // Check corners

      for (let i = 0; i !== verts.length; i++) {
        const v = verts[i]; // World position of corner

        const worldCorner = sphereConvex_worldCorner;
        qj.vmult(v, worldCorner);
        xj.vadd(worldCorner, worldCorner);
        const sphere_to_corner = sphereConvex_sphereToCorner;
        worldCorner.vsub(xi, sphere_to_corner);

        if (sphere_to_corner.lengthSquared() < R * R) {
          if (justTest) {
            return true;
          }

          found = true;
          const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
          r.ri.copy(sphere_to_corner);
          r.ri.normalize();
          r.ni.copy(r.ri);
          r.ri.scale(R, r.ri);
          worldCorner.vsub(xj, r.rj); // Should be relative to the body.

          r.ri.vadd(xi, r.ri);
          r.ri.vsub(bi.position, r.ri); // Should be relative to the body.

          r.rj.vadd(xj, r.rj);
          r.rj.vsub(bj.position, r.rj);
          this.result.push(r);
          this.createFrictionEquationsFromContact(r, this.frictionResult);
          return;
        }
      } // Check side (plane) intersections


      for (let i = 0, nfaces = faces.length; i !== nfaces && found === false; i++) {
        const normal = normals[i];
        const face = faces[i]; // Get world-transformed normal of the face

        const worldNormal = sphereConvex_worldNormal;
        qj.vmult(normal, worldNormal); // Get a world vertex from the face

        const worldPoint = sphereConvex_worldPoint;
        qj.vmult(verts[face[0]], worldPoint);
        worldPoint.vadd(xj, worldPoint); // Get a point on the sphere, closest to the face normal

        const worldSpherePointClosestToPlane = sphereConvex_worldSpherePointClosestToPlane;
        worldNormal.scale(-R, worldSpherePointClosestToPlane);
        xi.vadd(worldSpherePointClosestToPlane, worldSpherePointClosestToPlane); // Vector from a face point to the closest point on the sphere

        const penetrationVec = sphereConvex_penetrationVec;
        worldSpherePointClosestToPlane.vsub(worldPoint, penetrationVec); // The penetration. Negative value means overlap.

        const penetration = penetrationVec.dot(worldNormal);
        const worldPointToSphere = sphereConvex_sphereToWorldPoint;
        xi.vsub(worldPoint, worldPointToSphere);

        if (penetration < 0 && worldPointToSphere.dot(worldNormal) > 0) {
          // Intersects plane. Now check if the sphere is inside the face polygon
          const faceVerts = []; // Face vertices, in world coords

          for (let j = 0, Nverts = face.length; j !== Nverts; j++) {
            const worldVertex = v3pool.get();
            qj.vmult(verts[face[j]], worldVertex);
            xj.vadd(worldVertex, worldVertex);
            faceVerts.push(worldVertex);
          }

          if (pointInPolygon(faceVerts, worldNormal, xi)) {
            // Is the sphere center in the face polygon?
            if (justTest) {
              return true;
            }

            found = true;
            const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
            worldNormal.scale(-R, r.ri); // Contact offset, from sphere center to contact

            worldNormal.negate(r.ni); // Normal pointing out of sphere

            const penetrationVec2 = v3pool.get();
            worldNormal.scale(-penetration, penetrationVec2);
            const penetrationSpherePoint = v3pool.get();
            worldNormal.scale(-R, penetrationSpherePoint); //xi.vsub(xj).vadd(penetrationSpherePoint).vadd(penetrationVec2 , r.rj);

            xi.vsub(xj, r.rj);
            r.rj.vadd(penetrationSpherePoint, r.rj);
            r.rj.vadd(penetrationVec2, r.rj); // Should be relative to the body.

            r.rj.vadd(xj, r.rj);
            r.rj.vsub(bj.position, r.rj); // Should be relative to the body.

            r.ri.vadd(xi, r.ri);
            r.ri.vsub(bi.position, r.ri);
            v3pool.release(penetrationVec2);
            v3pool.release(penetrationSpherePoint);
            this.result.push(r);
            this.createFrictionEquationsFromContact(r, this.frictionResult); // Release world vertices

            for (let j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {
              v3pool.release(faceVerts[j]);
            }

            return; // We only expect *one* face contact
          } else {
            // Edge?
            for (let j = 0; j !== face.length; j++) {
              // Get two world transformed vertices
              const v1 = v3pool.get();
              const v2 = v3pool.get();
              qj.vmult(verts[face[(j + 1) % face.length]], v1);
              qj.vmult(verts[face[(j + 2) % face.length]], v2);
              xj.vadd(v1, v1);
              xj.vadd(v2, v2); // Construct edge vector

              const edge = sphereConvex_edge;
              v2.vsub(v1, edge); // Construct the same vector, but normalized

              const edgeUnit = sphereConvex_edgeUnit;
              edge.unit(edgeUnit); // p is xi projected onto the edge

              const p = v3pool.get();
              const v1_to_xi = v3pool.get();
              xi.vsub(v1, v1_to_xi);
              const dot = v1_to_xi.dot(edgeUnit);
              edgeUnit.scale(dot, p);
              p.vadd(v1, p); // Compute a vector from p to the center of the sphere

              const xi_to_p = v3pool.get();
              p.vsub(xi, xi_to_p); // Collision if the edge-sphere distance is less than the radius
              // AND if p is in between v1 and v2

              if (dot > 0 && dot * dot < edge.lengthSquared() && xi_to_p.lengthSquared() < R * R) {
                // Collision if the edge-sphere distance is less than the radius
                // Edge contact!
                if (justTest) {
                  return true;
                }

                const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
                p.vsub(xj, r.rj);
                p.vsub(xi, r.ni);
                r.ni.normalize();
                r.ni.scale(R, r.ri); // Should be relative to the body.

                r.rj.vadd(xj, r.rj);
                r.rj.vsub(bj.position, r.rj); // Should be relative to the body.

                r.ri.vadd(xi, r.ri);
                r.ri.vsub(bi.position, r.ri);
                this.result.push(r);
                this.createFrictionEquationsFromContact(r, this.frictionResult); // Release world vertices

                for (let j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {
                  v3pool.release(faceVerts[j]);
                }

                v3pool.release(v1);
                v3pool.release(v2);
                v3pool.release(p);
                v3pool.release(xi_to_p);
                v3pool.release(v1_to_xi);
                return;
              }

              v3pool.release(v1);
              v3pool.release(v2);
              v3pool.release(p);
              v3pool.release(xi_to_p);
              v3pool.release(v1_to_xi);
            }
          } // Release world vertices


          for (let j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {
            v3pool.release(faceVerts[j]);
          }
        }
      }
    }

    planeConvex(planeShape, convexShape, planePosition, convexPosition, planeQuat, convexQuat, planeBody, convexBody, si, sj, justTest) {
      // Simply return the points behind the plane.
      const worldVertex = planeConvex_v;
      const worldNormal = planeConvex_normal;
      worldNormal.set(0, 0, 1);
      planeQuat.vmult(worldNormal, worldNormal); // Turn normal according to plane orientation

      let numContacts = 0;
      const relpos = planeConvex_relpos;

      for (let i = 0; i !== convexShape.vertices.length; i++) {
        // Get world convex vertex
        worldVertex.copy(convexShape.vertices[i]);
        convexQuat.vmult(worldVertex, worldVertex);
        convexPosition.vadd(worldVertex, worldVertex);
        worldVertex.vsub(planePosition, relpos);
        const dot = worldNormal.dot(relpos);

        if (dot <= 0.0) {
          if (justTest) {
            return true;
          }

          const r = this.createContactEquation(planeBody, convexBody, planeShape, convexShape, si, sj); // Get vertex position projected on plane

          const projected = planeConvex_projected;
          worldNormal.scale(worldNormal.dot(relpos), projected);
          worldVertex.vsub(projected, projected);
          projected.vsub(planePosition, r.ri); // From plane to vertex projected on plane

          r.ni.copy(worldNormal); // Contact normal is the plane normal out from plane
          // rj is now just the vector from the convex center to the vertex

          worldVertex.vsub(convexPosition, r.rj); // Make it relative to the body

          r.ri.vadd(planePosition, r.ri);
          r.ri.vsub(planeBody.position, r.ri);
          r.rj.vadd(convexPosition, r.rj);
          r.rj.vsub(convexBody.position, r.rj);
          this.result.push(r);
          numContacts++;

          if (!this.enableFrictionReduction) {
            this.createFrictionEquationsFromContact(r, this.frictionResult);
          }
        }
      }

      if (this.enableFrictionReduction && numContacts) {
        this.createFrictionFromAverage(numContacts);
      }
    }

    boxConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {
      si.convexPolyhedronRepresentation.material = si.material;
      si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;
      return this.convexConvex(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);
    }

    sphereHeightfield(sphereShape, hfShape, spherePos, hfPos, sphereQuat, hfQuat, sphereBody, hfBody, rsi, rsj, justTest) {
      const data = hfShape.data;
      const radius = sphereShape.radius;
      const w = hfShape.elementSize;
      const worldPillarOffset = sphereHeightfield_tmp2; // Get sphere position to heightfield local!

      const localSpherePos = sphereHeightfield_tmp1;
      Transform.pointToLocalFrame(hfPos, hfQuat, spherePos, localSpherePos); // Get the index of the data points to test against

      let iMinX = Math.floor((localSpherePos.x - radius) / w) - 1;
      let iMaxX = Math.ceil((localSpherePos.x + radius) / w) + 1;
      let iMinY = Math.floor((localSpherePos.y - radius) / w) - 1;
      let iMaxY = Math.ceil((localSpherePos.y + radius) / w) + 1; // Bail out if we are out of the terrain

      if (iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMinY > data[0].length) {
        return;
      } // Clamp index to edges


      if (iMinX < 0) {
        iMinX = 0;
      }

      if (iMaxX < 0) {
        iMaxX = 0;
      }

      if (iMinY < 0) {
        iMinY = 0;
      }

      if (iMaxY < 0) {
        iMaxY = 0;
      }

      if (iMinX >= data.length) {
        iMinX = data.length - 1;
      }

      if (iMaxX >= data.length) {
        iMaxX = data.length - 1;
      }

      if (iMaxY >= data[0].length) {
        iMaxY = data[0].length - 1;
      }

      if (iMinY >= data[0].length) {
        iMinY = data[0].length - 1;
      }

      const minMax = [];
      hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);
      const min = minMax[0];
      const max = minMax[1]; // Bail out if we can't touch the bounding height box

      if (localSpherePos.z - radius > max || localSpherePos.z + radius < min) {
        return;
      }

      const result = this.result;

      for (let i = iMinX; i < iMaxX; i++) {
        for (let j = iMinY; j < iMaxY; j++) {
          const numContactsBefore = result.length;
          let intersecting = false; // Lower triangle

          hfShape.getConvexTrianglePillar(i, j, false);
          Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);

          if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {
            intersecting = this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody, sphereShape, hfShape, justTest);
          }

          if (justTest && intersecting) {
            return true;
          } // Upper triangle


          hfShape.getConvexTrianglePillar(i, j, true);
          Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);

          if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {
            intersecting = this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody, sphereShape, hfShape, justTest);
          }

          if (justTest && intersecting) {
            return true;
          }

          const numContacts = result.length - numContactsBefore;

          if (numContacts > 2) {
            return;
          }
          /*
            // Skip all but 1
            for (let k = 0; k < numContacts - 1; k++) {
                result.pop();
            }
          */

        }
      }
    }

    boxHeightfield(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {
      si.convexPolyhedronRepresentation.material = si.material;
      si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;
      return this.convexHeightfield(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);
    }

    convexHeightfield(convexShape, hfShape, convexPos, hfPos, convexQuat, hfQuat, convexBody, hfBody, rsi, rsj, justTest) {
      const data = hfShape.data;
      const w = hfShape.elementSize;
      const radius = convexShape.boundingSphereRadius;
      const worldPillarOffset = convexHeightfield_tmp2;
      const faceList = convexHeightfield_faceList; // Get sphere position to heightfield local!

      const localConvexPos = convexHeightfield_tmp1;
      Transform.pointToLocalFrame(hfPos, hfQuat, convexPos, localConvexPos); // Get the index of the data points to test against

      let iMinX = Math.floor((localConvexPos.x - radius) / w) - 1;
      let iMaxX = Math.ceil((localConvexPos.x + radius) / w) + 1;
      let iMinY = Math.floor((localConvexPos.y - radius) / w) - 1;
      let iMaxY = Math.ceil((localConvexPos.y + radius) / w) + 1; // Bail out if we are out of the terrain

      if (iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMinY > data[0].length) {
        return;
      } // Clamp index to edges


      if (iMinX < 0) {
        iMinX = 0;
      }

      if (iMaxX < 0) {
        iMaxX = 0;
      }

      if (iMinY < 0) {
        iMinY = 0;
      }

      if (iMaxY < 0) {
        iMaxY = 0;
      }

      if (iMinX >= data.length) {
        iMinX = data.length - 1;
      }

      if (iMaxX >= data.length) {
        iMaxX = data.length - 1;
      }

      if (iMaxY >= data[0].length) {
        iMaxY = data[0].length - 1;
      }

      if (iMinY >= data[0].length) {
        iMinY = data[0].length - 1;
      }

      const minMax = [];
      hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);
      const min = minMax[0];
      const max = minMax[1]; // Bail out if we're cant touch the bounding height box

      if (localConvexPos.z - radius > max || localConvexPos.z + radius < min) {
        return;
      }

      for (let i = iMinX; i < iMaxX; i++) {
        for (let j = iMinY; j < iMaxY; j++) {
          let intersecting = false; // Lower triangle

          hfShape.getConvexTrianglePillar(i, j, false);
          Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);

          if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {
            intersecting = this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, justTest, faceList, null);
          }

          if (justTest && intersecting) {
            return true;
          } // Upper triangle


          hfShape.getConvexTrianglePillar(i, j, true);
          Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);

          if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {
            intersecting = this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, justTest, faceList, null);
          }

          if (justTest && intersecting) {
            return true;
          }
        }
      }
    }

    sphereParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {
      // The normal is the unit vector from sphere center to particle center
      const normal = particleSphere_normal;
      normal.set(0, 0, 1);
      xi.vsub(xj, normal);
      const lengthSquared = normal.lengthSquared();

      if (lengthSquared <= sj.radius * sj.radius) {
        if (justTest) {
          return true;
        }

        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
        normal.normalize();
        r.rj.copy(normal);
        r.rj.scale(sj.radius, r.rj);
        r.ni.copy(normal); // Contact normal

        r.ni.negate(r.ni);
        r.ri.set(0, 0, 0); // Center of particle

        this.result.push(r);
        this.createFrictionEquationsFromContact(r, this.frictionResult);
      }
    }

    planeParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {
      const normal = particlePlane_normal;
      normal.set(0, 0, 1);
      bj.quaternion.vmult(normal, normal); // Turn normal according to plane orientation

      const relpos = particlePlane_relpos;
      xi.vsub(bj.position, relpos);
      const dot = normal.dot(relpos);

      if (dot <= 0.0) {
        if (justTest) {
          return true;
        }

        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
        r.ni.copy(normal); // Contact normal is the plane normal

        r.ni.negate(r.ni);
        r.ri.set(0, 0, 0); // Center of particle
        // Get particle position projected on plane

        const projected = particlePlane_projected;
        normal.scale(normal.dot(xi), projected);
        xi.vsub(projected, projected); //projected.vadd(bj.position,projected);
        // rj is now the projected world position minus plane position

        r.rj.copy(projected);
        this.result.push(r);
        this.createFrictionEquationsFromContact(r, this.frictionResult);
      }
    }

    boxParticle(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {
      si.convexPolyhedronRepresentation.material = si.material;
      si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;
      return this.convexParticle(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);
    }

    convexParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {
      let penetratedFaceIndex = -1;
      const penetratedFaceNormal = convexParticle_penetratedFaceNormal;
      const worldPenetrationVec = convexParticle_worldPenetrationVec;
      let minPenetration = null;

      const local = convexParticle_local;
      local.copy(xi);
      local.vsub(xj, local); // Convert position to relative the convex origin

      qj.conjugate(cqj);
      cqj.vmult(local, local);

      if (sj.pointIsInside(local)) {
        if (sj.worldVerticesNeedsUpdate) {
          sj.computeWorldVertices(xj, qj);
        }

        if (sj.worldFaceNormalsNeedsUpdate) {
          sj.computeWorldFaceNormals(qj);
        } // For each world polygon in the polyhedra


        for (let i = 0, nfaces = sj.faces.length; i !== nfaces; i++) {
          // Construct world face vertices
          const verts = [sj.worldVertices[sj.faces[i][0]]];
          const normal = sj.worldFaceNormals[i]; // Check how much the particle penetrates the polygon plane.

          xi.vsub(verts[0], convexParticle_vertexToParticle);
          const penetration = -normal.dot(convexParticle_vertexToParticle);

          if (minPenetration === null || Math.abs(penetration) < Math.abs(minPenetration)) {
            if (justTest) {
              return true;
            }

            minPenetration = penetration;
            penetratedFaceIndex = i;
            penetratedFaceNormal.copy(normal);
          }
        }

        if (penetratedFaceIndex !== -1) {
          // Setup contact
          const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
          penetratedFaceNormal.scale(minPenetration, worldPenetrationVec); // rj is the particle position projected to the face

          worldPenetrationVec.vadd(xi, worldPenetrationVec);
          worldPenetrationVec.vsub(xj, worldPenetrationVec);
          r.rj.copy(worldPenetrationVec); //const projectedToFace = xi.vsub(xj).vadd(worldPenetrationVec);
          //projectedToFace.copy(r.rj);
          //qj.vmult(r.rj,r.rj);

          penetratedFaceNormal.negate(r.ni); // Contact normal

          r.ri.set(0, 0, 0); // Center of particle

          const ri = r.ri;
          const rj = r.rj; // Make relative to bodies

          ri.vadd(xi, ri);
          ri.vsub(bi.position, ri);
          rj.vadd(xj, rj);
          rj.vsub(bj.position, rj);
          this.result.push(r);
          this.createFrictionEquationsFromContact(r, this.frictionResult);
        } else {
          console.warn('Point found inside convex, but did not find penetrating face!');
        }
      }
    }

    heightfieldCylinder(hfShape, convexShape, hfPos, convexPos, hfQuat, convexQuat, hfBody, convexBody, rsi, rsj, justTest) {
      return this.convexHeightfield(convexShape, hfShape, convexPos, hfPos, convexQuat, hfQuat, convexBody, hfBody, rsi, rsj, justTest);
    }

    particleCylinder(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {
      return this.convexParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest);
    }

    sphereTrimesh(sphereShape, trimeshShape, spherePos, trimeshPos, sphereQuat, trimeshQuat, sphereBody, trimeshBody, rsi, rsj, justTest) {
      const edgeVertexA = sphereTrimesh_edgeVertexA;
      const edgeVertexB = sphereTrimesh_edgeVertexB;
      const edgeVector = sphereTrimesh_edgeVector;
      const edgeVectorUnit = sphereTrimesh_edgeVectorUnit;
      const localSpherePos = sphereTrimesh_localSpherePos;
      const tmp = sphereTrimesh_tmp;
      const localSphereAABB = sphereTrimesh_localSphereAABB;
      const v2 = sphereTrimesh_v2;
      const relpos = sphereTrimesh_relpos;
      const triangles = sphereTrimesh_triangles; // Convert sphere position to local in the trimesh

      Transform.pointToLocalFrame(trimeshPos, trimeshQuat, spherePos, localSpherePos); // Get the aabb of the sphere locally in the trimesh

      const sphereRadius = sphereShape.radius;
      localSphereAABB.lowerBound.set(localSpherePos.x - sphereRadius, localSpherePos.y - sphereRadius, localSpherePos.z - sphereRadius);
      localSphereAABB.upperBound.set(localSpherePos.x + sphereRadius, localSpherePos.y + sphereRadius, localSpherePos.z + sphereRadius);
      trimeshShape.getTrianglesInAABB(localSphereAABB, triangles); //for (let i = 0; i < trimeshShape.indices.length / 3; i++) triangles.push(i); // All
      // Vertices

      const v = sphereTrimesh_v;
      const radiusSquared = sphereShape.radius * sphereShape.radius;

      for (let i = 0; i < triangles.length; i++) {
        for (let j = 0; j < 3; j++) {
          trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], v); // Check vertex overlap in sphere

          v.vsub(localSpherePos, relpos);

          if (relpos.lengthSquared() <= radiusSquared) {
            // Safe up
            v2.copy(v);
            Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v);
            v.vsub(spherePos, relpos);

            if (justTest) {
              return true;
            }

            let r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);
            r.ni.copy(relpos);
            r.ni.normalize(); // ri is the vector from sphere center to the sphere surface

            r.ri.copy(r.ni);
            r.ri.scale(sphereShape.radius, r.ri);
            r.ri.vadd(spherePos, r.ri);
            r.ri.vsub(sphereBody.position, r.ri);
            r.rj.copy(v);
            r.rj.vsub(trimeshBody.position, r.rj); // Store result

            this.result.push(r);
            this.createFrictionEquationsFromContact(r, this.frictionResult);
          }
        }
      } // Check all edges


      for (let i = 0; i < triangles.length; i++) {
        for (let j = 0; j < 3; j++) {
          trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], edgeVertexA);
          trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + (j + 1) % 3], edgeVertexB);
          edgeVertexB.vsub(edgeVertexA, edgeVector); // Project sphere position to the edge

          localSpherePos.vsub(edgeVertexB, tmp);
          const positionAlongEdgeB = tmp.dot(edgeVector);
          localSpherePos.vsub(edgeVertexA, tmp);
          let positionAlongEdgeA = tmp.dot(edgeVector);

          if (positionAlongEdgeA > 0 && positionAlongEdgeB < 0) {
            // Now check the orthogonal distance from edge to sphere center
            localSpherePos.vsub(edgeVertexA, tmp);
            edgeVectorUnit.copy(edgeVector);
            edgeVectorUnit.normalize();
            positionAlongEdgeA = tmp.dot(edgeVectorUnit);
            edgeVectorUnit.scale(positionAlongEdgeA, tmp);
            tmp.vadd(edgeVertexA, tmp); // tmp is now the sphere center position projected to the edge, defined locally in the trimesh frame

            const dist = tmp.distanceTo(localSpherePos);

            if (dist < sphereShape.radius) {
              if (justTest) {
                return true;
              }

              const r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);
              tmp.vsub(localSpherePos, r.ni);
              r.ni.normalize();
              r.ni.scale(sphereShape.radius, r.ri);
              r.ri.vadd(spherePos, r.ri);
              r.ri.vsub(sphereBody.position, r.ri);
              Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);
              tmp.vsub(trimeshBody.position, r.rj);
              Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);
              Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);
              this.result.push(r);
              this.createFrictionEquationsFromContact(r, this.frictionResult);
            }
          }
        }
      } // Triangle faces


      const va = sphereTrimesh_va;
      const vb = sphereTrimesh_vb;
      const vc = sphereTrimesh_vc;
      const normal = sphereTrimesh_normal;

      for (let i = 0, N = triangles.length; i !== N; i++) {
        trimeshShape.getTriangleVertices(triangles[i], va, vb, vc);
        trimeshShape.getNormal(triangles[i], normal);
        localSpherePos.vsub(va, tmp);
        let dist = tmp.dot(normal);
        normal.scale(dist, tmp);
        localSpherePos.vsub(tmp, tmp); // tmp is now the sphere position projected to the triangle plane

        dist = tmp.distanceTo(localSpherePos);

        if (Ray.pointInTriangle(tmp, va, vb, vc) && dist < sphereShape.radius) {
          if (justTest) {
            return true;
          }

          let r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);
          tmp.vsub(localSpherePos, r.ni);
          r.ni.normalize();
          r.ni.scale(sphereShape.radius, r.ri);
          r.ri.vadd(spherePos, r.ri);
          r.ri.vsub(sphereBody.position, r.ri);
          Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);
          tmp.vsub(trimeshBody.position, r.rj);
          Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);
          Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);
          this.result.push(r);
          this.createFrictionEquationsFromContact(r, this.frictionResult);
        }
      }

      triangles.length = 0;
    }

    planeTrimesh(planeShape, trimeshShape, planePos, trimeshPos, planeQuat, trimeshQuat, planeBody, trimeshBody, rsi, rsj, justTest) {
      // Make contacts!
      const v = new Vec3();
      const normal = planeTrimesh_normal;
      normal.set(0, 0, 1);
      planeQuat.vmult(normal, normal); // Turn normal according to plane

      for (let i = 0; i < trimeshShape.vertices.length / 3; i++) {
        // Get world vertex from trimesh
        trimeshShape.getVertex(i, v); // Safe up

        const v2 = new Vec3();
        v2.copy(v);
        Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v); // Check plane side

        const relpos = planeTrimesh_relpos;
        v.vsub(planePos, relpos);
        const dot = normal.dot(relpos);

        if (dot <= 0.0) {
          if (justTest) {
            return true;
          }

          const r = this.createContactEquation(planeBody, trimeshBody, planeShape, trimeshShape, rsi, rsj);
          r.ni.copy(normal); // Contact normal is the plane normal
          // Get vertex position projected on plane

          const projected = planeTrimesh_projected;
          normal.scale(relpos.dot(normal), projected);
          v.vsub(projected, projected); // ri is the projected world position minus plane position

          r.ri.copy(projected);
          r.ri.vsub(planeBody.position, r.ri);
          r.rj.copy(v);
          r.rj.vsub(trimeshBody.position, r.rj); // Store result

          this.result.push(r);
          this.createFrictionEquationsFromContact(r, this.frictionResult);
        }
      }
    } // convexTrimesh(
    //   si: ConvexPolyhedron, sj: Trimesh, xi: Vec3, xj: Vec3, qi: Quaternion, qj: Quaternion,
    //   bi: Body, bj: Body, rsi?: Shape | null, rsj?: Shape | null,
    //   faceListA?: number[] | null, faceListB?: number[] | null,
    // ) {
    //   const sepAxis = convexConvex_sepAxis;
    //   if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){
    //       return;
    //   }
    //   // Construct a temp hull for each triangle
    //   const hullB = new ConvexPolyhedron();
    //   hullB.faces = [[0,1,2]];
    //   const va = new Vec3();
    //   const vb = new Vec3();
    //   const vc = new Vec3();
    //   hullB.vertices = [
    //       va,
    //       vb,
    //       vc
    //   ];
    //   for (let i = 0; i < sj.indices.length / 3; i++) {
    //       const triangleNormal = new Vec3();
    //       sj.getNormal(i, triangleNormal);
    //       hullB.faceNormals = [triangleNormal];
    //       sj.getTriangleVertices(i, va, vb, vc);
    //       let d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);
    //       if(!d){
    //           triangleNormal.scale(-1, triangleNormal);
    //           d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);
    //           if(!d){
    //               continue;
    //           }
    //       }
    //       const res: ConvexPolyhedronContactPoint[] = [];
    //       const q = convexConvex_q;
    //       si.clipAgainstHull(xi,qi,hullB,xj,qj,triangleNormal,-100,100,res);
    //       for(let j = 0; j !== res.length; j++){
    //           const r = this.createContactEquation(bi,bj,si,sj,rsi,rsj),
    //               ri = r.ri,
    //               rj = r.rj;
    //           r.ni.copy(triangleNormal);
    //           r.ni.negate(r.ni);
    //           res[j].normal.negate(q);
    //           q.mult(res[j].depth, q);
    //           res[j].point.vadd(q, ri);
    //           rj.copy(res[j].point);
    //           // Contact points are in world coordinates. Transform back to relative
    //           ri.vsub(xi,ri);
    //           rj.vsub(xj,rj);
    //           // Make relative to bodies
    //           ri.vadd(xi, ri);
    //           ri.vsub(bi.position, ri);
    //           rj.vadd(xj, rj);
    //           rj.vsub(bj.position, rj);
    //           result.push(r);
    //       }
    //   }
    // }


  }
  const averageNormal = new Vec3();
  const averageContactPointA = new Vec3();
  const averageContactPointB = new Vec3();
  const tmpVec1 = new Vec3();
  const tmpVec2 = new Vec3();
  const tmpQuat1 = new Quaternion();
  const tmpQuat2 = new Quaternion();

  const planeTrimesh_normal = new Vec3();
  const planeTrimesh_relpos = new Vec3();
  const planeTrimesh_projected = new Vec3();
  const sphereTrimesh_normal = new Vec3();
  const sphereTrimesh_relpos = new Vec3();
  new Vec3();
  const sphereTrimesh_v = new Vec3();
  const sphereTrimesh_v2 = new Vec3();
  const sphereTrimesh_edgeVertexA = new Vec3();
  const sphereTrimesh_edgeVertexB = new Vec3();
  const sphereTrimesh_edgeVector = new Vec3();
  const sphereTrimesh_edgeVectorUnit = new Vec3();
  const sphereTrimesh_localSpherePos = new Vec3();
  const sphereTrimesh_tmp = new Vec3();
  const sphereTrimesh_va = new Vec3();
  const sphereTrimesh_vb = new Vec3();
  const sphereTrimesh_vc = new Vec3();
  const sphereTrimesh_localSphereAABB = new AABB();
  const sphereTrimesh_triangles = [];
  const point_on_plane_to_sphere = new Vec3();
  const plane_to_sphere_ortho = new Vec3(); // See http://bulletphysics.com/Bullet/BulletFull/SphereTriangleDetector_8cpp_source.html

  const pointInPolygon_edge = new Vec3();
  const pointInPolygon_edge_x_normal = new Vec3();
  const pointInPolygon_vtp = new Vec3();

  function pointInPolygon(verts, normal, p) {
    let positiveResult = null;
    const N = verts.length;

    for (let i = 0; i !== N; i++) {
      const v = verts[i]; // Get edge to the next vertex

      const edge = pointInPolygon_edge;
      verts[(i + 1) % N].vsub(v, edge); // Get cross product between polygon normal and the edge

      const edge_x_normal = pointInPolygon_edge_x_normal; //const edge_x_normal = new Vec3();

      edge.cross(normal, edge_x_normal); // Get vector between point and current vertex

      const vertex_to_p = pointInPolygon_vtp;
      p.vsub(v, vertex_to_p); // This dot product determines which side of the edge the point is

      const r = edge_x_normal.dot(vertex_to_p); // If all such dot products have same sign, we are inside the polygon.

      if (positiveResult === null || r > 0 && positiveResult === true || r <= 0 && positiveResult === false) {
        if (positiveResult === null) {
          positiveResult = r > 0;
        }

        continue;
      } else {
        return false; // Encountered some other sign. Exit.
      }
    } // If we got here, all dot products were of the same sign.


    return true;
  }

  const box_to_sphere = new Vec3();
  const sphereBox_ns = new Vec3();
  const sphereBox_ns1 = new Vec3();
  const sphereBox_ns2 = new Vec3();
  const sphereBox_sides = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];
  const sphereBox_sphere_to_corner = new Vec3();
  const sphereBox_side_ns = new Vec3();
  const sphereBox_side_ns1 = new Vec3();
  const sphereBox_side_ns2 = new Vec3();
  const convex_to_sphere = new Vec3();
  const sphereConvex_edge = new Vec3();
  const sphereConvex_edgeUnit = new Vec3();
  const sphereConvex_sphereToCorner = new Vec3();
  const sphereConvex_worldCorner = new Vec3();
  const sphereConvex_worldNormal = new Vec3();
  const sphereConvex_worldPoint = new Vec3();
  const sphereConvex_worldSpherePointClosestToPlane = new Vec3();
  const sphereConvex_penetrationVec = new Vec3();
  const sphereConvex_sphereToWorldPoint = new Vec3();
  new Vec3();
  new Vec3();
  const planeConvex_v = new Vec3();
  const planeConvex_normal = new Vec3();
  const planeConvex_relpos = new Vec3();
  const planeConvex_projected = new Vec3();
  const convexConvex_sepAxis = new Vec3();
  const convexConvex_q = new Vec3();
  const particlePlane_normal = new Vec3();
  const particlePlane_relpos = new Vec3();
  const particlePlane_projected = new Vec3();
  const particleSphere_normal = new Vec3(); // WIP

  const cqj = new Quaternion();
  const convexParticle_local = new Vec3();
  new Vec3();
  const convexParticle_penetratedFaceNormal = new Vec3();
  const convexParticle_vertexToParticle = new Vec3();
  const convexParticle_worldPenetrationVec = new Vec3();
  const convexHeightfield_tmp1 = new Vec3();
  const convexHeightfield_tmp2 = new Vec3();
  const convexHeightfield_faceList = [0];
  const sphereHeightfield_tmp1 = new Vec3();
  const sphereHeightfield_tmp2 = new Vec3();

  class OverlapKeeper {
    /**
     * @todo Remove useless constructor
     */
    constructor() {
      this.current = [];
      this.previous = [];
    }
    /**
     * getKey
     */


    getKey(i, j) {
      if (j < i) {
        const temp = j;
        j = i;
        i = temp;
      }

      return i << 16 | j;
    }
    /**
     * set
     */


    set(i, j) {
      // Insertion sort. This way the diff will have linear complexity.
      const key = this.getKey(i, j);
      const current = this.current;
      let index = 0;

      while (key > current[index]) {
        index++;
      }

      if (key === current[index]) {
        return; // Pair was already added
      }

      for (let j = current.length - 1; j >= index; j--) {
        current[j + 1] = current[j];
      }

      current[index] = key;
    }
    /**
     * tick
     */


    tick() {
      const tmp = this.current;
      this.current = this.previous;
      this.previous = tmp;
      this.current.length = 0;
    }
    /**
     * getDiff
     */


    getDiff(additions, removals) {
      const a = this.current;
      const b = this.previous;
      const al = a.length;
      const bl = b.length;
      let j = 0;

      for (let i = 0; i < al; i++) {
        let found = false;
        const keyA = a[i];

        while (keyA > b[j]) {
          j++;
        }

        found = keyA === b[j];

        if (!found) {
          unpackAndPush(additions, keyA);
        }
      }

      j = 0;

      for (let i = 0; i < bl; i++) {
        let found = false;
        const keyB = b[i];

        while (keyB > a[j]) {
          j++;
        }

        found = a[j] === keyB;

        if (!found) {
          unpackAndPush(removals, keyB);
        }
      }
    }

  }

  function unpackAndPush(array, key) {
    array.push((key & 0xffff0000) >> 16, key & 0x0000ffff);
  }

  const getKey = (i, j) => i < j ? `${i}-${j}` : `${j}-${i}`;
  /**
   * TupleDictionary
   */


  class TupleDictionary {
    constructor() {
      this.data = {
        keys: []
      };
    }

    /** get */
    get(i, j) {
      const key = getKey(i, j);
      return this.data[key];
    }
    /** set */


    set(i, j, value) {
      const key = getKey(i, j); // Check if key already exists

      if (!this.get(i, j)) {
        this.data.keys.push(key);
      }

      this.data[key] = value;
    }
    /** delete */


    delete(i, j) {
      const key = getKey(i, j);
      const index = this.data.keys.indexOf(key);

      if (index !== -1) {
        this.data.keys.splice(index, 1);
      }

      delete this.data[key];
    }
    /** reset */


    reset() {
      const data = this.data;
      const keys = data.keys;

      while (keys.length > 0) {
        const key = keys.pop();
        delete data[key];
      }
    }

  }

  /**
   * The physics world
   */
  class World extends EventTarget {
    /**
     * Currently / last used timestep. Is set to -1 if not available. This value is updated before each internal step, which means that it is "fresh" inside event callbacks.
     */

    /**
     * Makes bodies go to sleep when they've been inactive.
     * @default false
     */

    /**
     * All the current contacts (instances of ContactEquation) in the world.
     */

    /**
     * How often to normalize quaternions. Set to 0 for every step, 1 for every second etc.. A larger value increases performance. If bodies tend to explode, set to a smaller value (zero to be sure nothing can go wrong).
     * @default 0
     */

    /**
     * Set to true to use fast quaternion normalization. It is often enough accurate to use.
     * If bodies tend to explode, set to false.
     * @default false
     */

    /**
     * The wall-clock time since simulation start.
     */

    /**
     * Number of timesteps taken since start.
     */

    /**
     * Default and last timestep sizes.
     */

    /**
     * The gravity of the world.
     */

    /**
     * Gravity to use when approximating the friction max force (mu*mass*gravity).
     * If undefined, global gravity will be used.
     * Use to enable friction in a World with a null gravity vector (no gravity).
     */

    /**
     * The broadphase algorithm to use.
     * @default NaiveBroadphase
     */

    /**
     * All bodies in this world
     */

    /**
     * True if any bodies are not sleeping, false if every body is sleeping.
     */

    /**
     * The solver algorithm to use.
     * @default GSSolver
     */

    /**
     * collisionMatrix
     */

    /**
     * CollisionMatrix from the previous step.
     */

    /**
     * All added contactmaterials.
     */

    /**
     * Used to look up a ContactMaterial given two instances of Material.
     */

    /**
     * The default material of the bodies.
     */

    /**
     * This contact material is used if no suitable contactmaterial is found for a contact.
     */

    /**
     * Time accumulator for interpolation.
     * @see https://gafferongames.com/game-physics/fix-your-timestep/
     */

    /**
     * Dispatched after a body has been added to the world.
     */

    /**
     * Dispatched after a body has been removed from the world.
     */
    constructor(options) {
      if (options === void 0) {
        options = {};
      }

      super();
      this.dt = -1;
      this.allowSleep = !!options.allowSleep;
      this.contacts = [];
      this.frictionEquations = [];
      this.quatNormalizeSkip = options.quatNormalizeSkip !== undefined ? options.quatNormalizeSkip : 0;
      this.quatNormalizeFast = options.quatNormalizeFast !== undefined ? options.quatNormalizeFast : false;
      this.time = 0.0;
      this.stepnumber = 0;
      this.default_dt = 1 / 60;
      this.nextId = 0;
      this.gravity = new Vec3();

      if (options.gravity) {
        this.gravity.copy(options.gravity);
      }

      if (options.frictionGravity) {
        this.frictionGravity = new Vec3();
        this.frictionGravity.copy(options.frictionGravity);
      }

      this.broadphase = options.broadphase !== undefined ? options.broadphase : new NaiveBroadphase();
      this.bodies = [];
      this.hasActiveBodies = false;
      this.solver = options.solver !== undefined ? options.solver : new GSSolver();
      this.constraints = [];
      this.narrowphase = new Narrowphase(this);
      this.collisionMatrix = new ArrayCollisionMatrix();
      this.collisionMatrixPrevious = new ArrayCollisionMatrix();
      this.bodyOverlapKeeper = new OverlapKeeper();
      this.shapeOverlapKeeper = new OverlapKeeper();
      this.contactmaterials = [];
      this.contactMaterialTable = new TupleDictionary();
      this.defaultMaterial = new Material('default');
      this.defaultContactMaterial = new ContactMaterial(this.defaultMaterial, this.defaultMaterial, {
        friction: 0.3,
        restitution: 0.0
      });
      this.doProfiling = false;
      this.profile = {
        solve: 0,
        makeContactConstraints: 0,
        broadphase: 0,
        integrate: 0,
        narrowphase: 0
      };
      this.accumulator = 0;
      this.subsystems = [];
      this.addBodyEvent = {
        type: 'addBody',
        body: null
      };
      this.removeBodyEvent = {
        type: 'removeBody',
        body: null
      };
      this.idToBodyMap = {};
      this.broadphase.setWorld(this);
    }
    /**
     * Get the contact material between materials m1 and m2
     * @return The contact material if it was found.
     */


    getContactMaterial(m1, m2) {
      return this.contactMaterialTable.get(m1.id, m2.id);
    }
    /**
     * Store old collision state info
     */


    collisionMatrixTick() {
      const temp = this.collisionMatrixPrevious;
      this.collisionMatrixPrevious = this.collisionMatrix;
      this.collisionMatrix = temp;
      this.collisionMatrix.reset();
      this.bodyOverlapKeeper.tick();
      this.shapeOverlapKeeper.tick();
    }
    /**
     * Add a constraint to the simulation.
     */


    addConstraint(c) {
      this.constraints.push(c);
    }
    /**
     * Removes a constraint
     */


    removeConstraint(c) {
      const idx = this.constraints.indexOf(c);

      if (idx !== -1) {
        this.constraints.splice(idx, 1);
      }
    }
    /**
     * Raycast test
     * @deprecated Use .raycastAll, .raycastClosest or .raycastAny instead.
     */


    rayTest(from, to, result) {
      if (result instanceof RaycastResult) {
        // Do raycastClosest
        this.raycastClosest(from, to, {
          skipBackfaces: true
        }, result);
      } else {
        // Do raycastAll
        this.raycastAll(from, to, {
          skipBackfaces: true
        }, result);
      }
    }
    /**
     * Ray cast against all bodies. The provided callback will be executed for each hit with a RaycastResult as single argument.
     * @return True if any body was hit.
     */


    raycastAll(from, to, options, callback) {
      if (options === void 0) {
        options = {};
      }

      options.mode = Ray.ALL;
      options.from = from;
      options.to = to;
      options.callback = callback;
      return tmpRay.intersectWorld(this, options);
    }
    /**
     * Ray cast, and stop at the first result. Note that the order is random - but the method is fast.
     * @return True if any body was hit.
     */


    raycastAny(from, to, options, result) {
      if (options === void 0) {
        options = {};
      }

      options.mode = Ray.ANY;
      options.from = from;
      options.to = to;
      options.result = result;
      return tmpRay.intersectWorld(this, options);
    }
    /**
     * Ray cast, and return information of the closest hit.
     * @return True if any body was hit.
     */


    raycastClosest(from, to, options, result) {
      if (options === void 0) {
        options = {};
      }

      options.mode = Ray.CLOSEST;
      options.from = from;
      options.to = to;
      options.result = result;
      return tmpRay.intersectWorld(this, options);
    }
    /**
     * Add a rigid body to the simulation.
     * @todo If the simulation has not yet started, why recrete and copy arrays for each body? Accumulate in dynamic arrays in this case.
     * @todo Adding an array of bodies should be possible. This would save some loops too
     */


    addBody(body) {
      if (this.bodies.includes(body)) {
        return;
      }

      body.index = this.bodies.length;
      this.bodies.push(body);
      body.world = this;
      body.initPosition.copy(body.position);
      body.initVelocity.copy(body.velocity);
      body.timeLastSleepy = this.time;

      if (body instanceof Body) {
        body.initAngularVelocity.copy(body.angularVelocity);
        body.initQuaternion.copy(body.quaternion);
      }

      this.collisionMatrix.setNumObjects(this.bodies.length);
      this.addBodyEvent.body = body;
      this.idToBodyMap[body.id] = body;
      this.dispatchEvent(this.addBodyEvent);
    }
    /**
     * Remove a rigid body from the simulation.
     */


    removeBody(body) {
      body.world = null;
      const n = this.bodies.length - 1;
      const bodies = this.bodies;
      const idx = bodies.indexOf(body);

      if (idx !== -1) {
        bodies.splice(idx, 1); // Todo: should use a garbage free method
        // Recompute index

        for (let i = 0; i !== bodies.length; i++) {
          bodies[i].index = i;
        }

        this.collisionMatrix.setNumObjects(n);
        this.removeBodyEvent.body = body;
        delete this.idToBodyMap[body.id];
        this.dispatchEvent(this.removeBodyEvent);
      }
    }

    getBodyById(id) {
      return this.idToBodyMap[id];
    }
    /**
     * @todo Make a faster map
     */


    getShapeById(id) {
      const bodies = this.bodies;

      for (let i = 0; i < bodies.length; i++) {
        const shapes = bodies[i].shapes;

        for (let j = 0; j < shapes.length; j++) {
          const shape = shapes[j];

          if (shape.id === id) {
            return shape;
          }
        }
      }

      return null;
    }
    /**
     * Adds a contact material to the World
     */


    addContactMaterial(cmat) {
      // Add contact material
      this.contactmaterials.push(cmat); // Add current contact material to the material table

      this.contactMaterialTable.set(cmat.materials[0].id, cmat.materials[1].id, cmat);
    }
    /**
     * Removes a contact material from the World.
     */


    removeContactMaterial(cmat) {
      const idx = this.contactmaterials.indexOf(cmat);

      if (idx === -1) {
        return;
      }

      this.contactmaterials.splice(idx, 1);
      this.contactMaterialTable.delete(cmat.materials[0].id, cmat.materials[1].id);
    }
    /**
     * Step the simulation forward keeping track of last called time
     * to be able to step the world at a fixed rate, independently of framerate.
     *
     * @param dt The fixed time step size to use (default: 1 / 60).
     * @param maxSubSteps Maximum number of fixed steps to take per function call (default: 10).
     * @see https://gafferongames.com/post/fix_your_timestep/
     * @example
     *     // Run the simulation independently of framerate every 1 / 60 ms
     *     world.fixedStep()
     */


    fixedStep(dt, maxSubSteps) {
      if (dt === void 0) {
        dt = 1 / 60;
      }

      if (maxSubSteps === void 0) {
        maxSubSteps = 10;
      }

      const time = performance.now() / 1000; // seconds

      if (!this.lastCallTime) {
        this.step(dt, undefined, maxSubSteps);
      } else {
        const timeSinceLastCalled = time - this.lastCallTime;
        this.step(dt, timeSinceLastCalled, maxSubSteps);
      }

      this.lastCallTime = time;
    }
    /**
     * Step the physics world forward in time.
     *
     * There are two modes. The simple mode is fixed timestepping without interpolation. In this case you only use the first argument. The second case uses interpolation. In that you also provide the time since the function was last used, as well as the maximum fixed timesteps to take.
     *
     * @param dt The fixed time step size to use.
     * @param timeSinceLastCalled The time elapsed since the function was last called.
     * @param maxSubSteps Maximum number of fixed steps to take per function call (default: 10).
     * @see https://web.archive.org/web/20180426154531/http://bulletphysics.org/mediawiki-1.5.8/index.php/Stepping_The_World#What_do_the_parameters_to_btDynamicsWorld::stepSimulation_mean.3F
     * @example
     *     // fixed timestepping without interpolation
     *     world.step(1 / 60)
     */


    step(dt, timeSinceLastCalled, maxSubSteps) {
      if (maxSubSteps === void 0) {
        maxSubSteps = 10;
      }

      if (timeSinceLastCalled === undefined) {
        // Fixed, simple stepping
        this.internalStep(dt); // Increment time

        this.time += dt;
      } else {
        this.accumulator += timeSinceLastCalled;
        const t0 = performance.now();
        let substeps = 0;

        while (this.accumulator >= dt && substeps < maxSubSteps) {
          // Do fixed steps to catch up
          this.internalStep(dt);
          this.accumulator -= dt;
          substeps++;

          if (performance.now() - t0 > dt * 1000) {
            // The framerate is not interactive anymore.
            // We are below the target framerate.
            // Better bail out.
            break;
          }
        } // Remove the excess accumulator, since we may not
        // have had enough substeps available to catch up


        this.accumulator = this.accumulator % dt;
        const t = this.accumulator / dt;

        for (let j = 0; j !== this.bodies.length; j++) {
          const b = this.bodies[j];
          b.previousPosition.lerp(b.position, t, b.interpolatedPosition);
          b.previousQuaternion.slerp(b.quaternion, t, b.interpolatedQuaternion);
          b.previousQuaternion.normalize();
        }

        this.time += timeSinceLastCalled;
      }
    }

    internalStep(dt) {
      this.dt = dt;
      const contacts = this.contacts;
      const p1 = World_step_p1;
      const p2 = World_step_p2;
      const N = this.bodies.length;
      const bodies = this.bodies;
      const solver = this.solver;
      const gravity = this.gravity;
      const doProfiling = this.doProfiling;
      const profile = this.profile;
      const DYNAMIC = Body.DYNAMIC;
      let profilingStart = -Infinity;
      const constraints = this.constraints;
      const frictionEquationPool = World_step_frictionEquationPool;
      gravity.length();
      const gx = gravity.x;
      const gy = gravity.y;
      const gz = gravity.z;
      let i = 0;

      if (doProfiling) {
        profilingStart = performance.now();
      } // Add gravity to all objects


      for (i = 0; i !== N; i++) {
        const bi = bodies[i];

        if (bi.type === DYNAMIC) {
          // Only for dynamic bodies
          const f = bi.force;
          const m = bi.mass;
          f.x += m * gx;
          f.y += m * gy;
          f.z += m * gz;
        }
      } // Update subsystems


      for (let i = 0, Nsubsystems = this.subsystems.length; i !== Nsubsystems; i++) {
        this.subsystems[i].update();
      } // Collision detection


      if (doProfiling) {
        profilingStart = performance.now();
      }

      p1.length = 0; // Clean up pair arrays from last step

      p2.length = 0;
      this.broadphase.collisionPairs(this, p1, p2);

      if (doProfiling) {
        profile.broadphase = performance.now() - profilingStart;
      } // Remove constrained pairs with collideConnected == false


      let Nconstraints = constraints.length;

      for (i = 0; i !== Nconstraints; i++) {
        const c = constraints[i];

        if (!c.collideConnected) {
          for (let j = p1.length - 1; j >= 0; j -= 1) {
            if (c.bodyA === p1[j] && c.bodyB === p2[j] || c.bodyB === p1[j] && c.bodyA === p2[j]) {
              p1.splice(j, 1);
              p2.splice(j, 1);
            }
          }
        }
      }

      this.collisionMatrixTick(); // Generate contacts

      if (doProfiling) {
        profilingStart = performance.now();
      }

      const oldcontacts = World_step_oldContacts;
      const NoldContacts = contacts.length;

      for (i = 0; i !== NoldContacts; i++) {
        oldcontacts.push(contacts[i]);
      }

      contacts.length = 0; // Transfer FrictionEquation from current list to the pool for reuse

      const NoldFrictionEquations = this.frictionEquations.length;

      for (i = 0; i !== NoldFrictionEquations; i++) {
        frictionEquationPool.push(this.frictionEquations[i]);
      }

      this.frictionEquations.length = 0;
      this.narrowphase.getContacts(p1, p2, this, contacts, oldcontacts, // To be reused
      this.frictionEquations, frictionEquationPool);

      if (doProfiling) {
        profile.narrowphase = performance.now() - profilingStart;
      } // Loop over all collisions


      if (doProfiling) {
        profilingStart = performance.now();
      } // Add all friction eqs


      for (i = 0; i < this.frictionEquations.length; i++) {
        solver.addEquation(this.frictionEquations[i]);
      }

      const ncontacts = contacts.length;

      for (let k = 0; k !== ncontacts; k++) {
        // Current contact
        const c = contacts[k]; // Get current collision indeces

        const bi = c.bi;
        const bj = c.bj;
        const si = c.si;
        const sj = c.sj; // Get collision properties

        let cm;

        if (bi.material && bj.material) {
          cm = this.getContactMaterial(bi.material, bj.material) || this.defaultContactMaterial;
        } else {
          cm = this.defaultContactMaterial;
        } // c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;


        cm.friction; // c.restitution = cm.restitution;
        // If friction or restitution were specified in the material, use them

        if (bi.material && bj.material) {
          if (bi.material.friction >= 0 && bj.material.friction >= 0) {
            bi.material.friction * bj.material.friction;
          }

          if (bi.material.restitution >= 0 && bj.material.restitution >= 0) {
            c.restitution = bi.material.restitution * bj.material.restitution;
          }
        } // c.setSpookParams(
        //           cm.contactEquationStiffness,
        //           cm.contactEquationRelaxation,
        //           dt
        //       );


        solver.addEquation(c); // // Add friction constraint equation
        // if(mu > 0){
        // 	// Create 2 tangent equations
        // 	const mug = mu * gnorm;
        // 	const reducedMass = (bi.invMass + bj.invMass);
        // 	if(reducedMass > 0){
        // 		reducedMass = 1/reducedMass;
        // 	}
        // 	const pool = frictionEquationPool;
        // 	const c1 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);
        // 	const c2 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);
        // 	this.frictionEquations.push(c1, c2);
        // 	c1.bi = c2.bi = bi;
        // 	c1.bj = c2.bj = bj;
        // 	c1.minForce = c2.minForce = -mug*reducedMass;
        // 	c1.maxForce = c2.maxForce = mug*reducedMass;
        // 	// Copy over the relative vectors
        // 	c1.ri.copy(c.ri);
        // 	c1.rj.copy(c.rj);
        // 	c2.ri.copy(c.ri);
        // 	c2.rj.copy(c.rj);
        // 	// Construct tangents
        // 	c.ni.tangents(c1.t, c2.t);
        //           // Set spook params
        //           c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);
        //           c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);
        //           c1.enabled = c2.enabled = c.enabled;
        // 	// Add equations to solver
        // 	solver.addEquation(c1);
        // 	solver.addEquation(c2);
        // }

        if (bi.allowSleep && bi.type === Body.DYNAMIC && bi.sleepState === Body.SLEEPING && bj.sleepState === Body.AWAKE && bj.type !== Body.STATIC) {
          const speedSquaredB = bj.velocity.lengthSquared() + bj.angularVelocity.lengthSquared();
          const speedLimitSquaredB = bj.sleepSpeedLimit ** 2;

          if (speedSquaredB >= speedLimitSquaredB * 2) {
            bi.wakeUpAfterNarrowphase = true;
          }
        }

        if (bj.allowSleep && bj.type === Body.DYNAMIC && bj.sleepState === Body.SLEEPING && bi.sleepState === Body.AWAKE && bi.type !== Body.STATIC) {
          const speedSquaredA = bi.velocity.lengthSquared() + bi.angularVelocity.lengthSquared();
          const speedLimitSquaredA = bi.sleepSpeedLimit ** 2;

          if (speedSquaredA >= speedLimitSquaredA * 2) {
            bj.wakeUpAfterNarrowphase = true;
          }
        } // Now we know that i and j are in contact. Set collision matrix state


        this.collisionMatrix.set(bi, bj, true);

        if (!this.collisionMatrixPrevious.get(bi, bj)) {
          // First contact!
          // We reuse the collideEvent object, otherwise we will end up creating new objects for each new contact, even if there's no event listener attached.
          World_step_collideEvent.body = bj;
          World_step_collideEvent.contact = c;
          bi.dispatchEvent(World_step_collideEvent);
          World_step_collideEvent.body = bi;
          bj.dispatchEvent(World_step_collideEvent);
        }

        this.bodyOverlapKeeper.set(bi.id, bj.id);
        this.shapeOverlapKeeper.set(si.id, sj.id);
      }

      this.emitContactEvents();

      if (doProfiling) {
        profile.makeContactConstraints = performance.now() - profilingStart;
        profilingStart = performance.now();
      } // Wake up bodies


      for (i = 0; i !== N; i++) {
        const bi = bodies[i];

        if (bi.wakeUpAfterNarrowphase) {
          bi.wakeUp();
          bi.wakeUpAfterNarrowphase = false;
        }
      } // Add user-added constraints


      Nconstraints = constraints.length;

      for (i = 0; i !== Nconstraints; i++) {
        const c = constraints[i];
        c.update();

        for (let j = 0, Neq = c.equations.length; j !== Neq; j++) {
          const eq = c.equations[j];
          solver.addEquation(eq);
        }
      } // Solve the constrained system


      solver.solve(dt, this);

      if (doProfiling) {
        profile.solve = performance.now() - profilingStart;
      } // Remove all contacts from solver


      solver.removeAllEquations(); // Apply damping, see http://code.google.com/p/bullet/issues/detail?id=74 for details

      const pow = Math.pow;

      for (i = 0; i !== N; i++) {
        const bi = bodies[i];

        if (bi.type & DYNAMIC) {
          // Only for dynamic bodies
          const ld = pow(1.0 - bi.linearDamping, dt);
          const v = bi.velocity;
          v.scale(ld, v);
          const av = bi.angularVelocity;

          if (av) {
            const ad = pow(1.0 - bi.angularDamping, dt);
            av.scale(ad, av);
          }
        }
      }

      this.dispatchEvent(World_step_preStepEvent); // Leap frog
      // vnew = v + h*f/m
      // xnew = x + h*vnew

      if (doProfiling) {
        profilingStart = performance.now();
      }

      const stepnumber = this.stepnumber;
      const quatNormalize = stepnumber % (this.quatNormalizeSkip + 1) === 0;
      const quatNormalizeFast = this.quatNormalizeFast;

      for (i = 0; i !== N; i++) {
        bodies[i].integrate(dt, quatNormalize, quatNormalizeFast);
      }

      this.clearForces();
      this.broadphase.dirty = true;

      if (doProfiling) {
        profile.integrate = performance.now() - profilingStart;
      } // Update step number


      this.stepnumber += 1;
      this.dispatchEvent(World_step_postStepEvent); // Sleeping update

      let hasActiveBodies = true;

      if (this.allowSleep) {
        hasActiveBodies = false;

        for (i = 0; i !== N; i++) {
          const bi = bodies[i];
          bi.sleepTick(this.time);

          if (bi.sleepState !== Body.SLEEPING) {
            hasActiveBodies = true;
          }
        }
      }

      this.hasActiveBodies = hasActiveBodies;
    }

    emitContactEvents() {
      const hasBeginContact = this.hasAnyEventListener('beginContact');
      const hasEndContact = this.hasAnyEventListener('endContact');

      if (hasBeginContact || hasEndContact) {
        this.bodyOverlapKeeper.getDiff(additions, removals);
      }

      if (hasBeginContact) {
        for (let i = 0, l = additions.length; i < l; i += 2) {
          beginContactEvent.bodyA = this.getBodyById(additions[i]);
          beginContactEvent.bodyB = this.getBodyById(additions[i + 1]);
          this.dispatchEvent(beginContactEvent);
        }

        beginContactEvent.bodyA = beginContactEvent.bodyB = null;
      }

      if (hasEndContact) {
        for (let i = 0, l = removals.length; i < l; i += 2) {
          endContactEvent.bodyA = this.getBodyById(removals[i]);
          endContactEvent.bodyB = this.getBodyById(removals[i + 1]);
          this.dispatchEvent(endContactEvent);
        }

        endContactEvent.bodyA = endContactEvent.bodyB = null;
      }

      additions.length = removals.length = 0;
      const hasBeginShapeContact = this.hasAnyEventListener('beginShapeContact');
      const hasEndShapeContact = this.hasAnyEventListener('endShapeContact');

      if (hasBeginShapeContact || hasEndShapeContact) {
        this.shapeOverlapKeeper.getDiff(additions, removals);
      }

      if (hasBeginShapeContact) {
        for (let i = 0, l = additions.length; i < l; i += 2) {
          const shapeA = this.getShapeById(additions[i]);
          const shapeB = this.getShapeById(additions[i + 1]);
          beginShapeContactEvent.shapeA = shapeA;
          beginShapeContactEvent.shapeB = shapeB;
          if (shapeA) beginShapeContactEvent.bodyA = shapeA.body;
          if (shapeB) beginShapeContactEvent.bodyB = shapeB.body;
          this.dispatchEvent(beginShapeContactEvent);
        }

        beginShapeContactEvent.bodyA = beginShapeContactEvent.bodyB = beginShapeContactEvent.shapeA = beginShapeContactEvent.shapeB = null;
      }

      if (hasEndShapeContact) {
        for (let i = 0, l = removals.length; i < l; i += 2) {
          const shapeA = this.getShapeById(removals[i]);
          const shapeB = this.getShapeById(removals[i + 1]);
          endShapeContactEvent.shapeA = shapeA;
          endShapeContactEvent.shapeB = shapeB;
          if (shapeA) endShapeContactEvent.bodyA = shapeA.body;
          if (shapeB) endShapeContactEvent.bodyB = shapeB.body;
          this.dispatchEvent(endShapeContactEvent);
        }

        endShapeContactEvent.bodyA = endShapeContactEvent.bodyB = endShapeContactEvent.shapeA = endShapeContactEvent.shapeB = null;
      }
    }
    /**
     * Sets all body forces in the world to zero.
     */


    clearForces() {
      const bodies = this.bodies;
      const N = bodies.length;

      for (let i = 0; i !== N; i++) {
        const b = bodies[i];
        b.force;
        b.torque;
        b.force.set(0, 0, 0);
        b.torque.set(0, 0, 0);
      }
    }

  } // Temp stuff

  new AABB();
  const tmpRay = new Ray(); // performance.now() fallback on Date.now()

  const performance = globalThis.performance || {};

  if (!performance.now) {
    let nowOffset = Date.now();

    if (performance.timing && performance.timing.navigationStart) {
      nowOffset = performance.timing.navigationStart;
    }

    performance.now = () => Date.now() - nowOffset;
  }

  new Vec3(); // Dispatched after the world has stepped forward in time.
  // Reusable event objects to save memory.

  const World_step_postStepEvent = {
    type: 'postStep'
  }; // Dispatched before the world steps forward in time.

  const World_step_preStepEvent = {
    type: 'preStep'
  };
  const World_step_collideEvent = {
    type: Body.COLLIDE_EVENT_NAME,
    body: null,
    contact: null
  }; // Pools for unused objects

  const World_step_oldContacts = [];
  const World_step_frictionEquationPool = []; // Reusable arrays for collision pairs

  const World_step_p1 = [];
  const World_step_p2 = []; // Stuff for emitContactEvents

  const additions = [];
  const removals = [];
  const beginContactEvent = {
    type: 'beginContact',
    bodyA: null,
    bodyB: null
  };
  const endContactEvent = {
    type: 'endContact',
    bodyA: null,
    bodyB: null
  };
  const beginShapeContactEvent = {
    type: 'beginShapeContact',
    bodyA: null,
    bodyB: null,
    shapeA: null,
    shapeB: null
  };
  const endShapeContactEvent = {
    type: 'endShapeContact',
    bodyA: null,
    bodyB: null,
    shapeA: null,
    shapeB: null
  };

  const addContactMaterial = (world, createMaterial, _ref, uuid) => {
    let [materialA, materialB, options] = _ref;
    const matA = createMaterial(materialA);
    const matB = createMaterial(materialB);
    const contactMaterial = new ContactMaterial(matA, matB, options);
    contactMaterial.uuid = uuid;
    world.addContactMaterial(contactMaterial);
  };
  const removeContactMaterial = (world, cmUUID) => {
    const index = world.contactmaterials.findIndex(_ref2 => {
      let {
        uuid
      } = _ref2;
      return uuid === cmUUID;
    });
    const [{
      id: i
    }, {
      id: j
    }] = world.contactmaterials[index].materials;
    world.contactmaterials.splice(index, 1);
    delete world.contactMaterialTable.data[i < j ? `${i}-${j}` : `${j}-${i}`];
  };

  let materialId = 0;
  const createMaterialFactory = materials => function (nameOrOptions) {
    if (nameOrOptions === void 0) {
      nameOrOptions = {};
    }
    const materialOptions = typeof nameOrOptions === 'string' ? {
      name: nameOrOptions
    } : {
      name: Symbol.for(`Material${materialId++}`),
      ...nameOrOptions
    };
    const {
      name
    } = materialOptions;
    materials[name] = materials[name] || new Material(materialOptions);
    return materials[name];
  };

  /**
   * @typedef { import('cannon-es').MaterialOptions } MaterialOptions
   */

  const makeVec3 = _ref => {
    let [x, y, z] = _ref;
    return new Vec3(x, y, z);
  };
  const prepareSphere = args => Array.isArray(args) ? args : [args];
  const prepareConvexPolyhedron = _ref2 => {
    let [v, faces, n, a, boundingSphereRadius] = _ref2;
    return [{
      axes: a ? a.map(makeVec3) : undefined,
      boundingSphereRadius,
      faces,
      normals: n ? n.map(makeVec3) : undefined,
      vertices: v ? v.map(makeVec3) : undefined
    }];
  };
  function createShape(type, args) {
    switch (type) {
      case 'Box':
        return new Box(new Vec3(...args.map(v => v / 2)));
      // extents => halfExtents
      case 'ConvexPolyhedron':
        return new ConvexPolyhedron(...prepareConvexPolyhedron(args));
      case 'Cylinder':
        return new Cylinder(...args);
      // [ radiusTop, radiusBottom, height, numSegments ] = args
      case 'Heightfield':
        return new Heightfield(...args);
      // [ Array data, options: {minValue, maxValue, elementSize}  ] = args
      case 'Particle':
        return new Particle();
      // no args
      case 'Plane':
        return new Plane();
      // no args, infinite x and y
      case 'Sphere':
        return new Sphere(...prepareSphere(args));
      // radius = args
      case 'Trimesh':
        return new Trimesh(...args);
      // [vertices, indices] = args
    }
  }

  /**
   * @function
   * @param {Object} options
   * @param {string} options.uuid
   * @param {BodyProps} options.props
   * @param {BodyShapeType} options.type
   * @param {(materialOptions: MaterialOptions) => Material =} options.createMaterial
   * @returns {Body}
   */
  const propsToBody = options => {
    const {
      uuid,
      props,
      type,
      createMaterial = materialOptions => new Material(materialOptions)
    } = options;
    const {
      angularFactor = [1, 1, 1],
      angularVelocity = [0, 0, 0],
      args = [],
      collisionResponse,
      linearFactor = [1, 1, 1],
      mass,
      material,
      onCollide,
      position = [0, 0, 0],
      rotation = [0, 0, 0],
      shapes,
      type: bodyType,
      velocity = [0, 0, 0],
      ...extra
    } = props;
    const body = new Body({
      ...extra,
      mass: bodyType === 'Static' ? 0 : mass,
      material: material ? createMaterial(material) : undefined,
      type: bodyType ? Body[bodyType.toUpperCase()] : undefined
    });
    body.uuid = uuid;
    if (collisionResponse !== undefined) {
      body.collisionResponse = collisionResponse;
    }
    if (type === 'Compound') {
      shapes.forEach(_ref3 => {
        let {
          type,
          args,
          position,
          rotation,
          material,
          ...extra
        } = _ref3;
        const shapeBody = body.addShape(createShape(type, args), position ? new Vec3(...position) : undefined, rotation ? new Quaternion().setFromEuler(...rotation) : undefined);
        if (material) shapeBody.material = createMaterial(material);
        Object.assign(shapeBody, extra);
      });
    } else {
      body.addShape(createShape(type, args));
    }
    body.position.set(position[0], position[1], position[2]);
    body.quaternion.setFromEuler(rotation[0], rotation[1], rotation[2]);
    body.velocity.set(velocity[0], velocity[1], velocity[2]);
    body.angularVelocity.set(angularVelocity[0], angularVelocity[1], angularVelocity[2]);
    body.linearFactor.set(linearFactor[0], linearFactor[1], linearFactor[2]);
    body.angularFactor.set(angularFactor[0], angularFactor[1], angularFactor[2]);
    return body;
  };

  const addBodies = (state, createMaterial, _ref) => {
    let {
      props,
      type,
      uuid
    } = _ref;
    for (let i = 0; i < uuid.length; i++) {
      const body = propsToBody({
        createMaterial,
        props: props[i],
        type,
        uuid: uuid[i]
      });
      state.world.addBody(body);
      if (props[i].onCollide) body.addEventListener('collide', _ref2 => {
        let {
          type,
          body,
          target,
          contact
        } = _ref2;
        if (!body.uuid || !target.uuid) return;
        const {
          ni,
          ri,
          rj,
          bi,
          bj,
          id
        } = contact;
        const contactPoint = bi.position.vadd(ri);
        const contactNormal = bi === body ? ni : ni.scale(-1);
        self.postMessage({
          body: body.uuid,
          collisionFilters: {
            bodyFilterGroup: body.collisionFilterGroup,
            bodyFilterMask: body.collisionFilterMask,
            targetFilterGroup: target.collisionFilterGroup,
            targetFilterMask: target.collisionFilterMask
          },
          contact: {
            // @ts-expect-error TODO: use id instead of uuid
            bi: bi.uuid,
            // @ts-expect-error TODO: use id instead of uuid
            bj: bj.uuid,
            // Normal of the contact, relative to the colliding body
            contactNormal: contactNormal.toArray(),
            // World position of the contact
            contactPoint: contactPoint.toArray(),
            id,
            impactVelocity: contact.getImpactVelocityAlongNormal(),
            ni: ni.toArray(),
            ri: ri.toArray(),
            rj: rj.toArray()
          },
          op: 'event',
          target: target.uuid,
          type
        });
      });
    }
  };

  const tripletToVec3 = t => t ? new Vec3(...t) : undefined;

  const addConstraint = (state, _ref) => {
    let {
      props: [bodyA, bodyB, {
        angle,
        axisA,
        axisB,
        collideConnected,
        distance,
        maxForce,
        maxMultiplier,
        pivotA,
        pivotB,
        twistAngle,
        wakeUpBodies
      }],
      type,
      uuid
    } = _ref;
    let constraint;
    switch (type) {
      case 'PointToPoint':
        constraint = new PointToPointConstraint(state.bodies[bodyA], tripletToVec3(pivotA), state.bodies[bodyB], tripletToVec3(pivotB), maxForce);
        break;
      case 'ConeTwist':
        constraint = new ConeTwistConstraint(state.bodies[bodyA], state.bodies[bodyB], {
          angle,
          axisA: tripletToVec3(axisA),
          axisB: tripletToVec3(axisB),
          collideConnected,
          maxForce,
          pivotA: tripletToVec3(pivotA),
          pivotB: tripletToVec3(pivotB),
          twistAngle
        });
        break;
      case 'Hinge':
        constraint = new HingeConstraint(state.bodies[bodyA], state.bodies[bodyB], {
          axisA: tripletToVec3(axisA),
          axisB: tripletToVec3(axisB),
          collideConnected,
          maxForce,
          pivotA: tripletToVec3(pivotA),
          pivotB: tripletToVec3(pivotB)
        });
        break;
      case 'Distance':
        constraint = new DistanceConstraint(state.bodies[bodyA], state.bodies[bodyB], distance, maxForce);
        break;
      case 'Lock':
        constraint = new LockConstraint(state.bodies[bodyA], state.bodies[bodyB], {
          maxForce
        });
        break;
      default:
        constraint = new Constraint(state.bodies[bodyA], state.bodies[bodyB], {
          collideConnected,
          wakeUpBodies
        });
        break;
    }
    constraint.uuid = uuid;
    state.world.addConstraint(constraint);
    if (maxMultiplier !== undefined) {
      const postStepConstraint = () => {
        // The multiplier is proportional to how much force is added to the bodies by the constraint.
        // If this exceeds a limit the constraint is disabled.
        const multiplier = Math.abs(constraint.equations[0].multiplier);
        if (multiplier > maxMultiplier) {
          constraint.disable();
        }
      };
      state.constraints[uuid] = postStepConstraint;
      state.world.addEventListener('postStep', state.constraints[uuid]);
    }
  };

  function toUppercase(str) {
    return str.toUpperCase();
  }
  const addRay = (state, _ref) => {
    let {
      props: {
        from,
        mode,
        to,
        ...rayOptions
      },
      uuid
    } = _ref;
    const ray = new Ray(tripletToVec3(from), tripletToVec3(to));
    const options = {
      mode: RAY_MODES[toUppercase(mode)],
      result: new RaycastResult(),
      ...rayOptions
    };
    state.rays[uuid] = () => {
      ray.intersectWorld(state.world, options);
      if (!options.result || !options.result.body) return;
      const {
        body,
        shape,
        rayFromWorld,
        rayToWorld,
        hitNormalWorld,
        hitPointWorld,
        ...rest
      } = options.result;
      const bodyUUID = body.uuid;
      if (!bodyUUID) return;
      self.postMessage({
        body: bodyUUID,
        hitNormalWorld: hitNormalWorld.toArray(),
        hitPointWorld: hitPointWorld.toArray(),
        op: 'event',
        ray: {
          collisionFilterGroup: ray.collisionFilterGroup,
          collisionFilterMask: ray.collisionFilterMask,
          direction: ray.direction.toArray(),
          from,
          to,
          uuid
        },
        rayFromWorld: rayFromWorld.toArray(),
        rayToWorld: rayToWorld.toArray(),
        shape: shape ? {
          ...shape,
          body: bodyUUID
        } : null,
        type: 'rayhit',
        ...rest
      });
    };
    state.world.addEventListener('preStep', state.rays[uuid]);
  };

  const addRaycastVehicle = (state, data) => {
    const [chassisBody, wheels, wheelInfos, indexForwardAxis, indexRightAxis, indexUpAxis] = data.props;
    const vehicle = new RaycastVehicle({
      chassisBody: state.bodies[chassisBody],
      indexForwardAxis,
      indexRightAxis,
      indexUpAxis
    });
    vehicle.world = state.world;
    for (let i = 0; i < wheelInfos.length; i++) {
      const {
        axleLocal,
        chassisConnectionPointLocal,
        directionLocal,
        ...rest
      } = wheelInfos[i];
      vehicle.addWheel({
        axleLocal: tripletToVec3(axleLocal),
        chassisConnectionPointLocal: tripletToVec3(chassisConnectionPointLocal),
        directionLocal: tripletToVec3(directionLocal),
        ...rest
      });
    }
    const preStep = () => {
      vehicle.updateVehicle(state.world.dt);
    };
    const postStep = () => {
      for (let i = 0; i < vehicle.wheelInfos.length; i++) {
        vehicle.updateWheelTransform(i);
        const t = vehicle.wheelInfos[i].worldTransform;
        const wheelBody = state.bodies[wheels[i]];
        wheelBody.position.copy(t.position);
        wheelBody.quaternion.copy(t.quaternion);
      }
    };
    state.vehicles[data.uuid] = {
      postStep,
      preStep,
      vehicle
    };
    state.world.addEventListener('preStep', preStep);
    state.world.addEventListener('postStep', postStep);
  };

  const addSpring = (state, _ref) => {
    let {
      props: [bodyA, bodyB, {
        damping,
        localAnchorA,
        localAnchorB,
        restLength,
        stiffness,
        worldAnchorA,
        worldAnchorB
      }],
      uuid
    } = _ref;
    const spring = new Spring(state.bodies[bodyA], state.bodies[bodyB], {
      damping,
      localAnchorA: tripletToVec3(localAnchorA),
      localAnchorB: tripletToVec3(localAnchorB),
      restLength,
      stiffness,
      worldAnchorA: tripletToVec3(worldAnchorA),
      worldAnchorB: tripletToVec3(worldAnchorB)
    });
    spring.uuid = uuid;
    const postStepSpring = () => spring.applyForce();
    state.springs[uuid] = postStepSpring;
    state.springInstances[uuid] = spring;

    // Compute the force after each step
    state.world.addEventListener('postStep', state.springs[uuid]);
  };

  function emitBeginContact(_ref) {
    let {
      bodyA,
      bodyB
    } = _ref;
    if (!(bodyA != null && bodyA.uuid) || !(bodyB != null && bodyB.uuid)) return;
    self.postMessage({
      bodyA: bodyA.uuid,
      bodyB: bodyB.uuid,
      op: 'event',
      type: 'collideBegin'
    });
  }
  function emitEndContact(_ref2) {
    let {
      bodyA,
      bodyB
    } = _ref2;
    if (!(bodyA != null && bodyA.uuid) || !(bodyB != null && bodyB.uuid)) return;
    self.postMessage({
      bodyA: bodyA.uuid,
      bodyB: bodyB.uuid,
      op: 'event',
      type: 'collideEnd'
    });
  }
  const init = (world, _ref3) => {
    let {
      allowSleep,
      axisIndex = 0,
      broadphase,
      defaultContactMaterial,
      frictionGravity,
      gravity,
      iterations,
      quatNormalizeFast,
      quatNormalizeSkip,
      solver,
      tolerance
    } = _ref3;
    world.allowSleep = allowSleep;
    world.gravity.set(...gravity);
    world.frictionGravity = frictionGravity ? new Vec3(...frictionGravity) : undefined;
    world.quatNormalizeFast = quatNormalizeFast;
    world.quatNormalizeSkip = quatNormalizeSkip;
    if (solver === 'Split') {
      world.solver = new SplitSolver(new GSSolver());
    }
    if (world.solver instanceof GSSolver) {
      world.solver.tolerance = tolerance;
      world.solver.iterations = iterations;
    }
    world.broadphase = broadphase === 'SAP' ? new SAPBroadphase(world) : new NaiveBroadphase();
    if (world.broadphase instanceof SAPBroadphase) {
      world.broadphase.axisIndex = axisIndex;
    }
    world.addEventListener('beginContact', emitBeginContact);
    world.addEventListener('endContact', emitEndContact);
    Object.assign(world.defaultContactMaterial, defaultContactMaterial);
  };

  const isQorV = v => v instanceof Quaternion || v instanceof Vec3;
  const step = (state, _ref) => {
    let {
      positions,
      props: {
        maxSubSteps,
        stepSize,
        timeSinceLastCalled
      },
      quaternions
    } = _ref;
    state.world.step(stepSize, timeSinceLastCalled, maxSubSteps);
    for (let i = 0; i < state.world.bodies.length; i += 1) {
      const p = state.world.bodies[i].position;
      const q = state.world.bodies[i].quaternion;
      positions[3 * i + 0] = p.x;
      positions[3 * i + 1] = p.y;
      positions[3 * i + 2] = p.z;
      quaternions[4 * i + 0] = q.x;
      quaternions[4 * i + 1] = q.y;
      quaternions[4 * i + 2] = q.z;
      quaternions[4 * i + 3] = q.w;
    }
    const observations = [];
    for (const id of Object.keys(state.subscriptions)) {
      const [uuid, type, target = 'bodies'] = state.subscriptions[id];
      const {
        bodies,
        vehicles
      } = state;
      const value = target === 'vehicles' ?
      // @ts-expect-error TODO: Differentiate these "types"
      vehicles[uuid].vehicle[type] :
      // @ts-expect-error TODO: Differentiate these "types"
      bodies[uuid][type];
      const serializableValue = isQorV(value) ? value.toArray() : value;
      observations.push([Number(id), serializableValue,
      // @ts-expect-error TODO: Differentiate these "types"
      type]);
    }
    const message = {
      active: state.world.hasActiveBodies,
      observations,
      op: 'frame',
      positions,
      quaternions
    };
    if (state.bodiesNeedSyncing) {
      message.bodies = state.world.bodies.reduce((bodies, body) => {
        if (body.uuid) bodies.push(body.uuid);
        return bodies;
      }, []);
      state.bodiesNeedSyncing = false;
    }
    self.postMessage(message, [positions.buffer, quaternions.buffer]);
  };

  const state = {
    bodies: {},
    bodiesNeedSyncing: false,
    constraints: {},
    materials: {},
    rays: {},
    springInstances: {},
    springs: {},
    subscriptions: {},
    vehicles: {},
    world: new World()
  };

  /// <reference no-default-lib="true"/>
  const isHingeConstraint = c => c instanceof HingeConstraint;
  function syncBodies() {
    state.bodiesNeedSyncing = true;
    state.bodies = state.world.bodies.reduce((bodies, body) => body.uuid ? {
      ...bodies,
      [body.uuid]: body
    } : bodies, {});
  }
  const broadphases = {
    NaiveBroadphase,
    SAPBroadphase
  };
  const createMaterial = createMaterialFactory(state.materials);
  self.onmessage = _ref => {
    let {
      data
    } = _ref;
    switch (data.op) {
      case 'init':
        {
          init(state.world, data.props);
          break;
        }
      case 'step':
        {
          step(state, data);
          break;
        }
      case 'addBodies':
        {
          addBodies(state, createMaterial, data);
          syncBodies();
          break;
        }
      case 'removeBodies':
        {
          for (let i = 0; i < data.uuid.length; i++) {
            state.world.removeBody(state.bodies[data.uuid[i]]);
            const key = Object.keys(state.subscriptions).find(k => state.subscriptions[k][0] === data.uuid[i]);
            if (key) {
              delete state.subscriptions[key];
            }
          }
          syncBodies();
          break;
        }
      case 'subscribe':
        {
          const {
            id,
            target,
            type
          } = data.props;
          state.subscriptions[id] = [data.uuid, type, target];
          break;
        }
      case 'unsubscribe':
        {
          delete state.subscriptions[data.props];
          break;
        }
      case 'setPosition':
        state.bodies[data.uuid].position.set(data.props[0], data.props[1], data.props[2]);
        break;
      case 'setQuaternion':
        state.bodies[data.uuid].quaternion.set(data.props[0], data.props[1], data.props[2], data.props[3]);
        break;
      case 'setRotation':
        state.bodies[data.uuid].quaternion.setFromEuler(data.props[0], data.props[1], data.props[2]);
        break;
      case 'setVelocity':
        state.bodies[data.uuid].velocity.set(data.props[0], data.props[1], data.props[2]);
        break;
      case 'setAngularVelocity':
        state.bodies[data.uuid].angularVelocity.set(data.props[0], data.props[1], data.props[2]);
        break;
      case 'setLinearFactor':
        state.bodies[data.uuid].linearFactor.set(data.props[0], data.props[1], data.props[2]);
        break;
      case 'setAngularFactor':
        state.bodies[data.uuid].angularFactor.set(data.props[0], data.props[1], data.props[2]);
        break;
      case 'setMass':
        state.bodies[data.uuid].mass = data.props;
        state.bodies[data.uuid].updateMassProperties();
        break;
      case 'setMaterial':
        state.bodies[data.uuid].material = data.props ? createMaterial(data.props) : null;
        break;
      case 'setLinearDamping':
        state.bodies[data.uuid].linearDamping = data.props;
        break;
      case 'setAngularDamping':
        state.bodies[data.uuid].angularDamping = data.props;
        break;
      case 'setAllowSleep':
        state.bodies[data.uuid].allowSleep = data.props;
        break;
      case 'setSleepSpeedLimit':
        state.bodies[data.uuid].sleepSpeedLimit = data.props;
        break;
      case 'setSleepTimeLimit':
        state.bodies[data.uuid].sleepTimeLimit = data.props;
        break;
      case 'setCollisionFilterGroup':
        state.bodies[data.uuid].collisionFilterGroup = data.props;
        break;
      case 'setCollisionFilterMask':
        state.bodies[data.uuid].collisionFilterMask = data.props;
        break;
      case 'setCollisionResponse':
        state.bodies[data.uuid].collisionResponse = data.props;
        break;
      case 'setFixedRotation':
        state.bodies[data.uuid].fixedRotation = data.props;
        break;
      case 'setFrictionGravity':
        state.world.frictionGravity = data.props ? new Vec3(...data.props) : undefined;
        break;
      case 'setIsTrigger':
        state.bodies[data.uuid].isTrigger = data.props;
        break;
      case 'setGravity':
        state.world.gravity.set(data.props[0], data.props[1], data.props[2]);
        break;
      case 'setTolerance':
        if (state.world.solver instanceof GSSolver) {
          state.world.solver.tolerance = data.props;
        }
        break;
      case 'setIterations':
        if (state.world.solver instanceof GSSolver) {
          state.world.solver.iterations = data.props;
        }
        break;
      case 'setBroadphase':
        state.world.broadphase = new (broadphases[`${data.props}Broadphase`] || NaiveBroadphase)(state.world);
        break;
      case 'setAxisIndex':
        if (state.world.broadphase instanceof SAPBroadphase) {
          state.world.broadphase.axisIndex = data.props === undefined || data.props === null ? 0 : data.props;
        }
        break;
      case 'applyForce':
        state.bodies[data.uuid].applyForce(new Vec3(...data.props[0]), new Vec3(...data.props[1]));
        break;
      case 'applyImpulse':
        state.bodies[data.uuid].applyImpulse(new Vec3(...data.props[0]), new Vec3(...data.props[1]));
        break;
      case 'applyLocalForce':
        state.bodies[data.uuid].applyLocalForce(new Vec3(...data.props[0]), new Vec3(...data.props[1]));
        break;
      case 'applyLocalImpulse':
        state.bodies[data.uuid].applyLocalImpulse(new Vec3(...data.props[0]), new Vec3(...data.props[1]));
        break;
      case 'applyTorque':
        state.bodies[data.uuid].applyTorque(new Vec3(...data.props[0]));
        break;
      case 'addConstraint':
        {
          addConstraint(state, data);
          break;
        }
      case 'removeConstraint':
        state.world.constraints.filter(_ref2 => {
          let {
            uuid
          } = _ref2;
          return uuid === data.uuid;
        }).map(c => state.world.removeConstraint(c));
        if (state.constraints[data.uuid]) {
          state.world.removeEventListener('postStep', state.constraints[data.uuid]);
          delete state.constraints[data.uuid];
        }
        break;
      case 'enableConstraint':
        state.world.constraints.filter(c => c.uuid === data.uuid).map(c => c.enable());
        break;
      case 'disableConstraint':
        state.world.constraints.filter(c => c.uuid === data.uuid).map(c => c.disable());
        break;
      case 'enableConstraintMotor':
        state.world.constraints.filter(c => c.uuid === data.uuid).filter(isHingeConstraint).map(c => c.enableMotor());
        break;
      case 'disableConstraintMotor':
        state.world.constraints.filter(c => c.uuid === data.uuid).filter(isHingeConstraint).map(c => c.disableMotor());
        break;
      case 'setConstraintMotorSpeed':
        state.world.constraints.filter(c => c.uuid === data.uuid).filter(isHingeConstraint).map(c => c.setMotorSpeed(data.props));
        break;
      case 'setConstraintMotorMaxForce':
        state.world.constraints.filter(c => c.uuid === data.uuid).filter(isHingeConstraint).map(c => c.setMotorMaxForce(data.props));
        break;
      case 'addSpring':
        {
          addSpring(state, data);
          break;
        }
      case 'setSpringStiffness':
        {
          state.springInstances[data.uuid].stiffness = data.props;
          break;
        }
      case 'setSpringRestLength':
        {
          state.springInstances[data.uuid].restLength = data.props;
          break;
        }
      case 'setSpringDamping':
        {
          state.springInstances[data.uuid].damping = data.props;
          break;
        }
      case 'removeSpring':
        {
          state.world.removeEventListener('postStep', state.springs[data.uuid]);
          break;
        }
      case 'addRay':
        {
          addRay(state, data);
          break;
        }
      case 'removeRay':
        {
          state.world.removeEventListener('preStep', state.rays[data.uuid]);
          delete state.rays[data.uuid];
          break;
        }
      case 'addRaycastVehicle':
        {
          addRaycastVehicle(state, data);
          break;
        }
      case 'removeRaycastVehicle':
        {
          state.world.removeEventListener('preStep', state.vehicles[data.uuid].preStep);
          state.world.removeEventListener('postStep', state.vehicles[data.uuid].postStep);
          state.vehicles[data.uuid].vehicle.world = null;
          delete state.vehicles[data.uuid];
          const key = Object.keys(state.subscriptions).find(k => state.subscriptions[k][0] === data.uuid);
          if (key) {
            delete state.subscriptions[key];
          }
          break;
        }
      case 'setRaycastVehicleSteeringValue':
        {
          const [value, wheelIndex] = data.props;
          state.vehicles[data.uuid].vehicle.setSteeringValue(value, wheelIndex);
          break;
        }
      case 'applyRaycastVehicleEngineForce':
        {
          const [value, wheelIndex] = data.props;
          state.vehicles[data.uuid].vehicle.applyEngineForce(value, wheelIndex);
          break;
        }
      case 'setRaycastVehicleBrake':
        {
          const [brake, wheelIndex] = data.props;
          state.vehicles[data.uuid].vehicle.setBrake(brake, wheelIndex);
          break;
        }
      case 'addContactMaterial':
        {
          addContactMaterial(state.world, createMaterial, data.props, data.uuid);
          break;
        }
      case 'removeContactMaterial':
        {
          removeContactMaterial(state.world, data.uuid);
          break;
        }
      case 'wakeUp':
        {
          state.bodies[data.uuid].wakeUp();
          break;
        }
      case 'sleep':
        {
          state.bodies[data.uuid].sleep();
          break;
        }
    }
  };

})();

', 'data:application/json;charset=utf-8;base64,{"version":3,"file":"index.js","sources":["../../node_modules/cannon-es/dist/cannon-es.js","worker://web-worker/worker/contact-material.ts","worker://web-worker/worker/material.ts","worker://web-worker/props-to-body.js","worker://web-worker/worker/operations/add-bodies.ts","worker://web-worker/worker/triplet-to-vec3.ts","worker://web-worker/worker/operations/add-constraint.ts","worker://web-worker/worker/operations/add-ray.ts","worker://web-worker/worker/operations/add-raycast-vehicle.ts","worker://web-worker/worker/operations/add-spring.ts","worker://web-worker/worker/operations/init.ts","worker://web-worker/worker/operations/step.ts","worker://web-worker/worker/state.ts","worker://web-worker/worker/index.ts"],"sourcesContent":["/**\n * Records what objects are colliding with each other\n */\nclass ObjectCollisionMatrix {\n  /**\n   * The matrix storage.\n   */\n\n  /**\n   * @todo Remove useless constructor\n   */\n  constructor() {\n    this.matrix = {};\n  }\n  /**\n   * get\n   */\n\n\n  get(bi, bj) {\n    let {\n      id: i\n    } = bi;\n    let {\n      id: j\n    } = bj;\n\n    if (j > i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    return `${i}-${j}` in this.matrix;\n  }\n  /**\n   * set\n   */\n\n\n  set(bi, bj, value) {\n    let {\n      id: i\n    } = bi;\n    let {\n      id: j\n    } = bj;\n\n    if (j > i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    if (value) {\n      this.matrix[`${i}-${j}`] = true;\n    } else {\n      delete this.matrix[`${i}-${j}`];\n    }\n  }\n  /**\n   * Empty the matrix\n   */\n\n\n  reset() {\n    this.matrix = {};\n  }\n  /**\n   * Set max number of objects\n   */\n\n\n  setNumObjects(n) {}\n\n}\n\n/**\n * A 3x3 matrix.\n * Authored by {@link http://github.com/schteppe/ schteppe}\n */\nclass Mat3 {\n  /**\n   * A vector of length 9, containing all matrix elements.\n   */\n\n  /**\n   * @param elements A vector of length 9, containing all matrix elements.\n   */\n  constructor(elements) {\n    if (elements === void 0) {\n      elements = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    }\n\n    this.elements = elements;\n  }\n  /**\n   * Sets the matrix to identity\n   * @todo Should perhaps be renamed to `setIdentity()` to be more clear.\n   * @todo Create another function that immediately creates an identity matrix eg. `eye()`\n   */\n\n\n  identity() {\n    const e = this.elements;\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n    e[4] = 1;\n    e[5] = 0;\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 1;\n  }\n  /**\n   * Set all elements to zero\n   */\n\n\n  setZero() {\n    const e = this.elements;\n    e[0] = 0;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n    e[4] = 0;\n    e[5] = 0;\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 0;\n  }\n  /**\n   * Sets the matrix diagonal elements from a Vec3\n   */\n\n\n  setTrace(vector) {\n    const e = this.elements;\n    e[0] = vector.x;\n    e[4] = vector.y;\n    e[8] = vector.z;\n  }\n  /**\n   * Gets the matrix diagonal elements\n   */\n\n\n  getTrace(target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const e = this.elements;\n    target.x = e[0];\n    target.y = e[4];\n    target.z = e[8];\n    return target;\n  }\n  /**\n   * Matrix-Vector multiplication\n   * @param v The vector to multiply with\n   * @param target Optional, target to save the result in.\n   */\n\n\n  vmult(v, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const e = this.elements;\n    const x = v.x;\n    const y = v.y;\n    const z = v.z;\n    target.x = e[0] * x + e[1] * y + e[2] * z;\n    target.y = e[3] * x + e[4] * y + e[5] * z;\n    target.z = e[6] * x + e[7] * y + e[8] * z;\n    return target;\n  }\n  /**\n   * Matrix-scalar multiplication\n   */\n\n\n  smult(s) {\n    for (let i = 0; i < this.elements.length; i++) {\n      this.elements[i] *= s;\n    }\n  }\n  /**\n   * Matrix multiplication\n   * @param matrix Matrix to multiply with from left side.\n   */\n\n\n  mmult(matrix, target) {\n    if (target === void 0) {\n      target = new Mat3();\n    }\n\n    const A = this.elements;\n    const B = matrix.elements;\n    const T = target.elements;\n    const a11 = A[0],\n          a12 = A[1],\n          a13 = A[2],\n          a21 = A[3],\n          a22 = A[4],\n          a23 = A[5],\n          a31 = A[6],\n          a32 = A[7],\n          a33 = A[8];\n    const b11 = B[0],\n          b12 = B[1],\n          b13 = B[2],\n          b21 = B[3],\n          b22 = B[4],\n          b23 = B[5],\n          b31 = B[6],\n          b32 = B[7],\n          b33 = B[8];\n    T[0] = a11 * b11 + a12 * b21 + a13 * b31;\n    T[1] = a11 * b12 + a12 * b22 + a13 * b32;\n    T[2] = a11 * b13 + a12 * b23 + a13 * b33;\n    T[3] = a21 * b11 + a22 * b21 + a23 * b31;\n    T[4] = a21 * b12 + a22 * b22 + a23 * b32;\n    T[5] = a21 * b13 + a22 * b23 + a23 * b33;\n    T[6] = a31 * b11 + a32 * b21 + a33 * b31;\n    T[7] = a31 * b12 + a32 * b22 + a33 * b32;\n    T[8] = a31 * b13 + a32 * b23 + a33 * b33;\n    return target;\n  }\n  /**\n   * Scale each column of the matrix\n   */\n\n\n  scale(vector, target) {\n    if (target === void 0) {\n      target = new Mat3();\n    }\n\n    const e = this.elements;\n    const t = target.elements;\n\n    for (let i = 0; i !== 3; i++) {\n      t[3 * i + 0] = vector.x * e[3 * i + 0];\n      t[3 * i + 1] = vector.y * e[3 * i + 1];\n      t[3 * i + 2] = vector.z * e[3 * i + 2];\n    }\n\n    return target;\n  }\n  /**\n   * Solve Ax=b\n   * @param b The right hand side\n   * @param target Optional. Target vector to save in.\n   * @return The solution x\n   * @todo should reuse arrays\n   */\n\n\n  solve(b, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    // Construct equations\n    const nr = 3; // num rows\n\n    const nc = 4; // num cols\n\n    const eqns = [];\n    let i;\n    let j;\n\n    for (i = 0; i < nr * nc; i++) {\n      eqns.push(0);\n    }\n\n    for (i = 0; i < 3; i++) {\n      for (j = 0; j < 3; j++) {\n        eqns[i + nc * j] = this.elements[i + 3 * j];\n      }\n    }\n\n    eqns[3 + 4 * 0] = b.x;\n    eqns[3 + 4 * 1] = b.y;\n    eqns[3 + 4 * 2] = b.z; // Compute right upper triangular version of the matrix - Gauss elimination\n\n    let n = 3;\n    const k = n;\n    let np;\n    const kp = 4; // num rows\n\n    let p;\n\n    do {\n      i = k - n;\n\n      if (eqns[i + nc * i] === 0) {\n        // the pivot is null, swap lines\n        for (j = i + 1; j < k; j++) {\n          if (eqns[i + nc * j] !== 0) {\n            np = kp;\n\n            do {\n              // do ligne( i ) = ligne( i ) + ligne( k )\n              p = kp - np;\n              eqns[p + nc * i] += eqns[p + nc * j];\n            } while (--np);\n\n            break;\n          }\n        }\n      }\n\n      if (eqns[i + nc * i] !== 0) {\n        for (j = i + 1; j < k; j++) {\n          const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n          np = kp;\n\n          do {\n            // do ligne( k ) = ligne( k ) - multiplier * ligne( i )\n            p = kp - np;\n            eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n          } while (--np);\n        }\n      }\n    } while (--n); // Get the solution\n\n\n    target.z = eqns[2 * nc + 3] / eqns[2 * nc + 2];\n    target.y = (eqns[1 * nc + 3] - eqns[1 * nc + 2] * target.z) / eqns[1 * nc + 1];\n    target.x = (eqns[0 * nc + 3] - eqns[0 * nc + 2] * target.z - eqns[0 * nc + 1] * target.y) / eqns[0 * nc + 0];\n\n    if (isNaN(target.x) || isNaN(target.y) || isNaN(target.z) || target.x === Infinity || target.y === Infinity || target.z === Infinity) {\n      throw `Could not solve equation! Got x=[${target.toString()}], b=[${b.toString()}], A=[${this.toString()}]`;\n    }\n\n    return target;\n  }\n  /**\n   * Get an element in the matrix by index. Index starts at 0, not 1!!!\n   * @param value If provided, the matrix element will be set to this value.\n   */\n\n\n  e(row, column, value) {\n    if (value === undefined) {\n      return this.elements[column + 3 * row];\n    } else {\n      // Set value\n      this.elements[column + 3 * row] = value;\n    }\n  }\n  /**\n   * Copy another matrix into this matrix object.\n   */\n\n\n  copy(matrix) {\n    for (let i = 0; i < matrix.elements.length; i++) {\n      this.elements[i] = matrix.elements[i];\n    }\n\n    return this;\n  }\n  /**\n   * Returns a string representation of the matrix.\n   */\n\n\n  toString() {\n    let r = '';\n    const sep = ',';\n\n    for (let i = 0; i < 9; i++) {\n      r += this.elements[i] + sep;\n    }\n\n    return r;\n  }\n  /**\n   * reverse the matrix\n   * @param target Target matrix to save in.\n   * @return The solution x\n   */\n\n\n  reverse(target) {\n    if (target === void 0) {\n      target = new Mat3();\n    }\n\n    // Construct equations\n    const nr = 3; // num rows\n\n    const nc = 6; // num cols\n\n    const eqns = reverse_eqns;\n    let i;\n    let j;\n\n    for (i = 0; i < 3; i++) {\n      for (j = 0; j < 3; j++) {\n        eqns[i + nc * j] = this.elements[i + 3 * j];\n      }\n    }\n\n    eqns[3 + 6 * 0] = 1;\n    eqns[3 + 6 * 1] = 0;\n    eqns[3 + 6 * 2] = 0;\n    eqns[4 + 6 * 0] = 0;\n    eqns[4 + 6 * 1] = 1;\n    eqns[4 + 6 * 2] = 0;\n    eqns[5 + 6 * 0] = 0;\n    eqns[5 + 6 * 1] = 0;\n    eqns[5 + 6 * 2] = 1; // Compute right upper triangular version of the matrix - Gauss elimination\n\n    let n = 3;\n    const k = n;\n    let np;\n    const kp = nc; // num rows\n\n    let p;\n\n    do {\n      i = k - n;\n\n      if (eqns[i + nc * i] === 0) {\n        // the pivot is null, swap lines\n        for (j = i + 1; j < k; j++) {\n          if (eqns[i + nc * j] !== 0) {\n            np = kp;\n\n            do {\n              // do line( i ) = line( i ) + line( k )\n              p = kp - np;\n              eqns[p + nc * i] += eqns[p + nc * j];\n            } while (--np);\n\n            break;\n          }\n        }\n      }\n\n      if (eqns[i + nc * i] !== 0) {\n        for (j = i + 1; j < k; j++) {\n          const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n          np = kp;\n\n          do {\n            // do line( k ) = line( k ) - multiplier * line( i )\n            p = kp - np;\n            eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n          } while (--np);\n        }\n      }\n    } while (--n); // eliminate the upper left triangle of the matrix\n\n\n    i = 2;\n\n    do {\n      j = i - 1;\n\n      do {\n        const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n        np = nc;\n\n        do {\n          p = nc - np;\n          eqns[p + nc * j] = eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n        } while (--np);\n      } while (j--);\n    } while (--i); // operations on the diagonal\n\n\n    i = 2;\n\n    do {\n      const multiplier = 1 / eqns[i + nc * i];\n      np = nc;\n\n      do {\n        p = nc - np;\n        eqns[p + nc * i] = eqns[p + nc * i] * multiplier;\n      } while (--np);\n    } while (i--);\n\n    i = 2;\n\n    do {\n      j = 2;\n\n      do {\n        p = eqns[nr + j + nc * i];\n\n        if (isNaN(p) || p === Infinity) {\n          throw `Could not reverse! A=[${this.toString()}]`;\n        }\n\n        target.e(i, j, p);\n      } while (j--);\n    } while (i--);\n\n    return target;\n  }\n  /**\n   * Set the matrix from a quaterion\n   */\n\n\n  setRotationFromQuaternion(q) {\n    const x = q.x;\n    const y = q.y;\n    const z = q.z;\n    const w = q.w;\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n    const xx = x * x2;\n    const xy = x * y2;\n    const xz = x * z2;\n    const yy = y * y2;\n    const yz = y * z2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n    const e = this.elements;\n    e[3 * 0 + 0] = 1 - (yy + zz);\n    e[3 * 0 + 1] = xy - wz;\n    e[3 * 0 + 2] = xz + wy;\n    e[3 * 1 + 0] = xy + wz;\n    e[3 * 1 + 1] = 1 - (xx + zz);\n    e[3 * 1 + 2] = yz - wx;\n    e[3 * 2 + 0] = xz - wy;\n    e[3 * 2 + 1] = yz + wx;\n    e[3 * 2 + 2] = 1 - (xx + yy);\n    return this;\n  }\n  /**\n   * Transpose the matrix\n   * @param target Optional. Where to store the result.\n   * @return The target Mat3, or a new Mat3 if target was omitted.\n   */\n\n\n  transpose(target) {\n    if (target === void 0) {\n      target = new Mat3();\n    }\n\n    const M = this.elements;\n    const T = target.elements;\n    let tmp; //Set diagonals\n\n    T[0] = M[0];\n    T[4] = M[4];\n    T[8] = M[8];\n    tmp = M[1];\n    T[1] = M[3];\n    T[3] = tmp;\n    tmp = M[2];\n    T[2] = M[6];\n    T[6] = tmp;\n    tmp = M[5];\n    T[5] = M[7];\n    T[7] = tmp;\n    return target;\n  }\n\n}\nconst reverse_eqns = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n/**\n * 3-dimensional vector\n * @example\n *     const v = new Vec3(1, 2, 3)\n *     console.log('x=' + v.x) // x=1\n */\n\nclass Vec3 {\n  constructor(x, y, z) {\n    if (x === void 0) {\n      x = 0.0;\n    }\n\n    if (y === void 0) {\n      y = 0.0;\n    }\n\n    if (z === void 0) {\n      z = 0.0;\n    }\n\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  /**\n   * Vector cross product\n   * @param target Optional target to save in.\n   */\n\n\n  cross(vector, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const vx = vector.x;\n    const vy = vector.y;\n    const vz = vector.z;\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    target.x = y * vz - z * vy;\n    target.y = z * vx - x * vz;\n    target.z = x * vy - y * vx;\n    return target;\n  }\n  /**\n   * Set the vectors' 3 elements\n   */\n\n\n  set(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n  }\n  /**\n   * Set all components of the vector to zero.\n   */\n\n\n  setZero() {\n    this.x = this.y = this.z = 0;\n  }\n  /**\n   * Vector addition\n   */\n\n\n  vadd(vector, target) {\n    if (target) {\n      target.x = vector.x + this.x;\n      target.y = vector.y + this.y;\n      target.z = vector.z + this.z;\n    } else {\n      return new Vec3(this.x + vector.x, this.y + vector.y, this.z + vector.z);\n    }\n  }\n  /**\n   * Vector subtraction\n   * @param target Optional target to save in.\n   */\n\n\n  vsub(vector, target) {\n    if (target) {\n      target.x = this.x - vector.x;\n      target.y = this.y - vector.y;\n      target.z = this.z - vector.z;\n    } else {\n      return new Vec3(this.x - vector.x, this.y - vector.y, this.z - vector.z);\n    }\n  }\n  /**\n   * Get the cross product matrix a_cross from a vector, such that a x b = a_cross * b = c\n   *\n   * See {@link https://www8.cs.umu.se/kurser/TDBD24/VT06/lectures/Lecture6.pdf Umeå University Lecture}\n   */\n\n\n  crossmat() {\n    return new Mat3([0, -this.z, this.y, this.z, 0, -this.x, -this.y, this.x, 0]);\n  }\n  /**\n   * Normalize the vector. Note that this changes the values in the vector.\n    * @return Returns the norm of the vector\n   */\n\n\n  normalize() {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const n = Math.sqrt(x * x + y * y + z * z);\n\n    if (n > 0.0) {\n      const invN = 1 / n;\n      this.x *= invN;\n      this.y *= invN;\n      this.z *= invN;\n    } else {\n      // Make something up\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n    }\n\n    return n;\n  }\n  /**\n   * Get the version of this vector that is of length 1.\n   * @param target Optional target to save in\n   * @return Returns the unit vector\n   */\n\n\n  unit(target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    let ninv = Math.sqrt(x * x + y * y + z * z);\n\n    if (ninv > 0.0) {\n      ninv = 1.0 / ninv;\n      target.x = x * ninv;\n      target.y = y * ninv;\n      target.z = z * ninv;\n    } else {\n      target.x = 1;\n      target.y = 0;\n      target.z = 0;\n    }\n\n    return target;\n  }\n  /**\n   * Get the length of the vector\n   */\n\n\n  length() {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n  /**\n   * Get the squared length of the vector.\n   */\n\n\n  lengthSquared() {\n    return this.dot(this);\n  }\n  /**\n   * Get distance from this point to another point\n   */\n\n\n  distanceTo(p) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const px = p.x;\n    const py = p.y;\n    const pz = p.z;\n    return Math.sqrt((px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z));\n  }\n  /**\n   * Get squared distance from this point to another point\n   */\n\n\n  distanceSquared(p) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const px = p.x;\n    const py = p.y;\n    const pz = p.z;\n    return (px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z);\n  }\n  /**\n   * Multiply all the components of the vector with a scalar.\n   * @param target The vector to save the result in.\n   */\n\n\n  scale(scalar, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    target.x = scalar * x;\n    target.y = scalar * y;\n    target.z = scalar * z;\n    return target;\n  }\n  /**\n   * Multiply the vector with an other vector, component-wise.\n   * @param target The vector to save the result in.\n   */\n\n\n  vmul(vector, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    target.x = vector.x * this.x;\n    target.y = vector.y * this.y;\n    target.z = vector.z * this.z;\n    return target;\n  }\n  /**\n   * Scale a vector and add it to this vector. Save the result in \"target\". (target = this + vector * scalar)\n   * @param target The vector to save the result in.\n   */\n\n\n  addScaledVector(scalar, vector, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    target.x = this.x + scalar * vector.x;\n    target.y = this.y + scalar * vector.y;\n    target.z = this.z + scalar * vector.z;\n    return target;\n  }\n  /**\n   * Calculate dot product\n   * @param vector\n   */\n\n\n  dot(vector) {\n    return this.x * vector.x + this.y * vector.y + this.z * vector.z;\n  }\n\n  isZero() {\n    return this.x === 0 && this.y === 0 && this.z === 0;\n  }\n  /**\n   * Make the vector point in the opposite direction.\n   * @param target Optional target to save in\n   */\n\n\n  negate(target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    return target;\n  }\n  /**\n   * Compute two artificial tangents to the vector\n   * @param t1 Vector object to save the first tangent in\n   * @param t2 Vector object to save the second tangent in\n   */\n\n\n  tangents(t1, t2) {\n    const norm = this.length();\n\n    if (norm > 0.0) {\n      const n = Vec3_tangents_n;\n      const inorm = 1 / norm;\n      n.set(this.x * inorm, this.y * inorm, this.z * inorm);\n      const randVec = Vec3_tangents_randVec;\n\n      if (Math.abs(n.x) < 0.9) {\n        randVec.set(1, 0, 0);\n        n.cross(randVec, t1);\n      } else {\n        randVec.set(0, 1, 0);\n        n.cross(randVec, t1);\n      }\n\n      n.cross(t1, t2);\n    } else {\n      // The normal length is zero, make something up\n      t1.set(1, 0, 0);\n      t2.set(0, 1, 0);\n    }\n  }\n  /**\n   * Converts to a more readable format\n   */\n\n\n  toString() {\n    return `${this.x},${this.y},${this.z}`;\n  }\n  /**\n   * Converts to an array\n   */\n\n\n  toArray() {\n    return [this.x, this.y, this.z];\n  }\n  /**\n   * Copies value of source to this vector.\n   */\n\n\n  copy(vector) {\n    this.x = vector.x;\n    this.y = vector.y;\n    this.z = vector.z;\n    return this;\n  }\n  /**\n   * Do a linear interpolation between two vectors\n   * @param t A number between 0 and 1. 0 will make this function return u, and 1 will make it return v. Numbers in between will generate a vector in between them.\n   */\n\n\n  lerp(vector, t, target) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    target.x = x + (vector.x - x) * t;\n    target.y = y + (vector.y - y) * t;\n    target.z = z + (vector.z - z) * t;\n  }\n  /**\n   * Check if a vector equals is almost equal to another one.\n   */\n\n\n  almostEquals(vector, precision) {\n    if (precision === void 0) {\n      precision = 1e-6;\n    }\n\n    if (Math.abs(this.x - vector.x) > precision || Math.abs(this.y - vector.y) > precision || Math.abs(this.z - vector.z) > precision) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Check if a vector is almost zero\n   */\n\n\n  almostZero(precision) {\n    if (precision === void 0) {\n      precision = 1e-6;\n    }\n\n    if (Math.abs(this.x) > precision || Math.abs(this.y) > precision || Math.abs(this.z) > precision) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Check if the vector is anti-parallel to another vector.\n   * @param precision Set to zero for exact comparisons\n   */\n\n\n  isAntiparallelTo(vector, precision) {\n    this.negate(antip_neg);\n    return antip_neg.almostEquals(vector, precision);\n  }\n  /**\n   * Clone the vector\n   */\n\n\n  clone() {\n    return new Vec3(this.x, this.y, this.z);\n  }\n\n}\nVec3.ZERO = new Vec3(0, 0, 0);\nVec3.UNIT_X = new Vec3(1, 0, 0);\nVec3.UNIT_Y = new Vec3(0, 1, 0);\nVec3.UNIT_Z = new Vec3(0, 0, 1);\nconst Vec3_tangents_n = new Vec3();\nconst Vec3_tangents_randVec = new Vec3();\nconst antip_neg = new Vec3();\n\n/**\n * Axis aligned bounding box class.\n */\nclass AABB {\n  /**\n   * The lower bound of the bounding box\n   */\n\n  /**\n   * The upper bound of the bounding box\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.lowerBound = new Vec3();\n    this.upperBound = new Vec3();\n\n    if (options.lowerBound) {\n      this.lowerBound.copy(options.lowerBound);\n    }\n\n    if (options.upperBound) {\n      this.upperBound.copy(options.upperBound);\n    }\n  }\n  /**\n   * Set the AABB bounds from a set of points.\n   * @param points An array of Vec3's.\n   * @return The self object\n   */\n\n\n  setFromPoints(points, position, quaternion, skinSize) {\n    const l = this.lowerBound;\n    const u = this.upperBound;\n    const q = quaternion; // Set to the first point\n\n    l.copy(points[0]);\n\n    if (q) {\n      q.vmult(l, l);\n    }\n\n    u.copy(l);\n\n    for (let i = 1; i < points.length; i++) {\n      let p = points[i];\n\n      if (q) {\n        q.vmult(p, tmp$1);\n        p = tmp$1;\n      }\n\n      if (p.x > u.x) {\n        u.x = p.x;\n      }\n\n      if (p.x < l.x) {\n        l.x = p.x;\n      }\n\n      if (p.y > u.y) {\n        u.y = p.y;\n      }\n\n      if (p.y < l.y) {\n        l.y = p.y;\n      }\n\n      if (p.z > u.z) {\n        u.z = p.z;\n      }\n\n      if (p.z < l.z) {\n        l.z = p.z;\n      }\n    } // Add offset\n\n\n    if (position) {\n      position.vadd(l, l);\n      position.vadd(u, u);\n    }\n\n    if (skinSize) {\n      l.x -= skinSize;\n      l.y -= skinSize;\n      l.z -= skinSize;\n      u.x += skinSize;\n      u.y += skinSize;\n      u.z += skinSize;\n    }\n\n    return this;\n  }\n  /**\n   * Copy bounds from an AABB to this AABB\n   * @param aabb Source to copy from\n   * @return The this object, for chainability\n   */\n\n\n  copy(aabb) {\n    this.lowerBound.copy(aabb.lowerBound);\n    this.upperBound.copy(aabb.upperBound);\n    return this;\n  }\n  /**\n   * Clone an AABB\n   */\n\n\n  clone() {\n    return new AABB().copy(this);\n  }\n  /**\n   * Extend this AABB so that it covers the given AABB too.\n   */\n\n\n  extend(aabb) {\n    this.lowerBound.x = Math.min(this.lowerBound.x, aabb.lowerBound.x);\n    this.upperBound.x = Math.max(this.upperBound.x, aabb.upperBound.x);\n    this.lowerBound.y = Math.min(this.lowerBound.y, aabb.lowerBound.y);\n    this.upperBound.y = Math.max(this.upperBound.y, aabb.upperBound.y);\n    this.lowerBound.z = Math.min(this.lowerBound.z, aabb.lowerBound.z);\n    this.upperBound.z = Math.max(this.upperBound.z, aabb.upperBound.z);\n  }\n  /**\n   * Returns true if the given AABB overlaps this AABB.\n   */\n\n\n  overlaps(aabb) {\n    const l1 = this.lowerBound;\n    const u1 = this.upperBound;\n    const l2 = aabb.lowerBound;\n    const u2 = aabb.upperBound; //      l2        u2\n    //      |---------|\n    // |--------|\n    // l1       u1\n\n    const overlapsX = l2.x <= u1.x && u1.x <= u2.x || l1.x <= u2.x && u2.x <= u1.x;\n    const overlapsY = l2.y <= u1.y && u1.y <= u2.y || l1.y <= u2.y && u2.y <= u1.y;\n    const overlapsZ = l2.z <= u1.z && u1.z <= u2.z || l1.z <= u2.z && u2.z <= u1.z;\n    return overlapsX && overlapsY && overlapsZ;\n  } // Mostly for debugging\n\n\n  volume() {\n    const l = this.lowerBound;\n    const u = this.upperBound;\n    return (u.x - l.x) * (u.y - l.y) * (u.z - l.z);\n  }\n  /**\n   * Returns true if the given AABB is fully contained in this AABB.\n   */\n\n\n  contains(aabb) {\n    const l1 = this.lowerBound;\n    const u1 = this.upperBound;\n    const l2 = aabb.lowerBound;\n    const u2 = aabb.upperBound; //      l2        u2\n    //      |---------|\n    // |---------------|\n    // l1              u1\n\n    return l1.x <= l2.x && u1.x >= u2.x && l1.y <= l2.y && u1.y >= u2.y && l1.z <= l2.z && u1.z >= u2.z;\n  }\n\n  getCorners(a, b, c, d, e, f, g, h) {\n    const l = this.lowerBound;\n    const u = this.upperBound;\n    a.copy(l);\n    b.set(u.x, l.y, l.z);\n    c.set(u.x, u.y, l.z);\n    d.set(l.x, u.y, u.z);\n    e.set(u.x, l.y, u.z);\n    f.set(l.x, u.y, l.z);\n    g.set(l.x, l.y, u.z);\n    h.copy(u);\n  }\n  /**\n   * Get the representation of an AABB in another frame.\n   * @return The \"target\" AABB object.\n   */\n\n\n  toLocalFrame(frame, target) {\n    const corners = transformIntoFrame_corners;\n    const a = corners[0];\n    const b = corners[1];\n    const c = corners[2];\n    const d = corners[3];\n    const e = corners[4];\n    const f = corners[5];\n    const g = corners[6];\n    const h = corners[7]; // Get corners in current frame\n\n    this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame\n\n    for (let i = 0; i !== 8; i++) {\n      const corner = corners[i];\n      frame.pointToLocal(corner, corner);\n    }\n\n    return target.setFromPoints(corners);\n  }\n  /**\n   * Get the representation of an AABB in the global frame.\n   * @return The \"target\" AABB object.\n   */\n\n\n  toWorldFrame(frame, target) {\n    const corners = transformIntoFrame_corners;\n    const a = corners[0];\n    const b = corners[1];\n    const c = corners[2];\n    const d = corners[3];\n    const e = corners[4];\n    const f = corners[5];\n    const g = corners[6];\n    const h = corners[7]; // Get corners in current frame\n\n    this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame\n\n    for (let i = 0; i !== 8; i++) {\n      const corner = corners[i];\n      frame.pointToWorld(corner, corner);\n    }\n\n    return target.setFromPoints(corners);\n  }\n  /**\n   * Check if the AABB is hit by a ray.\n   */\n\n\n  overlapsRay(ray) {\n    const {\n      direction,\n      from\n    } = ray; // const t = 0\n    // ray.direction is unit direction vector of ray\n\n    const dirFracX = 1 / direction.x;\n    const dirFracY = 1 / direction.y;\n    const dirFracZ = 1 / direction.z; // this.lowerBound is the corner of AABB with minimal coordinates - left bottom, rt is maximal corner\n\n    const t1 = (this.lowerBound.x - from.x) * dirFracX;\n    const t2 = (this.upperBound.x - from.x) * dirFracX;\n    const t3 = (this.lowerBound.y - from.y) * dirFracY;\n    const t4 = (this.upperBound.y - from.y) * dirFracY;\n    const t5 = (this.lowerBound.z - from.z) * dirFracZ;\n    const t6 = (this.upperBound.z - from.z) * dirFracZ; // const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)));\n    // const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)));\n\n    const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)), Math.min(t5, t6));\n    const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)), Math.max(t5, t6)); // if tmax < 0, ray (line) is intersecting AABB, but whole AABB is behing us\n\n    if (tmax < 0) {\n      //t = tmax;\n      return false;\n    } // if tmin > tmax, ray doesn't intersect AABB\n\n\n    if (tmin > tmax) {\n      //t = tmax;\n      return false;\n    }\n\n    return true;\n  }\n\n}\nconst tmp$1 = new Vec3();\nconst transformIntoFrame_corners = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\n\n/**\n * Collision \"matrix\".\n * It's actually a triangular-shaped array of whether two bodies are touching this step, for reference next step\n */\nclass ArrayCollisionMatrix {\n  /**\n   * The matrix storage.\n   */\n  constructor() {\n    this.matrix = [];\n  }\n  /**\n   * Get an element\n   */\n\n\n  get(bi, bj) {\n    let {\n      index: i\n    } = bi;\n    let {\n      index: j\n    } = bj;\n\n    if (j > i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    return this.matrix[(i * (i + 1) >> 1) + j - 1];\n  }\n  /**\n   * Set an element\n   */\n\n\n  set(bi, bj, value) {\n    let {\n      index: i\n    } = bi;\n    let {\n      index: j\n    } = bj;\n\n    if (j > i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    this.matrix[(i * (i + 1) >> 1) + j - 1] = value ? 1 : 0;\n  }\n  /**\n   * Sets all elements to zero\n   */\n\n\n  reset() {\n    for (let i = 0, l = this.matrix.length; i !== l; i++) {\n      this.matrix[i] = 0;\n    }\n  }\n  /**\n   * Sets the max number of objects\n   */\n\n\n  setNumObjects(n) {\n    this.matrix.length = n * (n - 1) >> 1;\n  }\n\n}\n\n/**\n * Base class for objects that dispatches events.\n */\nclass EventTarget {\n  /**\n   * Add an event listener\n   * @return The self object, for chainability.\n   */\n  addEventListener(type, listener) {\n    if (this._listeners === undefined) {\n      this._listeners = {};\n    }\n\n    const listeners = this._listeners;\n\n    if (listeners[type] === undefined) {\n      listeners[type] = [];\n    }\n\n    if (!listeners[type].includes(listener)) {\n      listeners[type].push(listener);\n    }\n\n    return this;\n  }\n  /**\n   * Check if an event listener is added\n   */\n\n\n  hasEventListener(type, listener) {\n    if (this._listeners === undefined) {\n      return false;\n    }\n\n    const listeners = this._listeners;\n\n    if (listeners[type] !== undefined && listeners[type].includes(listener)) {\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Check if any event listener of the given type is added\n   */\n\n\n  hasAnyEventListener(type) {\n    if (this._listeners === undefined) {\n      return false;\n    }\n\n    const listeners = this._listeners;\n    return listeners[type] !== undefined;\n  }\n  /**\n   * Remove an event listener\n   * @return The self object, for chainability.\n   */\n\n\n  removeEventListener(type, listener) {\n    if (this._listeners === undefined) {\n      return this;\n    }\n\n    const listeners = this._listeners;\n\n    if (listeners[type] === undefined) {\n      return this;\n    }\n\n    const index = listeners[type].indexOf(listener);\n\n    if (index !== -1) {\n      listeners[type].splice(index, 1);\n    }\n\n    return this;\n  }\n  /**\n   * Emit an event.\n   * @return The self object, for chainability.\n   */\n\n\n  dispatchEvent(event) {\n    if (this._listeners === undefined) {\n      return this;\n    }\n\n    const listeners = this._listeners;\n    const listenerArray = listeners[event.type];\n\n    if (listenerArray !== undefined) {\n      event.target = this;\n\n      for (let i = 0, l = listenerArray.length; i < l; i++) {\n        listenerArray[i].call(this, event);\n      }\n    }\n\n    return this;\n  }\n\n}\n\n/**\n * A Quaternion describes a rotation in 3D space. The Quaternion is mathematically defined as Q = x*i + y*j + z*k + w, where (i,j,k) are imaginary basis vectors. (x,y,z) can be seen as a vector related to the axis of rotation, while the real multiplier, w, is related to the amount of rotation.\n * @param x Multiplier of the imaginary basis vector i.\n * @param y Multiplier of the imaginary basis vector j.\n * @param z Multiplier of the imaginary basis vector k.\n * @param w Multiplier of the real part.\n * @see http://en.wikipedia.org/wiki/Quaternion\n */\n\nclass Quaternion {\n  constructor(x, y, z, w) {\n    if (x === void 0) {\n      x = 0;\n    }\n\n    if (y === void 0) {\n      y = 0;\n    }\n\n    if (z === void 0) {\n      z = 0;\n    }\n\n    if (w === void 0) {\n      w = 1;\n    }\n\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n  }\n  /**\n   * Set the value of the quaternion.\n   */\n\n\n  set(x, y, z, w) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n    return this;\n  }\n  /**\n   * Convert to a readable format\n   * @return \"x,y,z,w\"\n   */\n\n\n  toString() {\n    return `${this.x},${this.y},${this.z},${this.w}`;\n  }\n  /**\n   * Convert to an Array\n   * @return [x, y, z, w]\n   */\n\n\n  toArray() {\n    return [this.x, this.y, this.z, this.w];\n  }\n  /**\n   * Set the quaternion components given an axis and an angle in radians.\n   */\n\n\n  setFromAxisAngle(vector, angle) {\n    const s = Math.sin(angle * 0.5);\n    this.x = vector.x * s;\n    this.y = vector.y * s;\n    this.z = vector.z * s;\n    this.w = Math.cos(angle * 0.5);\n    return this;\n  }\n  /**\n   * Converts the quaternion to [ axis, angle ] representation.\n   * @param targetAxis A vector object to reuse for storing the axis.\n   * @return An array, first element is the axis and the second is the angle in radians.\n   */\n\n\n  toAxisAngle(targetAxis) {\n    if (targetAxis === void 0) {\n      targetAxis = new Vec3();\n    }\n\n    this.normalize(); // if w>1 acos and sqrt will produce errors, this cant happen if quaternion is normalised\n\n    const angle = 2 * Math.acos(this.w);\n    const s = Math.sqrt(1 - this.w * this.w); // assuming quaternion normalised then w is less than 1, so term always positive.\n\n    if (s < 0.001) {\n      // test to avoid divide by zero, s is always positive due to sqrt\n      // if s close to zero then direction of axis not important\n      targetAxis.x = this.x; // if it is important that axis is normalised then replace with x=1; y=z=0;\n\n      targetAxis.y = this.y;\n      targetAxis.z = this.z;\n    } else {\n      targetAxis.x = this.x / s; // normalise axis\n\n      targetAxis.y = this.y / s;\n      targetAxis.z = this.z / s;\n    }\n\n    return [targetAxis, angle];\n  }\n  /**\n   * Set the quaternion value given two vectors. The resulting rotation will be the needed rotation to rotate u to v.\n   */\n\n\n  setFromVectors(u, v) {\n    if (u.isAntiparallelTo(v)) {\n      const t1 = sfv_t1;\n      const t2 = sfv_t2;\n      u.tangents(t1, t2);\n      this.setFromAxisAngle(t1, Math.PI);\n    } else {\n      const a = u.cross(v);\n      this.x = a.x;\n      this.y = a.y;\n      this.z = a.z;\n      this.w = Math.sqrt(u.length() ** 2 * v.length() ** 2) + u.dot(v);\n      this.normalize();\n    }\n\n    return this;\n  }\n  /**\n   * Multiply the quaternion with an other quaternion.\n   */\n\n\n  mult(quat, target) {\n    if (target === void 0) {\n      target = new Quaternion();\n    }\n\n    const ax = this.x;\n    const ay = this.y;\n    const az = this.z;\n    const aw = this.w;\n    const bx = quat.x;\n    const by = quat.y;\n    const bz = quat.z;\n    const bw = quat.w;\n    target.x = ax * bw + aw * bx + ay * bz - az * by;\n    target.y = ay * bw + aw * by + az * bx - ax * bz;\n    target.z = az * bw + aw * bz + ax * by - ay * bx;\n    target.w = aw * bw - ax * bx - ay * by - az * bz;\n    return target;\n  }\n  /**\n   * Get the inverse quaternion rotation.\n   */\n\n\n  inverse(target) {\n    if (target === void 0) {\n      target = new Quaternion();\n    }\n\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const w = this.w;\n    this.conjugate(target);\n    const inorm2 = 1 / (x * x + y * y + z * z + w * w);\n    target.x *= inorm2;\n    target.y *= inorm2;\n    target.z *= inorm2;\n    target.w *= inorm2;\n    return target;\n  }\n  /**\n   * Get the quaternion conjugate\n   */\n\n\n  conjugate(target) {\n    if (target === void 0) {\n      target = new Quaternion();\n    }\n\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    target.w = this.w;\n    return target;\n  }\n  /**\n   * Normalize the quaternion. Note that this changes the values of the quaternion.\n   */\n\n\n  normalize() {\n    let l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n\n    if (l === 0) {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n      this.w = 0;\n    } else {\n      l = 1 / l;\n      this.x *= l;\n      this.y *= l;\n      this.z *= l;\n      this.w *= l;\n    }\n\n    return this;\n  }\n  /**\n   * Approximation of quaternion normalization. Works best when quat is already almost-normalized.\n   * @author unphased, https://github.com/unphased\n   */\n\n\n  normalizeFast() {\n    const f = (3.0 - (this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)) / 2.0;\n\n    if (f === 0) {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n      this.w = 0;\n    } else {\n      this.x *= f;\n      this.y *= f;\n      this.z *= f;\n      this.w *= f;\n    }\n\n    return this;\n  }\n  /**\n   * Multiply the quaternion by a vector\n   */\n\n\n  vmult(v, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const x = v.x;\n    const y = v.y;\n    const z = v.z;\n    const qx = this.x;\n    const qy = this.y;\n    const qz = this.z;\n    const qw = this.w; // q*v\n\n    const ix = qw * x + qy * z - qz * y;\n    const iy = qw * y + qz * x - qx * z;\n    const iz = qw * z + qx * y - qy * x;\n    const iw = -qx * x - qy * y - qz * z;\n    target.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    target.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    target.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return target;\n  }\n  /**\n   * Copies value of source to this quaternion.\n   * @return this\n   */\n\n\n  copy(quat) {\n    this.x = quat.x;\n    this.y = quat.y;\n    this.z = quat.z;\n    this.w = quat.w;\n    return this;\n  }\n  /**\n   * Convert the quaternion to euler angle representation. Order: YZX, as this page describes: https://www.euclideanspace.com/maths/standards/index.htm\n   * @param order Three-character string, defaults to \"YZX\"\n   */\n\n\n  toEuler(target, order) {\n    if (order === void 0) {\n      order = 'YZX';\n    }\n\n    let heading;\n    let attitude;\n    let bank;\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const w = this.w;\n\n    switch (order) {\n      case 'YZX':\n        const test = x * y + z * w;\n\n        if (test > 0.499) {\n          // singularity at north pole\n          heading = 2 * Math.atan2(x, w);\n          attitude = Math.PI / 2;\n          bank = 0;\n        }\n\n        if (test < -0.499) {\n          // singularity at south pole\n          heading = -2 * Math.atan2(x, w);\n          attitude = -Math.PI / 2;\n          bank = 0;\n        }\n\n        if (heading === undefined) {\n          const sqx = x * x;\n          const sqy = y * y;\n          const sqz = z * z;\n          heading = Math.atan2(2 * y * w - 2 * x * z, 1 - 2 * sqy - 2 * sqz); // Heading\n\n          attitude = Math.asin(2 * test); // attitude\n\n          bank = Math.atan2(2 * x * w - 2 * y * z, 1 - 2 * sqx - 2 * sqz); // bank\n        }\n\n        break;\n\n      default:\n        throw new Error(`Euler order ${order} not supported yet.`);\n    }\n\n    target.y = heading;\n    target.z = attitude;\n    target.x = bank;\n  }\n  /**\n   * Set the quaternion components given Euler angle representation.\n   *\n   * @param order The order to apply angles: 'XYZ' or 'YXZ' or any other combination.\n   *\n   * See {@link https://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors MathWorks} reference\n   */\n\n\n  setFromEuler(x, y, z, order) {\n    if (order === void 0) {\n      order = 'XYZ';\n    }\n\n    const c1 = Math.cos(x / 2);\n    const c2 = Math.cos(y / 2);\n    const c3 = Math.cos(z / 2);\n    const s1 = Math.sin(x / 2);\n    const s2 = Math.sin(y / 2);\n    const s3 = Math.sin(z / 2);\n\n    if (order === 'XYZ') {\n      this.x = s1 * c2 * c3 + c1 * s2 * s3;\n      this.y = c1 * s2 * c3 - s1 * c2 * s3;\n      this.z = c1 * c2 * s3 + s1 * s2 * c3;\n      this.w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'YXZ') {\n      this.x = s1 * c2 * c3 + c1 * s2 * s3;\n      this.y = c1 * s2 * c3 - s1 * c2 * s3;\n      this.z = c1 * c2 * s3 - s1 * s2 * c3;\n      this.w = c1 * c2 * c3 + s1 * s2 * s3;\n    } else if (order === 'ZXY') {\n      this.x = s1 * c2 * c3 - c1 * s2 * s3;\n      this.y = c1 * s2 * c3 + s1 * c2 * s3;\n      this.z = c1 * c2 * s3 + s1 * s2 * c3;\n      this.w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'ZYX') {\n      this.x = s1 * c2 * c3 - c1 * s2 * s3;\n      this.y = c1 * s2 * c3 + s1 * c2 * s3;\n      this.z = c1 * c2 * s3 - s1 * s2 * c3;\n      this.w = c1 * c2 * c3 + s1 * s2 * s3;\n    } else if (order === 'YZX') {\n      this.x = s1 * c2 * c3 + c1 * s2 * s3;\n      this.y = c1 * s2 * c3 + s1 * c2 * s3;\n      this.z = c1 * c2 * s3 - s1 * s2 * c3;\n      this.w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'XZY') {\n      this.x = s1 * c2 * c3 - c1 * s2 * s3;\n      this.y = c1 * s2 * c3 - s1 * c2 * s3;\n      this.z = c1 * c2 * s3 + s1 * s2 * c3;\n      this.w = c1 * c2 * c3 + s1 * s2 * s3;\n    }\n\n    return this;\n  }\n\n  clone() {\n    return new Quaternion(this.x, this.y, this.z, this.w);\n  }\n  /**\n   * Performs a spherical linear interpolation between two quat\n   *\n   * @param toQuat second operand\n   * @param t interpolation amount between the self quaternion and toQuat\n   * @param target A quaternion to store the result in. If not provided, a new one will be created.\n   * @returns {Quaternion} The \"target\" object\n   */\n\n\n  slerp(toQuat, t, target) {\n    if (target === void 0) {\n      target = new Quaternion();\n    }\n\n    const ax = this.x;\n    const ay = this.y;\n    const az = this.z;\n    const aw = this.w;\n    let bx = toQuat.x;\n    let by = toQuat.y;\n    let bz = toQuat.z;\n    let bw = toQuat.w;\n    let omega;\n    let cosom;\n    let sinom;\n    let scale0;\n    let scale1; // calc cosine\n\n    cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n    if (cosom < 0.0) {\n      cosom = -cosom;\n      bx = -bx;\n      by = -by;\n      bz = -bz;\n      bw = -bw;\n    } // calculate coefficients\n\n\n    if (1.0 - cosom > 0.000001) {\n      // standard case (slerp)\n      omega = Math.acos(cosom);\n      sinom = Math.sin(omega);\n      scale0 = Math.sin((1.0 - t) * omega) / sinom;\n      scale1 = Math.sin(t * omega) / sinom;\n    } else {\n      // \"from\" and \"to\" quaternions are very close\n      //  ... so we can do a linear interpolation\n      scale0 = 1.0 - t;\n      scale1 = t;\n    } // calculate final values\n\n\n    target.x = scale0 * ax + scale1 * bx;\n    target.y = scale0 * ay + scale1 * by;\n    target.z = scale0 * az + scale1 * bz;\n    target.w = scale0 * aw + scale1 * bw;\n    return target;\n  }\n  /**\n   * Rotate an absolute orientation quaternion given an angular velocity and a time step.\n   */\n\n\n  integrate(angularVelocity, dt, angularFactor, target) {\n    if (target === void 0) {\n      target = new Quaternion();\n    }\n\n    const ax = angularVelocity.x * angularFactor.x,\n          ay = angularVelocity.y * angularFactor.y,\n          az = angularVelocity.z * angularFactor.z,\n          bx = this.x,\n          by = this.y,\n          bz = this.z,\n          bw = this.w;\n    const half_dt = dt * 0.5;\n    target.x += half_dt * (ax * bw + ay * bz - az * by);\n    target.y += half_dt * (ay * bw + az * bx - ax * bz);\n    target.z += half_dt * (az * bw + ax * by - ay * bx);\n    target.w += half_dt * (-ax * bx - ay * by - az * bz);\n    return target;\n  }\n\n}\nconst sfv_t1 = new Vec3();\nconst sfv_t2 = new Vec3();\n\n/**\n * The available shape types.\n */\nconst SHAPE_TYPES = {\n  /** SPHERE */\n  SPHERE: 1,\n\n  /** PLANE */\n  PLANE: 2,\n\n  /** BOX */\n  BOX: 4,\n\n  /** COMPOUND */\n  COMPOUND: 8,\n\n  /** CONVEXPOLYHEDRON */\n  CONVEXPOLYHEDRON: 16,\n\n  /** HEIGHTFIELD */\n  HEIGHTFIELD: 32,\n\n  /** PARTICLE */\n  PARTICLE: 64,\n\n  /** CYLINDER */\n  CYLINDER: 128,\n\n  /** TRIMESH */\n  TRIMESH: 256\n};\n/**\n * ShapeType\n */\n\n/**\n * Base class for shapes\n */\nclass Shape {\n  /**\n   * Identifier of the Shape.\n   */\n\n  /**\n   * The type of this shape. Must be set to an int > 0 by subclasses.\n   */\n\n  /**\n   * The local bounding sphere radius of this shape.\n   */\n\n  /**\n   * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.\n   * @default true\n   */\n\n  /**\n   * @default 1\n   */\n\n  /**\n   * @default -1\n   */\n\n  /**\n   * Optional material of the shape that regulates contact properties.\n   */\n\n  /**\n   * The body to which the shape is added to.\n   */\n\n  /**\n   * All the Shape types.\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.id = Shape.idCounter++;\n    this.type = options.type || 0;\n    this.boundingSphereRadius = 0;\n    this.collisionResponse = options.collisionResponse ? options.collisionResponse : true;\n    this.collisionFilterGroup = options.collisionFilterGroup !== undefined ? options.collisionFilterGroup : 1;\n    this.collisionFilterMask = options.collisionFilterMask !== undefined ? options.collisionFilterMask : -1;\n    this.material = options.material ? options.material : null;\n    this.body = null;\n  }\n  /**\n   * Computes the bounding sphere radius.\n   * The result is stored in the property `.boundingSphereRadius`\n   */\n\n\n  updateBoundingSphereRadius() {\n    throw `computeBoundingSphereRadius() not implemented for shape type ${this.type}`;\n  }\n  /**\n   * Get the volume of this shape\n   */\n\n\n  volume() {\n    throw `volume() not implemented for shape type ${this.type}`;\n  }\n  /**\n   * Calculates the inertia in the local frame for this shape.\n   * @see http://en.wikipedia.org/wiki/List_of_moments_of_inertia\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    throw `calculateLocalInertia() not implemented for shape type ${this.type}`;\n  }\n  /**\n   * @todo use abstract for these kind of methods\n   */\n\n\n  calculateWorldAABB(pos, quat, min, max) {\n    throw `calculateWorldAABB() not implemented for shape type ${this.type}`;\n  }\n\n}\nShape.idCounter = 0;\nShape.types = SHAPE_TYPES;\n\n/**\n * Transformation utilities.\n */\nclass Transform {\n  /**\n   * position\n   */\n\n  /**\n   * quaternion\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.position = new Vec3();\n    this.quaternion = new Quaternion();\n\n    if (options.position) {\n      this.position.copy(options.position);\n    }\n\n    if (options.quaternion) {\n      this.quaternion.copy(options.quaternion);\n    }\n  }\n  /**\n   * Get a global point in local transform coordinates.\n   */\n\n\n  pointToLocal(worldPoint, result) {\n    return Transform.pointToLocalFrame(this.position, this.quaternion, worldPoint, result);\n  }\n  /**\n   * Get a local point in global transform coordinates.\n   */\n\n\n  pointToWorld(localPoint, result) {\n    return Transform.pointToWorldFrame(this.position, this.quaternion, localPoint, result);\n  }\n  /**\n   * vectorToWorldFrame\n   */\n\n\n  vectorToWorldFrame(localVector, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    this.quaternion.vmult(localVector, result);\n    return result;\n  }\n  /**\n   * pointToLocalFrame\n   */\n\n\n  static pointToLocalFrame(position, quaternion, worldPoint, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    worldPoint.vsub(position, result);\n    quaternion.conjugate(tmpQuat$1);\n    tmpQuat$1.vmult(result, result);\n    return result;\n  }\n  /**\n   * pointToWorldFrame\n   */\n\n\n  static pointToWorldFrame(position, quaternion, localPoint, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    quaternion.vmult(localPoint, result);\n    result.vadd(position, result);\n    return result;\n  }\n  /**\n   * vectorToWorldFrame\n   */\n\n\n  static vectorToWorldFrame(quaternion, localVector, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    quaternion.vmult(localVector, result);\n    return result;\n  }\n  /**\n   * vectorToLocalFrame\n   */\n\n\n  static vectorToLocalFrame(position, quaternion, worldVector, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    quaternion.w *= -1;\n    quaternion.vmult(worldVector, result);\n    quaternion.w *= -1;\n    return result;\n  }\n\n}\nconst tmpQuat$1 = new Quaternion();\n\n/**\n * A set of polygons describing a convex shape.\n *\n * The shape MUST be convex for the code to work properly. No polygons may be coplanar (contained\n * in the same 3D plane), instead these should be merged into one polygon.\n *\n * @author qiao / https://github.com/qiao (original author, see https://github.com/qiao/three.js/commit/85026f0c769e4000148a67d45a9e9b9c5108836f)\n * @author schteppe / https://github.com/schteppe\n * @see https://www.altdevblogaday.com/2011/05/13/contact-generation-between-3d-convex-meshes/\n *\n * @todo Move the clipping functions to ContactGenerator?\n * @todo Automatically merge coplanar polygons in constructor.\n * @example\n *     const convexShape = new CANNON.ConvexPolyhedron({ vertices, faces })\n *     const convexBody = new CANNON.Body({ mass: 1, shape: convexShape })\n *     world.addBody(convexBody)\n */\nclass ConvexPolyhedron extends Shape {\n  /** vertices */\n\n  /**\n   * Array of integer arrays, indicating which vertices each face consists of\n   */\n\n  /** faceNormals */\n\n  /** worldVertices */\n\n  /** worldVerticesNeedsUpdate */\n\n  /** worldFaceNormals */\n\n  /** worldFaceNormalsNeedsUpdate */\n\n  /**\n   * If given, these locally defined, normalized axes are the only ones being checked when doing separating axis check.\n   */\n\n  /** uniqueEdges */\n\n  /**\n   * @param vertices An array of Vec3's\n   * @param faces Array of integer arrays, describing which vertices that is included in each face.\n   */\n  constructor(props) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    const {\n      vertices = [],\n      faces = [],\n      normals = [],\n      axes,\n      boundingSphereRadius\n    } = props;\n    super({\n      type: Shape.types.CONVEXPOLYHEDRON\n    });\n    this.vertices = vertices;\n    this.faces = faces;\n    this.faceNormals = normals;\n\n    if (this.faceNormals.length === 0) {\n      this.computeNormals();\n    }\n\n    if (!boundingSphereRadius) {\n      this.updateBoundingSphereRadius();\n    } else {\n      this.boundingSphereRadius = boundingSphereRadius;\n    }\n\n    this.worldVertices = []; // World transformed version of .vertices\n\n    this.worldVerticesNeedsUpdate = true;\n    this.worldFaceNormals = []; // World transformed version of .faceNormals\n\n    this.worldFaceNormalsNeedsUpdate = true;\n    this.uniqueAxes = axes ? axes.slice() : null;\n    this.uniqueEdges = [];\n    this.computeEdges();\n  }\n  /**\n   * Computes uniqueEdges\n   */\n\n\n  computeEdges() {\n    const faces = this.faces;\n    const vertices = this.vertices;\n    const edges = this.uniqueEdges;\n    edges.length = 0;\n    const edge = new Vec3();\n\n    for (let i = 0; i !== faces.length; i++) {\n      const face = faces[i];\n      const numVertices = face.length;\n\n      for (let j = 0; j !== numVertices; j++) {\n        const k = (j + 1) % numVertices;\n        vertices[face[j]].vsub(vertices[face[k]], edge);\n        edge.normalize();\n        let found = false;\n\n        for (let p = 0; p !== edges.length; p++) {\n          if (edges[p].almostEquals(edge) || edges[p].almostEquals(edge)) {\n            found = true;\n            break;\n          }\n        }\n\n        if (!found) {\n          edges.push(edge.clone());\n        }\n      }\n    }\n  }\n  /**\n   * Compute the normals of the faces.\n   * Will reuse existing Vec3 objects in the `faceNormals` array if they exist.\n   */\n\n\n  computeNormals() {\n    this.faceNormals.length = this.faces.length; // Generate normals\n\n    for (let i = 0; i < this.faces.length; i++) {\n      // Check so all vertices exists for this face\n      for (let j = 0; j < this.faces[i].length; j++) {\n        if (!this.vertices[this.faces[i][j]]) {\n          throw new Error(`Vertex ${this.faces[i][j]} not found!`);\n        }\n      }\n\n      const n = this.faceNormals[i] || new Vec3();\n      this.getFaceNormal(i, n);\n      n.negate(n);\n      this.faceNormals[i] = n;\n      const vertex = this.vertices[this.faces[i][0]];\n\n      if (n.dot(vertex) < 0) {\n        console.error(`.faceNormals[${i}] = Vec3(${n.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);\n\n        for (let j = 0; j < this.faces[i].length; j++) {\n          console.warn(`.vertices[${this.faces[i][j]}] = Vec3(${this.vertices[this.faces[i][j]].toString()})`);\n        }\n      }\n    }\n  }\n  /**\n   * Compute the normal of a face from its vertices\n   */\n\n\n  getFaceNormal(i, target) {\n    const f = this.faces[i];\n    const va = this.vertices[f[0]];\n    const vb = this.vertices[f[1]];\n    const vc = this.vertices[f[2]];\n    ConvexPolyhedron.computeNormal(va, vb, vc, target);\n  }\n  /**\n   * Get face normal given 3 vertices\n   */\n\n\n  static computeNormal(va, vb, vc, target) {\n    const cb = new Vec3();\n    const ab = new Vec3();\n    vb.vsub(va, ab);\n    vc.vsub(vb, cb);\n    cb.cross(ab, target);\n\n    if (!target.isZero()) {\n      target.normalize();\n    }\n  }\n  /**\n   * @param minDist Clamp distance\n   * @param result The an array of contact point objects, see clipFaceAgainstHull\n   */\n\n\n  clipAgainstHull(posA, quatA, hullB, posB, quatB, separatingNormal, minDist, maxDist, result) {\n    const WorldNormal = new Vec3();\n    let closestFaceB = -1;\n    let dmax = -Number.MAX_VALUE;\n\n    for (let face = 0; face < hullB.faces.length; face++) {\n      WorldNormal.copy(hullB.faceNormals[face]);\n      quatB.vmult(WorldNormal, WorldNormal);\n      const d = WorldNormal.dot(separatingNormal);\n\n      if (d > dmax) {\n        dmax = d;\n        closestFaceB = face;\n      }\n    }\n\n    const worldVertsB1 = [];\n\n    for (let i = 0; i < hullB.faces[closestFaceB].length; i++) {\n      const b = hullB.vertices[hullB.faces[closestFaceB][i]];\n      const worldb = new Vec3();\n      worldb.copy(b);\n      quatB.vmult(worldb, worldb);\n      posB.vadd(worldb, worldb);\n      worldVertsB1.push(worldb);\n    }\n\n    if (closestFaceB >= 0) {\n      this.clipFaceAgainstHull(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist, result);\n    }\n  }\n  /**\n   * Find the separating axis between this hull and another\n   * @param target The target vector to save the axis in\n   * @return Returns false if a separation is found, else true\n   */\n\n\n  findSeparatingAxis(hullB, posA, quatA, posB, quatB, target, faceListA, faceListB) {\n    const faceANormalWS3 = new Vec3();\n    const Worldnormal1 = new Vec3();\n    const deltaC = new Vec3();\n    const worldEdge0 = new Vec3();\n    const worldEdge1 = new Vec3();\n    const Cross = new Vec3();\n    let dmin = Number.MAX_VALUE;\n    const hullA = this;\n\n    if (!hullA.uniqueAxes) {\n      const numFacesA = faceListA ? faceListA.length : hullA.faces.length; // Test face normals from hullA\n\n      for (let i = 0; i < numFacesA; i++) {\n        const fi = faceListA ? faceListA[i] : i; // Get world face normal\n\n        faceANormalWS3.copy(hullA.faceNormals[fi]);\n        quatA.vmult(faceANormalWS3, faceANormalWS3);\n        const d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n\n        if (d === false) {\n          return false;\n        }\n\n        if (d < dmin) {\n          dmin = d;\n          target.copy(faceANormalWS3);\n        }\n      }\n    } else {\n      // Test unique axes\n      for (let i = 0; i !== hullA.uniqueAxes.length; i++) {\n        // Get world axis\n        quatA.vmult(hullA.uniqueAxes[i], faceANormalWS3);\n        const d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n\n        if (d === false) {\n          return false;\n        }\n\n        if (d < dmin) {\n          dmin = d;\n          target.copy(faceANormalWS3);\n        }\n      }\n    }\n\n    if (!hullB.uniqueAxes) {\n      // Test face normals from hullB\n      const numFacesB = faceListB ? faceListB.length : hullB.faces.length;\n\n      for (let i = 0; i < numFacesB; i++) {\n        const fi = faceListB ? faceListB[i] : i;\n        Worldnormal1.copy(hullB.faceNormals[fi]);\n        quatB.vmult(Worldnormal1, Worldnormal1);\n        const d = hullA.testSepAxis(Worldnormal1, hullB, posA, quatA, posB, quatB);\n\n        if (d === false) {\n          return false;\n        }\n\n        if (d < dmin) {\n          dmin = d;\n          target.copy(Worldnormal1);\n        }\n      }\n    } else {\n      // Test unique axes in B\n      for (let i = 0; i !== hullB.uniqueAxes.length; i++) {\n        quatB.vmult(hullB.uniqueAxes[i], Worldnormal1);\n        const d = hullA.testSepAxis(Worldnormal1, hullB, posA, quatA, posB, quatB);\n\n        if (d === false) {\n          return false;\n        }\n\n        if (d < dmin) {\n          dmin = d;\n          target.copy(Worldnormal1);\n        }\n      }\n    } // Test edges\n\n\n    for (let e0 = 0; e0 !== hullA.uniqueEdges.length; e0++) {\n      // Get world edge\n      quatA.vmult(hullA.uniqueEdges[e0], worldEdge0);\n\n      for (let e1 = 0; e1 !== hullB.uniqueEdges.length; e1++) {\n        // Get world edge 2\n        quatB.vmult(hullB.uniqueEdges[e1], worldEdge1);\n        worldEdge0.cross(worldEdge1, Cross);\n\n        if (!Cross.almostZero()) {\n          Cross.normalize();\n          const dist = hullA.testSepAxis(Cross, hullB, posA, quatA, posB, quatB);\n\n          if (dist === false) {\n            return false;\n          }\n\n          if (dist < dmin) {\n            dmin = dist;\n            target.copy(Cross);\n          }\n        }\n      }\n    }\n\n    posB.vsub(posA, deltaC);\n\n    if (deltaC.dot(target) > 0.0) {\n      target.negate(target);\n    }\n\n    return true;\n  }\n  /**\n   * Test separating axis against two hulls. Both hulls are projected onto the axis and the overlap size is returned if there is one.\n   * @return The overlap depth, or FALSE if no penetration.\n   */\n\n\n  testSepAxis(axis, hullB, posA, quatA, posB, quatB) {\n    const hullA = this;\n    ConvexPolyhedron.project(hullA, axis, posA, quatA, maxminA);\n    ConvexPolyhedron.project(hullB, axis, posB, quatB, maxminB);\n    const maxA = maxminA[0];\n    const minA = maxminA[1];\n    const maxB = maxminB[0];\n    const minB = maxminB[1];\n\n    if (maxA < minB || maxB < minA) {\n      return false; // Separated\n    }\n\n    const d0 = maxA - minB;\n    const d1 = maxB - minA;\n    const depth = d0 < d1 ? d0 : d1;\n    return depth;\n  }\n  /**\n   * calculateLocalInertia\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    // Approximate with box inertia\n    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n    const aabbmax = new Vec3();\n    const aabbmin = new Vec3();\n    this.computeLocalAABB(aabbmin, aabbmax);\n    const x = aabbmax.x - aabbmin.x;\n    const y = aabbmax.y - aabbmin.y;\n    const z = aabbmax.z - aabbmin.z;\n    target.x = 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * z * 2 * z);\n    target.y = 1.0 / 12.0 * mass * (2 * x * 2 * x + 2 * z * 2 * z);\n    target.z = 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * x * 2 * x);\n  }\n  /**\n   * @param face_i Index of the face\n   */\n\n\n  getPlaneConstantOfFace(face_i) {\n    const f = this.faces[face_i];\n    const n = this.faceNormals[face_i];\n    const v = this.vertices[f[0]];\n    const c = -n.dot(v);\n    return c;\n  }\n  /**\n   * Clip a face against a hull.\n   * @param worldVertsB1 An array of Vec3 with vertices in the world frame.\n   * @param minDist Distance clamping\n   * @param Array result Array to store resulting contact points in. Will be objects with properties: point, depth, normal. These are represented in world coordinates.\n   */\n\n\n  clipFaceAgainstHull(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist, result) {\n    const faceANormalWS = new Vec3();\n    const edge0 = new Vec3();\n    const WorldEdge0 = new Vec3();\n    const worldPlaneAnormal1 = new Vec3();\n    const planeNormalWS1 = new Vec3();\n    const worldA1 = new Vec3();\n    const localPlaneNormal = new Vec3();\n    const planeNormalWS = new Vec3();\n    const hullA = this;\n    const worldVertsB2 = [];\n    const pVtxIn = worldVertsB1;\n    const pVtxOut = worldVertsB2;\n    let closestFaceA = -1;\n    let dmin = Number.MAX_VALUE; // Find the face with normal closest to the separating axis\n\n    for (let face = 0; face < hullA.faces.length; face++) {\n      faceANormalWS.copy(hullA.faceNormals[face]);\n      quatA.vmult(faceANormalWS, faceANormalWS);\n      const d = faceANormalWS.dot(separatingNormal);\n\n      if (d < dmin) {\n        dmin = d;\n        closestFaceA = face;\n      }\n    }\n\n    if (closestFaceA < 0) {\n      return;\n    } // Get the face and construct connected faces\n\n\n    const polyA = hullA.faces[closestFaceA];\n    polyA.connectedFaces = [];\n\n    for (let i = 0; i < hullA.faces.length; i++) {\n      for (let j = 0; j < hullA.faces[i].length; j++) {\n        if (\n        /* Sharing a vertex*/\n        polyA.indexOf(hullA.faces[i][j]) !== -1 &&\n        /* Not the one we are looking for connections from */\n        i !== closestFaceA &&\n        /* Not already added */\n        polyA.connectedFaces.indexOf(i) === -1) {\n          polyA.connectedFaces.push(i);\n        }\n      }\n    } // Clip the polygon to the back of the planes of all faces of hull A,\n    // that are adjacent to the witness face\n\n\n    const numVerticesA = polyA.length;\n\n    for (let i = 0; i < numVerticesA; i++) {\n      const a = hullA.vertices[polyA[i]];\n      const b = hullA.vertices[polyA[(i + 1) % numVerticesA]];\n      a.vsub(b, edge0);\n      WorldEdge0.copy(edge0);\n      quatA.vmult(WorldEdge0, WorldEdge0);\n      posA.vadd(WorldEdge0, WorldEdge0);\n      worldPlaneAnormal1.copy(this.faceNormals[closestFaceA]);\n      quatA.vmult(worldPlaneAnormal1, worldPlaneAnormal1);\n      posA.vadd(worldPlaneAnormal1, worldPlaneAnormal1);\n      WorldEdge0.cross(worldPlaneAnormal1, planeNormalWS1);\n      planeNormalWS1.negate(planeNormalWS1);\n      worldA1.copy(a);\n      quatA.vmult(worldA1, worldA1);\n      posA.vadd(worldA1, worldA1);\n      const otherFace = polyA.connectedFaces[i];\n      localPlaneNormal.copy(this.faceNormals[otherFace]);\n      const localPlaneEq = this.getPlaneConstantOfFace(otherFace);\n      planeNormalWS.copy(localPlaneNormal);\n      quatA.vmult(planeNormalWS, planeNormalWS);\n      const planeEqWS = localPlaneEq - planeNormalWS.dot(posA); // Clip face against our constructed plane\n\n      this.clipFaceAgainstPlane(pVtxIn, pVtxOut, planeNormalWS, planeEqWS); // Throw away all clipped points, but save the remaining until next clip\n\n      while (pVtxIn.length) {\n        pVtxIn.shift();\n      }\n\n      while (pVtxOut.length) {\n        pVtxIn.push(pVtxOut.shift());\n      }\n    } // only keep contact points that are behind the witness face\n\n\n    localPlaneNormal.copy(this.faceNormals[closestFaceA]);\n    const localPlaneEq = this.getPlaneConstantOfFace(closestFaceA);\n    planeNormalWS.copy(localPlaneNormal);\n    quatA.vmult(planeNormalWS, planeNormalWS);\n    const planeEqWS = localPlaneEq - planeNormalWS.dot(posA);\n\n    for (let i = 0; i < pVtxIn.length; i++) {\n      let depth = planeNormalWS.dot(pVtxIn[i]) + planeEqWS; // ???\n\n      if (depth <= minDist) {\n        console.log(`clamped: depth=${depth} to minDist=${minDist}`);\n        depth = minDist;\n      }\n\n      if (depth <= maxDist) {\n        const point = pVtxIn[i];\n\n        if (depth <= 1e-6) {\n          const p = {\n            point,\n            normal: planeNormalWS,\n            depth\n          };\n          result.push(p);\n        }\n      }\n    }\n  }\n  /**\n   * Clip a face in a hull against the back of a plane.\n   * @param planeConstant The constant in the mathematical plane equation\n   */\n\n\n  clipFaceAgainstPlane(inVertices, outVertices, planeNormal, planeConstant) {\n    let n_dot_first;\n    let n_dot_last;\n    const numVerts = inVertices.length;\n\n    if (numVerts < 2) {\n      return outVertices;\n    }\n\n    let firstVertex = inVertices[inVertices.length - 1];\n    let lastVertex = inVertices[0];\n    n_dot_first = planeNormal.dot(firstVertex) + planeConstant;\n\n    for (let vi = 0; vi < numVerts; vi++) {\n      lastVertex = inVertices[vi];\n      n_dot_last = planeNormal.dot(lastVertex) + planeConstant;\n\n      if (n_dot_first < 0) {\n        if (n_dot_last < 0) {\n          // Start < 0, end < 0, so output lastVertex\n          const newv = new Vec3();\n          newv.copy(lastVertex);\n          outVertices.push(newv);\n        } else {\n          // Start < 0, end >= 0, so output intersection\n          const newv = new Vec3();\n          firstVertex.lerp(lastVertex, n_dot_first / (n_dot_first - n_dot_last), newv);\n          outVertices.push(newv);\n        }\n      } else {\n        if (n_dot_last < 0) {\n          // Start >= 0, end < 0 so output intersection and end\n          const newv = new Vec3();\n          firstVertex.lerp(lastVertex, n_dot_first / (n_dot_first - n_dot_last), newv);\n          outVertices.push(newv);\n          outVertices.push(lastVertex);\n        }\n      }\n\n      firstVertex = lastVertex;\n      n_dot_first = n_dot_last;\n    }\n\n    return outVertices;\n  }\n  /**\n   * Updates `.worldVertices` and sets `.worldVerticesNeedsUpdate` to false.\n   */\n\n\n  computeWorldVertices(position, quat) {\n    while (this.worldVertices.length < this.vertices.length) {\n      this.worldVertices.push(new Vec3());\n    }\n\n    const verts = this.vertices;\n    const worldVerts = this.worldVertices;\n\n    for (let i = 0; i !== this.vertices.length; i++) {\n      quat.vmult(verts[i], worldVerts[i]);\n      position.vadd(worldVerts[i], worldVerts[i]);\n    }\n\n    this.worldVerticesNeedsUpdate = false;\n  }\n\n  computeLocalAABB(aabbmin, aabbmax) {\n    const vertices = this.vertices;\n    aabbmin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    aabbmax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n    for (let i = 0; i < this.vertices.length; i++) {\n      const v = vertices[i];\n\n      if (v.x < aabbmin.x) {\n        aabbmin.x = v.x;\n      } else if (v.x > aabbmax.x) {\n        aabbmax.x = v.x;\n      }\n\n      if (v.y < aabbmin.y) {\n        aabbmin.y = v.y;\n      } else if (v.y > aabbmax.y) {\n        aabbmax.y = v.y;\n      }\n\n      if (v.z < aabbmin.z) {\n        aabbmin.z = v.z;\n      } else if (v.z > aabbmax.z) {\n        aabbmax.z = v.z;\n      }\n    }\n  }\n  /**\n   * Updates `worldVertices` and sets `worldVerticesNeedsUpdate` to false.\n   */\n\n\n  computeWorldFaceNormals(quat) {\n    const N = this.faceNormals.length;\n\n    while (this.worldFaceNormals.length < N) {\n      this.worldFaceNormals.push(new Vec3());\n    }\n\n    const normals = this.faceNormals;\n    const worldNormals = this.worldFaceNormals;\n\n    for (let i = 0; i !== N; i++) {\n      quat.vmult(normals[i], worldNormals[i]);\n    }\n\n    this.worldFaceNormalsNeedsUpdate = false;\n  }\n  /**\n   * updateBoundingSphereRadius\n   */\n\n\n  updateBoundingSphereRadius() {\n    // Assume points are distributed with local (0,0,0) as center\n    let max2 = 0;\n    const verts = this.vertices;\n\n    for (let i = 0; i !== verts.length; i++) {\n      const norm2 = verts[i].lengthSquared();\n\n      if (norm2 > max2) {\n        max2 = norm2;\n      }\n    }\n\n    this.boundingSphereRadius = Math.sqrt(max2);\n  }\n  /**\n   * calculateWorldAABB\n   */\n\n\n  calculateWorldAABB(pos, quat, min, max) {\n    const verts = this.vertices;\n    let minx;\n    let miny;\n    let minz;\n    let maxx;\n    let maxy;\n    let maxz;\n    let tempWorldVertex = new Vec3();\n\n    for (let i = 0; i < verts.length; i++) {\n      tempWorldVertex.copy(verts[i]);\n      quat.vmult(tempWorldVertex, tempWorldVertex);\n      pos.vadd(tempWorldVertex, tempWorldVertex);\n      const v = tempWorldVertex;\n\n      if (minx === undefined || v.x < minx) {\n        minx = v.x;\n      }\n\n      if (maxx === undefined || v.x > maxx) {\n        maxx = v.x;\n      }\n\n      if (miny === undefined || v.y < miny) {\n        miny = v.y;\n      }\n\n      if (maxy === undefined || v.y > maxy) {\n        maxy = v.y;\n      }\n\n      if (minz === undefined || v.z < minz) {\n        minz = v.z;\n      }\n\n      if (maxz === undefined || v.z > maxz) {\n        maxz = v.z;\n      }\n    }\n\n    min.set(minx, miny, minz);\n    max.set(maxx, maxy, maxz);\n  }\n  /**\n   * Get approximate convex volume\n   */\n\n\n  volume() {\n    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n  }\n  /**\n   * Get an average of all the vertices positions\n   */\n\n\n  getAveragePointLocal(target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const verts = this.vertices;\n\n    for (let i = 0; i < verts.length; i++) {\n      target.vadd(verts[i], target);\n    }\n\n    target.scale(1 / verts.length, target);\n    return target;\n  }\n  /**\n   * Transform all local points. Will change the .vertices\n   */\n\n\n  transformAllPoints(offset, quat) {\n    const n = this.vertices.length;\n    const verts = this.vertices; // Apply rotation\n\n    if (quat) {\n      // Rotate vertices\n      for (let i = 0; i < n; i++) {\n        const v = verts[i];\n        quat.vmult(v, v);\n      } // Rotate face normals\n\n\n      for (let i = 0; i < this.faceNormals.length; i++) {\n        const v = this.faceNormals[i];\n        quat.vmult(v, v);\n      }\n      /*\n            // Rotate edges\n            for(let i=0; i<this.uniqueEdges.length; i++){\n                const v = this.uniqueEdges[i];\n                quat.vmult(v,v);\n            }*/\n\n    } // Apply offset\n\n\n    if (offset) {\n      for (let i = 0; i < n; i++) {\n        const v = verts[i];\n        v.vadd(offset, v);\n      }\n    }\n  }\n  /**\n   * Checks whether p is inside the polyhedra. Must be in local coords.\n   * The point lies outside of the convex hull of the other points if and only if the direction\n   * of all the vectors from it to those other points are on less than one half of a sphere around it.\n   * @param p A point given in local coordinates\n   */\n\n\n  pointIsInside(p) {\n    const verts = this.vertices;\n    const faces = this.faces;\n    const normals = this.faceNormals;\n    const positiveResult = null;\n    const pointInside = new Vec3();\n    this.getAveragePointLocal(pointInside);\n\n    for (let i = 0; i < this.faces.length; i++) {\n      let n = normals[i];\n      const v = verts[faces[i][0]]; // We only need one point in the face\n      // This dot product determines which side of the edge the point is\n\n      const vToP = new Vec3();\n      p.vsub(v, vToP);\n      const r1 = n.dot(vToP);\n      const vToPointInside = new Vec3();\n      pointInside.vsub(v, vToPointInside);\n      const r2 = n.dot(vToPointInside);\n\n      if (r1 < 0 && r2 > 0 || r1 > 0 && r2 < 0) {\n        return false; // Encountered some other sign. Exit.\n      }\n    } // If we got here, all dot products were of the same sign.\n\n\n    return positiveResult ? 1 : -1;\n  }\n  /**\n   * Get max and min dot product of a convex hull at position (pos,quat) projected onto an axis.\n   * Results are saved in the array maxmin.\n   * @param result result[0] and result[1] will be set to maximum and minimum, respectively.\n   */\n\n\n  static project(shape, axis, pos, quat, result) {\n    const n = shape.vertices.length;\n    project_worldVertex;\n    const localAxis = project_localAxis;\n    let max = 0;\n    let min = 0;\n    const localOrigin = project_localOrigin;\n    const vs = shape.vertices;\n    localOrigin.setZero(); // Transform the axis to local\n\n    Transform.vectorToLocalFrame(pos, quat, axis, localAxis);\n    Transform.pointToLocalFrame(pos, quat, localOrigin, localOrigin);\n    const add = localOrigin.dot(localAxis);\n    min = max = vs[0].dot(localAxis);\n\n    for (let i = 1; i < n; i++) {\n      const val = vs[i].dot(localAxis);\n\n      if (val > max) {\n        max = val;\n      }\n\n      if (val < min) {\n        min = val;\n      }\n    }\n\n    min -= add;\n    max -= add;\n\n    if (min > max) {\n      // Inconsistent - swap\n      const temp = min;\n      min = max;\n      max = temp;\n    } // Output\n\n\n    result[0] = max;\n    result[1] = min;\n  }\n\n}\nconst maxminA = [];\nconst maxminB = [];\nconst project_worldVertex = new Vec3();\nconst project_localAxis = new Vec3();\nconst project_localOrigin = new Vec3();\n\n/**\n * A 3d box shape.\n * @example\n *     const size = 1\n *     const halfExtents = new CANNON.Vec3(size, size, size)\n *     const boxShape = new CANNON.Box(halfExtents)\n *     const boxBody = new CANNON.Body({ mass: 1, shape: boxShape })\n *     world.addBody(boxBody)\n */\nclass Box extends Shape {\n  /**\n   * The half extents of the box.\n   */\n\n  /**\n   * Used by the contact generator to make contacts with other convex polyhedra for example.\n   */\n  constructor(halfExtents) {\n    super({\n      type: Shape.types.BOX\n    });\n    this.halfExtents = halfExtents;\n    this.convexPolyhedronRepresentation = null;\n    this.updateConvexPolyhedronRepresentation();\n    this.updateBoundingSphereRadius();\n  }\n  /**\n   * Updates the local convex polyhedron representation used for some collisions.\n   */\n\n\n  updateConvexPolyhedronRepresentation() {\n    const sx = this.halfExtents.x;\n    const sy = this.halfExtents.y;\n    const sz = this.halfExtents.z;\n    const V = Vec3;\n    const vertices = [new V(-sx, -sy, -sz), new V(sx, -sy, -sz), new V(sx, sy, -sz), new V(-sx, sy, -sz), new V(-sx, -sy, sz), new V(sx, -sy, sz), new V(sx, sy, sz), new V(-sx, sy, sz)];\n    const faces = [[3, 2, 1, 0], // -z\n    [4, 5, 6, 7], // +z\n    [5, 4, 0, 1], // -y\n    [2, 3, 7, 6], // +y\n    [0, 4, 7, 3], // -x\n    [1, 2, 6, 5] // +x\n    ];\n    const axes = [new V(0, 0, 1), new V(0, 1, 0), new V(1, 0, 0)];\n    const h = new ConvexPolyhedron({\n      vertices,\n      faces,\n      axes\n    });\n    this.convexPolyhedronRepresentation = h;\n    h.material = this.material;\n  }\n  /**\n   * Calculate the inertia of the box.\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    Box.calculateInertia(this.halfExtents, mass, target);\n    return target;\n  }\n\n  static calculateInertia(halfExtents, mass, target) {\n    const e = halfExtents;\n    target.x = 1.0 / 12.0 * mass * (2 * e.y * 2 * e.y + 2 * e.z * 2 * e.z);\n    target.y = 1.0 / 12.0 * mass * (2 * e.x * 2 * e.x + 2 * e.z * 2 * e.z);\n    target.z = 1.0 / 12.0 * mass * (2 * e.y * 2 * e.y + 2 * e.x * 2 * e.x);\n  }\n  /**\n   * Get the box 6 side normals\n   * @param sixTargetVectors An array of 6 vectors, to store the resulting side normals in.\n   * @param quat Orientation to apply to the normal vectors. If not provided, the vectors will be in respect to the local frame.\n   */\n\n\n  getSideNormals(sixTargetVectors, quat) {\n    const sides = sixTargetVectors;\n    const ex = this.halfExtents;\n    sides[0].set(ex.x, 0, 0);\n    sides[1].set(0, ex.y, 0);\n    sides[2].set(0, 0, ex.z);\n    sides[3].set(-ex.x, 0, 0);\n    sides[4].set(0, -ex.y, 0);\n    sides[5].set(0, 0, -ex.z);\n\n    if (quat !== undefined) {\n      for (let i = 0; i !== sides.length; i++) {\n        quat.vmult(sides[i], sides[i]);\n      }\n    }\n\n    return sides;\n  }\n  /**\n   * Returns the volume of the box.\n   */\n\n\n  volume() {\n    return 8.0 * this.halfExtents.x * this.halfExtents.y * this.halfExtents.z;\n  }\n  /**\n   * updateBoundingSphereRadius\n   */\n\n\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = this.halfExtents.length();\n  }\n  /**\n   * forEachWorldCorner\n   */\n\n\n  forEachWorldCorner(pos, quat, callback) {\n    const e = this.halfExtents;\n    const corners = [[e.x, e.y, e.z], [-e.x, e.y, e.z], [-e.x, -e.y, e.z], [-e.x, -e.y, -e.z], [e.x, -e.y, -e.z], [e.x, e.y, -e.z], [-e.x, e.y, -e.z], [e.x, -e.y, e.z]];\n\n    for (let i = 0; i < corners.length; i++) {\n      worldCornerTempPos.set(corners[i][0], corners[i][1], corners[i][2]);\n      quat.vmult(worldCornerTempPos, worldCornerTempPos);\n      pos.vadd(worldCornerTempPos, worldCornerTempPos);\n      callback(worldCornerTempPos.x, worldCornerTempPos.y, worldCornerTempPos.z);\n    }\n  }\n  /**\n   * calculateWorldAABB\n   */\n\n\n  calculateWorldAABB(pos, quat, min, max) {\n    const e = this.halfExtents;\n    worldCornersTemp[0].set(e.x, e.y, e.z);\n    worldCornersTemp[1].set(-e.x, e.y, e.z);\n    worldCornersTemp[2].set(-e.x, -e.y, e.z);\n    worldCornersTemp[3].set(-e.x, -e.y, -e.z);\n    worldCornersTemp[4].set(e.x, -e.y, -e.z);\n    worldCornersTemp[5].set(e.x, e.y, -e.z);\n    worldCornersTemp[6].set(-e.x, e.y, -e.z);\n    worldCornersTemp[7].set(e.x, -e.y, e.z);\n    const wc = worldCornersTemp[0];\n    quat.vmult(wc, wc);\n    pos.vadd(wc, wc);\n    max.copy(wc);\n    min.copy(wc);\n\n    for (let i = 1; i < 8; i++) {\n      const wc = worldCornersTemp[i];\n      quat.vmult(wc, wc);\n      pos.vadd(wc, wc);\n      const x = wc.x;\n      const y = wc.y;\n      const z = wc.z;\n\n      if (x > max.x) {\n        max.x = x;\n      }\n\n      if (y > max.y) {\n        max.y = y;\n      }\n\n      if (z > max.z) {\n        max.z = z;\n      }\n\n      if (x < min.x) {\n        min.x = x;\n      }\n\n      if (y < min.y) {\n        min.y = y;\n      }\n\n      if (z < min.z) {\n        min.z = z;\n      }\n    } // Get each axis max\n    // min.set(Infinity,Infinity,Infinity);\n    // max.set(-Infinity,-Infinity,-Infinity);\n    // this.forEachWorldCorner(pos,quat,function(x,y,z){\n    //     if(x > max.x){\n    //         max.x = x;\n    //     }\n    //     if(y > max.y){\n    //         max.y = y;\n    //     }\n    //     if(z > max.z){\n    //         max.z = z;\n    //     }\n    //     if(x < min.x){\n    //         min.x = x;\n    //     }\n    //     if(y < min.y){\n    //         min.y = y;\n    //     }\n    //     if(z < min.z){\n    //         min.z = z;\n    //     }\n    // });\n\n  }\n\n}\nconst worldCornerTempPos = new Vec3();\nconst worldCornersTemp = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\n\n/**\n * BODY_TYPES\n */\nconst BODY_TYPES = {\n  /** DYNAMIC */\n  DYNAMIC: 1,\n\n  /** STATIC */\n  STATIC: 2,\n\n  /** KINEMATIC */\n  KINEMATIC: 4\n};\n/**\n * BodyType\n */\n\n/**\n * BODY_SLEEP_STATES\n */\nconst BODY_SLEEP_STATES = {\n  /** AWAKE */\n  AWAKE: 0,\n\n  /** SLEEPY */\n  SLEEPY: 1,\n\n  /** SLEEPING */\n  SLEEPING: 2\n};\n/**\n * BodySleepState\n */\n\n/**\n * Base class for all body types.\n * @example\n *     const shape = new CANNON.Sphere(1)\n *     const body = new CANNON.Body({\n *       mass: 1,\n *       shape,\n *     })\n *     world.addBody(body)\n */\nclass Body extends EventTarget {\n  /**\n   * Dispatched after two bodies collide. This event is dispatched on each\n   * of the two bodies involved in the collision.\n   * @event collide\n   * @param body The body that was involved in the collision.\n   * @param contact The details of the collision.\n   */\n\n  /**\n   * A dynamic body is fully simulated. Can be moved manually by the user, but normally they move according to forces. A dynamic body can collide with all body types. A dynamic body always has finite, non-zero mass.\n   */\n\n  /**\n   * A static body does not move during simulation and behaves as if it has infinite mass. Static bodies can be moved manually by setting the position of the body. The velocity of a static body is always zero. Static bodies do not collide with other static or kinematic bodies.\n   */\n\n  /**\n   * A kinematic body moves under simulation according to its velocity. They do not respond to forces. They can be moved manually, but normally a kinematic body is moved by setting its velocity. A kinematic body behaves as if it has infinite mass. Kinematic bodies do not collide with other static or kinematic bodies.\n   */\n\n  /**\n   * AWAKE\n   */\n\n  /**\n   * SLEEPY\n   */\n\n  /**\n   * SLEEPING\n   */\n\n  /**\n   * Dispatched after a sleeping body has woken up.\n   * @event wakeup\n   */\n\n  /**\n   * Dispatched after a body has gone in to the sleepy state.\n   * @event sleepy\n   */\n\n  /**\n   * Dispatched after a body has fallen asleep.\n   * @event sleep\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    super();\n    this.id = Body.idCounter++;\n    this.index = -1;\n    this.world = null;\n    this.vlambda = new Vec3();\n    this.collisionFilterGroup = typeof options.collisionFilterGroup === 'number' ? options.collisionFilterGroup : 1;\n    this.collisionFilterMask = typeof options.collisionFilterMask === 'number' ? options.collisionFilterMask : -1;\n    this.collisionResponse = typeof options.collisionResponse === 'boolean' ? options.collisionResponse : true;\n    this.position = new Vec3();\n    this.previousPosition = new Vec3();\n    this.interpolatedPosition = new Vec3();\n    this.initPosition = new Vec3();\n\n    if (options.position) {\n      this.position.copy(options.position);\n      this.previousPosition.copy(options.position);\n      this.interpolatedPosition.copy(options.position);\n      this.initPosition.copy(options.position);\n    }\n\n    this.velocity = new Vec3();\n\n    if (options.velocity) {\n      this.velocity.copy(options.velocity);\n    }\n\n    this.initVelocity = new Vec3();\n    this.force = new Vec3();\n    const mass = typeof options.mass === 'number' ? options.mass : 0;\n    this.mass = mass;\n    this.invMass = mass > 0 ? 1.0 / mass : 0;\n    this.material = options.material || null;\n    this.linearDamping = typeof options.linearDamping === 'number' ? options.linearDamping : 0.01;\n    this.type = mass <= 0.0 ? Body.STATIC : Body.DYNAMIC;\n\n    if (typeof options.type === typeof Body.STATIC) {\n      this.type = options.type;\n    }\n\n    this.allowSleep = typeof options.allowSleep !== 'undefined' ? options.allowSleep : true;\n    this.sleepState = Body.AWAKE;\n    this.sleepSpeedLimit = typeof options.sleepSpeedLimit !== 'undefined' ? options.sleepSpeedLimit : 0.1;\n    this.sleepTimeLimit = typeof options.sleepTimeLimit !== 'undefined' ? options.sleepTimeLimit : 1;\n    this.timeLastSleepy = 0;\n    this.wakeUpAfterNarrowphase = false;\n    this.torque = new Vec3();\n    this.quaternion = new Quaternion();\n    this.initQuaternion = new Quaternion();\n    this.previousQuaternion = new Quaternion();\n    this.interpolatedQuaternion = new Quaternion();\n\n    if (options.quaternion) {\n      this.quaternion.copy(options.quaternion);\n      this.initQuaternion.copy(options.quaternion);\n      this.previousQuaternion.copy(options.quaternion);\n      this.interpolatedQuaternion.copy(options.quaternion);\n    }\n\n    this.angularVelocity = new Vec3();\n\n    if (options.angularVelocity) {\n      this.angularVelocity.copy(options.angularVelocity);\n    }\n\n    this.initAngularVelocity = new Vec3();\n    this.shapes = [];\n    this.shapeOffsets = [];\n    this.shapeOrientations = [];\n    this.inertia = new Vec3();\n    this.invInertia = new Vec3();\n    this.invInertiaWorld = new Mat3();\n    this.invMassSolve = 0;\n    this.invInertiaSolve = new Vec3();\n    this.invInertiaWorldSolve = new Mat3();\n    this.fixedRotation = typeof options.fixedRotation !== 'undefined' ? options.fixedRotation : false;\n    this.angularDamping = typeof options.angularDamping !== 'undefined' ? options.angularDamping : 0.01;\n    this.linearFactor = new Vec3(1, 1, 1);\n\n    if (options.linearFactor) {\n      this.linearFactor.copy(options.linearFactor);\n    }\n\n    this.angularFactor = new Vec3(1, 1, 1);\n\n    if (options.angularFactor) {\n      this.angularFactor.copy(options.angularFactor);\n    }\n\n    this.aabb = new AABB();\n    this.aabbNeedsUpdate = true;\n    this.boundingRadius = 0;\n    this.wlambda = new Vec3();\n    this.isTrigger = Boolean(options.isTrigger);\n\n    if (options.shape) {\n      this.addShape(options.shape);\n    }\n\n    this.updateMassProperties();\n  }\n  /**\n   * Wake the body up.\n   */\n\n\n  wakeUp() {\n    const prevState = this.sleepState;\n    this.sleepState = Body.AWAKE;\n    this.wakeUpAfterNarrowphase = false;\n\n    if (prevState === Body.SLEEPING) {\n      this.dispatchEvent(Body.wakeupEvent);\n    }\n  }\n  /**\n   * Force body sleep\n   */\n\n\n  sleep() {\n    this.sleepState = Body.SLEEPING;\n    this.velocity.set(0, 0, 0);\n    this.angularVelocity.set(0, 0, 0);\n    this.wakeUpAfterNarrowphase = false;\n  }\n  /**\n   * Called every timestep to update internal sleep timer and change sleep state if needed.\n   * @param time The world time in seconds\n   */\n\n\n  sleepTick(time) {\n    if (this.allowSleep) {\n      const sleepState = this.sleepState;\n      const speedSquared = this.velocity.lengthSquared() + this.angularVelocity.lengthSquared();\n      const speedLimitSquared = this.sleepSpeedLimit ** 2;\n\n      if (sleepState === Body.AWAKE && speedSquared < speedLimitSquared) {\n        this.sleepState = Body.SLEEPY; // Sleepy\n\n        this.timeLastSleepy = time;\n        this.dispatchEvent(Body.sleepyEvent);\n      } else if (sleepState === Body.SLEEPY && speedSquared > speedLimitSquared) {\n        this.wakeUp(); // Wake up\n      } else if (sleepState === Body.SLEEPY && time - this.timeLastSleepy > this.sleepTimeLimit) {\n        this.sleep(); // Sleeping\n\n        this.dispatchEvent(Body.sleepEvent);\n      }\n    }\n  }\n  /**\n   * If the body is sleeping, it should be immovable / have infinite mass during solve. We solve it by having a separate \"solve mass\".\n   */\n\n\n  updateSolveMassProperties() {\n    if (this.sleepState === Body.SLEEPING || this.type === Body.KINEMATIC) {\n      this.invMassSolve = 0;\n      this.invInertiaSolve.setZero();\n      this.invInertiaWorldSolve.setZero();\n    } else {\n      this.invMassSolve = this.invMass;\n      this.invInertiaSolve.copy(this.invInertia);\n      this.invInertiaWorldSolve.copy(this.invInertiaWorld);\n    }\n  }\n  /**\n   * Convert a world point to local body frame.\n   */\n\n\n  pointToLocalFrame(worldPoint, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    worldPoint.vsub(this.position, result);\n    this.quaternion.conjugate().vmult(result, result);\n    return result;\n  }\n  /**\n   * Convert a world vector to local body frame.\n   */\n\n\n  vectorToLocalFrame(worldVector, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    this.quaternion.conjugate().vmult(worldVector, result);\n    return result;\n  }\n  /**\n   * Convert a local body point to world frame.\n   */\n\n\n  pointToWorldFrame(localPoint, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    this.quaternion.vmult(localPoint, result);\n    result.vadd(this.position, result);\n    return result;\n  }\n  /**\n   * Convert a local body point to world frame.\n   */\n\n\n  vectorToWorldFrame(localVector, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    this.quaternion.vmult(localVector, result);\n    return result;\n  }\n  /**\n   * Add a shape to the body with a local offset and orientation.\n   * @return The body object, for chainability.\n   */\n\n\n  addShape(shape, _offset, _orientation) {\n    const offset = new Vec3();\n    const orientation = new Quaternion();\n\n    if (_offset) {\n      offset.copy(_offset);\n    }\n\n    if (_orientation) {\n      orientation.copy(_orientation);\n    }\n\n    this.shapes.push(shape);\n    this.shapeOffsets.push(offset);\n    this.shapeOrientations.push(orientation);\n    this.updateMassProperties();\n    this.updateBoundingRadius();\n    this.aabbNeedsUpdate = true;\n    shape.body = this;\n    return this;\n  }\n  /**\n   * Remove a shape from the body.\n   * @return The body object, for chainability.\n   */\n\n\n  removeShape(shape) {\n    const index = this.shapes.indexOf(shape);\n\n    if (index === -1) {\n      console.warn('Shape does not belong to the body');\n      return this;\n    }\n\n    this.shapes.splice(index, 1);\n    this.shapeOffsets.splice(index, 1);\n    this.shapeOrientations.splice(index, 1);\n    this.updateMassProperties();\n    this.updateBoundingRadius();\n    this.aabbNeedsUpdate = true;\n    shape.body = null;\n    return this;\n  }\n  /**\n   * Update the bounding radius of the body. Should be done if any of the shapes are changed.\n   */\n\n\n  updateBoundingRadius() {\n    const shapes = this.shapes;\n    const shapeOffsets = this.shapeOffsets;\n    const N = shapes.length;\n    let radius = 0;\n\n    for (let i = 0; i !== N; i++) {\n      const shape = shapes[i];\n      shape.updateBoundingSphereRadius();\n      const offset = shapeOffsets[i].length();\n      const r = shape.boundingSphereRadius;\n\n      if (offset + r > radius) {\n        radius = offset + r;\n      }\n    }\n\n    this.boundingRadius = radius;\n  }\n  /**\n   * Updates the .aabb\n   */\n\n\n  updateAABB() {\n    const shapes = this.shapes;\n    const shapeOffsets = this.shapeOffsets;\n    const shapeOrientations = this.shapeOrientations;\n    const N = shapes.length;\n    const offset = tmpVec;\n    const orientation = tmpQuat;\n    const bodyQuat = this.quaternion;\n    const aabb = this.aabb;\n    const shapeAABB = updateAABB_shapeAABB;\n\n    for (let i = 0; i !== N; i++) {\n      const shape = shapes[i]; // Get shape world position\n\n      bodyQuat.vmult(shapeOffsets[i], offset);\n      offset.vadd(this.position, offset); // Get shape world quaternion\n\n      bodyQuat.mult(shapeOrientations[i], orientation); // Get shape AABB\n\n      shape.calculateWorldAABB(offset, orientation, shapeAABB.lowerBound, shapeAABB.upperBound);\n\n      if (i === 0) {\n        aabb.copy(shapeAABB);\n      } else {\n        aabb.extend(shapeAABB);\n      }\n    }\n\n    this.aabbNeedsUpdate = false;\n  }\n  /**\n   * Update `.inertiaWorld` and `.invInertiaWorld`\n   */\n\n\n  updateInertiaWorld(force) {\n    const I = this.invInertia;\n\n    if (I.x === I.y && I.y === I.z && !force) ; else {\n      const m1 = uiw_m1;\n      const m2 = uiw_m2;\n      uiw_m3;\n      m1.setRotationFromQuaternion(this.quaternion);\n      m1.transpose(m2);\n      m1.scale(I, m1);\n      m1.mmult(m2, this.invInertiaWorld);\n    }\n  }\n  /**\n   * Apply force to a point of the body. This could for example be a point on the Body surface.\n   * Applying force this way will add to Body.force and Body.torque.\n   * @param force The amount of force to add.\n   * @param relativePoint A point relative to the center of mass to apply the force on.\n   */\n\n\n  applyForce(force, relativePoint) {\n    if (relativePoint === void 0) {\n      relativePoint = new Vec3();\n    }\n\n    // Needed?\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n\n    if (this.sleepState === Body.SLEEPING) {\n      this.wakeUp();\n    } // Compute produced rotational force\n\n\n    const rotForce = Body_applyForce_rotForce;\n    relativePoint.cross(force, rotForce); // Add linear force\n\n    this.force.vadd(force, this.force); // Add rotational force\n\n    this.torque.vadd(rotForce, this.torque);\n  }\n  /**\n   * Apply force to a local point in the body.\n   * @param force The force vector to apply, defined locally in the body frame.\n   * @param localPoint A local point in the body to apply the force on.\n   */\n\n\n  applyLocalForce(localForce, localPoint) {\n    if (localPoint === void 0) {\n      localPoint = new Vec3();\n    }\n\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n\n    const worldForce = Body_applyLocalForce_worldForce;\n    const relativePointWorld = Body_applyLocalForce_relativePointWorld; // Transform the force vector to world space\n\n    this.vectorToWorldFrame(localForce, worldForce);\n    this.vectorToWorldFrame(localPoint, relativePointWorld);\n    this.applyForce(worldForce, relativePointWorld);\n  }\n  /**\n   * Apply torque to the body.\n   * @param torque The amount of torque to add.\n   */\n\n\n  applyTorque(torque) {\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n\n    if (this.sleepState === Body.SLEEPING) {\n      this.wakeUp();\n    } // Add rotational force\n\n\n    this.torque.vadd(torque, this.torque);\n  }\n  /**\n   * Apply impulse to a point of the body. This could for example be a point on the Body surface.\n   * An impulse is a force added to a body during a short period of time (impulse = force * time).\n   * Impulses will be added to Body.velocity and Body.angularVelocity.\n   * @param impulse The amount of impulse to add.\n   * @param relativePoint A point relative to the center of mass to apply the force on.\n   */\n\n\n  applyImpulse(impulse, relativePoint) {\n    if (relativePoint === void 0) {\n      relativePoint = new Vec3();\n    }\n\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n\n    if (this.sleepState === Body.SLEEPING) {\n      this.wakeUp();\n    } // Compute point position relative to the body center\n\n\n    const r = relativePoint; // Compute produced central impulse velocity\n\n    const velo = Body_applyImpulse_velo;\n    velo.copy(impulse);\n    velo.scale(this.invMass, velo); // Add linear impulse\n\n    this.velocity.vadd(velo, this.velocity); // Compute produced rotational impulse velocity\n\n    const rotVelo = Body_applyImpulse_rotVelo;\n    r.cross(impulse, rotVelo);\n    /*\n     rotVelo.x *= this.invInertia.x;\n     rotVelo.y *= this.invInertia.y;\n     rotVelo.z *= this.invInertia.z;\n     */\n\n    this.invInertiaWorld.vmult(rotVelo, rotVelo); // Add rotational Impulse\n\n    this.angularVelocity.vadd(rotVelo, this.angularVelocity);\n  }\n  /**\n   * Apply locally-defined impulse to a local point in the body.\n   * @param force The force vector to apply, defined locally in the body frame.\n   * @param localPoint A local point in the body to apply the force on.\n   */\n\n\n  applyLocalImpulse(localImpulse, localPoint) {\n    if (localPoint === void 0) {\n      localPoint = new Vec3();\n    }\n\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n\n    const worldImpulse = Body_applyLocalImpulse_worldImpulse;\n    const relativePointWorld = Body_applyLocalImpulse_relativePoint; // Transform the force vector to world space\n\n    this.vectorToWorldFrame(localImpulse, worldImpulse);\n    this.vectorToWorldFrame(localPoint, relativePointWorld);\n    this.applyImpulse(worldImpulse, relativePointWorld);\n  }\n  /**\n   * Should be called whenever you change the body shape or mass.\n   */\n\n\n  updateMassProperties() {\n    const halfExtents = Body_updateMassProperties_halfExtents;\n    this.invMass = this.mass > 0 ? 1.0 / this.mass : 0;\n    const I = this.inertia;\n    const fixed = this.fixedRotation; // Approximate with AABB box\n\n    this.updateAABB();\n    halfExtents.set((this.aabb.upperBound.x - this.aabb.lowerBound.x) / 2, (this.aabb.upperBound.y - this.aabb.lowerBound.y) / 2, (this.aabb.upperBound.z - this.aabb.lowerBound.z) / 2);\n    Box.calculateInertia(halfExtents, this.mass, I);\n    this.invInertia.set(I.x > 0 && !fixed ? 1.0 / I.x : 0, I.y > 0 && !fixed ? 1.0 / I.y : 0, I.z > 0 && !fixed ? 1.0 / I.z : 0);\n    this.updateInertiaWorld(true);\n  }\n  /**\n   * Get world velocity of a point in the body.\n   * @param worldPoint\n   * @param result\n   * @return The result vector.\n   */\n\n\n  getVelocityAtWorldPoint(worldPoint, result) {\n    const r = new Vec3();\n    worldPoint.vsub(this.position, r);\n    this.angularVelocity.cross(r, result);\n    this.velocity.vadd(result, result);\n    return result;\n  }\n  /**\n   * Move the body forward in time.\n   * @param dt Time step\n   * @param quatNormalize Set to true to normalize the body quaternion\n   * @param quatNormalizeFast If the quaternion should be normalized using \"fast\" quaternion normalization\n   */\n\n\n  integrate(dt, quatNormalize, quatNormalizeFast) {\n    // Save previous position\n    this.previousPosition.copy(this.position);\n    this.previousQuaternion.copy(this.quaternion);\n\n    if (!(this.type === Body.DYNAMIC || this.type === Body.KINEMATIC) || this.sleepState === Body.SLEEPING) {\n      // Only for dynamic\n      return;\n    }\n\n    const velo = this.velocity;\n    const angularVelo = this.angularVelocity;\n    const pos = this.position;\n    const force = this.force;\n    const torque = this.torque;\n    const quat = this.quaternion;\n    const invMass = this.invMass;\n    const invInertia = this.invInertiaWorld;\n    const linearFactor = this.linearFactor;\n    const iMdt = invMass * dt;\n    velo.x += force.x * iMdt * linearFactor.x;\n    velo.y += force.y * iMdt * linearFactor.y;\n    velo.z += force.z * iMdt * linearFactor.z;\n    const e = invInertia.elements;\n    const angularFactor = this.angularFactor;\n    const tx = torque.x * angularFactor.x;\n    const ty = torque.y * angularFactor.y;\n    const tz = torque.z * angularFactor.z;\n    angularVelo.x += dt * (e[0] * tx + e[1] * ty + e[2] * tz);\n    angularVelo.y += dt * (e[3] * tx + e[4] * ty + e[5] * tz);\n    angularVelo.z += dt * (e[6] * tx + e[7] * ty + e[8] * tz); // Use new velocity  - leap frog\n\n    pos.x += velo.x * dt;\n    pos.y += velo.y * dt;\n    pos.z += velo.z * dt;\n    quat.integrate(this.angularVelocity, dt, this.angularFactor, quat);\n\n    if (quatNormalize) {\n      if (quatNormalizeFast) {\n        quat.normalizeFast();\n      } else {\n        quat.normalize();\n      }\n    }\n\n    this.aabbNeedsUpdate = true; // Update world inertia\n\n    this.updateInertiaWorld();\n  }\n\n}\nBody.idCounter = 0;\nBody.COLLIDE_EVENT_NAME = 'collide';\nBody.DYNAMIC = BODY_TYPES.DYNAMIC;\nBody.STATIC = BODY_TYPES.STATIC;\nBody.KINEMATIC = BODY_TYPES.KINEMATIC;\nBody.AWAKE = BODY_SLEEP_STATES.AWAKE;\nBody.SLEEPY = BODY_SLEEP_STATES.SLEEPY;\nBody.SLEEPING = BODY_SLEEP_STATES.SLEEPING;\nBody.wakeupEvent = {\n  type: 'wakeup'\n};\nBody.sleepyEvent = {\n  type: 'sleepy'\n};\nBody.sleepEvent = {\n  type: 'sleep'\n};\nconst tmpVec = new Vec3();\nconst tmpQuat = new Quaternion();\nconst updateAABB_shapeAABB = new AABB();\nconst uiw_m1 = new Mat3();\nconst uiw_m2 = new Mat3();\nconst uiw_m3 = new Mat3();\nconst Body_applyForce_rotForce = new Vec3();\nconst Body_applyLocalForce_worldForce = new Vec3();\nconst Body_applyLocalForce_relativePointWorld = new Vec3();\nconst Body_applyImpulse_velo = new Vec3();\nconst Body_applyImpulse_rotVelo = new Vec3();\nconst Body_applyLocalImpulse_worldImpulse = new Vec3();\nconst Body_applyLocalImpulse_relativePoint = new Vec3();\nconst Body_updateMassProperties_halfExtents = new Vec3();\n\n/**\n * Base class for broadphase implementations\n * @author schteppe\n */\nclass Broadphase {\n  /**\n   * The world to search for collisions in.\n   */\n\n  /**\n   * If set to true, the broadphase uses bounding boxes for intersection tests, else it uses bounding spheres.\n   */\n\n  /**\n   * Set to true if the objects in the world moved.\n   */\n  constructor() {\n    this.world = null;\n    this.useBoundingBoxes = false;\n    this.dirty = true;\n  }\n  /**\n   * Get the collision pairs from the world\n   * @param world The world to search in\n   * @param p1 Empty array to be filled with body objects\n   * @param p2 Empty array to be filled with body objects\n   */\n\n\n  collisionPairs(world, p1, p2) {\n    throw new Error('collisionPairs not implemented for this BroadPhase class!');\n  }\n  /**\n   * Check if a body pair needs to be intersection tested at all.\n   */\n\n\n  needBroadphaseCollision(bodyA, bodyB) {\n    // Check collision filter masks\n    if ((bodyA.collisionFilterGroup & bodyB.collisionFilterMask) === 0 || (bodyB.collisionFilterGroup & bodyA.collisionFilterMask) === 0) {\n      return false;\n    } // Check types\n\n\n    if (((bodyA.type & Body.STATIC) !== 0 || bodyA.sleepState === Body.SLEEPING) && ((bodyB.type & Body.STATIC) !== 0 || bodyB.sleepState === Body.SLEEPING)) {\n      // Both bodies are static or sleeping. Skip.\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Check if the bounding volumes of two bodies intersect.\n   */\n\n\n  intersectionTest(bodyA, bodyB, pairs1, pairs2) {\n    if (this.useBoundingBoxes) {\n      this.doBoundingBoxBroadphase(bodyA, bodyB, pairs1, pairs2);\n    } else {\n      this.doBoundingSphereBroadphase(bodyA, bodyB, pairs1, pairs2);\n    }\n  }\n  /**\n   * Check if the bounding spheres of two bodies are intersecting.\n   * @param pairs1 bodyA is appended to this array if intersection\n   * @param pairs2 bodyB is appended to this array if intersection\n   */\n\n\n  doBoundingSphereBroadphase(bodyA, bodyB, pairs1, pairs2) {\n    const r = Broadphase_collisionPairs_r;\n    bodyB.position.vsub(bodyA.position, r);\n    const boundingRadiusSum2 = (bodyA.boundingRadius + bodyB.boundingRadius) ** 2;\n    const norm2 = r.lengthSquared();\n\n    if (norm2 < boundingRadiusSum2) {\n      pairs1.push(bodyA);\n      pairs2.push(bodyB);\n    }\n  }\n  /**\n   * Check if the bounding boxes of two bodies are intersecting.\n   */\n\n\n  doBoundingBoxBroadphase(bodyA, bodyB, pairs1, pairs2) {\n    if (bodyA.aabbNeedsUpdate) {\n      bodyA.updateAABB();\n    }\n\n    if (bodyB.aabbNeedsUpdate) {\n      bodyB.updateAABB();\n    } // Check AABB / AABB\n\n\n    if (bodyA.aabb.overlaps(bodyB.aabb)) {\n      pairs1.push(bodyA);\n      pairs2.push(bodyB);\n    }\n  }\n  /**\n   * Removes duplicate pairs from the pair arrays.\n   */\n\n\n  makePairsUnique(pairs1, pairs2) {\n    const t = Broadphase_makePairsUnique_temp;\n    const p1 = Broadphase_makePairsUnique_p1;\n    const p2 = Broadphase_makePairsUnique_p2;\n    const N = pairs1.length;\n\n    for (let i = 0; i !== N; i++) {\n      p1[i] = pairs1[i];\n      p2[i] = pairs2[i];\n    }\n\n    pairs1.length = 0;\n    pairs2.length = 0;\n\n    for (let i = 0; i !== N; i++) {\n      const id1 = p1[i].id;\n      const id2 = p2[i].id;\n      const key = id1 < id2 ? `${id1},${id2}` : `${id2},${id1}`;\n      t[key] = i;\n      t.keys.push(key);\n    }\n\n    for (let i = 0; i !== t.keys.length; i++) {\n      const key = t.keys.pop();\n      const pairIndex = t[key];\n      pairs1.push(p1[pairIndex]);\n      pairs2.push(p2[pairIndex]);\n      delete t[key];\n    }\n  }\n  /**\n   * To be implemented by subcasses\n   */\n\n\n  setWorld(world) {}\n  /**\n   * Check if the bounding spheres of two bodies overlap.\n   */\n\n\n  static boundingSphereCheck(bodyA, bodyB) {\n    const dist = new Vec3(); // bsc_dist;\n\n    bodyA.position.vsub(bodyB.position, dist);\n    const sa = bodyA.shapes[0];\n    const sb = bodyB.shapes[0];\n    return Math.pow(sa.boundingSphereRadius + sb.boundingSphereRadius, 2) > dist.lengthSquared();\n  }\n  /**\n   * Returns all the bodies within the AABB.\n   */\n\n\n  aabbQuery(world, aabb, result) {\n    console.warn('.aabbQuery is not implemented in this Broadphase subclass.');\n    return [];\n  }\n\n} // Temp objects\n\nconst Broadphase_collisionPairs_r = new Vec3();\nnew Vec3();\nnew Quaternion();\nnew Vec3();\nconst Broadphase_makePairsUnique_temp = {\n  keys: []\n};\nconst Broadphase_makePairsUnique_p1 = [];\nconst Broadphase_makePairsUnique_p2 = [];\nnew Vec3();\n\n/**\n * Axis aligned uniform grid broadphase.\n * @todo Needs support for more than just planes and spheres.\n */\nclass GridBroadphase extends Broadphase {\n  /**\n   * Number of boxes along x\n   */\n\n  /**\n   * Number of boxes along y\n   */\n\n  /**\n   * Number of boxes along z\n   */\n\n  /**\n   * aabbMin\n   */\n\n  /**\n   * aabbMax\n   */\n\n  /**\n   * bins\n   */\n\n  /**\n   * binLengths\n   */\n\n  /**\n   * @param nx Number of boxes along x.\n   * @param ny Number of boxes along y.\n   * @param nz Number of boxes along z.\n   */\n  constructor(aabbMin, aabbMax, nx, ny, nz) {\n    if (aabbMin === void 0) {\n      aabbMin = new Vec3(100, 100, 100);\n    }\n\n    if (aabbMax === void 0) {\n      aabbMax = new Vec3(-100, -100, -100);\n    }\n\n    if (nx === void 0) {\n      nx = 10;\n    }\n\n    if (ny === void 0) {\n      ny = 10;\n    }\n\n    if (nz === void 0) {\n      nz = 10;\n    }\n\n    super();\n    this.nx = nx;\n    this.ny = ny;\n    this.nz = nz;\n    this.aabbMin = aabbMin;\n    this.aabbMax = aabbMax;\n    const nbins = this.nx * this.ny * this.nz;\n\n    if (nbins <= 0) {\n      throw \"GridBroadphase: Each dimension's n must be >0\";\n    }\n\n    this.bins = [];\n    this.binLengths = []; // Rather than continually resizing arrays (thrashing the memory), just record length and allow them to grow\n\n    this.bins.length = nbins;\n    this.binLengths.length = nbins;\n\n    for (let i = 0; i < nbins; i++) {\n      this.bins[i] = [];\n      this.binLengths[i] = 0;\n    }\n  }\n  /**\n   * Get all the collision pairs in the physics world\n   */\n\n\n  collisionPairs(world, pairs1, pairs2) {\n    const N = world.bodies.length;\n    const bodies = world.bodies;\n    const max = this.aabbMax;\n    const min = this.aabbMin;\n    const nx = this.nx;\n    const ny = this.ny;\n    const nz = this.nz;\n    const xstep = ny * nz;\n    const ystep = nz;\n    const zstep = 1;\n    const xmax = max.x;\n    const ymax = max.y;\n    const zmax = max.z;\n    const xmin = min.x;\n    const ymin = min.y;\n    const zmin = min.z;\n    const xmult = nx / (xmax - xmin);\n    const ymult = ny / (ymax - ymin);\n    const zmult = nz / (zmax - zmin);\n    const binsizeX = (xmax - xmin) / nx;\n    const binsizeY = (ymax - ymin) / ny;\n    const binsizeZ = (zmax - zmin) / nz;\n    const binRadius = Math.sqrt(binsizeX * binsizeX + binsizeY * binsizeY + binsizeZ * binsizeZ) * 0.5;\n    const types = Shape.types;\n    const SPHERE = types.SPHERE;\n    const PLANE = types.PLANE;\n    types.BOX;\n    types.COMPOUND;\n    types.CONVEXPOLYHEDRON;\n    const bins = this.bins;\n    const binLengths = this.binLengths;\n    const Nbins = this.bins.length; // Reset bins\n\n    for (let i = 0; i !== Nbins; i++) {\n      binLengths[i] = 0;\n    }\n\n    const ceil = Math.ceil;\n\n    function addBoxToBins(x0, y0, z0, x1, y1, z1, bi) {\n      let xoff0 = (x0 - xmin) * xmult | 0;\n      let yoff0 = (y0 - ymin) * ymult | 0;\n      let zoff0 = (z0 - zmin) * zmult | 0;\n      let xoff1 = ceil((x1 - xmin) * xmult);\n      let yoff1 = ceil((y1 - ymin) * ymult);\n      let zoff1 = ceil((z1 - zmin) * zmult);\n\n      if (xoff0 < 0) {\n        xoff0 = 0;\n      } else if (xoff0 >= nx) {\n        xoff0 = nx - 1;\n      }\n\n      if (yoff0 < 0) {\n        yoff0 = 0;\n      } else if (yoff0 >= ny) {\n        yoff0 = ny - 1;\n      }\n\n      if (zoff0 < 0) {\n        zoff0 = 0;\n      } else if (zoff0 >= nz) {\n        zoff0 = nz - 1;\n      }\n\n      if (xoff1 < 0) {\n        xoff1 = 0;\n      } else if (xoff1 >= nx) {\n        xoff1 = nx - 1;\n      }\n\n      if (yoff1 < 0) {\n        yoff1 = 0;\n      } else if (yoff1 >= ny) {\n        yoff1 = ny - 1;\n      }\n\n      if (zoff1 < 0) {\n        zoff1 = 0;\n      } else if (zoff1 >= nz) {\n        zoff1 = nz - 1;\n      }\n\n      xoff0 *= xstep;\n      yoff0 *= ystep;\n      zoff0 *= zstep;\n      xoff1 *= xstep;\n      yoff1 *= ystep;\n      zoff1 *= zstep;\n\n      for (let xoff = xoff0; xoff <= xoff1; xoff += xstep) {\n        for (let yoff = yoff0; yoff <= yoff1; yoff += ystep) {\n          for (let zoff = zoff0; zoff <= zoff1; zoff += zstep) {\n            const idx = xoff + yoff + zoff;\n            bins[idx][binLengths[idx]++] = bi;\n          }\n        }\n      }\n    } // Put all bodies into the bins\n\n\n    for (let i = 0; i !== N; i++) {\n      const bi = bodies[i];\n      const si = bi.shapes[0];\n\n      switch (si.type) {\n        case SPHERE:\n          {\n            const shape = si; // Put in bin\n            // check if overlap with other bins\n\n            const x = bi.position.x;\n            const y = bi.position.y;\n            const z = bi.position.z;\n            const r = shape.radius;\n            addBoxToBins(x - r, y - r, z - r, x + r, y + r, z + r, bi);\n            break;\n          }\n\n        case PLANE:\n          {\n            const shape = si;\n\n            if (shape.worldNormalNeedsUpdate) {\n              shape.computeWorldNormal(bi.quaternion);\n            }\n\n            const planeNormal = shape.worldNormal; //Relative position from origin of plane object to the first bin\n            //Incremented as we iterate through the bins\n\n            const xreset = xmin + binsizeX * 0.5 - bi.position.x;\n            const yreset = ymin + binsizeY * 0.5 - bi.position.y;\n            const zreset = zmin + binsizeZ * 0.5 - bi.position.z;\n            const d = GridBroadphase_collisionPairs_d;\n            d.set(xreset, yreset, zreset);\n\n            for (let xi = 0, xoff = 0; xi !== nx; xi++, xoff += xstep, d.y = yreset, d.x += binsizeX) {\n              for (let yi = 0, yoff = 0; yi !== ny; yi++, yoff += ystep, d.z = zreset, d.y += binsizeY) {\n                for (let zi = 0, zoff = 0; zi !== nz; zi++, zoff += zstep, d.z += binsizeZ) {\n                  if (d.dot(planeNormal) < binRadius) {\n                    const idx = xoff + yoff + zoff;\n                    bins[idx][binLengths[idx]++] = bi;\n                  }\n                }\n              }\n            }\n\n            break;\n          }\n\n        default:\n          {\n            if (bi.aabbNeedsUpdate) {\n              bi.updateAABB();\n            }\n\n            addBoxToBins(bi.aabb.lowerBound.x, bi.aabb.lowerBound.y, bi.aabb.lowerBound.z, bi.aabb.upperBound.x, bi.aabb.upperBound.y, bi.aabb.upperBound.z, bi);\n            break;\n          }\n      }\n    } // Check each bin\n\n\n    for (let i = 0; i !== Nbins; i++) {\n      const binLength = binLengths[i]; //Skip bins with no potential collisions\n\n      if (binLength > 1) {\n        const bin = bins[i]; // Do N^2 broadphase inside\n\n        for (let xi = 0; xi !== binLength; xi++) {\n          const bi = bin[xi];\n\n          for (let yi = 0; yi !== xi; yi++) {\n            const bj = bin[yi];\n\n            if (this.needBroadphaseCollision(bi, bj)) {\n              this.intersectionTest(bi, bj, pairs1, pairs2);\n            }\n          }\n        }\n      }\n    } //\tfor (let zi = 0, zoff=0; zi < nz; zi++, zoff+= zstep) {\n    //\t\tconsole.log(\"layer \"+zi);\n    //\t\tfor (let yi = 0, yoff=0; yi < ny; yi++, yoff += ystep) {\n    //\t\t\tconst row = '';\n    //\t\t\tfor (let xi = 0, xoff=0; xi < nx; xi++, xoff += xstep) {\n    //\t\t\t\tconst idx = xoff + yoff + zoff;\n    //\t\t\t\trow += ' ' + binLengths[idx];\n    //\t\t\t}\n    //\t\t\tconsole.log(row);\n    //\t\t}\n    //\t}\n\n\n    this.makePairsUnique(pairs1, pairs2);\n  }\n\n}\nconst GridBroadphase_collisionPairs_d = new Vec3();\nnew Vec3();\n\n/**\n * Naive broadphase implementation, used in lack of better ones.\n *\n * The naive broadphase looks at all possible pairs without restriction, therefore it has complexity N^2 _(which is bad)_\n */\nclass NaiveBroadphase extends Broadphase {\n  /**\n   * @todo Remove useless constructor\n   */\n  constructor() {\n    super();\n  }\n  /**\n   * Get all the collision pairs in the physics world\n   */\n\n\n  collisionPairs(world, pairs1, pairs2) {\n    const bodies = world.bodies;\n    const n = bodies.length;\n    let bi;\n    let bj; // Naive N^2 ftw!\n\n    for (let i = 0; i !== n; i++) {\n      for (let j = 0; j !== i; j++) {\n        bi = bodies[i];\n        bj = bodies[j];\n\n        if (!this.needBroadphaseCollision(bi, bj)) {\n          continue;\n        }\n\n        this.intersectionTest(bi, bj, pairs1, pairs2);\n      }\n    }\n  }\n  /**\n   * Returns all the bodies within an AABB.\n   * @param result An array to store resulting bodies in.\n   */\n\n\n  aabbQuery(world, aabb, result) {\n    if (result === void 0) {\n      result = [];\n    }\n\n    for (let i = 0; i < world.bodies.length; i++) {\n      const b = world.bodies[i];\n\n      if (b.aabbNeedsUpdate) {\n        b.updateAABB();\n      } // Ugly hack until Body gets aabb\n\n\n      if (b.aabb.overlaps(aabb)) {\n        result.push(b);\n      }\n    }\n\n    return result;\n  }\n\n}\n\n/**\n * Storage for Ray casting data\n */\nclass RaycastResult {\n  /**\n   * rayFromWorld\n   */\n\n  /**\n   * rayToWorld\n   */\n\n  /**\n   * hitNormalWorld\n   */\n\n  /**\n   * hitPointWorld\n   */\n\n  /**\n   * hasHit\n   */\n\n  /**\n   * shape\n   */\n\n  /**\n   * body\n   */\n\n  /**\n   * The index of the hit triangle, if the hit shape was a trimesh\n   */\n\n  /**\n   * Distance to the hit. Will be set to -1 if there was no hit\n   */\n\n  /**\n   * If the ray should stop traversing the bodies\n   */\n  constructor() {\n    this.rayFromWorld = new Vec3();\n    this.rayToWorld = new Vec3();\n    this.hitNormalWorld = new Vec3();\n    this.hitPointWorld = new Vec3();\n    this.hasHit = false;\n    this.shape = null;\n    this.body = null;\n    this.hitFaceIndex = -1;\n    this.distance = -1;\n    this.shouldStop = false;\n  }\n  /**\n   * Reset all result data.\n   */\n\n\n  reset() {\n    this.rayFromWorld.setZero();\n    this.rayToWorld.setZero();\n    this.hitNormalWorld.setZero();\n    this.hitPointWorld.setZero();\n    this.hasHit = false;\n    this.shape = null;\n    this.body = null;\n    this.hitFaceIndex = -1;\n    this.distance = -1;\n    this.shouldStop = false;\n  }\n  /**\n   * abort\n   */\n\n\n  abort() {\n    this.shouldStop = true;\n  }\n  /**\n   * Set result data.\n   */\n\n\n  set(rayFromWorld, rayToWorld, hitNormalWorld, hitPointWorld, shape, body, distance) {\n    this.rayFromWorld.copy(rayFromWorld);\n    this.rayToWorld.copy(rayToWorld);\n    this.hitNormalWorld.copy(hitNormalWorld);\n    this.hitPointWorld.copy(hitPointWorld);\n    this.shape = shape;\n    this.body = body;\n    this.distance = distance;\n  }\n\n}\n\nlet _Shape$types$SPHERE, _Shape$types$PLANE, _Shape$types$BOX, _Shape$types$CYLINDER, _Shape$types$CONVEXPO, _Shape$types$HEIGHTFI, _Shape$types$TRIMESH;\n\n/**\n * RAY_MODES\n */\nconst RAY_MODES = {\n  /** CLOSEST */\n  CLOSEST: 1,\n\n  /** ANY */\n  ANY: 2,\n\n  /** ALL */\n  ALL: 4\n};\n/**\n * RayMode\n */\n\n_Shape$types$SPHERE = Shape.types.SPHERE;\n_Shape$types$PLANE = Shape.types.PLANE;\n_Shape$types$BOX = Shape.types.BOX;\n_Shape$types$CYLINDER = Shape.types.CYLINDER;\n_Shape$types$CONVEXPO = Shape.types.CONVEXPOLYHEDRON;\n_Shape$types$HEIGHTFI = Shape.types.HEIGHTFIELD;\n_Shape$types$TRIMESH = Shape.types.TRIMESH;\n\n/**\n * A line in 3D space that intersects bodies and return points.\n */\nclass Ray {\n  /**\n   * from\n   */\n\n  /**\n   * to\n   */\n\n  /**\n   * direction\n   */\n\n  /**\n   * The precision of the ray. Used when checking parallelity etc.\n   * @default 0.0001\n   */\n\n  /**\n   * Set to `false` if you don't want the Ray to take `collisionResponse` flags into account on bodies and shapes.\n   * @default true\n   */\n\n  /**\n   * If set to `true`, the ray skips any hits with normal.dot(rayDirection) < 0.\n   * @default false\n   */\n\n  /**\n   * collisionFilterMask\n   * @default -1\n   */\n\n  /**\n   * collisionFilterGroup\n   * @default -1\n   */\n\n  /**\n   * The intersection mode. Should be Ray.ANY, Ray.ALL or Ray.CLOSEST.\n   * @default RAY.ANY\n   */\n\n  /**\n   * Current result object.\n   */\n\n  /**\n   * Will be set to `true` during intersectWorld() if the ray hit anything.\n   */\n\n  /**\n   * User-provided result callback. Will be used if mode is Ray.ALL.\n   */\n\n  /**\n   * CLOSEST\n   */\n\n  /**\n   * ANY\n   */\n\n  /**\n   * ALL\n   */\n  get [_Shape$types$SPHERE]() {\n    return this._intersectSphere;\n  }\n\n  get [_Shape$types$PLANE]() {\n    return this._intersectPlane;\n  }\n\n  get [_Shape$types$BOX]() {\n    return this._intersectBox;\n  }\n\n  get [_Shape$types$CYLINDER]() {\n    return this._intersectConvex;\n  }\n\n  get [_Shape$types$CONVEXPO]() {\n    return this._intersectConvex;\n  }\n\n  get [_Shape$types$HEIGHTFI]() {\n    return this._intersectHeightfield;\n  }\n\n  get [_Shape$types$TRIMESH]() {\n    return this._intersectTrimesh;\n  }\n\n  constructor(from, to) {\n    if (from === void 0) {\n      from = new Vec3();\n    }\n\n    if (to === void 0) {\n      to = new Vec3();\n    }\n\n    this.from = from.clone();\n    this.to = to.clone();\n    this.direction = new Vec3();\n    this.precision = 0.0001;\n    this.checkCollisionResponse = true;\n    this.skipBackfaces = false;\n    this.collisionFilterMask = -1;\n    this.collisionFilterGroup = -1;\n    this.mode = Ray.ANY;\n    this.result = new RaycastResult();\n    this.hasHit = false;\n\n    this.callback = result => {};\n  }\n  /**\n   * Do itersection against all bodies in the given World.\n   * @return True if the ray hit anything, otherwise false.\n   */\n\n\n  intersectWorld(world, options) {\n    this.mode = options.mode || Ray.ANY;\n    this.result = options.result || new RaycastResult();\n    this.skipBackfaces = !!options.skipBackfaces;\n    this.collisionFilterMask = typeof options.collisionFilterMask !== 'undefined' ? options.collisionFilterMask : -1;\n    this.collisionFilterGroup = typeof options.collisionFilterGroup !== 'undefined' ? options.collisionFilterGroup : -1;\n    this.checkCollisionResponse = typeof options.checkCollisionResponse !== 'undefined' ? options.checkCollisionResponse : true;\n\n    if (options.from) {\n      this.from.copy(options.from);\n    }\n\n    if (options.to) {\n      this.to.copy(options.to);\n    }\n\n    this.callback = options.callback || (() => {});\n\n    this.hasHit = false;\n    this.result.reset();\n    this.updateDirection();\n    this.getAABB(tmpAABB$1);\n    tmpArray.length = 0;\n    world.broadphase.aabbQuery(world, tmpAABB$1, tmpArray);\n    this.intersectBodies(tmpArray);\n    return this.hasHit;\n  }\n  /**\n   * Shoot a ray at a body, get back information about the hit.\n   * @deprecated @param result set the result property of the Ray instead.\n   */\n\n\n  intersectBody(body, result) {\n    if (result) {\n      this.result = result;\n      this.updateDirection();\n    }\n\n    const checkCollisionResponse = this.checkCollisionResponse;\n\n    if (checkCollisionResponse && !body.collisionResponse) {\n      return;\n    }\n\n    if ((this.collisionFilterGroup & body.collisionFilterMask) === 0 || (body.collisionFilterGroup & this.collisionFilterMask) === 0) {\n      return;\n    }\n\n    const xi = intersectBody_xi;\n    const qi = intersectBody_qi;\n\n    for (let i = 0, N = body.shapes.length; i < N; i++) {\n      const shape = body.shapes[i];\n\n      if (checkCollisionResponse && !shape.collisionResponse) {\n        continue; // Skip\n      }\n\n      body.quaternion.mult(body.shapeOrientations[i], qi);\n      body.quaternion.vmult(body.shapeOffsets[i], xi);\n      xi.vadd(body.position, xi);\n      this.intersectShape(shape, qi, xi, body);\n\n      if (this.result.shouldStop) {\n        break;\n      }\n    }\n  }\n  /**\n   * Shoot a ray at an array bodies, get back information about the hit.\n   * @param bodies An array of Body objects.\n   * @deprecated @param result set the result property of the Ray instead.\n   *\n   */\n\n\n  intersectBodies(bodies, result) {\n    if (result) {\n      this.result = result;\n      this.updateDirection();\n    }\n\n    for (let i = 0, l = bodies.length; !this.result.shouldStop && i < l; i++) {\n      this.intersectBody(bodies[i]);\n    }\n  }\n  /**\n   * Updates the direction vector.\n   */\n\n\n  updateDirection() {\n    this.to.vsub(this.from, this.direction);\n    this.direction.normalize();\n  }\n\n  intersectShape(shape, quat, position, body) {\n    const from = this.from; // Checking boundingSphere\n\n    const distance = distanceFromIntersection(from, this.direction, position);\n\n    if (distance > shape.boundingSphereRadius) {\n      return;\n    }\n\n    const intersectMethod = this[shape.type];\n\n    if (intersectMethod) {\n      intersectMethod.call(this, shape, quat, position, body, shape);\n    }\n  }\n\n  _intersectBox(box, quat, position, body, reportedShape) {\n    return this._intersectConvex(box.convexPolyhedronRepresentation, quat, position, body, reportedShape);\n  }\n\n  _intersectPlane(shape, quat, position, body, reportedShape) {\n    const from = this.from;\n    const to = this.to;\n    const direction = this.direction; // Get plane normal\n\n    const worldNormal = new Vec3(0, 0, 1);\n    quat.vmult(worldNormal, worldNormal);\n    const len = new Vec3();\n    from.vsub(position, len);\n    const planeToFrom = len.dot(worldNormal);\n    to.vsub(position, len);\n    const planeToTo = len.dot(worldNormal);\n\n    if (planeToFrom * planeToTo > 0) {\n      // \"from\" and \"to\" are on the same side of the plane... bail out\n      return;\n    }\n\n    if (from.distanceTo(to) < planeToFrom) {\n      return;\n    }\n\n    const n_dot_dir = worldNormal.dot(direction);\n\n    if (Math.abs(n_dot_dir) < this.precision) {\n      // No intersection\n      return;\n    }\n\n    const planePointToFrom = new Vec3();\n    const dir_scaled_with_t = new Vec3();\n    const hitPointWorld = new Vec3();\n    from.vsub(position, planePointToFrom);\n    const t = -worldNormal.dot(planePointToFrom) / n_dot_dir;\n    direction.scale(t, dir_scaled_with_t);\n    from.vadd(dir_scaled_with_t, hitPointWorld);\n    this.reportIntersection(worldNormal, hitPointWorld, reportedShape, body, -1);\n  }\n  /**\n   * Get the world AABB of the ray.\n   */\n\n\n  getAABB(aabb) {\n    const {\n      lowerBound,\n      upperBound\n    } = aabb;\n    const to = this.to;\n    const from = this.from;\n    lowerBound.x = Math.min(to.x, from.x);\n    lowerBound.y = Math.min(to.y, from.y);\n    lowerBound.z = Math.min(to.z, from.z);\n    upperBound.x = Math.max(to.x, from.x);\n    upperBound.y = Math.max(to.y, from.y);\n    upperBound.z = Math.max(to.z, from.z);\n  }\n\n  _intersectHeightfield(shape, quat, position, body, reportedShape) {\n    shape.data;\n    shape.elementSize; // Convert the ray to local heightfield coordinates\n\n    const localRay = intersectHeightfield_localRay; //new Ray(this.from, this.to);\n\n    localRay.from.copy(this.from);\n    localRay.to.copy(this.to);\n    Transform.pointToLocalFrame(position, quat, localRay.from, localRay.from);\n    Transform.pointToLocalFrame(position, quat, localRay.to, localRay.to);\n    localRay.updateDirection(); // Get the index of the data points to test against\n\n    const index = intersectHeightfield_index;\n    let iMinX;\n    let iMinY;\n    let iMaxX;\n    let iMaxY; // Set to max\n\n    iMinX = iMinY = 0;\n    iMaxX = iMaxY = shape.data.length - 1;\n    const aabb = new AABB();\n    localRay.getAABB(aabb);\n    shape.getIndexOfPosition(aabb.lowerBound.x, aabb.lowerBound.y, index, true);\n    iMinX = Math.max(iMinX, index[0]);\n    iMinY = Math.max(iMinY, index[1]);\n    shape.getIndexOfPosition(aabb.upperBound.x, aabb.upperBound.y, index, true);\n    iMaxX = Math.min(iMaxX, index[0] + 1);\n    iMaxY = Math.min(iMaxY, index[1] + 1);\n\n    for (let i = iMinX; i < iMaxX; i++) {\n      for (let j = iMinY; j < iMaxY; j++) {\n        if (this.result.shouldStop) {\n          return;\n        }\n\n        shape.getAabbAtIndex(i, j, aabb);\n\n        if (!aabb.overlapsRay(localRay)) {\n          continue;\n        } // Lower triangle\n\n\n        shape.getConvexTrianglePillar(i, j, false);\n        Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n\n        this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);\n\n        if (this.result.shouldStop) {\n          return;\n        } // Upper triangle\n\n\n        shape.getConvexTrianglePillar(i, j, true);\n        Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n\n        this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);\n      }\n    }\n  }\n\n  _intersectSphere(sphere, quat, position, body, reportedShape) {\n    const from = this.from;\n    const to = this.to;\n    const r = sphere.radius;\n    const a = (to.x - from.x) ** 2 + (to.y - from.y) ** 2 + (to.z - from.z) ** 2;\n    const b = 2 * ((to.x - from.x) * (from.x - position.x) + (to.y - from.y) * (from.y - position.y) + (to.z - from.z) * (from.z - position.z));\n    const c = (from.x - position.x) ** 2 + (from.y - position.y) ** 2 + (from.z - position.z) ** 2 - r ** 2;\n    const delta = b ** 2 - 4 * a * c;\n    const intersectionPoint = Ray_intersectSphere_intersectionPoint;\n    const normal = Ray_intersectSphere_normal;\n\n    if (delta < 0) {\n      // No intersection\n      return;\n    } else if (delta === 0) {\n      // single intersection point\n      from.lerp(to, delta, intersectionPoint);\n      intersectionPoint.vsub(position, normal);\n      normal.normalize();\n      this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n    } else {\n      const d1 = (-b - Math.sqrt(delta)) / (2 * a);\n      const d2 = (-b + Math.sqrt(delta)) / (2 * a);\n\n      if (d1 >= 0 && d1 <= 1) {\n        from.lerp(to, d1, intersectionPoint);\n        intersectionPoint.vsub(position, normal);\n        normal.normalize();\n        this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n      }\n\n      if (this.result.shouldStop) {\n        return;\n      }\n\n      if (d2 >= 0 && d2 <= 1) {\n        from.lerp(to, d2, intersectionPoint);\n        intersectionPoint.vsub(position, normal);\n        normal.normalize();\n        this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n      }\n    }\n  }\n\n  _intersectConvex(shape, quat, position, body, reportedShape, options) {\n    intersectConvex_minDistNormal;\n    const normal = intersectConvex_normal;\n    const vector = intersectConvex_vector;\n    intersectConvex_minDistIntersect;\n    const faceList = options && options.faceList || null; // Checking faces\n\n    const faces = shape.faces;\n    const vertices = shape.vertices;\n    const normals = shape.faceNormals;\n    const direction = this.direction;\n    const from = this.from;\n    const to = this.to;\n    const fromToDistance = from.distanceTo(to);\n    const Nfaces = faceList ? faceList.length : faces.length;\n    const result = this.result;\n\n    for (let j = 0; !result.shouldStop && j < Nfaces; j++) {\n      const fi = faceList ? faceList[j] : j;\n      const face = faces[fi];\n      const faceNormal = normals[fi];\n      const q = quat;\n      const x = position; // determine if ray intersects the plane of the face\n      // note: this works regardless of the direction of the face normal\n      // Get plane point in world coordinates...\n\n      vector.copy(vertices[face[0]]);\n      q.vmult(vector, vector);\n      vector.vadd(x, vector); // ...but make it relative to the ray from. We'll fix this later.\n\n      vector.vsub(from, vector); // Get plane normal\n\n      q.vmult(faceNormal, normal); // If this dot product is negative, we have something interesting\n\n      const dot = direction.dot(normal); // Bail out if ray and plane are parallel\n\n      if (Math.abs(dot) < this.precision) {\n        continue;\n      } // calc distance to plane\n\n\n      const scalar = normal.dot(vector) / dot; // if negative distance, then plane is behind ray\n\n      if (scalar < 0) {\n        continue;\n      } // if (dot < 0) {\n      // Intersection point is from + direction * scalar\n\n\n      direction.scale(scalar, intersectPoint);\n      intersectPoint.vadd(from, intersectPoint); // a is the point we compare points b and c with.\n\n      a.copy(vertices[face[0]]);\n      q.vmult(a, a);\n      x.vadd(a, a);\n\n      for (let i = 1; !result.shouldStop && i < face.length - 1; i++) {\n        // Transform 3 vertices to world coords\n        b.copy(vertices[face[i]]);\n        c.copy(vertices[face[i + 1]]);\n        q.vmult(b, b);\n        q.vmult(c, c);\n        x.vadd(b, b);\n        x.vadd(c, c);\n        const distance = intersectPoint.distanceTo(from);\n\n        if (!(Ray.pointInTriangle(intersectPoint, a, b, c) || Ray.pointInTriangle(intersectPoint, b, a, c)) || distance > fromToDistance) {\n          continue;\n        }\n\n        this.reportIntersection(normal, intersectPoint, reportedShape, body, fi);\n      } // }\n\n    }\n  }\n  /**\n   * @todo Optimize by transforming the world to local space first.\n   * @todo Use Octree lookup\n   */\n\n\n  _intersectTrimesh(mesh, quat, position, body, reportedShape, options) {\n    const normal = intersectTrimesh_normal;\n    const triangles = intersectTrimesh_triangles;\n    const treeTransform = intersectTrimesh_treeTransform;\n    const vector = intersectConvex_vector;\n    const localDirection = intersectTrimesh_localDirection;\n    const localFrom = intersectTrimesh_localFrom;\n    const localTo = intersectTrimesh_localTo;\n    const worldIntersectPoint = intersectTrimesh_worldIntersectPoint;\n    const worldNormal = intersectTrimesh_worldNormal; // Checking faces\n\n    const indices = mesh.indices;\n    mesh.vertices; // const normals = mesh.faceNormals\n\n    const from = this.from;\n    const to = this.to;\n    const direction = this.direction;\n    treeTransform.position.copy(position);\n    treeTransform.quaternion.copy(quat); // Transform ray to local space!\n\n    Transform.vectorToLocalFrame(position, quat, direction, localDirection);\n    Transform.pointToLocalFrame(position, quat, from, localFrom);\n    Transform.pointToLocalFrame(position, quat, to, localTo);\n    localTo.x *= mesh.scale.x;\n    localTo.y *= mesh.scale.y;\n    localTo.z *= mesh.scale.z;\n    localFrom.x *= mesh.scale.x;\n    localFrom.y *= mesh.scale.y;\n    localFrom.z *= mesh.scale.z;\n    localTo.vsub(localFrom, localDirection);\n    localDirection.normalize();\n    const fromToDistanceSquared = localFrom.distanceSquared(localTo);\n    mesh.tree.rayQuery(this, treeTransform, triangles);\n\n    for (let i = 0, N = triangles.length; !this.result.shouldStop && i !== N; i++) {\n      const trianglesIndex = triangles[i];\n      mesh.getNormal(trianglesIndex, normal); // determine if ray intersects the plane of the face\n      // note: this works regardless of the direction of the face normal\n      // Get plane point in world coordinates...\n\n      mesh.getVertex(indices[trianglesIndex * 3], a); // ...but make it relative to the ray from. We'll fix this later.\n\n      a.vsub(localFrom, vector); // If this dot product is negative, we have something interesting\n\n      const dot = localDirection.dot(normal); // Bail out if ray and plane are parallel\n      // if (Math.abs( dot ) < this.precision){\n      //     continue;\n      // }\n      // calc distance to plane\n\n      const scalar = normal.dot(vector) / dot; // if negative distance, then plane is behind ray\n\n      if (scalar < 0) {\n        continue;\n      } // Intersection point is from + direction * scalar\n\n\n      localDirection.scale(scalar, intersectPoint);\n      intersectPoint.vadd(localFrom, intersectPoint); // Get triangle vertices\n\n      mesh.getVertex(indices[trianglesIndex * 3 + 1], b);\n      mesh.getVertex(indices[trianglesIndex * 3 + 2], c);\n      const squaredDistance = intersectPoint.distanceSquared(localFrom);\n\n      if (!(Ray.pointInTriangle(intersectPoint, b, a, c) || Ray.pointInTriangle(intersectPoint, a, b, c)) || squaredDistance > fromToDistanceSquared) {\n        continue;\n      } // transform intersectpoint and normal to world\n\n\n      Transform.vectorToWorldFrame(quat, normal, worldNormal);\n      Transform.pointToWorldFrame(position, quat, intersectPoint, worldIntersectPoint);\n      this.reportIntersection(worldNormal, worldIntersectPoint, reportedShape, body, trianglesIndex);\n    }\n\n    triangles.length = 0;\n  }\n  /**\n   * @return True if the intersections should continue\n   */\n\n\n  reportIntersection(normal, hitPointWorld, shape, body, hitFaceIndex) {\n    const from = this.from;\n    const to = this.to;\n    const distance = from.distanceTo(hitPointWorld);\n    const result = this.result; // Skip back faces?\n\n    if (this.skipBackfaces && normal.dot(this.direction) > 0) {\n      return;\n    }\n\n    result.hitFaceIndex = typeof hitFaceIndex !== 'undefined' ? hitFaceIndex : -1;\n\n    switch (this.mode) {\n      case Ray.ALL:\n        this.hasHit = true;\n        result.set(from, to, normal, hitPointWorld, shape, body, distance);\n        result.hasHit = true;\n        this.callback(result);\n        break;\n\n      case Ray.CLOSEST:\n        // Store if closer than current closest\n        if (distance < result.distance || !result.hasHit) {\n          this.hasHit = true;\n          result.hasHit = true;\n          result.set(from, to, normal, hitPointWorld, shape, body, distance);\n        }\n\n        break;\n\n      case Ray.ANY:\n        // Report and stop.\n        this.hasHit = true;\n        result.hasHit = true;\n        result.set(from, to, normal, hitPointWorld, shape, body, distance);\n        result.shouldStop = true;\n        break;\n    }\n  }\n  /**\n   * As per \"Barycentric Technique\" as named\n   * {@link https://www.blackpawn.com/texts/pointinpoly/default.html here} but without the division\n   */\n\n\n  static pointInTriangle(p, a, b, c) {\n    c.vsub(a, v0);\n    b.vsub(a, v1);\n    p.vsub(a, v2);\n    const dot00 = v0.dot(v0);\n    const dot01 = v0.dot(v1);\n    const dot02 = v0.dot(v2);\n    const dot11 = v1.dot(v1);\n    const dot12 = v1.dot(v2);\n    let u;\n    let v;\n    return (u = dot11 * dot02 - dot01 * dot12) >= 0 && (v = dot00 * dot12 - dot01 * dot02) >= 0 && u + v < dot00 * dot11 - dot01 * dot01;\n  }\n\n}\nRay.CLOSEST = RAY_MODES.CLOSEST;\nRay.ANY = RAY_MODES.ANY;\nRay.ALL = RAY_MODES.ALL;\nconst tmpAABB$1 = new AABB();\nconst tmpArray = [];\nconst v1 = new Vec3();\nconst v2 = new Vec3();\nconst intersectBody_xi = new Vec3();\nconst intersectBody_qi = new Quaternion();\nconst intersectPoint = new Vec3();\nconst a = new Vec3();\nconst b = new Vec3();\nconst c = new Vec3();\nnew Vec3();\nnew RaycastResult();\nconst intersectConvexOptions = {\n  faceList: [0]\n};\nconst worldPillarOffset = new Vec3();\nconst intersectHeightfield_localRay = new Ray();\nconst intersectHeightfield_index = [];\nconst Ray_intersectSphere_intersectionPoint = new Vec3();\nconst Ray_intersectSphere_normal = new Vec3();\nconst intersectConvex_normal = new Vec3();\nconst intersectConvex_minDistNormal = new Vec3();\nconst intersectConvex_minDistIntersect = new Vec3();\nconst intersectConvex_vector = new Vec3();\nconst intersectTrimesh_normal = new Vec3();\nconst intersectTrimesh_localDirection = new Vec3();\nconst intersectTrimesh_localFrom = new Vec3();\nconst intersectTrimesh_localTo = new Vec3();\nconst intersectTrimesh_worldNormal = new Vec3();\nconst intersectTrimesh_worldIntersectPoint = new Vec3();\nnew AABB();\nconst intersectTrimesh_triangles = [];\nconst intersectTrimesh_treeTransform = new Transform();\nconst v0 = new Vec3();\nconst intersect = new Vec3();\n\nfunction distanceFromIntersection(from, direction, position) {\n  // v0 is vector from from to position\n  position.vsub(from, v0);\n  const dot = v0.dot(direction); // intersect = direction*dot + from\n\n  direction.scale(dot, intersect);\n  intersect.vadd(from, intersect);\n  const distance = position.distanceTo(intersect);\n  return distance;\n}\n\n/**\n * Sweep and prune broadphase along one axis.\n */\nclass SAPBroadphase extends Broadphase {\n  /**\n   * List of bodies currently in the broadphase.\n   */\n\n  /**\n   * The world to search in.\n   */\n\n  /**\n   * Axis to sort the bodies along.\n   * Set to 0 for x axis, and 1 for y axis.\n   * For best performance, pick the axis where bodies are most distributed.\n   */\n\n  /**\n   * Check if the bounds of two bodies overlap, along the given SAP axis.\n   */\n  static checkBounds(bi, bj, axisIndex) {\n    let biPos;\n    let bjPos;\n\n    if (axisIndex === 0) {\n      biPos = bi.position.x;\n      bjPos = bj.position.x;\n    } else if (axisIndex === 1) {\n      biPos = bi.position.y;\n      bjPos = bj.position.y;\n    } else if (axisIndex === 2) {\n      biPos = bi.position.z;\n      bjPos = bj.position.z;\n    }\n\n    const ri = bi.boundingRadius,\n          rj = bj.boundingRadius,\n          boundA2 = biPos + ri,\n          boundB1 = bjPos - rj;\n    return boundB1 < boundA2;\n  } // Note: these are identical, save for x/y/z lowerbound\n\n  /**\n   * insertionSortX\n   */\n\n\n  static insertionSortX(a) {\n    for (let i = 1, l = a.length; i < l; i++) {\n      const v = a[i];\n      let j;\n\n      for (j = i - 1; j >= 0; j--) {\n        if (a[j].aabb.lowerBound.x <= v.aabb.lowerBound.x) {\n          break;\n        }\n\n        a[j + 1] = a[j];\n      }\n\n      a[j + 1] = v;\n    }\n\n    return a;\n  }\n  /**\n   * insertionSortY\n   */\n\n\n  static insertionSortY(a) {\n    for (let i = 1, l = a.length; i < l; i++) {\n      const v = a[i];\n      let j;\n\n      for (j = i - 1; j >= 0; j--) {\n        if (a[j].aabb.lowerBound.y <= v.aabb.lowerBound.y) {\n          break;\n        }\n\n        a[j + 1] = a[j];\n      }\n\n      a[j + 1] = v;\n    }\n\n    return a;\n  }\n  /**\n   * insertionSortZ\n   */\n\n\n  static insertionSortZ(a) {\n    for (let i = 1, l = a.length; i < l; i++) {\n      const v = a[i];\n      let j;\n\n      for (j = i - 1; j >= 0; j--) {\n        if (a[j].aabb.lowerBound.z <= v.aabb.lowerBound.z) {\n          break;\n        }\n\n        a[j + 1] = a[j];\n      }\n\n      a[j + 1] = v;\n    }\n\n    return a;\n  }\n\n  constructor(world) {\n    super();\n    this.axisList = [];\n    this.world = null;\n    this.axisIndex = 0;\n    const axisList = this.axisList;\n\n    this._addBodyHandler = event => {\n      axisList.push(event.body);\n    };\n\n    this._removeBodyHandler = event => {\n      const idx = axisList.indexOf(event.body);\n\n      if (idx !== -1) {\n        axisList.splice(idx, 1);\n      }\n    };\n\n    if (world) {\n      this.setWorld(world);\n    }\n  }\n  /**\n   * Change the world\n   */\n\n\n  setWorld(world) {\n    // Clear the old axis array\n    this.axisList.length = 0; // Add all bodies from the new world\n\n    for (let i = 0; i < world.bodies.length; i++) {\n      this.axisList.push(world.bodies[i]);\n    } // Remove old handlers, if any\n\n\n    world.removeEventListener('addBody', this._addBodyHandler);\n    world.removeEventListener('removeBody', this._removeBodyHandler); // Add handlers to update the list of bodies.\n\n    world.addEventListener('addBody', this._addBodyHandler);\n    world.addEventListener('removeBody', this._removeBodyHandler);\n    this.world = world;\n    this.dirty = true;\n  }\n  /**\n   * Collect all collision pairs\n   */\n\n\n  collisionPairs(world, p1, p2) {\n    const bodies = this.axisList;\n    const N = bodies.length;\n    const axisIndex = this.axisIndex;\n    let i;\n    let j;\n\n    if (this.dirty) {\n      this.sortList();\n      this.dirty = false;\n    } // Look through the list\n\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n\n      for (j = i + 1; j < N; j++) {\n        const bj = bodies[j];\n\n        if (!this.needBroadphaseCollision(bi, bj)) {\n          continue;\n        }\n\n        if (!SAPBroadphase.checkBounds(bi, bj, axisIndex)) {\n          break;\n        }\n\n        this.intersectionTest(bi, bj, p1, p2);\n      }\n    }\n  }\n\n  sortList() {\n    const axisList = this.axisList;\n    const axisIndex = this.axisIndex;\n    const N = axisList.length; // Update AABBs\n\n    for (let i = 0; i !== N; i++) {\n      const bi = axisList[i];\n\n      if (bi.aabbNeedsUpdate) {\n        bi.updateAABB();\n      }\n    } // Sort the list\n\n\n    if (axisIndex === 0) {\n      SAPBroadphase.insertionSortX(axisList);\n    } else if (axisIndex === 1) {\n      SAPBroadphase.insertionSortY(axisList);\n    } else if (axisIndex === 2) {\n      SAPBroadphase.insertionSortZ(axisList);\n    }\n  }\n  /**\n   * Computes the variance of the body positions and estimates the best axis to use.\n   * Will automatically set property `axisIndex`.\n   */\n\n\n  autoDetectAxis() {\n    let sumX = 0;\n    let sumX2 = 0;\n    let sumY = 0;\n    let sumY2 = 0;\n    let sumZ = 0;\n    let sumZ2 = 0;\n    const bodies = this.axisList;\n    const N = bodies.length;\n    const invN = 1 / N;\n\n    for (let i = 0; i !== N; i++) {\n      const b = bodies[i];\n      const centerX = b.position.x;\n      sumX += centerX;\n      sumX2 += centerX * centerX;\n      const centerY = b.position.y;\n      sumY += centerY;\n      sumY2 += centerY * centerY;\n      const centerZ = b.position.z;\n      sumZ += centerZ;\n      sumZ2 += centerZ * centerZ;\n    }\n\n    const varianceX = sumX2 - sumX * sumX * invN;\n    const varianceY = sumY2 - sumY * sumY * invN;\n    const varianceZ = sumZ2 - sumZ * sumZ * invN;\n\n    if (varianceX > varianceY) {\n      if (varianceX > varianceZ) {\n        this.axisIndex = 0;\n      } else {\n        this.axisIndex = 2;\n      }\n    } else if (varianceY > varianceZ) {\n      this.axisIndex = 1;\n    } else {\n      this.axisIndex = 2;\n    }\n  }\n  /**\n   * Returns all the bodies within an AABB.\n   * @param result An array to store resulting bodies in.\n   */\n\n\n  aabbQuery(world, aabb, result) {\n    if (result === void 0) {\n      result = [];\n    }\n\n    if (this.dirty) {\n      this.sortList();\n      this.dirty = false;\n    }\n\n    const axisIndex = this.axisIndex;\n    let axis = 'x';\n\n    if (axisIndex === 1) {\n      axis = 'y';\n    }\n\n    if (axisIndex === 2) {\n      axis = 'z';\n    }\n\n    const axisList = this.axisList;\n    aabb.lowerBound[axis];\n    aabb.upperBound[axis];\n\n    for (let i = 0; i < axisList.length; i++) {\n      const b = axisList[i];\n\n      if (b.aabbNeedsUpdate) {\n        b.updateAABB();\n      }\n\n      if (b.aabb.overlaps(aabb)) {\n        result.push(b);\n      }\n    }\n\n    return result;\n  }\n\n}\n\nclass Utils {\n  /**\n   * Extend an options object with default values.\n   * @param options The options object. May be falsy: in this case, a new object is created and returned.\n   * @param defaults An object containing default values.\n   * @return The modified options object.\n   */\n  static defaults(options, defaults) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    for (let key in defaults) {\n      if (!(key in options)) {\n        options[key] = defaults[key];\n      }\n    }\n\n    return options;\n  }\n\n}\n\n/**\n * Constraint base class\n */\nclass Constraint {\n  /**\n   * Equations to be solved in this constraint.\n   */\n\n  /**\n   * Body A.\n   */\n\n  /**\n   * Body B.\n   */\n\n  /**\n   * Set to false if you don't want the bodies to collide when they are connected.\n   */\n  constructor(bodyA, bodyB, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    options = Utils.defaults(options, {\n      collideConnected: true,\n      wakeUpBodies: true\n    });\n    this.equations = [];\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.id = Constraint.idCounter++;\n    this.collideConnected = options.collideConnected;\n\n    if (options.wakeUpBodies) {\n      if (bodyA) {\n        bodyA.wakeUp();\n      }\n\n      if (bodyB) {\n        bodyB.wakeUp();\n      }\n    }\n  }\n  /**\n   * Update all the equations with data.\n   */\n\n\n  update() {\n    throw new Error('method update() not implmemented in this Constraint subclass!');\n  }\n  /**\n   * Enables all equations in the constraint.\n   */\n\n\n  enable() {\n    const eqs = this.equations;\n\n    for (let i = 0; i < eqs.length; i++) {\n      eqs[i].enabled = true;\n    }\n  }\n  /**\n   * Disables all equations in the constraint.\n   */\n\n\n  disable() {\n    const eqs = this.equations;\n\n    for (let i = 0; i < eqs.length; i++) {\n      eqs[i].enabled = false;\n    }\n  }\n\n}\nConstraint.idCounter = 0;\n\n/**\n * An element containing 6 entries, 3 spatial and 3 rotational degrees of freedom.\n */\n\nclass JacobianElement {\n  /**\n   * spatial\n   */\n\n  /**\n   * rotational\n   */\n  constructor() {\n    this.spatial = new Vec3();\n    this.rotational = new Vec3();\n  }\n  /**\n   * Multiply with other JacobianElement\n   */\n\n\n  multiplyElement(element) {\n    return element.spatial.dot(this.spatial) + element.rotational.dot(this.rotational);\n  }\n  /**\n   * Multiply with two vectors\n   */\n\n\n  multiplyVectors(spatial, rotational) {\n    return spatial.dot(this.spatial) + rotational.dot(this.rotational);\n  }\n\n}\n\n/**\n * Equation base class.\n *\n * `a`, `b` and `eps` are {@link https://www8.cs.umu.se/kurser/5DV058/VT15/lectures/SPOOKlabnotes.pdf SPOOK} parameters that default to `0.0`. See {@link https://github.com/schteppe/cannon.js/issues/238#issuecomment-147172327 this exchange} for more details on Cannon's physics implementation.\n */\nclass Equation {\n  /**\n   * Minimum (read: negative max) force to be applied by the constraint.\n   */\n\n  /**\n   * Maximum (read: positive max) force to be applied by the constraint.\n   */\n\n  /**\n   * SPOOK parameter\n   */\n\n  /**\n   * SPOOK parameter\n   */\n\n  /**\n   * SPOOK parameter\n   */\n\n  /**\n   * A number, proportional to the force added to the bodies.\n   */\n  constructor(bi, bj, minForce, maxForce) {\n    if (minForce === void 0) {\n      minForce = -1e6;\n    }\n\n    if (maxForce === void 0) {\n      maxForce = 1e6;\n    }\n\n    this.id = Equation.idCounter++;\n    this.minForce = minForce;\n    this.maxForce = maxForce;\n    this.bi = bi;\n    this.bj = bj;\n    this.a = 0.0; // SPOOK parameter\n\n    this.b = 0.0; // SPOOK parameter\n\n    this.eps = 0.0; // SPOOK parameter\n\n    this.jacobianElementA = new JacobianElement();\n    this.jacobianElementB = new JacobianElement();\n    this.enabled = true;\n    this.multiplier = 0;\n    this.setSpookParams(1e7, 4, 1 / 60); // Set typical spook params\n  }\n  /**\n   * Recalculates a, b, and eps.\n   *\n   * The Equation constructor sets typical SPOOK parameters as such:\n   * * `stiffness` = 1e7\n   * * `relaxation` = 4\n   * * `timeStep`= 1 / 60, _note the hardcoded refresh rate._\n   */\n\n\n  setSpookParams(stiffness, relaxation, timeStep) {\n    const d = relaxation;\n    const k = stiffness;\n    const h = timeStep;\n    this.a = 4.0 / (h * (1 + 4 * d));\n    this.b = 4.0 * d / (1 + 4 * d);\n    this.eps = 4.0 / (h * h * k * (1 + 4 * d));\n  }\n  /**\n   * Computes the right hand side of the SPOOK equation\n   */\n\n\n  computeB(a, b, h) {\n    const GW = this.computeGW();\n    const Gq = this.computeGq();\n    const GiMf = this.computeGiMf();\n    return -Gq * a - GW * b - GiMf * h;\n  }\n  /**\n   * Computes G*q, where q are the generalized body coordinates\n   */\n\n\n  computeGq() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const xi = bi.position;\n    const xj = bj.position;\n    return GA.spatial.dot(xi) + GB.spatial.dot(xj);\n  }\n  /**\n   * Computes G*W, where W are the body velocities\n   */\n\n\n  computeGW() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const vi = bi.velocity;\n    const vj = bj.velocity;\n    const wi = bi.angularVelocity;\n    const wj = bj.angularVelocity;\n    return GA.multiplyVectors(vi, wi) + GB.multiplyVectors(vj, wj);\n  }\n  /**\n   * Computes G*Wlambda, where W are the body velocities\n   */\n\n\n  computeGWlambda() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const vi = bi.vlambda;\n    const vj = bj.vlambda;\n    const wi = bi.wlambda;\n    const wj = bj.wlambda;\n    return GA.multiplyVectors(vi, wi) + GB.multiplyVectors(vj, wj);\n  }\n  /**\n   * Computes G*inv(M)*f, where M is the mass matrix with diagonal blocks for each body, and f are the forces on the bodies.\n   */\n\n\n  computeGiMf() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const fi = bi.force;\n    const ti = bi.torque;\n    const fj = bj.force;\n    const tj = bj.torque;\n    const invMassi = bi.invMassSolve;\n    const invMassj = bj.invMassSolve;\n    fi.scale(invMassi, iMfi);\n    fj.scale(invMassj, iMfj);\n    bi.invInertiaWorldSolve.vmult(ti, invIi_vmult_taui);\n    bj.invInertiaWorldSolve.vmult(tj, invIj_vmult_tauj);\n    return GA.multiplyVectors(iMfi, invIi_vmult_taui) + GB.multiplyVectors(iMfj, invIj_vmult_tauj);\n  }\n  /**\n   * Computes G*inv(M)*G'\n   */\n\n\n  computeGiMGt() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const invMassi = bi.invMassSolve;\n    const invMassj = bj.invMassSolve;\n    const invIi = bi.invInertiaWorldSolve;\n    const invIj = bj.invInertiaWorldSolve;\n    let result = invMassi + invMassj;\n    invIi.vmult(GA.rotational, tmp);\n    result += tmp.dot(GA.rotational);\n    invIj.vmult(GB.rotational, tmp);\n    result += tmp.dot(GB.rotational);\n    return result;\n  }\n  /**\n   * Add constraint velocity to the bodies.\n   */\n\n\n  addToWlambda(deltalambda) {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const temp = addToWlambda_temp; // Add to linear velocity\n    // v_lambda += inv(M) * delta_lamba * G\n\n    bi.vlambda.addScaledVector(bi.invMassSolve * deltalambda, GA.spatial, bi.vlambda);\n    bj.vlambda.addScaledVector(bj.invMassSolve * deltalambda, GB.spatial, bj.vlambda); // Add to angular velocity\n\n    bi.invInertiaWorldSolve.vmult(GA.rotational, temp);\n    bi.wlambda.addScaledVector(deltalambda, temp, bi.wlambda);\n    bj.invInertiaWorldSolve.vmult(GB.rotational, temp);\n    bj.wlambda.addScaledVector(deltalambda, temp, bj.wlambda);\n  }\n  /**\n   * Compute the denominator part of the SPOOK equation: C = G*inv(M)*G' + eps\n   */\n\n\n  computeC() {\n    return this.computeGiMGt() + this.eps;\n  }\n\n}\nEquation.idCounter = 0;\nconst iMfi = new Vec3();\nconst iMfj = new Vec3();\nconst invIi_vmult_taui = new Vec3();\nconst invIj_vmult_tauj = new Vec3();\nconst tmp = new Vec3();\nconst addToWlambda_temp = new Vec3();\n\n/**\n * Contact/non-penetration constraint equation\n */\nclass ContactEquation extends Equation {\n  /**\n   * \"bounciness\": u1 = -e*u0\n   */\n\n  /**\n   * World-oriented vector that goes from the center of bi to the contact point.\n   */\n\n  /**\n   * World-oriented vector that starts in body j position and goes to the contact point.\n   */\n\n  /**\n   * Contact normal, pointing out of body i.\n   */\n  constructor(bodyA, bodyB, maxForce) {\n    if (maxForce === void 0) {\n      maxForce = 1e6;\n    }\n\n    super(bodyA, bodyB, 0, maxForce);\n    this.restitution = 0.0;\n    this.ri = new Vec3();\n    this.rj = new Vec3();\n    this.ni = new Vec3();\n  }\n\n  computeB(h) {\n    const a = this.a;\n    const b = this.b;\n    const bi = this.bi;\n    const bj = this.bj;\n    const ri = this.ri;\n    const rj = this.rj;\n    const rixn = ContactEquation_computeB_temp1;\n    const rjxn = ContactEquation_computeB_temp2;\n    const vi = bi.velocity;\n    const wi = bi.angularVelocity;\n    bi.force;\n    bi.torque;\n    const vj = bj.velocity;\n    const wj = bj.angularVelocity;\n    bj.force;\n    bj.torque;\n    const penetrationVec = ContactEquation_computeB_temp3;\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const n = this.ni; // Caluclate cross products\n\n    ri.cross(n, rixn);\n    rj.cross(n, rjxn); // g = xj+rj -(xi+ri)\n    // G = [ -ni  -rixn  ni  rjxn ]\n\n    n.negate(GA.spatial);\n    rixn.negate(GA.rotational);\n    GB.spatial.copy(n);\n    GB.rotational.copy(rjxn); // Calculate the penetration vector\n\n    penetrationVec.copy(bj.position);\n    penetrationVec.vadd(rj, penetrationVec);\n    penetrationVec.vsub(bi.position, penetrationVec);\n    penetrationVec.vsub(ri, penetrationVec);\n    const g = n.dot(penetrationVec); // Compute iteration\n\n    const ePlusOne = this.restitution + 1;\n    const GW = ePlusOne * vj.dot(n) - ePlusOne * vi.dot(n) + wj.dot(rjxn) - wi.dot(rixn);\n    const GiMf = this.computeGiMf();\n    const B = -g * a - GW * b - h * GiMf;\n    return B;\n  }\n  /**\n   * Get the current relative velocity in the contact point.\n   */\n\n\n  getImpactVelocityAlongNormal() {\n    const vi = ContactEquation_getImpactVelocityAlongNormal_vi;\n    const vj = ContactEquation_getImpactVelocityAlongNormal_vj;\n    const xi = ContactEquation_getImpactVelocityAlongNormal_xi;\n    const xj = ContactEquation_getImpactVelocityAlongNormal_xj;\n    const relVel = ContactEquation_getImpactVelocityAlongNormal_relVel;\n    this.bi.position.vadd(this.ri, xi);\n    this.bj.position.vadd(this.rj, xj);\n    this.bi.getVelocityAtWorldPoint(xi, vi);\n    this.bj.getVelocityAtWorldPoint(xj, vj);\n    vi.vsub(vj, relVel);\n    return this.ni.dot(relVel);\n  }\n\n}\nconst ContactEquation_computeB_temp1 = new Vec3(); // Temp vectors\n\nconst ContactEquation_computeB_temp2 = new Vec3();\nconst ContactEquation_computeB_temp3 = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_vi = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_vj = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_xi = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_xj = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_relVel = new Vec3();\n\n/**\n * Connects two bodies at given offset points.\n * @example\n *     const bodyA = new Body({ mass: 1 })\n *     const bodyB = new Body({ mass: 1 })\n *     bodyA.position.set(-1, 0, 0)\n *     bodyB.position.set(1, 0, 0)\n *     bodyA.addShape(shapeA)\n *     bodyB.addShape(shapeB)\n *     world.addBody(bodyA)\n *     world.addBody(bodyB)\n *     const localPivotA = new Vec3(1, 0, 0)\n *     const localPivotB = new Vec3(-1, 0, 0)\n *     const constraint = new PointToPointConstraint(bodyA, localPivotA, bodyB, localPivotB)\n *     world.addConstraint(constraint)\n */\nclass PointToPointConstraint extends Constraint {\n  /**\n   * Pivot, defined locally in bodyA.\n   */\n\n  /**\n   * Pivot, defined locally in bodyB.\n   */\n\n  /**\n   * @param pivotA The point relative to the center of mass of bodyA which bodyA is constrained to.\n   * @param bodyB Body that will be constrained in a similar way to the same point as bodyA. We will therefore get a link between bodyA and bodyB. If not specified, bodyA will be constrained to a static point.\n   * @param pivotB The point relative to the center of mass of bodyB which bodyB is constrained to.\n   * @param maxForce The maximum force that should be applied to constrain the bodies.\n   */\n  constructor(bodyA, pivotA, bodyB, pivotB, maxForce) {\n    if (pivotA === void 0) {\n      pivotA = new Vec3();\n    }\n\n    if (pivotB === void 0) {\n      pivotB = new Vec3();\n    }\n\n    if (maxForce === void 0) {\n      maxForce = 1e6;\n    }\n\n    super(bodyA, bodyB);\n    this.pivotA = pivotA.clone();\n    this.pivotB = pivotB.clone();\n    const x = this.equationX = new ContactEquation(bodyA, bodyB);\n    const y = this.equationY = new ContactEquation(bodyA, bodyB);\n    const z = this.equationZ = new ContactEquation(bodyA, bodyB); // Equations to be fed to the solver\n\n    this.equations.push(x, y, z); // Make the equations bidirectional\n\n    x.minForce = y.minForce = z.minForce = -maxForce;\n    x.maxForce = y.maxForce = z.maxForce = maxForce;\n    x.ni.set(1, 0, 0);\n    y.ni.set(0, 1, 0);\n    z.ni.set(0, 0, 1);\n  }\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const x = this.equationX;\n    const y = this.equationY;\n    const z = this.equationZ; // Rotate the pivots to world space\n\n    bodyA.quaternion.vmult(this.pivotA, x.ri);\n    bodyB.quaternion.vmult(this.pivotB, x.rj);\n    y.ri.copy(x.ri);\n    y.rj.copy(x.rj);\n    z.ri.copy(x.ri);\n    z.rj.copy(x.rj);\n  }\n\n}\n\n/**\n * Cone equation. Works to keep the given body world vectors aligned, or tilted within a given angle from each other.\n */\nclass ConeEquation extends Equation {\n  /**\n   * Local axis in A\n   */\n\n  /**\n   * Local axis in B\n   */\n\n  /**\n   * The \"cone angle\" to keep\n   */\n  constructor(bodyA, bodyB, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;\n    super(bodyA, bodyB, -maxForce, maxForce);\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);\n    this.angle = typeof options.angle !== 'undefined' ? options.angle : 0;\n  }\n\n  computeB(h) {\n    const a = this.a;\n    const b = this.b;\n    const ni = this.axisA;\n    const nj = this.axisB;\n    const nixnj = tmpVec1$2;\n    const njxni = tmpVec2$2;\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB; // Caluclate cross products\n\n    ni.cross(nj, nixnj);\n    nj.cross(ni, njxni); // The angle between two vector is:\n    // cos(theta) = a * b / (length(a) * length(b) = { len(a) = len(b) = 1 } = a * b\n    // g = a * b\n    // gdot = (b x a) * wi + (a x b) * wj\n    // G = [0 bxa 0 axb]\n    // W = [vi wi vj wj]\n\n    GA.rotational.copy(njxni);\n    GB.rotational.copy(nixnj);\n    const g = Math.cos(this.angle) - ni.dot(nj);\n    const GW = this.computeGW();\n    const GiMf = this.computeGiMf();\n    const B = -g * a - GW * b - h * GiMf;\n    return B;\n  }\n\n}\nconst tmpVec1$2 = new Vec3();\nconst tmpVec2$2 = new Vec3();\n\n/**\n * Rotational constraint. Works to keep the local vectors orthogonal to each other in world space.\n */\nclass RotationalEquation extends Equation {\n  /**\n   * World oriented rotational axis.\n   */\n\n  /**\n   * World oriented rotational axis.\n   */\n\n  /**\n   * maxAngle\n   */\n  constructor(bodyA, bodyB, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;\n    super(bodyA, bodyB, -maxForce, maxForce);\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);\n    this.maxAngle = Math.PI / 2;\n  }\n\n  computeB(h) {\n    const a = this.a;\n    const b = this.b;\n    const ni = this.axisA;\n    const nj = this.axisB;\n    const nixnj = tmpVec1$1;\n    const njxni = tmpVec2$1;\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB; // Caluclate cross products\n\n    ni.cross(nj, nixnj);\n    nj.cross(ni, njxni); // g = ni * nj\n    // gdot = (nj x ni) * wi + (ni x nj) * wj\n    // G = [0 njxni 0 nixnj]\n    // W = [vi wi vj wj]\n\n    GA.rotational.copy(njxni);\n    GB.rotational.copy(nixnj);\n    const g = Math.cos(this.maxAngle) - ni.dot(nj);\n    const GW = this.computeGW();\n    const GiMf = this.computeGiMf();\n    const B = -g * a - GW * b - h * GiMf;\n    return B;\n  }\n\n}\nconst tmpVec1$1 = new Vec3();\nconst tmpVec2$1 = new Vec3();\n\n/**\n * A Cone Twist constraint, useful for ragdolls.\n */\nclass ConeTwistConstraint extends PointToPointConstraint {\n  /**\n   * The axis direction for the constraint of the body A.\n   */\n\n  /**\n   * The axis direction for the constraint of the body B.\n   */\n\n  /**\n   * The aperture angle of the cone.\n   */\n\n  /**\n   * The twist angle of the joint.\n   */\n  constructor(bodyA, bodyB, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6; // Set pivot point in between\n\n    const pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n    const pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n    super(bodyA, pivotA, bodyB, pivotB, maxForce);\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3();\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3();\n    this.collideConnected = !!options.collideConnected;\n    this.angle = typeof options.angle !== 'undefined' ? options.angle : 0;\n    const c = this.coneEquation = new ConeEquation(bodyA, bodyB, options);\n    const t = this.twistEquation = new RotationalEquation(bodyA, bodyB, options);\n    this.twistAngle = typeof options.twistAngle !== 'undefined' ? options.twistAngle : 0; // Make the cone equation push the bodies toward the cone axis, not outward\n\n    c.maxForce = 0;\n    c.minForce = -maxForce; // Make the twist equation add torque toward the initial position\n\n    t.maxForce = 0;\n    t.minForce = -maxForce;\n    this.equations.push(c, t);\n  }\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const cone = this.coneEquation;\n    const twist = this.twistEquation;\n    super.update(); // Update the axes to the cone constraint\n\n    bodyA.vectorToWorldFrame(this.axisA, cone.axisA);\n    bodyB.vectorToWorldFrame(this.axisB, cone.axisB); // Update the world axes in the twist constraint\n\n    this.axisA.tangents(twist.axisA, twist.axisA);\n    bodyA.vectorToWorldFrame(twist.axisA, twist.axisA);\n    this.axisB.tangents(twist.axisB, twist.axisB);\n    bodyB.vectorToWorldFrame(twist.axisB, twist.axisB);\n    cone.angle = this.angle;\n    twist.maxAngle = this.twistAngle;\n  }\n\n}\nnew Vec3();\nnew Vec3();\n\n/**\n * Constrains two bodies to be at a constant distance from each others center of mass.\n */\nclass DistanceConstraint extends Constraint {\n  /**\n   * The distance to keep. If undefined, it will be set to the current distance between bodyA and bodyB\n   */\n\n  /**\n   * @param distance The distance to keep. If undefined, it will be set to the current distance between bodyA and bodyB.\n   * @param maxForce The maximum force that should be applied to constrain the bodies.\n   */\n  constructor(bodyA, bodyB, distance, maxForce) {\n    if (maxForce === void 0) {\n      maxForce = 1e6;\n    }\n\n    super(bodyA, bodyB);\n\n    if (typeof distance === 'undefined') {\n      distance = bodyA.position.distanceTo(bodyB.position);\n    }\n\n    this.distance = distance;\n    const eq = this.distanceEquation = new ContactEquation(bodyA, bodyB);\n    this.equations.push(eq); // Make it bidirectional\n\n    eq.minForce = -maxForce;\n    eq.maxForce = maxForce;\n  }\n  /**\n   * update\n   */\n\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const eq = this.distanceEquation;\n    const halfDist = this.distance * 0.5;\n    const normal = eq.ni;\n    bodyB.position.vsub(bodyA.position, normal);\n    normal.normalize();\n    normal.scale(halfDist, eq.ri);\n    normal.scale(-halfDist, eq.rj);\n  }\n\n}\n\n/**\n * Lock constraint. Will remove all degrees of freedom between the bodies.\n */\nclass LockConstraint extends PointToPointConstraint {\n  constructor(bodyA, bodyB, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6; // Set pivot point in between\n\n    const pivotA = new Vec3();\n    const pivotB = new Vec3();\n    const halfWay = new Vec3();\n    bodyA.position.vadd(bodyB.position, halfWay);\n    halfWay.scale(0.5, halfWay);\n    bodyB.pointToLocalFrame(halfWay, pivotB);\n    bodyA.pointToLocalFrame(halfWay, pivotA); // The point-to-point constraint will keep a point shared between the bodies\n\n    super(bodyA, pivotA, bodyB, pivotB, maxForce); // Store initial rotation of the bodies as unit vectors in the local body spaces\n\n    this.xA = bodyA.vectorToLocalFrame(Vec3.UNIT_X);\n    this.xB = bodyB.vectorToLocalFrame(Vec3.UNIT_X);\n    this.yA = bodyA.vectorToLocalFrame(Vec3.UNIT_Y);\n    this.yB = bodyB.vectorToLocalFrame(Vec3.UNIT_Y);\n    this.zA = bodyA.vectorToLocalFrame(Vec3.UNIT_Z);\n    this.zB = bodyB.vectorToLocalFrame(Vec3.UNIT_Z); // ...and the following rotational equations will keep all rotational DOF's in place\n\n    const r1 = this.rotationalEquation1 = new RotationalEquation(bodyA, bodyB, options);\n    const r2 = this.rotationalEquation2 = new RotationalEquation(bodyA, bodyB, options);\n    const r3 = this.rotationalEquation3 = new RotationalEquation(bodyA, bodyB, options);\n    this.equations.push(r1, r2, r3);\n  }\n  /**\n   * update\n   */\n\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    this.motorEquation;\n    const r1 = this.rotationalEquation1;\n    const r2 = this.rotationalEquation2;\n    const r3 = this.rotationalEquation3;\n    LockConstraint_update_tmpVec1;\n    LockConstraint_update_tmpVec2;\n    super.update(); // These vector pairs must be orthogonal\n\n    bodyA.vectorToWorldFrame(this.xA, r1.axisA);\n    bodyB.vectorToWorldFrame(this.yB, r1.axisB);\n    bodyA.vectorToWorldFrame(this.yA, r2.axisA);\n    bodyB.vectorToWorldFrame(this.zB, r2.axisB);\n    bodyA.vectorToWorldFrame(this.zA, r3.axisA);\n    bodyB.vectorToWorldFrame(this.xB, r3.axisB);\n  }\n\n}\nconst LockConstraint_update_tmpVec1 = new Vec3();\nconst LockConstraint_update_tmpVec2 = new Vec3();\n\n/**\n * Rotational motor constraint. Tries to keep the relative angular velocity of the bodies to a given value.\n */\nclass RotationalMotorEquation extends Equation {\n  /**\n   * World oriented rotational axis.\n   */\n\n  /**\n   * World oriented rotational axis.\n   */\n\n  /**\n   * Motor velocity.\n   */\n  constructor(bodyA, bodyB, maxForce) {\n    if (maxForce === void 0) {\n      maxForce = 1e6;\n    }\n\n    super(bodyA, bodyB, -maxForce, maxForce);\n    this.axisA = new Vec3();\n    this.axisB = new Vec3();\n    this.targetVelocity = 0;\n  }\n\n  computeB(h) {\n    this.a;\n    const b = this.b;\n    this.bi;\n    this.bj;\n    const axisA = this.axisA;\n    const axisB = this.axisB;\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB; // g = 0\n    // gdot = axisA * wi - axisB * wj\n    // gdot = G * W = G * [vi wi vj wj]\n    // =>\n    // G = [0 axisA 0 -axisB]\n\n    GA.rotational.copy(axisA);\n    axisB.negate(GB.rotational);\n    const GW = this.computeGW() - this.targetVelocity;\n    const GiMf = this.computeGiMf();\n    const B = -GW * b - h * GiMf;\n    return B;\n  }\n\n}\n\n/**\n * Hinge constraint. Think of it as a door hinge. It tries to keep the door in the correct place and with the correct orientation.\n */\nclass HingeConstraint extends PointToPointConstraint {\n  /**\n   * Rotation axis, defined locally in bodyA.\n   */\n\n  /**\n   * Rotation axis, defined locally in bodyB.\n   */\n  constructor(bodyA, bodyB, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;\n    const pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n    const pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n    super(bodyA, pivotA, bodyB, pivotB, maxForce);\n    const axisA = this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    axisA.normalize();\n    const axisB = this.axisB = options.axisB ? options.axisB.clone() : new Vec3(1, 0, 0);\n    axisB.normalize();\n    this.collideConnected = !!options.collideConnected;\n    const rotational1 = this.rotationalEquation1 = new RotationalEquation(bodyA, bodyB, options);\n    const rotational2 = this.rotationalEquation2 = new RotationalEquation(bodyA, bodyB, options);\n    const motor = this.motorEquation = new RotationalMotorEquation(bodyA, bodyB, maxForce);\n    motor.enabled = false; // Not enabled by default\n    // Equations to be fed to the solver\n\n    this.equations.push(rotational1, rotational2, motor);\n  }\n  /**\n   * enableMotor\n   */\n\n\n  enableMotor() {\n    this.motorEquation.enabled = true;\n  }\n  /**\n   * disableMotor\n   */\n\n\n  disableMotor() {\n    this.motorEquation.enabled = false;\n  }\n  /**\n   * setMotorSpeed\n   */\n\n\n  setMotorSpeed(speed) {\n    this.motorEquation.targetVelocity = speed;\n  }\n  /**\n   * setMotorMaxForce\n   */\n\n\n  setMotorMaxForce(maxForce) {\n    this.motorEquation.maxForce = maxForce;\n    this.motorEquation.minForce = -maxForce;\n  }\n  /**\n   * update\n   */\n\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const motor = this.motorEquation;\n    const r1 = this.rotationalEquation1;\n    const r2 = this.rotationalEquation2;\n    const worldAxisA = HingeConstraint_update_tmpVec1;\n    const worldAxisB = HingeConstraint_update_tmpVec2;\n    const axisA = this.axisA;\n    const axisB = this.axisB;\n    super.update(); // Get world axes\n\n    bodyA.quaternion.vmult(axisA, worldAxisA);\n    bodyB.quaternion.vmult(axisB, worldAxisB);\n    worldAxisA.tangents(r1.axisA, r2.axisA);\n    r1.axisB.copy(worldAxisB);\n    r2.axisB.copy(worldAxisB);\n\n    if (this.motorEquation.enabled) {\n      bodyA.quaternion.vmult(this.axisA, motor.axisA);\n      bodyB.quaternion.vmult(this.axisB, motor.axisB);\n    }\n  }\n\n}\nconst HingeConstraint_update_tmpVec1 = new Vec3();\nconst HingeConstraint_update_tmpVec2 = new Vec3();\n\n/**\n * Constrains the slipping in a contact along a tangent\n */\nclass FrictionEquation extends Equation {\n  // Tangent\n\n  /**\n   * @param slipForce should be +-F_friction = +-mu * F_normal = +-mu * m * g\n   */\n  constructor(bodyA, bodyB, slipForce) {\n    super(bodyA, bodyB, -slipForce, slipForce);\n    this.ri = new Vec3();\n    this.rj = new Vec3();\n    this.t = new Vec3();\n  }\n\n  computeB(h) {\n    this.a;\n    const b = this.b;\n    this.bi;\n    this.bj;\n    const ri = this.ri;\n    const rj = this.rj;\n    const rixt = FrictionEquation_computeB_temp1;\n    const rjxt = FrictionEquation_computeB_temp2;\n    const t = this.t; // Caluclate cross products\n\n    ri.cross(t, rixt);\n    rj.cross(t, rjxt); // G = [-t -rixt t rjxt]\n    // And remember, this is a pure velocity constraint, g is always zero!\n\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    t.negate(GA.spatial);\n    rixt.negate(GA.rotational);\n    GB.spatial.copy(t);\n    GB.rotational.copy(rjxt);\n    const GW = this.computeGW();\n    const GiMf = this.computeGiMf();\n    const B = -GW * b - h * GiMf;\n    return B;\n  }\n\n}\nconst FrictionEquation_computeB_temp1 = new Vec3();\nconst FrictionEquation_computeB_temp2 = new Vec3();\n\n/**\n * Defines what happens when two materials meet.\n * @todo Refactor materials to materialA and materialB\n */\nclass ContactMaterial {\n  /**\n   * Identifier of this material.\n   */\n\n  /**\n   * Participating materials.\n   */\n\n  /**\n   * Friction coefficient.\n   * @default 0.3\n   */\n\n  /**\n   * Restitution coefficient.\n   * @default 0.3\n   */\n\n  /**\n   * Stiffness of the produced contact equations.\n   * @default 1e7\n   */\n\n  /**\n   * Relaxation time of the produced contact equations.\n   * @default 3\n   */\n\n  /**\n   * Stiffness of the produced friction equations.\n   * @default 1e7\n   */\n\n  /**\n   * Relaxation time of the produced friction equations\n   * @default 3\n   */\n  constructor(m1, m2, options) {\n    options = Utils.defaults(options, {\n      friction: 0.3,\n      restitution: 0.3,\n      contactEquationStiffness: 1e7,\n      contactEquationRelaxation: 3,\n      frictionEquationStiffness: 1e7,\n      frictionEquationRelaxation: 3\n    });\n    this.id = ContactMaterial.idCounter++;\n    this.materials = [m1, m2];\n    this.friction = options.friction;\n    this.restitution = options.restitution;\n    this.contactEquationStiffness = options.contactEquationStiffness;\n    this.contactEquationRelaxation = options.contactEquationRelaxation;\n    this.frictionEquationStiffness = options.frictionEquationStiffness;\n    this.frictionEquationRelaxation = options.frictionEquationRelaxation;\n  }\n\n}\nContactMaterial.idCounter = 0;\n\n/**\n * Defines a physics material.\n */\nclass Material {\n  /**\n   * Material name.\n   * If options is a string, name will be set to that string.\n   * @todo Deprecate this\n   */\n\n  /** Material id. */\n\n  /**\n   * Friction for this material.\n   * If non-negative, it will be used instead of the friction given by ContactMaterials. If there's no matching ContactMaterial, the value from `defaultContactMaterial` in the World will be used.\n   */\n\n  /**\n   * Restitution for this material.\n   * If non-negative, it will be used instead of the restitution given by ContactMaterials. If there's no matching ContactMaterial, the value from `defaultContactMaterial` in the World will be used.\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    let name = ''; // Backwards compatibility fix\n\n    if (typeof options === 'string') {\n      //console.warn(`Passing a string to MaterialOptions is deprecated, and has no effect`)\n      name = options;\n      options = {};\n    }\n\n    this.name = name;\n    this.id = Material.idCounter++;\n    this.friction = typeof options.friction !== 'undefined' ? options.friction : -1;\n    this.restitution = typeof options.restitution !== 'undefined' ? options.restitution : -1;\n  }\n\n}\nMaterial.idCounter = 0;\n\n/**\n * A spring, connecting two bodies.\n * @example\n *     const spring = new Spring(boxBody, sphereBody, {\n *       restLength: 0,\n *       stiffness: 50,\n *       damping: 1,\n *     })\n *\n *     // Compute the force after each step\n *     world.addEventListener('postStep', (event) => {\n *       spring.applyForce()\n *     })\n */\nclass Spring {\n  /**\n   * Rest length of the spring. A number > 0.\n   * @default 1\n   */\n\n  /**\n   * Stiffness of the spring. A number >= 0.\n   * @default 100\n   */\n\n  /**\n   * Damping of the spring. A number >= 0.\n   * @default 1\n   */\n\n  /**\n   * First connected body.\n   */\n\n  /**\n   * Second connected body.\n   */\n\n  /**\n   * Anchor for bodyA in local bodyA coordinates.\n   * Where to hook the spring to body A, in local body coordinates.\n   * @default new Vec3()\n   */\n\n  /**\n   * Anchor for bodyB in local bodyB coordinates.\n   * Where to hook the spring to body B, in local body coordinates.\n   * @default new Vec3()\n   */\n  constructor(bodyA, bodyB, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.restLength = typeof options.restLength === 'number' ? options.restLength : 1;\n    this.stiffness = options.stiffness || 100;\n    this.damping = options.damping || 1;\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.localAnchorA = new Vec3();\n    this.localAnchorB = new Vec3();\n\n    if (options.localAnchorA) {\n      this.localAnchorA.copy(options.localAnchorA);\n    }\n\n    if (options.localAnchorB) {\n      this.localAnchorB.copy(options.localAnchorB);\n    }\n\n    if (options.worldAnchorA) {\n      this.setWorldAnchorA(options.worldAnchorA);\n    }\n\n    if (options.worldAnchorB) {\n      this.setWorldAnchorB(options.worldAnchorB);\n    }\n  }\n  /**\n   * Set the anchor point on body A, using world coordinates.\n   */\n\n\n  setWorldAnchorA(worldAnchorA) {\n    this.bodyA.pointToLocalFrame(worldAnchorA, this.localAnchorA);\n  }\n  /**\n   * Set the anchor point on body B, using world coordinates.\n   */\n\n\n  setWorldAnchorB(worldAnchorB) {\n    this.bodyB.pointToLocalFrame(worldAnchorB, this.localAnchorB);\n  }\n  /**\n   * Get the anchor point on body A, in world coordinates.\n   * @param result The vector to store the result in.\n   */\n\n\n  getWorldAnchorA(result) {\n    this.bodyA.pointToWorldFrame(this.localAnchorA, result);\n  }\n  /**\n   * Get the anchor point on body B, in world coordinates.\n   * @param result The vector to store the result in.\n   */\n\n\n  getWorldAnchorB(result) {\n    this.bodyB.pointToWorldFrame(this.localAnchorB, result);\n  }\n  /**\n   * Apply the spring force to the connected bodies.\n   */\n\n\n  applyForce() {\n    const k = this.stiffness;\n    const d = this.damping;\n    const l = this.restLength;\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const r = applyForce_r;\n    const r_unit = applyForce_r_unit;\n    const u = applyForce_u;\n    const f = applyForce_f;\n    const tmp = applyForce_tmp;\n    const worldAnchorA = applyForce_worldAnchorA;\n    const worldAnchorB = applyForce_worldAnchorB;\n    const ri = applyForce_ri;\n    const rj = applyForce_rj;\n    const ri_x_f = applyForce_ri_x_f;\n    const rj_x_f = applyForce_rj_x_f; // Get world anchors\n\n    this.getWorldAnchorA(worldAnchorA);\n    this.getWorldAnchorB(worldAnchorB); // Get offset points\n\n    worldAnchorA.vsub(bodyA.position, ri);\n    worldAnchorB.vsub(bodyB.position, rj); // Compute distance vector between world anchor points\n\n    worldAnchorB.vsub(worldAnchorA, r);\n    const rlen = r.length();\n    r_unit.copy(r);\n    r_unit.normalize(); // Compute relative velocity of the anchor points, u\n\n    bodyB.velocity.vsub(bodyA.velocity, u); // Add rotational velocity\n\n    bodyB.angularVelocity.cross(rj, tmp);\n    u.vadd(tmp, u);\n    bodyA.angularVelocity.cross(ri, tmp);\n    u.vsub(tmp, u); // F = - k * ( x - L ) - D * ( u )\n\n    r_unit.scale(-k * (rlen - l) - d * u.dot(r_unit), f); // Add forces to bodies\n\n    bodyA.force.vsub(f, bodyA.force);\n    bodyB.force.vadd(f, bodyB.force); // Angular force\n\n    ri.cross(f, ri_x_f);\n    rj.cross(f, rj_x_f);\n    bodyA.torque.vsub(ri_x_f, bodyA.torque);\n    bodyB.torque.vadd(rj_x_f, bodyB.torque);\n  }\n\n}\nconst applyForce_r = new Vec3();\nconst applyForce_r_unit = new Vec3();\nconst applyForce_u = new Vec3();\nconst applyForce_f = new Vec3();\nconst applyForce_worldAnchorA = new Vec3();\nconst applyForce_worldAnchorB = new Vec3();\nconst applyForce_ri = new Vec3();\nconst applyForce_rj = new Vec3();\nconst applyForce_ri_x_f = new Vec3();\nconst applyForce_rj_x_f = new Vec3();\nconst applyForce_tmp = new Vec3();\n\n/**\n * WheelInfo\n */\nclass WheelInfo {\n  /**\n   * Max travel distance of the suspension, in meters.\n   * @default 1\n   */\n\n  /**\n   * Speed to apply to the wheel rotation when the wheel is sliding.\n   * @default -0.1\n   */\n\n  /**\n   * If the customSlidingRotationalSpeed should be used.\n   * @default false\n   */\n\n  /**\n   * sliding\n   */\n\n  /**\n   * Connection point, defined locally in the chassis body frame.\n   */\n\n  /**\n   * chassisConnectionPointWorld\n   */\n\n  /**\n   * directionLocal\n   */\n\n  /**\n   * directionWorld\n   */\n\n  /**\n   * axleLocal\n   */\n\n  /**\n   * axleWorld\n   */\n\n  /**\n   * suspensionRestLength\n   * @default 1\n   */\n\n  /**\n   * suspensionMaxLength\n   * @default 2\n   */\n\n  /**\n   * radius\n   * @default 1\n   */\n\n  /**\n   * suspensionStiffness\n   * @default 100\n   */\n\n  /**\n   * dampingCompression\n   * @default 10\n   */\n\n  /**\n   * dampingRelaxation\n   * @default 10\n   */\n\n  /**\n   * frictionSlip\n   * @default 10.5\n   */\n\n  /** forwardAcceleration */\n\n  /** sideAcceleration */\n\n  /**\n   * steering\n   * @default 0\n   */\n\n  /**\n   * Rotation value, in radians.\n   * @default 0\n   */\n\n  /**\n   * deltaRotation\n   * @default 0\n   */\n\n  /**\n   * rollInfluence\n   * @default 0.01\n   */\n\n  /**\n   * maxSuspensionForce\n   */\n\n  /**\n   * engineForce\n   */\n\n  /**\n   * brake\n   */\n\n  /**\n   * isFrontWheel\n   * @default true\n   */\n\n  /**\n   * clippedInvContactDotSuspension\n   * @default 1\n   */\n\n  /**\n   * suspensionRelativeVelocity\n   * @default 0\n   */\n\n  /**\n   * suspensionForce\n   * @default 0\n   */\n\n  /**\n   * slipInfo\n   */\n\n  /**\n   * skidInfo\n   * @default 0\n   */\n\n  /**\n   * suspensionLength\n   * @default 0\n   */\n\n  /**\n   * sideImpulse\n   */\n\n  /**\n   * forwardImpulse\n   */\n\n  /**\n   * The result from raycasting.\n   */\n\n  /**\n   * Wheel world transform.\n   */\n\n  /**\n   * isInContact\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    options = Utils.defaults(options, {\n      chassisConnectionPointLocal: new Vec3(),\n      chassisConnectionPointWorld: new Vec3(),\n      directionLocal: new Vec3(),\n      directionWorld: new Vec3(),\n      axleLocal: new Vec3(),\n      axleWorld: new Vec3(),\n      suspensionRestLength: 1,\n      suspensionMaxLength: 2,\n      radius: 1,\n      suspensionStiffness: 100,\n      dampingCompression: 10,\n      dampingRelaxation: 10,\n      frictionSlip: 10.5,\n      forwardAcceleration: 1,\n      sideAcceleration: 1,\n      steering: 0,\n      rotation: 0,\n      deltaRotation: 0,\n      rollInfluence: 0.01,\n      maxSuspensionForce: Number.MAX_VALUE,\n      isFrontWheel: true,\n      clippedInvContactDotSuspension: 1,\n      suspensionRelativeVelocity: 0,\n      suspensionForce: 0,\n      slipInfo: 0,\n      skidInfo: 0,\n      suspensionLength: 0,\n      maxSuspensionTravel: 1,\n      useCustomSlidingRotationalSpeed: false,\n      customSlidingRotationalSpeed: -0.1\n    });\n    this.maxSuspensionTravel = options.maxSuspensionTravel;\n    this.customSlidingRotationalSpeed = options.customSlidingRotationalSpeed;\n    this.useCustomSlidingRotationalSpeed = options.useCustomSlidingRotationalSpeed;\n    this.sliding = false;\n    this.chassisConnectionPointLocal = options.chassisConnectionPointLocal.clone();\n    this.chassisConnectionPointWorld = options.chassisConnectionPointWorld.clone();\n    this.directionLocal = options.directionLocal.clone();\n    this.directionWorld = options.directionWorld.clone();\n    this.axleLocal = options.axleLocal.clone();\n    this.axleWorld = options.axleWorld.clone();\n    this.suspensionRestLength = options.suspensionRestLength;\n    this.suspensionMaxLength = options.suspensionMaxLength;\n    this.radius = options.radius;\n    this.suspensionStiffness = options.suspensionStiffness;\n    this.dampingCompression = options.dampingCompression;\n    this.dampingRelaxation = options.dampingRelaxation;\n    this.frictionSlip = options.frictionSlip;\n    this.forwardAcceleration = options.forwardAcceleration;\n    this.sideAcceleration = options.sideAcceleration;\n    this.steering = 0;\n    this.rotation = 0;\n    this.deltaRotation = 0;\n    this.rollInfluence = options.rollInfluence;\n    this.maxSuspensionForce = options.maxSuspensionForce;\n    this.engineForce = 0;\n    this.brake = 0;\n    this.isFrontWheel = options.isFrontWheel;\n    this.clippedInvContactDotSuspension = 1;\n    this.suspensionRelativeVelocity = 0;\n    this.suspensionForce = 0;\n    this.slipInfo = 0;\n    this.skidInfo = 0;\n    this.suspensionLength = 0;\n    this.sideImpulse = 0;\n    this.forwardImpulse = 0;\n    this.raycastResult = new RaycastResult();\n    this.worldTransform = new Transform();\n    this.isInContact = false;\n  }\n\n  updateWheel(chassis) {\n    const raycastResult = this.raycastResult;\n\n    if (this.isInContact) {\n      const project = raycastResult.hitNormalWorld.dot(raycastResult.directionWorld);\n      raycastResult.hitPointWorld.vsub(chassis.position, relpos);\n      chassis.getVelocityAtWorldPoint(relpos, chassis_velocity_at_contactPoint);\n      const projVel = raycastResult.hitNormalWorld.dot(chassis_velocity_at_contactPoint);\n\n      if (project >= -0.1) {\n        this.suspensionRelativeVelocity = 0.0;\n        this.clippedInvContactDotSuspension = 1.0 / 0.1;\n      } else {\n        const inv = -1 / project;\n        this.suspensionRelativeVelocity = projVel * inv;\n        this.clippedInvContactDotSuspension = inv;\n      }\n    } else {\n      // Not in contact : position wheel in a nice (rest length) position\n      raycastResult.suspensionLength = this.suspensionRestLength;\n      this.suspensionRelativeVelocity = 0.0;\n      raycastResult.directionWorld.scale(-1, raycastResult.hitNormalWorld);\n      this.clippedInvContactDotSuspension = 1.0;\n    }\n  }\n\n}\nconst chassis_velocity_at_contactPoint = new Vec3();\nconst relpos = new Vec3();\n\n/**\n * Vehicle helper class that casts rays from the wheel positions towards the ground and applies forces.\n */\nclass RaycastVehicle {\n  /** The car chassis body. */\n\n  /** The wheels. */\n\n  /** Will be set to true if the car is sliding. */\n\n  /** Index of the right axis. x=0, y=1, z=2 */\n\n  /** Index of the forward axis. x=0, y=1, z=2 */\n\n  /** Index of the up axis. x=0, y=1, z=2 */\n\n  /** The constraints. */\n\n  /** Optional pre-step callback. */\n\n  /** Number of wheels on the ground. */\n  constructor(options) {\n    this.chassisBody = options.chassisBody;\n    this.wheelInfos = [];\n    this.sliding = false;\n    this.world = null;\n    this.indexRightAxis = typeof options.indexRightAxis !== 'undefined' ? options.indexRightAxis : 2;\n    this.indexForwardAxis = typeof options.indexForwardAxis !== 'undefined' ? options.indexForwardAxis : 0;\n    this.indexUpAxis = typeof options.indexUpAxis !== 'undefined' ? options.indexUpAxis : 1;\n    this.constraints = [];\n\n    this.preStepCallback = () => {};\n\n    this.currentVehicleSpeedKmHour = 0;\n    this.numWheelsOnGround = 0;\n  }\n  /**\n   * Add a wheel. For information about the options, see `WheelInfo`.\n   */\n\n\n  addWheel(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    const info = new WheelInfo(options);\n    const index = this.wheelInfos.length;\n    this.wheelInfos.push(info);\n    return index;\n  }\n  /**\n   * Set the steering value of a wheel.\n   */\n\n\n  setSteeringValue(value, wheelIndex) {\n    const wheel = this.wheelInfos[wheelIndex];\n    wheel.steering = value;\n  }\n  /**\n   * Set the wheel force to apply on one of the wheels each time step\n   */\n\n\n  applyEngineForce(value, wheelIndex) {\n    this.wheelInfos[wheelIndex].engineForce = value;\n  }\n  /**\n   * Set the braking force of a wheel\n   */\n\n\n  setBrake(brake, wheelIndex) {\n    this.wheelInfos[wheelIndex].brake = brake;\n  }\n  /**\n   * Add the vehicle including its constraints to the world.\n   */\n\n\n  addToWorld(world) {\n    world.addBody(this.chassisBody);\n    const that = this;\n\n    this.preStepCallback = () => {\n      that.updateVehicle(world.dt);\n    };\n\n    world.addEventListener('preStep', this.preStepCallback);\n    this.world = world;\n  }\n  /**\n   * Get one of the wheel axles, world-oriented.\n   */\n\n\n  getVehicleAxisWorld(axisIndex, result) {\n    result.set(axisIndex === 0 ? 1 : 0, axisIndex === 1 ? 1 : 0, axisIndex === 2 ? 1 : 0);\n    this.chassisBody.vectorToWorldFrame(result, result);\n  }\n\n  updateVehicle(timeStep) {\n    const wheelInfos = this.wheelInfos;\n    const numWheels = wheelInfos.length;\n    const chassisBody = this.chassisBody;\n\n    for (let i = 0; i < numWheels; i++) {\n      this.updateWheelTransform(i);\n    }\n\n    this.currentVehicleSpeedKmHour = 3.6 * chassisBody.velocity.length();\n    const forwardWorld = new Vec3();\n    this.getVehicleAxisWorld(this.indexForwardAxis, forwardWorld);\n\n    if (forwardWorld.dot(chassisBody.velocity) < 0) {\n      this.currentVehicleSpeedKmHour *= -1;\n    } // simulate suspension\n\n\n    for (let i = 0; i < numWheels; i++) {\n      this.castRay(wheelInfos[i]);\n    }\n\n    this.updateSuspension(timeStep);\n    const impulse = new Vec3();\n    const relpos = new Vec3();\n\n    for (let i = 0; i < numWheels; i++) {\n      //apply suspension force\n      const wheel = wheelInfos[i];\n      let suspensionForce = wheel.suspensionForce;\n\n      if (suspensionForce > wheel.maxSuspensionForce) {\n        suspensionForce = wheel.maxSuspensionForce;\n      }\n\n      wheel.raycastResult.hitNormalWorld.scale(suspensionForce * timeStep, impulse);\n      wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, relpos);\n      chassisBody.applyImpulse(impulse, relpos);\n    }\n\n    this.updateFriction(timeStep);\n    const hitNormalWorldScaledWithProj = new Vec3();\n    const fwd = new Vec3();\n    const vel = new Vec3();\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i]; //const relpos = new Vec3();\n      //wheel.chassisConnectionPointWorld.vsub(chassisBody.position, relpos);\n\n      chassisBody.getVelocityAtWorldPoint(wheel.chassisConnectionPointWorld, vel); // Hack to get the rotation in the correct direction\n\n      let m = 1;\n\n      switch (this.indexUpAxis) {\n        case 1:\n          m = -1;\n          break;\n      }\n\n      if (wheel.isInContact) {\n        this.getVehicleAxisWorld(this.indexForwardAxis, fwd);\n        const proj = fwd.dot(wheel.raycastResult.hitNormalWorld);\n        wheel.raycastResult.hitNormalWorld.scale(proj, hitNormalWorldScaledWithProj);\n        fwd.vsub(hitNormalWorldScaledWithProj, fwd);\n        const proj2 = fwd.dot(vel);\n        wheel.deltaRotation = m * proj2 * timeStep / wheel.radius;\n      }\n\n      if ((wheel.sliding || !wheel.isInContact) && wheel.engineForce !== 0 && wheel.useCustomSlidingRotationalSpeed) {\n        // Apply custom rotation when accelerating and sliding\n        wheel.deltaRotation = (wheel.engineForce > 0 ? 1 : -1) * wheel.customSlidingRotationalSpeed * timeStep;\n      } // Lock wheels\n\n\n      if (Math.abs(wheel.brake) > Math.abs(wheel.engineForce)) {\n        wheel.deltaRotation = 0;\n      }\n\n      wheel.rotation += wheel.deltaRotation; // Use the old value\n\n      wheel.deltaRotation *= 0.99; // damping of rotation when not in contact\n    }\n  }\n\n  updateSuspension(deltaTime) {\n    const chassisBody = this.chassisBody;\n    const chassisMass = chassisBody.mass;\n    const wheelInfos = this.wheelInfos;\n    const numWheels = wheelInfos.length;\n\n    for (let w_it = 0; w_it < numWheels; w_it++) {\n      const wheel = wheelInfos[w_it];\n\n      if (wheel.isInContact) {\n        let force; // Spring\n\n        const susp_length = wheel.suspensionRestLength;\n        const current_length = wheel.suspensionLength;\n        const length_diff = susp_length - current_length;\n        force = wheel.suspensionStiffness * length_diff * wheel.clippedInvContactDotSuspension; // Damper\n\n        const projected_rel_vel = wheel.suspensionRelativeVelocity;\n        let susp_damping;\n\n        if (projected_rel_vel < 0) {\n          susp_damping = wheel.dampingCompression;\n        } else {\n          susp_damping = wheel.dampingRelaxation;\n        }\n\n        force -= susp_damping * projected_rel_vel;\n        wheel.suspensionForce = force * chassisMass;\n\n        if (wheel.suspensionForce < 0) {\n          wheel.suspensionForce = 0;\n        }\n      } else {\n        wheel.suspensionForce = 0;\n      }\n    }\n  }\n  /**\n   * Remove the vehicle including its constraints from the world.\n   */\n\n\n  removeFromWorld(world) {\n    this.constraints;\n    world.removeBody(this.chassisBody);\n    world.removeEventListener('preStep', this.preStepCallback);\n    this.world = null;\n  }\n\n  castRay(wheel) {\n    const rayvector = castRay_rayvector;\n    const target = castRay_target;\n    this.updateWheelTransformWorld(wheel);\n    const chassisBody = this.chassisBody;\n    let depth = -1;\n    const raylen = wheel.suspensionRestLength + wheel.radius;\n    wheel.directionWorld.scale(raylen, rayvector);\n    const source = wheel.chassisConnectionPointWorld;\n    source.vadd(rayvector, target);\n    const raycastResult = wheel.raycastResult;\n    raycastResult.reset(); // Turn off ray collision with the chassis temporarily\n\n    const oldState = chassisBody.collisionResponse;\n    chassisBody.collisionResponse = false; // Cast ray against world\n\n    this.world.rayTest(source, target, raycastResult);\n    chassisBody.collisionResponse = oldState;\n    const object = raycastResult.body;\n    wheel.raycastResult.groundObject = 0;\n\n    if (object) {\n      depth = raycastResult.distance;\n      wheel.raycastResult.hitNormalWorld = raycastResult.hitNormalWorld;\n      wheel.isInContact = true;\n      const hitDistance = raycastResult.distance;\n      wheel.suspensionLength = hitDistance - wheel.radius; // clamp on max suspension travel\n\n      const minSuspensionLength = wheel.suspensionRestLength - wheel.maxSuspensionTravel;\n      const maxSuspensionLength = wheel.suspensionRestLength + wheel.maxSuspensionTravel;\n\n      if (wheel.suspensionLength < minSuspensionLength) {\n        wheel.suspensionLength = minSuspensionLength;\n      }\n\n      if (wheel.suspensionLength > maxSuspensionLength) {\n        wheel.suspensionLength = maxSuspensionLength;\n        wheel.raycastResult.reset();\n      }\n\n      const denominator = wheel.raycastResult.hitNormalWorld.dot(wheel.directionWorld);\n      const chassis_velocity_at_contactPoint = new Vec3();\n      chassisBody.getVelocityAtWorldPoint(wheel.raycastResult.hitPointWorld, chassis_velocity_at_contactPoint);\n      const projVel = wheel.raycastResult.hitNormalWorld.dot(chassis_velocity_at_contactPoint);\n\n      if (denominator >= -0.1) {\n        wheel.suspensionRelativeVelocity = 0;\n        wheel.clippedInvContactDotSuspension = 1 / 0.1;\n      } else {\n        const inv = -1 / denominator;\n        wheel.suspensionRelativeVelocity = projVel * inv;\n        wheel.clippedInvContactDotSuspension = inv;\n      }\n    } else {\n      //put wheel info as in rest position\n      wheel.suspensionLength = wheel.suspensionRestLength + 0 * wheel.maxSuspensionTravel;\n      wheel.suspensionRelativeVelocity = 0.0;\n      wheel.directionWorld.scale(-1, wheel.raycastResult.hitNormalWorld);\n      wheel.clippedInvContactDotSuspension = 1.0;\n    }\n\n    return depth;\n  }\n\n  updateWheelTransformWorld(wheel) {\n    wheel.isInContact = false;\n    const chassisBody = this.chassisBody;\n    chassisBody.pointToWorldFrame(wheel.chassisConnectionPointLocal, wheel.chassisConnectionPointWorld);\n    chassisBody.vectorToWorldFrame(wheel.directionLocal, wheel.directionWorld);\n    chassisBody.vectorToWorldFrame(wheel.axleLocal, wheel.axleWorld);\n  }\n  /**\n   * Update one of the wheel transform.\n   * Note when rendering wheels: during each step, wheel transforms are updated BEFORE the chassis; ie. their position becomes invalid after the step. Thus when you render wheels, you must update wheel transforms before rendering them. See raycastVehicle demo for an example.\n   * @param wheelIndex The wheel index to update.\n   */\n\n\n  updateWheelTransform(wheelIndex) {\n    const up = tmpVec4;\n    const right = tmpVec5;\n    const fwd = tmpVec6;\n    const wheel = this.wheelInfos[wheelIndex];\n    this.updateWheelTransformWorld(wheel);\n    wheel.directionLocal.scale(-1, up);\n    right.copy(wheel.axleLocal);\n    up.cross(right, fwd);\n    fwd.normalize();\n    right.normalize(); // Rotate around steering over the wheelAxle\n\n    const steering = wheel.steering;\n    const steeringOrn = new Quaternion();\n    steeringOrn.setFromAxisAngle(up, steering);\n    const rotatingOrn = new Quaternion();\n    rotatingOrn.setFromAxisAngle(right, wheel.rotation); // World rotation of the wheel\n\n    const q = wheel.worldTransform.quaternion;\n    this.chassisBody.quaternion.mult(steeringOrn, q);\n    q.mult(rotatingOrn, q);\n    q.normalize(); // world position of the wheel\n\n    const p = wheel.worldTransform.position;\n    p.copy(wheel.directionWorld);\n    p.scale(wheel.suspensionLength, p);\n    p.vadd(wheel.chassisConnectionPointWorld, p);\n  }\n  /**\n   * Get the world transform of one of the wheels\n   */\n\n\n  getWheelTransformWorld(wheelIndex) {\n    return this.wheelInfos[wheelIndex].worldTransform;\n  }\n\n  updateFriction(timeStep) {\n    const surfNormalWS_scaled_proj = updateFriction_surfNormalWS_scaled_proj; //calculate the impulse, so that the wheels don't move sidewards\n\n    const wheelInfos = this.wheelInfos;\n    const numWheels = wheelInfos.length;\n    const chassisBody = this.chassisBody;\n    const forwardWS = updateFriction_forwardWS;\n    const axle = updateFriction_axle;\n    this.numWheelsOnGround = 0;\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      const groundObject = wheel.raycastResult.body;\n\n      if (groundObject) {\n        this.numWheelsOnGround++;\n      }\n\n      wheel.sideImpulse = 0;\n      wheel.forwardImpulse = 0;\n\n      if (!forwardWS[i]) {\n        forwardWS[i] = new Vec3();\n      }\n\n      if (!axle[i]) {\n        axle[i] = new Vec3();\n      }\n    }\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      const groundObject = wheel.raycastResult.body;\n\n      if (groundObject) {\n        const axlei = axle[i];\n        const wheelTrans = this.getWheelTransformWorld(i); // Get world axle\n\n        wheelTrans.vectorToWorldFrame(directions[this.indexRightAxis], axlei);\n        const surfNormalWS = wheel.raycastResult.hitNormalWorld;\n        const proj = axlei.dot(surfNormalWS);\n        surfNormalWS.scale(proj, surfNormalWS_scaled_proj);\n        axlei.vsub(surfNormalWS_scaled_proj, axlei);\n        axlei.normalize();\n        surfNormalWS.cross(axlei, forwardWS[i]);\n        forwardWS[i].normalize();\n        wheel.sideImpulse = resolveSingleBilateral(chassisBody, wheel.raycastResult.hitPointWorld, groundObject, wheel.raycastResult.hitPointWorld, axlei);\n        wheel.sideImpulse *= sideFrictionStiffness2;\n      }\n    }\n\n    const sideFactor = 1;\n    const fwdFactor = 0.5;\n    this.sliding = false;\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      const groundObject = wheel.raycastResult.body;\n      let rollingFriction = 0;\n      wheel.slipInfo = 1;\n\n      if (groundObject) {\n        const defaultRollingFrictionImpulse = 0;\n        const maxImpulse = wheel.brake ? wheel.brake : defaultRollingFrictionImpulse; // btWheelContactPoint contactPt(chassisBody,groundObject,wheelInfraycastInfo.hitPointWorld,forwardWS[wheel],maxImpulse);\n        // rollingFriction = calcRollingFriction(contactPt);\n\n        rollingFriction = calcRollingFriction(chassisBody, groundObject, wheel.raycastResult.hitPointWorld, forwardWS[i], maxImpulse);\n        rollingFriction += wheel.engineForce * timeStep; // rollingFriction = 0;\n\n        const factor = maxImpulse / rollingFriction;\n        wheel.slipInfo *= factor;\n      } //switch between active rolling (throttle), braking and non-active rolling friction (nthrottle/break)\n\n\n      wheel.forwardImpulse = 0;\n      wheel.skidInfo = 1;\n\n      if (groundObject) {\n        wheel.skidInfo = 1;\n        const maximp = wheel.suspensionForce * timeStep * wheel.frictionSlip;\n        const maximpSide = maximp;\n        const maximpSquared = maximp * maximpSide;\n        wheel.forwardImpulse = rollingFriction; //wheelInfo.engineForce* timeStep;\n\n        const x = wheel.forwardImpulse * fwdFactor / wheel.forwardAcceleration;\n        const y = wheel.sideImpulse * sideFactor / wheel.sideAcceleration;\n        const impulseSquared = x * x + y * y;\n        wheel.sliding = false;\n\n        if (impulseSquared > maximpSquared) {\n          this.sliding = true;\n          wheel.sliding = true;\n          const factor = maximp / Math.sqrt(impulseSquared);\n          wheel.skidInfo *= factor;\n        }\n      }\n    }\n\n    if (this.sliding) {\n      for (let i = 0; i < numWheels; i++) {\n        const wheel = wheelInfos[i];\n\n        if (wheel.sideImpulse !== 0) {\n          if (wheel.skidInfo < 1) {\n            wheel.forwardImpulse *= wheel.skidInfo;\n            wheel.sideImpulse *= wheel.skidInfo;\n          }\n        }\n      }\n    } // apply the impulses\n\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      const rel_pos = new Vec3();\n      wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, rel_pos); // cannons applyimpulse is using world coord for the position\n      //rel_pos.copy(wheel.raycastResult.hitPointWorld);\n\n      if (wheel.forwardImpulse !== 0) {\n        const impulse = new Vec3();\n        forwardWS[i].scale(wheel.forwardImpulse, impulse);\n        chassisBody.applyImpulse(impulse, rel_pos);\n      }\n\n      if (wheel.sideImpulse !== 0) {\n        const groundObject = wheel.raycastResult.body;\n        const rel_pos2 = new Vec3();\n        wheel.raycastResult.hitPointWorld.vsub(groundObject.position, rel_pos2); //rel_pos2.copy(wheel.raycastResult.hitPointWorld);\n\n        const sideImp = new Vec3();\n        axle[i].scale(wheel.sideImpulse, sideImp); // Scale the relative position in the up direction with rollInfluence.\n        // If rollInfluence is 1, the impulse will be applied on the hitPoint (easy to roll over), if it is zero it will be applied in the same plane as the center of mass (not easy to roll over).\n\n        chassisBody.vectorToLocalFrame(rel_pos, rel_pos);\n        rel_pos['xyz'[this.indexUpAxis]] *= wheel.rollInfluence;\n        chassisBody.vectorToWorldFrame(rel_pos, rel_pos);\n        chassisBody.applyImpulse(sideImp, rel_pos); //apply friction impulse on the ground\n\n        sideImp.scale(-1, sideImp);\n        groundObject.applyImpulse(sideImp, rel_pos2);\n      }\n    }\n  }\n\n}\nnew Vec3();\nnew Vec3();\nnew Vec3();\nconst tmpVec4 = new Vec3();\nconst tmpVec5 = new Vec3();\nconst tmpVec6 = new Vec3();\nnew Ray();\nnew Vec3();\nconst castRay_rayvector = new Vec3();\nconst castRay_target = new Vec3();\nconst directions = [new Vec3(1, 0, 0), new Vec3(0, 1, 0), new Vec3(0, 0, 1)];\nconst updateFriction_surfNormalWS_scaled_proj = new Vec3();\nconst updateFriction_axle = [];\nconst updateFriction_forwardWS = [];\nconst sideFrictionStiffness2 = 1;\nconst calcRollingFriction_vel1 = new Vec3();\nconst calcRollingFriction_vel2 = new Vec3();\nconst calcRollingFriction_vel = new Vec3();\n\nfunction calcRollingFriction(body0, body1, frictionPosWorld, frictionDirectionWorld, maxImpulse) {\n  let j1 = 0;\n  const contactPosWorld = frictionPosWorld; // const rel_pos1 = new Vec3();\n  // const rel_pos2 = new Vec3();\n\n  const vel1 = calcRollingFriction_vel1;\n  const vel2 = calcRollingFriction_vel2;\n  const vel = calcRollingFriction_vel; // contactPosWorld.vsub(body0.position, rel_pos1);\n  // contactPosWorld.vsub(body1.position, rel_pos2);\n\n  body0.getVelocityAtWorldPoint(contactPosWorld, vel1);\n  body1.getVelocityAtWorldPoint(contactPosWorld, vel2);\n  vel1.vsub(vel2, vel);\n  const vrel = frictionDirectionWorld.dot(vel);\n  const denom0 = computeImpulseDenominator(body0, frictionPosWorld, frictionDirectionWorld);\n  const denom1 = computeImpulseDenominator(body1, frictionPosWorld, frictionDirectionWorld);\n  const relaxation = 1;\n  const jacDiagABInv = relaxation / (denom0 + denom1); // calculate j that moves us to zero relative velocity\n\n  j1 = -vrel * jacDiagABInv;\n\n  if (maxImpulse < j1) {\n    j1 = maxImpulse;\n  }\n\n  if (j1 < -maxImpulse) {\n    j1 = -maxImpulse;\n  }\n\n  return j1;\n}\n\nconst computeImpulseDenominator_r0 = new Vec3();\nconst computeImpulseDenominator_c0 = new Vec3();\nconst computeImpulseDenominator_vec = new Vec3();\nconst computeImpulseDenominator_m = new Vec3();\n\nfunction computeImpulseDenominator(body, pos, normal) {\n  const r0 = computeImpulseDenominator_r0;\n  const c0 = computeImpulseDenominator_c0;\n  const vec = computeImpulseDenominator_vec;\n  const m = computeImpulseDenominator_m;\n  pos.vsub(body.position, r0);\n  r0.cross(normal, c0);\n  body.invInertiaWorld.vmult(c0, m);\n  m.cross(r0, vec);\n  return body.invMass + normal.dot(vec);\n}\n\nconst resolveSingleBilateral_vel1 = new Vec3();\nconst resolveSingleBilateral_vel2 = new Vec3();\nconst resolveSingleBilateral_vel = new Vec3(); // bilateral constraint between two dynamic objects\n\nfunction resolveSingleBilateral(body1, pos1, body2, pos2, normal) {\n  const normalLenSqr = normal.lengthSquared();\n\n  if (normalLenSqr > 1.1) {\n    return 0; // no impulse\n  } // const rel_pos1 = new Vec3();\n  // const rel_pos2 = new Vec3();\n  // pos1.vsub(body1.position, rel_pos1);\n  // pos2.vsub(body2.position, rel_pos2);\n\n\n  const vel1 = resolveSingleBilateral_vel1;\n  const vel2 = resolveSingleBilateral_vel2;\n  const vel = resolveSingleBilateral_vel;\n  body1.getVelocityAtWorldPoint(pos1, vel1);\n  body2.getVelocityAtWorldPoint(pos2, vel2);\n  vel1.vsub(vel2, vel);\n  const rel_vel = normal.dot(vel);\n  const contactDamping = 0.2;\n  const massTerm = 1 / (body1.invMass + body2.invMass);\n  const impulse = -contactDamping * rel_vel * massTerm;\n  return impulse;\n}\n\n/**\n * Spherical shape\n * @example\n *     const radius = 1\n *     const sphereShape = new CANNON.Sphere(radius)\n *     const sphereBody = new CANNON.Body({ mass: 1, shape: sphereShape })\n *     world.addBody(sphereBody)\n */\nclass Sphere extends Shape {\n  /**\n   * The radius of the sphere.\n   */\n\n  /**\n   *\n   * @param radius The radius of the sphere, a non-negative number.\n   */\n  constructor(radius) {\n    super({\n      type: Shape.types.SPHERE\n    });\n    this.radius = radius !== undefined ? radius : 1.0;\n\n    if (this.radius < 0) {\n      throw new Error('The sphere radius cannot be negative.');\n    }\n\n    this.updateBoundingSphereRadius();\n  }\n  /** calculateLocalInertia */\n\n\n  calculateLocalInertia(mass, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const I = 2.0 * mass * this.radius * this.radius / 5.0;\n    target.x = I;\n    target.y = I;\n    target.z = I;\n    return target;\n  }\n  /** volume */\n\n\n  volume() {\n    return 4.0 * Math.PI * Math.pow(this.radius, 3) / 3.0;\n  }\n\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = this.radius;\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    const r = this.radius;\n    const axes = ['x', 'y', 'z'];\n\n    for (let i = 0; i < axes.length; i++) {\n      const ax = axes[i];\n      min[ax] = pos[ax] - r;\n      max[ax] = pos[ax] + r;\n    }\n  }\n\n}\n\n/**\n * Simple vehicle helper class with spherical rigid body wheels.\n */\nclass RigidVehicle {\n  /**\n   * The bodies of the wheels.\n   */\n\n  /**\n   * The chassis body.\n   */\n\n  /**\n   * The constraints.\n   */\n\n  /**\n   * The wheel axes.\n   */\n\n  /**\n   * The wheel forces.\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.wheelBodies = [];\n    this.coordinateSystem = typeof options.coordinateSystem !== 'undefined' ? options.coordinateSystem.clone() : new Vec3(1, 2, 3);\n\n    if (options.chassisBody) {\n      this.chassisBody = options.chassisBody;\n    } else {\n      // No chassis body given. Create it!\n      this.chassisBody = new Body({\n        mass: 1,\n        shape: new Box(new Vec3(5, 0.5, 2))\n      });\n    }\n\n    this.constraints = [];\n    this.wheelAxes = [];\n    this.wheelForces = [];\n  }\n  /**\n   * Add a wheel\n   */\n\n\n  addWheel(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    let wheelBody;\n\n    if (options.body) {\n      wheelBody = options.body;\n    } else {\n      // No wheel body given. Create it!\n      wheelBody = new Body({\n        mass: 1,\n        shape: new Sphere(1.2)\n      });\n    }\n\n    this.wheelBodies.push(wheelBody);\n    this.wheelForces.push(0); // Position constrain wheels\n\n    const position = typeof options.position !== 'undefined' ? options.position.clone() : new Vec3(); // Set position locally to the chassis\n\n    const worldPosition = new Vec3();\n    this.chassisBody.pointToWorldFrame(position, worldPosition);\n    wheelBody.position.set(worldPosition.x, worldPosition.y, worldPosition.z); // Constrain wheel\n\n    const axis = typeof options.axis !== 'undefined' ? options.axis.clone() : new Vec3(0, 0, 1);\n    this.wheelAxes.push(axis);\n    const hingeConstraint = new HingeConstraint(this.chassisBody, wheelBody, {\n      pivotA: position,\n      axisA: axis,\n      pivotB: Vec3.ZERO,\n      axisB: axis,\n      collideConnected: false\n    });\n    this.constraints.push(hingeConstraint);\n    return this.wheelBodies.length - 1;\n  }\n  /**\n   * Set the steering value of a wheel.\n   * @todo check coordinateSystem\n   */\n\n\n  setSteeringValue(value, wheelIndex) {\n    // Set angle of the hinge axis\n    const axis = this.wheelAxes[wheelIndex];\n    const c = Math.cos(value);\n    const s = Math.sin(value);\n    const x = axis.x;\n    const z = axis.z;\n    this.constraints[wheelIndex].axisA.set(-c * x + s * z, 0, s * x + c * z);\n  }\n  /**\n   * Set the target rotational speed of the hinge constraint.\n   */\n\n\n  setMotorSpeed(value, wheelIndex) {\n    const hingeConstraint = this.constraints[wheelIndex];\n    hingeConstraint.enableMotor();\n    hingeConstraint.motorTargetVelocity = value;\n  }\n  /**\n   * Set the target rotational speed of the hinge constraint.\n   */\n\n\n  disableMotor(wheelIndex) {\n    const hingeConstraint = this.constraints[wheelIndex];\n    hingeConstraint.disableMotor();\n  }\n  /**\n   * Set the wheel force to apply on one of the wheels each time step\n   */\n\n\n  setWheelForce(value, wheelIndex) {\n    this.wheelForces[wheelIndex] = value;\n  }\n  /**\n   * Apply a torque on one of the wheels.\n   */\n\n\n  applyWheelForce(value, wheelIndex) {\n    const axis = this.wheelAxes[wheelIndex];\n    const wheelBody = this.wheelBodies[wheelIndex];\n    const bodyTorque = wheelBody.torque;\n    axis.scale(value, torque);\n    wheelBody.vectorToWorldFrame(torque, torque);\n    bodyTorque.vadd(torque, bodyTorque);\n  }\n  /**\n   * Add the vehicle including its constraints to the world.\n   */\n\n\n  addToWorld(world) {\n    const constraints = this.constraints;\n    const bodies = this.wheelBodies.concat([this.chassisBody]);\n\n    for (let i = 0; i < bodies.length; i++) {\n      world.addBody(bodies[i]);\n    }\n\n    for (let i = 0; i < constraints.length; i++) {\n      world.addConstraint(constraints[i]);\n    }\n\n    world.addEventListener('preStep', this._update.bind(this));\n  }\n\n  _update() {\n    const wheelForces = this.wheelForces;\n\n    for (let i = 0; i < wheelForces.length; i++) {\n      this.applyWheelForce(wheelForces[i], i);\n    }\n  }\n  /**\n   * Remove the vehicle including its constraints from the world.\n   */\n\n\n  removeFromWorld(world) {\n    const constraints = this.constraints;\n    const bodies = this.wheelBodies.concat([this.chassisBody]);\n\n    for (let i = 0; i < bodies.length; i++) {\n      world.removeBody(bodies[i]);\n    }\n\n    for (let i = 0; i < constraints.length; i++) {\n      world.removeConstraint(constraints[i]);\n    }\n  }\n  /**\n   * Get current rotational velocity of a wheel\n   */\n\n\n  getWheelSpeed(wheelIndex) {\n    const axis = this.wheelAxes[wheelIndex];\n    const wheelBody = this.wheelBodies[wheelIndex];\n    const w = wheelBody.angularVelocity;\n    this.chassisBody.vectorToWorldFrame(axis, worldAxis);\n    return w.dot(worldAxis);\n  }\n\n}\nconst torque = new Vec3();\nconst worldAxis = new Vec3();\n\n/**\n * Smoothed-particle hydrodynamics system\n * @todo Make parameters customizable in the constructor\n */\nclass SPHSystem {\n  /**\n   * The particles array.\n   */\n\n  /**\n   * Density of the system (kg/m3).\n   * @default 1\n   */\n\n  /**\n   * Distance below which two particles are considered to be neighbors.\n   * It should be adjusted so there are about 15-20 neighbor particles within this radius.\n   * @default 1\n   */\n\n  /**\n   * @default 1\n   */\n\n  /**\n   * Viscosity of the system.\n   * @default 0.01\n   */\n\n  /**\n   * @default 0.000001\n   */\n  constructor() {\n    this.particles = [];\n    this.density = 1;\n    this.smoothingRadius = 1;\n    this.speedOfSound = 1;\n    this.viscosity = 0.01;\n    this.eps = 0.000001; // Stuff Computed per particle\n\n    this.pressures = [];\n    this.densities = [];\n    this.neighbors = [];\n  }\n  /**\n   * Add a particle to the system.\n   */\n\n\n  add(particle) {\n    this.particles.push(particle);\n\n    if (this.neighbors.length < this.particles.length) {\n      this.neighbors.push([]);\n    }\n  }\n  /**\n   * Remove a particle from the system.\n   */\n\n\n  remove(particle) {\n    const idx = this.particles.indexOf(particle);\n\n    if (idx !== -1) {\n      this.particles.splice(idx, 1);\n\n      if (this.neighbors.length > this.particles.length) {\n        this.neighbors.pop();\n      }\n    }\n  }\n  /**\n   * Get neighbors within smoothing volume, save in the array neighbors\n   */\n\n\n  getNeighbors(particle, neighbors) {\n    const N = this.particles.length;\n    const id = particle.id;\n    const R2 = this.smoothingRadius * this.smoothingRadius;\n    const dist = SPHSystem_getNeighbors_dist;\n\n    for (let i = 0; i !== N; i++) {\n      const p = this.particles[i];\n      p.position.vsub(particle.position, dist);\n\n      if (id !== p.id && dist.lengthSquared() < R2) {\n        neighbors.push(p);\n      }\n    }\n  }\n\n  update() {\n    const N = this.particles.length;\n    const dist = SPHSystem_update_dist;\n    const cs = this.speedOfSound;\n    const eps = this.eps;\n\n    for (let i = 0; i !== N; i++) {\n      const p = this.particles[i]; // Current particle\n\n      const neighbors = this.neighbors[i]; // Get neighbors\n\n      neighbors.length = 0;\n      this.getNeighbors(p, neighbors);\n      neighbors.push(this.particles[i]); // Add current too\n\n      const numNeighbors = neighbors.length; // Accumulate density for the particle\n\n      let sum = 0.0;\n\n      for (let j = 0; j !== numNeighbors; j++) {\n        //printf(\"Current particle has position %f %f %f\\n\",objects[id].pos.x(),objects[id].pos.y(),objects[id].pos.z());\n        p.position.vsub(neighbors[j].position, dist);\n        const len = dist.length();\n        const weight = this.w(len);\n        sum += neighbors[j].mass * weight;\n      } // Save\n\n\n      this.densities[i] = sum;\n      this.pressures[i] = cs * cs * (this.densities[i] - this.density);\n    } // Add forces\n    // Sum to these accelerations\n\n\n    const a_pressure = SPHSystem_update_a_pressure;\n    const a_visc = SPHSystem_update_a_visc;\n    const gradW = SPHSystem_update_gradW;\n    const r_vec = SPHSystem_update_r_vec;\n    const u = SPHSystem_update_u;\n\n    for (let i = 0; i !== N; i++) {\n      const particle = this.particles[i];\n      a_pressure.set(0, 0, 0);\n      a_visc.set(0, 0, 0); // Init vars\n\n      let Pij;\n      let nabla;\n\n      const neighbors = this.neighbors[i];\n      const numNeighbors = neighbors.length; //printf(\"Neighbors: \");\n\n      for (let j = 0; j !== numNeighbors; j++) {\n        const neighbor = neighbors[j]; //printf(\"%d \",nj);\n        // Get r once for all..\n\n        particle.position.vsub(neighbor.position, r_vec);\n        const r = r_vec.length(); // Pressure contribution\n\n        Pij = -neighbor.mass * (this.pressures[i] / (this.densities[i] * this.densities[i] + eps) + this.pressures[j] / (this.densities[j] * this.densities[j] + eps));\n        this.gradw(r_vec, gradW); // Add to pressure acceleration\n\n        gradW.scale(Pij, gradW);\n        a_pressure.vadd(gradW, a_pressure); // Viscosity contribution\n\n        neighbor.velocity.vsub(particle.velocity, u);\n        u.scale(1.0 / (0.0001 + this.densities[i] * this.densities[j]) * this.viscosity * neighbor.mass, u);\n        nabla = this.nablaw(r);\n        u.scale(nabla, u); // Add to viscosity acceleration\n\n        a_visc.vadd(u, a_visc);\n      } // Calculate force\n\n\n      a_visc.scale(particle.mass, a_visc);\n      a_pressure.scale(particle.mass, a_pressure); // Add force to particles\n\n      particle.force.vadd(a_visc, particle.force);\n      particle.force.vadd(a_pressure, particle.force);\n    }\n  } // Calculate the weight using the W(r) weightfunction\n\n\n  w(r) {\n    // 315\n    const h = this.smoothingRadius;\n    return 315.0 / (64.0 * Math.PI * h ** 9) * (h * h - r * r) ** 3;\n  } // calculate gradient of the weight function\n\n\n  gradw(rVec, resultVec) {\n    const r = rVec.length();\n    const h = this.smoothingRadius;\n    rVec.scale(945.0 / (32.0 * Math.PI * h ** 9) * (h * h - r * r) ** 2, resultVec);\n  } // Calculate nabla(W)\n\n\n  nablaw(r) {\n    const h = this.smoothingRadius;\n    const nabla = 945.0 / (32.0 * Math.PI * h ** 9) * (h * h - r * r) * (7 * r * r - 3 * h * h);\n    return nabla;\n  }\n\n}\nconst SPHSystem_getNeighbors_dist = new Vec3(); // Temp vectors for calculation\n\nconst SPHSystem_update_dist = new Vec3(); // Relative velocity\n\nconst SPHSystem_update_a_pressure = new Vec3();\nconst SPHSystem_update_a_visc = new Vec3();\nconst SPHSystem_update_gradW = new Vec3();\nconst SPHSystem_update_r_vec = new Vec3();\nconst SPHSystem_update_u = new Vec3();\n\n/**\n * Cylinder class.\n * @example\n *     const radiusTop = 0.5\n *     const radiusBottom = 0.5\n *     const height = 2\n *     const numSegments = 12\n *     const cylinderShape = new CANNON.Cylinder(radiusTop, radiusBottom, height, numSegments)\n *     const cylinderBody = new CANNON.Body({ mass: 1, shape: cylinderShape })\n *     world.addBody(cylinderBody)\n */\n\nclass Cylinder extends ConvexPolyhedron {\n  /** The radius of the top of the Cylinder. */\n\n  /** The radius of the bottom of the Cylinder. */\n\n  /** The height of the Cylinder. */\n\n  /** The number of segments to build the cylinder out of. */\n\n  /**\n   * @param radiusTop The radius of the top of the Cylinder.\n   * @param radiusBottom The radius of the bottom of the Cylinder.\n   * @param height The height of the Cylinder.\n   * @param numSegments The number of segments to build the cylinder out of.\n   */\n  constructor(radiusTop, radiusBottom, height, numSegments) {\n    if (radiusTop === void 0) {\n      radiusTop = 1;\n    }\n\n    if (radiusBottom === void 0) {\n      radiusBottom = 1;\n    }\n\n    if (height === void 0) {\n      height = 1;\n    }\n\n    if (numSegments === void 0) {\n      numSegments = 8;\n    }\n\n    if (radiusTop < 0) {\n      throw new Error('The cylinder radiusTop cannot be negative.');\n    }\n\n    if (radiusBottom < 0) {\n      throw new Error('The cylinder radiusBottom cannot be negative.');\n    }\n\n    const N = numSegments;\n    const vertices = [];\n    const axes = [];\n    const faces = [];\n    const bottomface = [];\n    const topface = [];\n    const cos = Math.cos;\n    const sin = Math.sin; // First bottom point\n\n    vertices.push(new Vec3(-radiusBottom * sin(0), -height * 0.5, radiusBottom * cos(0)));\n    bottomface.push(0); // First top point\n\n    vertices.push(new Vec3(-radiusTop * sin(0), height * 0.5, radiusTop * cos(0)));\n    topface.push(1);\n\n    for (let i = 0; i < N; i++) {\n      const theta = 2 * Math.PI / N * (i + 1);\n      const thetaN = 2 * Math.PI / N * (i + 0.5);\n\n      if (i < N - 1) {\n        // Bottom\n        vertices.push(new Vec3(-radiusBottom * sin(theta), -height * 0.5, radiusBottom * cos(theta)));\n        bottomface.push(2 * i + 2); // Top\n\n        vertices.push(new Vec3(-radiusTop * sin(theta), height * 0.5, radiusTop * cos(theta)));\n        topface.push(2 * i + 3); // Face\n\n        faces.push([2 * i, 2 * i + 1, 2 * i + 3, 2 * i + 2]);\n      } else {\n        faces.push([2 * i, 2 * i + 1, 1, 0]); // Connect\n      } // Axis: we can cut off half of them if we have even number of segments\n\n\n      if (N % 2 === 1 || i < N / 2) {\n        axes.push(new Vec3(-sin(thetaN), 0, cos(thetaN)));\n      }\n    }\n\n    faces.push(bottomface);\n    axes.push(new Vec3(0, 1, 0)); // Reorder top face\n\n    const temp = [];\n\n    for (let i = 0; i < topface.length; i++) {\n      temp.push(topface[topface.length - i - 1]);\n    }\n\n    faces.push(temp);\n    super({\n      vertices,\n      faces,\n      axes\n    });\n    this.type = Shape.types.CYLINDER;\n    this.radiusTop = radiusTop;\n    this.radiusBottom = radiusBottom;\n    this.height = height;\n    this.numSegments = numSegments;\n  }\n\n}\n\n/**\n * Particle shape.\n * @example\n *     const particleShape = new CANNON.Particle()\n *     const particleBody = new CANNON.Body({ mass: 1, shape: particleShape })\n *     world.addBody(particleBody)\n */\nclass Particle extends Shape {\n  constructor() {\n    super({\n      type: Shape.types.PARTICLE\n    });\n  }\n  /**\n   * calculateLocalInertia\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    target.set(0, 0, 0);\n    return target;\n  }\n\n  volume() {\n    return 0;\n  }\n\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = 0;\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    // Get each axis max\n    min.copy(pos);\n    max.copy(pos);\n  }\n\n}\n\n/**\n * A plane, facing in the Z direction. The plane has its surface at z=0 and everything below z=0 is assumed to be solid plane. To make the plane face in some other direction than z, you must put it inside a Body and rotate that body. See the demos.\n * @example\n *     const planeShape = new CANNON.Plane()\n *     const planeBody = new CANNON.Body({ mass: 0, shape:  planeShape })\n *     planeBody.quaternion.setFromEuler(-Math.PI / 2, 0, 0) // make it face up\n *     world.addBody(planeBody)\n */\nclass Plane extends Shape {\n  /** worldNormal */\n\n  /** worldNormalNeedsUpdate */\n  constructor() {\n    super({\n      type: Shape.types.PLANE\n    }); // World oriented normal\n\n    this.worldNormal = new Vec3();\n    this.worldNormalNeedsUpdate = true;\n    this.boundingSphereRadius = Number.MAX_VALUE;\n  }\n  /** computeWorldNormal */\n\n\n  computeWorldNormal(quat) {\n    const n = this.worldNormal;\n    n.set(0, 0, 1);\n    quat.vmult(n, n);\n    this.worldNormalNeedsUpdate = false;\n  }\n\n  calculateLocalInertia(mass, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    return target;\n  }\n\n  volume() {\n    return (// The plane is infinite...\n      Number.MAX_VALUE\n    );\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    // The plane AABB is infinite, except if the normal is pointing along any axis\n    tempNormal.set(0, 0, 1); // Default plane normal is z\n\n    quat.vmult(tempNormal, tempNormal);\n    const maxVal = Number.MAX_VALUE;\n    min.set(-maxVal, -maxVal, -maxVal);\n    max.set(maxVal, maxVal, maxVal);\n\n    if (tempNormal.x === 1) {\n      max.x = pos.x;\n    } else if (tempNormal.x === -1) {\n      min.x = pos.x;\n    }\n\n    if (tempNormal.y === 1) {\n      max.y = pos.y;\n    } else if (tempNormal.y === -1) {\n      min.y = pos.y;\n    }\n\n    if (tempNormal.z === 1) {\n      max.z = pos.z;\n    } else if (tempNormal.z === -1) {\n      min.z = pos.z;\n    }\n  }\n\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = Number.MAX_VALUE;\n  }\n\n}\nconst tempNormal = new Vec3();\n\n/**\n * Heightfield shape class. Height data is given as an array. These data points are spread out evenly with a given distance.\n * @todo Should be possible to use along all axes, not just y\n * @todo should be possible to scale along all axes\n * @todo Refactor elementSize to elementSizeX and elementSizeY\n *\n * @example\n *     // Generate some height data (y-values).\n *     const data = []\n *     for (let i = 0; i < 1000; i++) {\n *         const y = 0.5 * Math.cos(0.2 * i)\n *         data.push(y)\n *     }\n *\n *     // Create the heightfield shape\n *     const heightfieldShape = new CANNON.Heightfield(data, {\n *         elementSize: 1 // Distance between the data points in X and Y directions\n *     })\n *     const heightfieldBody = new CANNON.Body({ shape: heightfieldShape })\n *     world.addBody(heightfieldBody)\n */\nclass Heightfield extends Shape {\n  /**\n   * An array of numbers, or height values, that are spread out along the x axis.\n   */\n\n  /**\n   * Max value of the data points in the data array.\n   */\n\n  /**\n   * Minimum value of the data points in the data array.\n   */\n\n  /**\n   * World spacing between the data points in X and Y direction.\n   * @todo elementSizeX and Y\n   * @default 1\n   */\n\n  /**\n   * @default true\n   */\n\n  /**\n   * @param data An array of numbers, or height values, that are spread out along the x axis.\n   */\n  constructor(data, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    options = Utils.defaults(options, {\n      maxValue: null,\n      minValue: null,\n      elementSize: 1\n    });\n    super({\n      type: Shape.types.HEIGHTFIELD\n    });\n    this.data = data;\n    this.maxValue = options.maxValue;\n    this.minValue = options.minValue;\n    this.elementSize = options.elementSize;\n\n    if (options.minValue === null) {\n      this.updateMinValue();\n    }\n\n    if (options.maxValue === null) {\n      this.updateMaxValue();\n    }\n\n    this.cacheEnabled = true;\n    this.pillarConvex = new ConvexPolyhedron();\n    this.pillarOffset = new Vec3();\n    this.updateBoundingSphereRadius(); // \"i_j_isUpper\" => { convex: ..., offset: ... }\n    // for example:\n    // _cachedPillars[\"0_2_1\"]\n\n    this._cachedPillars = {};\n  }\n  /**\n   * Call whenever you change the data array.\n   */\n\n\n  update() {\n    this._cachedPillars = {};\n  }\n  /**\n   * Update the `minValue` property\n   */\n\n\n  updateMinValue() {\n    const data = this.data;\n    let minValue = data[0][0];\n\n    for (let i = 0; i !== data.length; i++) {\n      for (let j = 0; j !== data[i].length; j++) {\n        const v = data[i][j];\n\n        if (v < minValue) {\n          minValue = v;\n        }\n      }\n    }\n\n    this.minValue = minValue;\n  }\n  /**\n   * Update the `maxValue` property\n   */\n\n\n  updateMaxValue() {\n    const data = this.data;\n    let maxValue = data[0][0];\n\n    for (let i = 0; i !== data.length; i++) {\n      for (let j = 0; j !== data[i].length; j++) {\n        const v = data[i][j];\n\n        if (v > maxValue) {\n          maxValue = v;\n        }\n      }\n    }\n\n    this.maxValue = maxValue;\n  }\n  /**\n   * Set the height value at an index. Don't forget to update maxValue and minValue after you're done.\n   */\n\n\n  setHeightValueAtIndex(xi, yi, value) {\n    const data = this.data;\n    data[xi][yi] = value; // Invalidate cache\n\n    this.clearCachedConvexTrianglePillar(xi, yi, false);\n\n    if (xi > 0) {\n      this.clearCachedConvexTrianglePillar(xi - 1, yi, true);\n      this.clearCachedConvexTrianglePillar(xi - 1, yi, false);\n    }\n\n    if (yi > 0) {\n      this.clearCachedConvexTrianglePillar(xi, yi - 1, true);\n      this.clearCachedConvexTrianglePillar(xi, yi - 1, false);\n    }\n\n    if (yi > 0 && xi > 0) {\n      this.clearCachedConvexTrianglePillar(xi - 1, yi - 1, true);\n    }\n  }\n  /**\n   * Get max/min in a rectangle in the matrix data\n   * @param result An array to store the results in.\n   * @return The result array, if it was passed in. Minimum will be at position 0 and max at 1.\n   */\n\n\n  getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, result) {\n    if (result === void 0) {\n      result = [];\n    }\n\n    // Get max and min of the data\n    const data = this.data; // Set first value\n\n    let max = this.minValue;\n\n    for (let i = iMinX; i <= iMaxX; i++) {\n      for (let j = iMinY; j <= iMaxY; j++) {\n        const height = data[i][j];\n\n        if (height > max) {\n          max = height;\n        }\n      }\n    }\n\n    result[0] = this.minValue;\n    result[1] = max;\n  }\n  /**\n   * Get the index of a local position on the heightfield. The indexes indicate the rectangles, so if your terrain is made of N x N height data points, you will have rectangle indexes ranging from 0 to N-1.\n   * @param result Two-element array\n   * @param clamp If the position should be clamped to the heightfield edge.\n   */\n\n\n  getIndexOfPosition(x, y, result, clamp) {\n    // Get the index of the data points to test against\n    const w = this.elementSize;\n    const data = this.data;\n    let xi = Math.floor(x / w);\n    let yi = Math.floor(y / w);\n    result[0] = xi;\n    result[1] = yi;\n\n    if (clamp) {\n      // Clamp index to edges\n      if (xi < 0) {\n        xi = 0;\n      }\n\n      if (yi < 0) {\n        yi = 0;\n      }\n\n      if (xi >= data.length - 1) {\n        xi = data.length - 1;\n      }\n\n      if (yi >= data[0].length - 1) {\n        yi = data[0].length - 1;\n      }\n    } // Bail out if we are out of the terrain\n\n\n    if (xi < 0 || yi < 0 || xi >= data.length - 1 || yi >= data[0].length - 1) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getTriangleAt(x, y, edgeClamp, a, b, c) {\n    const idx = getHeightAt_idx;\n    this.getIndexOfPosition(x, y, idx, edgeClamp);\n    let xi = idx[0];\n    let yi = idx[1];\n    const data = this.data;\n\n    if (edgeClamp) {\n      xi = Math.min(data.length - 2, Math.max(0, xi));\n      yi = Math.min(data[0].length - 2, Math.max(0, yi));\n    }\n\n    const elementSize = this.elementSize;\n    const lowerDist2 = (x / elementSize - xi) ** 2 + (y / elementSize - yi) ** 2;\n    const upperDist2 = (x / elementSize - (xi + 1)) ** 2 + (y / elementSize - (yi + 1)) ** 2;\n    const upper = lowerDist2 > upperDist2;\n    this.getTriangle(xi, yi, upper, a, b, c);\n    return upper;\n  }\n\n  getNormalAt(x, y, edgeClamp, result) {\n    const a = getNormalAt_a;\n    const b = getNormalAt_b;\n    const c = getNormalAt_c;\n    const e0 = getNormalAt_e0;\n    const e1 = getNormalAt_e1;\n    this.getTriangleAt(x, y, edgeClamp, a, b, c);\n    b.vsub(a, e0);\n    c.vsub(a, e1);\n    e0.cross(e1, result);\n    result.normalize();\n  }\n  /**\n   * Get an AABB of a square in the heightfield\n   * @param xi\n   * @param yi\n   * @param result\n   */\n\n\n  getAabbAtIndex(xi, yi, _ref) {\n    let {\n      lowerBound,\n      upperBound\n    } = _ref;\n    const data = this.data;\n    const elementSize = this.elementSize;\n    lowerBound.set(xi * elementSize, yi * elementSize, data[xi][yi]);\n    upperBound.set((xi + 1) * elementSize, (yi + 1) * elementSize, data[xi + 1][yi + 1]);\n  }\n  /**\n   * Get the height in the heightfield at a given position\n   */\n\n\n  getHeightAt(x, y, edgeClamp) {\n    const data = this.data;\n    const a = getHeightAt_a;\n    const b = getHeightAt_b;\n    const c = getHeightAt_c;\n    const idx = getHeightAt_idx;\n    this.getIndexOfPosition(x, y, idx, edgeClamp);\n    let xi = idx[0];\n    let yi = idx[1];\n\n    if (edgeClamp) {\n      xi = Math.min(data.length - 2, Math.max(0, xi));\n      yi = Math.min(data[0].length - 2, Math.max(0, yi));\n    }\n\n    const upper = this.getTriangleAt(x, y, edgeClamp, a, b, c);\n    barycentricWeights(x, y, a.x, a.y, b.x, b.y, c.x, c.y, getHeightAt_weights);\n    const w = getHeightAt_weights;\n\n    if (upper) {\n      // Top triangle verts\n      return data[xi + 1][yi + 1] * w.x + data[xi][yi + 1] * w.y + data[xi + 1][yi] * w.z;\n    } else {\n      // Top triangle verts\n      return data[xi][yi] * w.x + data[xi + 1][yi] * w.y + data[xi][yi + 1] * w.z;\n    }\n  }\n\n  getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle) {\n    return `${xi}_${yi}_${getUpperTriangle ? 1 : 0}`;\n  }\n\n  getCachedConvexTrianglePillar(xi, yi, getUpperTriangle) {\n    return this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n  }\n\n  setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, convex, offset) {\n    this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)] = {\n      convex,\n      offset\n    };\n  }\n\n  clearCachedConvexTrianglePillar(xi, yi, getUpperTriangle) {\n    delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n  }\n  /**\n   * Get a triangle from the heightfield\n   */\n\n\n  getTriangle(xi, yi, upper, a, b, c) {\n    const data = this.data;\n    const elementSize = this.elementSize;\n\n    if (upper) {\n      // Top triangle verts\n      a.set((xi + 1) * elementSize, (yi + 1) * elementSize, data[xi + 1][yi + 1]);\n      b.set(xi * elementSize, (yi + 1) * elementSize, data[xi][yi + 1]);\n      c.set((xi + 1) * elementSize, yi * elementSize, data[xi + 1][yi]);\n    } else {\n      // Top triangle verts\n      a.set(xi * elementSize, yi * elementSize, data[xi][yi]);\n      b.set((xi + 1) * elementSize, yi * elementSize, data[xi + 1][yi]);\n      c.set(xi * elementSize, (yi + 1) * elementSize, data[xi][yi + 1]);\n    }\n  }\n  /**\n   * Get a triangle in the terrain in the form of a triangular convex shape.\n   */\n\n\n  getConvexTrianglePillar(xi, yi, getUpperTriangle) {\n    let result = this.pillarConvex;\n    let offsetResult = this.pillarOffset;\n\n    if (this.cacheEnabled) {\n      const data = this.getCachedConvexTrianglePillar(xi, yi, getUpperTriangle);\n\n      if (data) {\n        this.pillarConvex = data.convex;\n        this.pillarOffset = data.offset;\n        return;\n      }\n\n      result = new ConvexPolyhedron();\n      offsetResult = new Vec3();\n      this.pillarConvex = result;\n      this.pillarOffset = offsetResult;\n    }\n\n    const data = this.data;\n    const elementSize = this.elementSize;\n    const faces = result.faces; // Reuse verts if possible\n\n    result.vertices.length = 6;\n\n    for (let i = 0; i < 6; i++) {\n      if (!result.vertices[i]) {\n        result.vertices[i] = new Vec3();\n      }\n    } // Reuse faces if possible\n\n\n    faces.length = 5;\n\n    for (let i = 0; i < 5; i++) {\n      if (!faces[i]) {\n        faces[i] = [];\n      }\n    }\n\n    const verts = result.vertices;\n    const h = (Math.min(data[xi][yi], data[xi + 1][yi], data[xi][yi + 1], data[xi + 1][yi + 1]) - this.minValue) / 2 + this.minValue;\n\n    if (!getUpperTriangle) {\n      // Center of the triangle pillar - all polygons are given relative to this one\n      offsetResult.set((xi + 0.25) * elementSize, // sort of center of a triangle\n      (yi + 0.25) * elementSize, h // vertical center\n      ); // Top triangle verts\n\n      verts[0].set(-0.25 * elementSize, -0.25 * elementSize, data[xi][yi] - h);\n      verts[1].set(0.75 * elementSize, -0.25 * elementSize, data[xi + 1][yi] - h);\n      verts[2].set(-0.25 * elementSize, 0.75 * elementSize, data[xi][yi + 1] - h); // bottom triangle verts\n\n      verts[3].set(-0.25 * elementSize, -0.25 * elementSize, -Math.abs(h) - 1);\n      verts[4].set(0.75 * elementSize, -0.25 * elementSize, -Math.abs(h) - 1);\n      verts[5].set(-0.25 * elementSize, 0.75 * elementSize, -Math.abs(h) - 1); // top triangle\n\n      faces[0][0] = 0;\n      faces[0][1] = 1;\n      faces[0][2] = 2; // bottom triangle\n\n      faces[1][0] = 5;\n      faces[1][1] = 4;\n      faces[1][2] = 3; // -x facing quad\n\n      faces[2][0] = 0;\n      faces[2][1] = 2;\n      faces[2][2] = 5;\n      faces[2][3] = 3; // -y facing quad\n\n      faces[3][0] = 1;\n      faces[3][1] = 0;\n      faces[3][2] = 3;\n      faces[3][3] = 4; // +xy facing quad\n\n      faces[4][0] = 4;\n      faces[4][1] = 5;\n      faces[4][2] = 2;\n      faces[4][3] = 1;\n    } else {\n      // Center of the triangle pillar - all polygons are given relative to this one\n      offsetResult.set((xi + 0.75) * elementSize, // sort of center of a triangle\n      (yi + 0.75) * elementSize, h // vertical center\n      ); // Top triangle verts\n\n      verts[0].set(0.25 * elementSize, 0.25 * elementSize, data[xi + 1][yi + 1] - h);\n      verts[1].set(-0.75 * elementSize, 0.25 * elementSize, data[xi][yi + 1] - h);\n      verts[2].set(0.25 * elementSize, -0.75 * elementSize, data[xi + 1][yi] - h); // bottom triangle verts\n\n      verts[3].set(0.25 * elementSize, 0.25 * elementSize, -Math.abs(h) - 1);\n      verts[4].set(-0.75 * elementSize, 0.25 * elementSize, -Math.abs(h) - 1);\n      verts[5].set(0.25 * elementSize, -0.75 * elementSize, -Math.abs(h) - 1); // Top triangle\n\n      faces[0][0] = 0;\n      faces[0][1] = 1;\n      faces[0][2] = 2; // bottom triangle\n\n      faces[1][0] = 5;\n      faces[1][1] = 4;\n      faces[1][2] = 3; // +x facing quad\n\n      faces[2][0] = 2;\n      faces[2][1] = 5;\n      faces[2][2] = 3;\n      faces[2][3] = 0; // +y facing quad\n\n      faces[3][0] = 3;\n      faces[3][1] = 4;\n      faces[3][2] = 1;\n      faces[3][3] = 0; // -xy facing quad\n\n      faces[4][0] = 1;\n      faces[4][1] = 4;\n      faces[4][2] = 5;\n      faces[4][3] = 2;\n    }\n\n    result.computeNormals();\n    result.computeEdges();\n    result.updateBoundingSphereRadius();\n    this.setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, result, offsetResult);\n  }\n\n  calculateLocalInertia(mass, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    target.set(0, 0, 0);\n    return target;\n  }\n\n  volume() {\n    return (// The terrain is infinite\n      Number.MAX_VALUE\n    );\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    /** @TODO do it properly */\n    min.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n    max.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n  }\n\n  updateBoundingSphereRadius() {\n    // Use the bounding box of the min/max values\n    const data = this.data;\n    const s = this.elementSize;\n    this.boundingSphereRadius = new Vec3(data.length * s, data[0].length * s, Math.max(Math.abs(this.maxValue), Math.abs(this.minValue))).length();\n  }\n  /**\n   * Sets the height values from an image. Currently only supported in browser.\n   */\n\n\n  setHeightsFromImage(image, scale) {\n    const {\n      x,\n      z,\n      y\n    } = scale;\n    const canvas = document.createElement('canvas');\n    canvas.width = image.width;\n    canvas.height = image.height;\n    const context = canvas.getContext('2d');\n    context.drawImage(image, 0, 0);\n    const imageData = context.getImageData(0, 0, image.width, image.height);\n    const matrix = this.data;\n    matrix.length = 0;\n    this.elementSize = Math.abs(x) / imageData.width;\n\n    for (let i = 0; i < imageData.height; i++) {\n      const row = [];\n\n      for (let j = 0; j < imageData.width; j++) {\n        const a = imageData.data[(i * imageData.height + j) * 4];\n        const b = imageData.data[(i * imageData.height + j) * 4 + 1];\n        const c = imageData.data[(i * imageData.height + j) * 4 + 2];\n        const height = (a + b + c) / 4 / 255 * z;\n\n        if (x < 0) {\n          row.push(height);\n        } else {\n          row.unshift(height);\n        }\n      }\n\n      if (y < 0) {\n        matrix.unshift(row);\n      } else {\n        matrix.push(row);\n      }\n    }\n\n    this.updateMaxValue();\n    this.updateMinValue();\n    this.update();\n  }\n\n}\nconst getHeightAt_idx = [];\nconst getHeightAt_weights = new Vec3();\nconst getHeightAt_a = new Vec3();\nconst getHeightAt_b = new Vec3();\nconst getHeightAt_c = new Vec3();\nconst getNormalAt_a = new Vec3();\nconst getNormalAt_b = new Vec3();\nconst getNormalAt_c = new Vec3();\nconst getNormalAt_e0 = new Vec3();\nconst getNormalAt_e1 = new Vec3(); // from https://en.wikipedia.org/wiki/Barycentric_coordinate_system\n\nfunction barycentricWeights(x, y, ax, ay, bx, by, cx, cy, result) {\n  result.x = ((by - cy) * (x - cx) + (cx - bx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));\n  result.y = ((cy - ay) * (x - cx) + (ax - cx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));\n  result.z = 1 - result.x - result.y;\n}\n\n/**\n * OctreeNode\n */\nclass OctreeNode {\n  /** The root node */\n\n  /** Boundary of this node */\n\n  /** Contained data at the current node level */\n\n  /** Children to this node */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.root = options.root || null;\n    this.aabb = options.aabb ? options.aabb.clone() : new AABB();\n    this.data = [];\n    this.children = [];\n  }\n  /**\n   * reset\n   */\n\n\n  reset() {\n    this.children.length = this.data.length = 0;\n  }\n  /**\n   * Insert data into this node\n   * @return True if successful, otherwise false\n   */\n\n\n  insert(aabb, elementData, level) {\n    if (level === void 0) {\n      level = 0;\n    }\n\n    const nodeData = this.data; // Ignore objects that do not belong in this node\n\n    if (!this.aabb.contains(aabb)) {\n      return false; // object cannot be added\n    }\n\n    const children = this.children;\n    const maxDepth = this.maxDepth || this.root.maxDepth;\n\n    if (level < maxDepth) {\n      // Subdivide if there are no children yet\n      let subdivided = false;\n\n      if (!children.length) {\n        this.subdivide();\n        subdivided = true;\n      } // add to whichever node will accept it\n\n\n      for (let i = 0; i !== 8; i++) {\n        if (children[i].insert(aabb, elementData, level + 1)) {\n          return true;\n        }\n      }\n\n      if (subdivided) {\n        // No children accepted! Might as well just remove em since they contain none\n        children.length = 0;\n      }\n    } // Too deep, or children didnt want it. add it in current node\n\n\n    nodeData.push(elementData);\n    return true;\n  }\n  /**\n   * Create 8 equally sized children nodes and put them in the `children` array.\n   */\n\n\n  subdivide() {\n    const aabb = this.aabb;\n    const l = aabb.lowerBound;\n    const u = aabb.upperBound;\n    const children = this.children;\n    children.push(new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(0, 0, 0)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(1, 0, 0)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(1, 1, 0)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(1, 1, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(0, 1, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(0, 0, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(1, 0, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(0, 1, 0)\n      })\n    }));\n    u.vsub(l, halfDiagonal);\n    halfDiagonal.scale(0.5, halfDiagonal);\n    const root = this.root || this;\n\n    for (let i = 0; i !== 8; i++) {\n      const child = children[i]; // Set current node as root\n\n      child.root = root; // Compute bounds\n\n      const lowerBound = child.aabb.lowerBound;\n      lowerBound.x *= halfDiagonal.x;\n      lowerBound.y *= halfDiagonal.y;\n      lowerBound.z *= halfDiagonal.z;\n      lowerBound.vadd(l, lowerBound); // Upper bound is always lower bound + halfDiagonal\n\n      lowerBound.vadd(halfDiagonal, child.aabb.upperBound);\n    }\n  }\n  /**\n   * Get all data, potentially within an AABB\n   * @return The \"result\" object\n   */\n\n\n  aabbQuery(aabb, result) {\n    this.data; // abort if the range does not intersect this node\n    // if (!this.aabb.overlaps(aabb)){\n    //     return result;\n    // }\n    // Add objects at this level\n    // Array.prototype.push.apply(result, nodeData);\n    // Add child data\n    // @todo unwrap recursion into a queue / loop, that's faster in JS\n\n    this.children; // for (let i = 0, N = this.children.length; i !== N; i++) {\n    //     children[i].aabbQuery(aabb, result);\n    // }\n\n    const queue = [this];\n\n    while (queue.length) {\n      const node = queue.pop();\n\n      if (node.aabb.overlaps(aabb)) {\n        Array.prototype.push.apply(result, node.data);\n      }\n\n      Array.prototype.push.apply(queue, node.children);\n    }\n\n    return result;\n  }\n  /**\n   * Get all data, potentially intersected by a ray.\n   * @return The \"result\" object\n   */\n\n\n  rayQuery(ray, treeTransform, result) {\n    // Use aabb query for now.\n\n    /** @todo implement real ray query which needs less lookups */\n    ray.getAABB(tmpAABB);\n    tmpAABB.toLocalFrame(treeTransform, tmpAABB);\n    this.aabbQuery(tmpAABB, result);\n    return result;\n  }\n  /**\n   * removeEmptyNodes\n   */\n\n\n  removeEmptyNodes() {\n    for (let i = this.children.length - 1; i >= 0; i--) {\n      this.children[i].removeEmptyNodes();\n\n      if (!this.children[i].children.length && !this.children[i].data.length) {\n        this.children.splice(i, 1);\n      }\n    }\n  }\n\n}\n/**\n * Octree\n */\n\n\nclass Octree extends OctreeNode {\n  /**\n   * Maximum subdivision depth\n   * @default 8\n   */\n\n  /**\n   * @param aabb The total AABB of the tree\n   */\n  constructor(aabb, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    super({\n      root: null,\n      aabb\n    });\n    this.maxDepth = typeof options.maxDepth !== 'undefined' ? options.maxDepth : 8;\n  }\n\n}\nconst halfDiagonal = new Vec3();\nconst tmpAABB = new AABB();\n\n/**\n * Trimesh.\n * @example\n *     // How to make a mesh with a single triangle\n *     const vertices = [\n *         0, 0, 0, // vertex 0\n *         1, 0, 0, // vertex 1\n *         0, 1, 0  // vertex 2\n *     ]\n *     const indices = [\n *         0, 1, 2  // triangle 0\n *     ]\n *     const trimeshShape = new CANNON.Trimesh(vertices, indices)\n */\nclass Trimesh extends Shape {\n  /**\n   * vertices\n   */\n\n  /**\n   * Array of integers, indicating which vertices each triangle consists of. The length of this array is thus 3 times the number of triangles.\n   */\n\n  /**\n   * The normals data.\n   */\n\n  /**\n   * The local AABB of the mesh.\n   */\n\n  /**\n   * References to vertex pairs, making up all unique edges in the trimesh.\n   */\n\n  /**\n   * Local scaling of the mesh. Use .setScale() to set it.\n   */\n\n  /**\n   * The indexed triangles. Use .updateTree() to update it.\n   */\n  constructor(vertices, indices) {\n    super({\n      type: Shape.types.TRIMESH\n    });\n    this.vertices = new Float32Array(vertices);\n    this.indices = new Int16Array(indices);\n    this.normals = new Float32Array(indices.length);\n    this.aabb = new AABB();\n    this.edges = null;\n    this.scale = new Vec3(1, 1, 1);\n    this.tree = new Octree();\n    this.updateEdges();\n    this.updateNormals();\n    this.updateAABB();\n    this.updateBoundingSphereRadius();\n    this.updateTree();\n  }\n  /**\n   * updateTree\n   */\n\n\n  updateTree() {\n    const tree = this.tree;\n    tree.reset();\n    tree.aabb.copy(this.aabb);\n    const scale = this.scale; // The local mesh AABB is scaled, but the octree AABB should be unscaled\n\n    tree.aabb.lowerBound.x *= 1 / scale.x;\n    tree.aabb.lowerBound.y *= 1 / scale.y;\n    tree.aabb.lowerBound.z *= 1 / scale.z;\n    tree.aabb.upperBound.x *= 1 / scale.x;\n    tree.aabb.upperBound.y *= 1 / scale.y;\n    tree.aabb.upperBound.z *= 1 / scale.z; // Insert all triangles\n\n    const triangleAABB = new AABB();\n    const a = new Vec3();\n    const b = new Vec3();\n    const c = new Vec3();\n    const points = [a, b, c];\n\n    for (let i = 0; i < this.indices.length / 3; i++) {\n      //this.getTriangleVertices(i, a, b, c);\n      // Get unscaled triangle verts\n      const i3 = i * 3;\n\n      this._getUnscaledVertex(this.indices[i3], a);\n\n      this._getUnscaledVertex(this.indices[i3 + 1], b);\n\n      this._getUnscaledVertex(this.indices[i3 + 2], c);\n\n      triangleAABB.setFromPoints(points);\n      tree.insert(triangleAABB, i);\n    }\n\n    tree.removeEmptyNodes();\n  }\n  /**\n   * Get triangles in a local AABB from the trimesh.\n   * @param result An array of integers, referencing the queried triangles.\n   */\n\n\n  getTrianglesInAABB(aabb, result) {\n    unscaledAABB.copy(aabb); // Scale it to local\n\n    const scale = this.scale;\n    const isx = scale.x;\n    const isy = scale.y;\n    const isz = scale.z;\n    const l = unscaledAABB.lowerBound;\n    const u = unscaledAABB.upperBound;\n    l.x /= isx;\n    l.y /= isy;\n    l.z /= isz;\n    u.x /= isx;\n    u.y /= isy;\n    u.z /= isz;\n    return this.tree.aabbQuery(unscaledAABB, result);\n  }\n  /**\n   * setScale\n   */\n\n\n  setScale(scale) {\n    const wasUniform = this.scale.x === this.scale.y && this.scale.y === this.scale.z;\n    const isUniform = scale.x === scale.y && scale.y === scale.z;\n\n    if (!(wasUniform && isUniform)) {\n      // Non-uniform scaling. Need to update normals.\n      this.updateNormals();\n    }\n\n    this.scale.copy(scale);\n    this.updateAABB();\n    this.updateBoundingSphereRadius();\n  }\n  /**\n   * Compute the normals of the faces. Will save in the `.normals` array.\n   */\n\n\n  updateNormals() {\n    const n = computeNormals_n; // Generate normals\n\n    const normals = this.normals;\n\n    for (let i = 0; i < this.indices.length / 3; i++) {\n      const i3 = i * 3;\n      const a = this.indices[i3];\n      const b = this.indices[i3 + 1];\n      const c = this.indices[i3 + 2];\n      this.getVertex(a, va);\n      this.getVertex(b, vb);\n      this.getVertex(c, vc);\n      Trimesh.computeNormal(vb, va, vc, n);\n      normals[i3] = n.x;\n      normals[i3 + 1] = n.y;\n      normals[i3 + 2] = n.z;\n    }\n  }\n  /**\n   * Update the `.edges` property\n   */\n\n\n  updateEdges() {\n    const edges = {};\n\n    const add = (a, b) => {\n      const key = a < b ? `${a}_${b}` : `${b}_${a}`;\n      edges[key] = true;\n    };\n\n    for (let i = 0; i < this.indices.length / 3; i++) {\n      const i3 = i * 3;\n      const a = this.indices[i3];\n      const b = this.indices[i3 + 1];\n      const c = this.indices[i3 + 2];\n      add(a, b);\n      add(b, c);\n      add(c, a);\n    }\n\n    const keys = Object.keys(edges);\n    this.edges = new Int16Array(keys.length * 2);\n\n    for (let i = 0; i < keys.length; i++) {\n      const indices = keys[i].split('_');\n      this.edges[2 * i] = parseInt(indices[0], 10);\n      this.edges[2 * i + 1] = parseInt(indices[1], 10);\n    }\n  }\n  /**\n   * Get an edge vertex\n   * @param firstOrSecond 0 or 1, depending on which one of the vertices you need.\n   * @param vertexStore Where to store the result\n   */\n\n\n  getEdgeVertex(edgeIndex, firstOrSecond, vertexStore) {\n    const vertexIndex = this.edges[edgeIndex * 2 + (firstOrSecond ? 1 : 0)];\n    this.getVertex(vertexIndex, vertexStore);\n  }\n  /**\n   * Get a vector along an edge.\n   */\n\n\n  getEdgeVector(edgeIndex, vectorStore) {\n    const va = getEdgeVector_va;\n    const vb = getEdgeVector_vb;\n    this.getEdgeVertex(edgeIndex, 0, va);\n    this.getEdgeVertex(edgeIndex, 1, vb);\n    vb.vsub(va, vectorStore);\n  }\n  /**\n   * Get face normal given 3 vertices\n   */\n\n\n  static computeNormal(va, vb, vc, target) {\n    vb.vsub(va, ab);\n    vc.vsub(vb, cb);\n    cb.cross(ab, target);\n\n    if (!target.isZero()) {\n      target.normalize();\n    }\n  }\n  /**\n   * Get vertex i.\n   * @return The \"out\" vector object\n   */\n\n\n  getVertex(i, out) {\n    const scale = this.scale;\n\n    this._getUnscaledVertex(i, out);\n\n    out.x *= scale.x;\n    out.y *= scale.y;\n    out.z *= scale.z;\n    return out;\n  }\n  /**\n   * Get raw vertex i\n   * @return The \"out\" vector object\n   */\n\n\n  _getUnscaledVertex(i, out) {\n    const i3 = i * 3;\n    const vertices = this.vertices;\n    return out.set(vertices[i3], vertices[i3 + 1], vertices[i3 + 2]);\n  }\n  /**\n   * Get a vertex from the trimesh,transformed by the given position and quaternion.\n   * @return The \"out\" vector object\n   */\n\n\n  getWorldVertex(i, pos, quat, out) {\n    this.getVertex(i, out);\n    Transform.pointToWorldFrame(pos, quat, out, out);\n    return out;\n  }\n  /**\n   * Get the three vertices for triangle i.\n   */\n\n\n  getTriangleVertices(i, a, b, c) {\n    const i3 = i * 3;\n    this.getVertex(this.indices[i3], a);\n    this.getVertex(this.indices[i3 + 1], b);\n    this.getVertex(this.indices[i3 + 2], c);\n  }\n  /**\n   * Compute the normal of triangle i.\n   * @return The \"target\" vector object\n   */\n\n\n  getNormal(i, target) {\n    const i3 = i * 3;\n    return target.set(this.normals[i3], this.normals[i3 + 1], this.normals[i3 + 2]);\n  }\n  /**\n   * @return The \"target\" vector object\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    // Approximate with box inertia\n    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n    this.computeLocalAABB(cli_aabb);\n    const x = cli_aabb.upperBound.x - cli_aabb.lowerBound.x;\n    const y = cli_aabb.upperBound.y - cli_aabb.lowerBound.y;\n    const z = cli_aabb.upperBound.z - cli_aabb.lowerBound.z;\n    return target.set(1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * z * 2 * z), 1.0 / 12.0 * mass * (2 * x * 2 * x + 2 * z * 2 * z), 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * x * 2 * x));\n  }\n  /**\n   * Compute the local AABB for the trimesh\n   */\n\n\n  computeLocalAABB(aabb) {\n    const l = aabb.lowerBound;\n    const u = aabb.upperBound;\n    const n = this.vertices.length;\n    this.vertices;\n    const v = computeLocalAABB_worldVert;\n    this.getVertex(0, v);\n    l.copy(v);\n    u.copy(v);\n\n    for (let i = 0; i !== n; i++) {\n      this.getVertex(i, v);\n\n      if (v.x < l.x) {\n        l.x = v.x;\n      } else if (v.x > u.x) {\n        u.x = v.x;\n      }\n\n      if (v.y < l.y) {\n        l.y = v.y;\n      } else if (v.y > u.y) {\n        u.y = v.y;\n      }\n\n      if (v.z < l.z) {\n        l.z = v.z;\n      } else if (v.z > u.z) {\n        u.z = v.z;\n      }\n    }\n  }\n  /**\n   * Update the `.aabb` property\n   */\n\n\n  updateAABB() {\n    this.computeLocalAABB(this.aabb);\n  }\n  /**\n   * Will update the `.boundingSphereRadius` property\n   */\n\n\n  updateBoundingSphereRadius() {\n    // Assume points are distributed with local (0,0,0) as center\n    let max2 = 0;\n    const vertices = this.vertices;\n    const v = new Vec3();\n\n    for (let i = 0, N = vertices.length / 3; i !== N; i++) {\n      this.getVertex(i, v);\n      const norm2 = v.lengthSquared();\n\n      if (norm2 > max2) {\n        max2 = norm2;\n      }\n    }\n\n    this.boundingSphereRadius = Math.sqrt(max2);\n  }\n  /**\n   * calculateWorldAABB\n   */\n\n\n  calculateWorldAABB(pos, quat, min, max) {\n    /*\n        const n = this.vertices.length / 3,\n            verts = this.vertices;\n        const minx,miny,minz,maxx,maxy,maxz;\n         const v = tempWorldVertex;\n        for(let i=0; i<n; i++){\n            this.getVertex(i, v);\n            quat.vmult(v, v);\n            pos.vadd(v, v);\n            if (v.x < minx || minx===undefined){\n                minx = v.x;\n            } else if(v.x > maxx || maxx===undefined){\n                maxx = v.x;\n            }\n             if (v.y < miny || miny===undefined){\n                miny = v.y;\n            } else if(v.y > maxy || maxy===undefined){\n                maxy = v.y;\n            }\n             if (v.z < minz || minz===undefined){\n                minz = v.z;\n            } else if(v.z > maxz || maxz===undefined){\n                maxz = v.z;\n            }\n        }\n        min.set(minx,miny,minz);\n        max.set(maxx,maxy,maxz);\n        */\n    // Faster approximation using local AABB\n    const frame = calculateWorldAABB_frame;\n    const result = calculateWorldAABB_aabb;\n    frame.position = pos;\n    frame.quaternion = quat;\n    this.aabb.toWorldFrame(frame, result);\n    min.copy(result.lowerBound);\n    max.copy(result.upperBound);\n  }\n  /**\n   * Get approximate volume\n   */\n\n\n  volume() {\n    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n  }\n  /**\n   * Create a Trimesh instance, shaped as a torus.\n   */\n\n\n  static createTorus(radius, tube, radialSegments, tubularSegments, arc) {\n    if (radius === void 0) {\n      radius = 1;\n    }\n\n    if (tube === void 0) {\n      tube = 0.5;\n    }\n\n    if (radialSegments === void 0) {\n      radialSegments = 8;\n    }\n\n    if (tubularSegments === void 0) {\n      tubularSegments = 6;\n    }\n\n    if (arc === void 0) {\n      arc = Math.PI * 2;\n    }\n\n    const vertices = [];\n    const indices = [];\n\n    for (let j = 0; j <= radialSegments; j++) {\n      for (let i = 0; i <= tubularSegments; i++) {\n        const u = i / tubularSegments * arc;\n        const v = j / radialSegments * Math.PI * 2;\n        const x = (radius + tube * Math.cos(v)) * Math.cos(u);\n        const y = (radius + tube * Math.cos(v)) * Math.sin(u);\n        const z = tube * Math.sin(v);\n        vertices.push(x, y, z);\n      }\n    }\n\n    for (let j = 1; j <= radialSegments; j++) {\n      for (let i = 1; i <= tubularSegments; i++) {\n        const a = (tubularSegments + 1) * j + i - 1;\n        const b = (tubularSegments + 1) * (j - 1) + i - 1;\n        const c = (tubularSegments + 1) * (j - 1) + i;\n        const d = (tubularSegments + 1) * j + i;\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n\n    return new Trimesh(vertices, indices);\n  }\n\n}\nconst computeNormals_n = new Vec3();\nconst unscaledAABB = new AABB();\nconst getEdgeVector_va = new Vec3();\nconst getEdgeVector_vb = new Vec3();\nconst cb = new Vec3();\nconst ab = new Vec3();\nconst va = new Vec3();\nconst vb = new Vec3();\nconst vc = new Vec3();\nconst cli_aabb = new AABB();\nconst computeLocalAABB_worldVert = new Vec3();\nconst calculateWorldAABB_frame = new Transform();\nconst calculateWorldAABB_aabb = new AABB();\n\n/**\n * Constraint equation solver base class.\n */\nclass Solver {\n  /**\n   * All equations to be solved\n   */\n\n  /**\n   * @todo remove useless constructor\n   */\n  constructor() {\n    this.equations = [];\n  }\n  /**\n   * Should be implemented in subclasses!\n   * @todo use abstract\n   * @return number of iterations performed\n   */\n\n\n  solve(dt, world) {\n    return (// Should return the number of iterations done!\n      0\n    );\n  }\n  /**\n   * Add an equation\n   */\n\n\n  addEquation(eq) {\n    if (eq.enabled && !eq.bi.isTrigger && !eq.bj.isTrigger) {\n      this.equations.push(eq);\n    }\n  }\n  /**\n   * Remove an equation\n   */\n\n\n  removeEquation(eq) {\n    const eqs = this.equations;\n    const i = eqs.indexOf(eq);\n\n    if (i !== -1) {\n      eqs.splice(i, 1);\n    }\n  }\n  /**\n   * Add all equations\n   */\n\n\n  removeAllEquations() {\n    this.equations.length = 0;\n  }\n\n}\n\n/**\n * Constraint equation Gauss-Seidel solver.\n * @todo The spook parameters should be specified for each constraint, not globally.\n * @see https://www8.cs.umu.se/kurser/5DV058/VT09/lectures/spooknotes.pdf\n */\nclass GSSolver extends Solver {\n  /**\n   * The number of solver iterations determines quality of the constraints in the world.\n   * The more iterations, the more correct simulation. More iterations need more computations though. If you have a large gravity force in your world, you will need more iterations.\n   */\n\n  /**\n   * When tolerance is reached, the system is assumed to be converged.\n   */\n\n  /**\n   * @todo remove useless constructor\n   */\n  constructor() {\n    super();\n    this.iterations = 10;\n    this.tolerance = 1e-7;\n  }\n  /**\n   * Solve\n   * @return number of iterations performed\n   */\n\n\n  solve(dt, world) {\n    let iter = 0;\n    const maxIter = this.iterations;\n    const tolSquared = this.tolerance * this.tolerance;\n    const equations = this.equations;\n    const Neq = equations.length;\n    const bodies = world.bodies;\n    const Nbodies = bodies.length;\n    const h = dt;\n    let B;\n    let invC;\n    let deltalambda;\n    let deltalambdaTot;\n    let GWlambda;\n    let lambdaj; // Update solve mass\n\n    if (Neq !== 0) {\n      for (let i = 0; i !== Nbodies; i++) {\n        bodies[i].updateSolveMassProperties();\n      }\n    } // Things that do not change during iteration can be computed once\n\n\n    const invCs = GSSolver_solve_invCs;\n    const Bs = GSSolver_solve_Bs;\n    const lambda = GSSolver_solve_lambda;\n    invCs.length = Neq;\n    Bs.length = Neq;\n    lambda.length = Neq;\n\n    for (let i = 0; i !== Neq; i++) {\n      const c = equations[i];\n      lambda[i] = 0.0;\n      Bs[i] = c.computeB(h);\n      invCs[i] = 1.0 / c.computeC();\n    }\n\n    if (Neq !== 0) {\n      // Reset vlambda\n      for (let i = 0; i !== Nbodies; i++) {\n        const b = bodies[i];\n        const vlambda = b.vlambda;\n        const wlambda = b.wlambda;\n        vlambda.set(0, 0, 0);\n        wlambda.set(0, 0, 0);\n      } // Iterate over equations\n\n\n      for (iter = 0; iter !== maxIter; iter++) {\n        // Accumulate the total error for each iteration.\n        deltalambdaTot = 0.0;\n\n        for (let j = 0; j !== Neq; j++) {\n          const c = equations[j]; // Compute iteration\n\n          B = Bs[j];\n          invC = invCs[j];\n          lambdaj = lambda[j];\n          GWlambda = c.computeGWlambda();\n          deltalambda = invC * (B - GWlambda - c.eps * lambdaj); // Clamp if we are not within the min/max interval\n\n          if (lambdaj + deltalambda < c.minForce) {\n            deltalambda = c.minForce - lambdaj;\n          } else if (lambdaj + deltalambda > c.maxForce) {\n            deltalambda = c.maxForce - lambdaj;\n          }\n\n          lambda[j] += deltalambda;\n          deltalambdaTot += deltalambda > 0.0 ? deltalambda : -deltalambda; // abs(deltalambda)\n\n          c.addToWlambda(deltalambda);\n        } // If the total error is small enough - stop iterate\n\n\n        if (deltalambdaTot * deltalambdaTot < tolSquared) {\n          break;\n        }\n      } // Add result to velocity\n\n\n      for (let i = 0; i !== Nbodies; i++) {\n        const b = bodies[i];\n        const v = b.velocity;\n        const w = b.angularVelocity;\n        b.vlambda.vmul(b.linearFactor, b.vlambda);\n        v.vadd(b.vlambda, v);\n        b.wlambda.vmul(b.angularFactor, b.wlambda);\n        w.vadd(b.wlambda, w);\n      } // Set the `.multiplier` property of each equation\n\n\n      let l = equations.length;\n      const invDt = 1 / h;\n\n      while (l--) {\n        equations[l].multiplier = lambda[l] * invDt;\n      }\n    }\n\n    return iter;\n  }\n\n} // Just temporary number holders that we want to reuse each iteration.\n\nconst GSSolver_solve_lambda = [];\nconst GSSolver_solve_invCs = [];\nconst GSSolver_solve_Bs = [];\n\n/**\n * Splits the equations into islands and solves them independently. Can improve performance.\n */\nclass SplitSolver extends Solver {\n  /**\n   * The number of solver iterations determines quality of the constraints in the world. The more iterations, the more correct simulation. More iterations need more computations though. If you have a large gravity force in your world, you will need more iterations.\n   */\n\n  /**\n   * When tolerance is reached, the system is assumed to be converged.\n   */\n\n  /** subsolver */\n  constructor(subsolver) {\n    super();\n    this.iterations = 10;\n    this.tolerance = 1e-7;\n    this.subsolver = subsolver;\n    this.nodes = [];\n    this.nodePool = []; // Create needed nodes, reuse if possible\n\n    while (this.nodePool.length < 128) {\n      this.nodePool.push(this.createNode());\n    }\n  }\n  /**\n   * createNode\n   */\n\n\n  createNode() {\n    return {\n      body: null,\n      children: [],\n      eqs: [],\n      visited: false\n    };\n  }\n  /**\n   * Solve the subsystems\n   * @return number of iterations performed\n   */\n\n\n  solve(dt, world) {\n    const nodes = SplitSolver_solve_nodes;\n    const nodePool = this.nodePool;\n    const bodies = world.bodies;\n    const equations = this.equations;\n    const Neq = equations.length;\n    const Nbodies = bodies.length;\n    const subsolver = this.subsolver; // Create needed nodes, reuse if possible\n\n    while (nodePool.length < Nbodies) {\n      nodePool.push(this.createNode());\n    }\n\n    nodes.length = Nbodies;\n\n    for (let i = 0; i < Nbodies; i++) {\n      nodes[i] = nodePool[i];\n    } // Reset node values\n\n\n    for (let i = 0; i !== Nbodies; i++) {\n      const node = nodes[i];\n      node.body = bodies[i];\n      node.children.length = 0;\n      node.eqs.length = 0;\n      node.visited = false;\n    }\n\n    for (let k = 0; k !== Neq; k++) {\n      const eq = equations[k];\n      const i = bodies.indexOf(eq.bi);\n      const j = bodies.indexOf(eq.bj);\n      const ni = nodes[i];\n      const nj = nodes[j];\n      ni.children.push(nj);\n      ni.eqs.push(eq);\n      nj.children.push(ni);\n      nj.eqs.push(eq);\n    }\n\n    let child;\n    let n = 0;\n    let eqs = SplitSolver_solve_eqs;\n    subsolver.tolerance = this.tolerance;\n    subsolver.iterations = this.iterations;\n    const dummyWorld = SplitSolver_solve_dummyWorld;\n\n    while (child = getUnvisitedNode(nodes)) {\n      eqs.length = 0;\n      dummyWorld.bodies.length = 0;\n      bfs(child, visitFunc, dummyWorld.bodies, eqs);\n      const Neqs = eqs.length;\n      eqs = eqs.sort(sortById);\n\n      for (let i = 0; i !== Neqs; i++) {\n        subsolver.addEquation(eqs[i]);\n      }\n\n      subsolver.solve(dt, dummyWorld);\n      subsolver.removeAllEquations();\n      n++;\n    }\n\n    return n;\n  }\n\n} // Returns the number of subsystems\n\nconst SplitSolver_solve_nodes = []; // All allocated node objects\n\nconst SplitSolver_solve_eqs = []; // Temp array\n\nconst SplitSolver_solve_dummyWorld = {\n  bodies: []\n}; // Temp object\n\nconst STATIC = Body.STATIC;\n\nfunction getUnvisitedNode(nodes) {\n  const Nnodes = nodes.length;\n\n  for (let i = 0; i !== Nnodes; i++) {\n    const node = nodes[i];\n\n    if (!node.visited && !(node.body.type & STATIC)) {\n      return node;\n    }\n  }\n\n  return false;\n}\n\nconst queue = [];\n\nfunction bfs(root, visitFunc, bds, eqs) {\n  queue.push(root);\n  root.visited = true;\n  visitFunc(root, bds, eqs);\n\n  while (queue.length) {\n    const node = queue.pop(); // Loop over unvisited child nodes\n\n    let child;\n\n    while (child = getUnvisitedNode(node.children)) {\n      child.visited = true;\n      visitFunc(child, bds, eqs);\n      queue.push(child);\n    }\n  }\n}\n\nfunction visitFunc(node, bds, eqs) {\n  bds.push(node.body);\n  const Neqs = node.eqs.length;\n\n  for (let i = 0; i !== Neqs; i++) {\n    const eq = node.eqs[i];\n\n    if (!eqs.includes(eq)) {\n      eqs.push(eq);\n    }\n  }\n}\n\nfunction sortById(a, b) {\n  return b.id - a.id;\n}\n\n/**\n * For pooling objects that can be reused.\n */\nclass Pool {\n  constructor() {\n    this.objects = [];\n    this.type = Object;\n  }\n\n  /**\n   * Release an object after use\n   */\n  release() {\n    const Nargs = arguments.length;\n\n    for (let i = 0; i !== Nargs; i++) {\n      this.objects.push(i < 0 || arguments.length <= i ? undefined : arguments[i]);\n    }\n\n    return this;\n  }\n  /**\n   * Get an object\n   */\n\n\n  get() {\n    if (this.objects.length === 0) {\n      return this.constructObject();\n    } else {\n      return this.objects.pop();\n    }\n  }\n  /**\n   * Construct an object. Should be implemented in each subclass.\n   */\n\n\n  constructObject() {\n    throw new Error('constructObject() not implemented in this Pool subclass yet!');\n  }\n  /**\n   * @return Self, for chaining\n   */\n\n\n  resize(size) {\n    const objects = this.objects;\n\n    while (objects.length > size) {\n      objects.pop();\n    }\n\n    while (objects.length < size) {\n      objects.push(this.constructObject());\n    }\n\n    return this;\n  }\n\n}\n\n/**\n * Vec3Pool\n */\n\nclass Vec3Pool extends Pool {\n  constructor() {\n    super(...arguments);\n    this.type = Vec3;\n  }\n\n  /**\n   * Construct a vector\n   */\n  constructObject() {\n    return new Vec3();\n  }\n\n}\n\n// Naming rule: based of the order in SHAPE_TYPES,\n// the first part of the method is formed by the\n// shape type that comes before, in the second part\n// there is the shape type that comes after in the SHAPE_TYPES list\nconst COLLISION_TYPES = {\n  sphereSphere: Shape.types.SPHERE,\n  spherePlane: Shape.types.SPHERE | Shape.types.PLANE,\n  boxBox: Shape.types.BOX | Shape.types.BOX,\n  sphereBox: Shape.types.SPHERE | Shape.types.BOX,\n  planeBox: Shape.types.PLANE | Shape.types.BOX,\n  convexConvex: Shape.types.CONVEXPOLYHEDRON,\n  sphereConvex: Shape.types.SPHERE | Shape.types.CONVEXPOLYHEDRON,\n  planeConvex: Shape.types.PLANE | Shape.types.CONVEXPOLYHEDRON,\n  boxConvex: Shape.types.BOX | Shape.types.CONVEXPOLYHEDRON,\n  sphereHeightfield: Shape.types.SPHERE | Shape.types.HEIGHTFIELD,\n  boxHeightfield: Shape.types.BOX | Shape.types.HEIGHTFIELD,\n  convexHeightfield: Shape.types.CONVEXPOLYHEDRON | Shape.types.HEIGHTFIELD,\n  sphereParticle: Shape.types.PARTICLE | Shape.types.SPHERE,\n  planeParticle: Shape.types.PLANE | Shape.types.PARTICLE,\n  boxParticle: Shape.types.BOX | Shape.types.PARTICLE,\n  convexParticle: Shape.types.PARTICLE | Shape.types.CONVEXPOLYHEDRON,\n  cylinderCylinder: Shape.types.CYLINDER,\n  sphereCylinder: Shape.types.SPHERE | Shape.types.CYLINDER,\n  planeCylinder: Shape.types.PLANE | Shape.types.CYLINDER,\n  boxCylinder: Shape.types.BOX | Shape.types.CYLINDER,\n  convexCylinder: Shape.types.CONVEXPOLYHEDRON | Shape.types.CYLINDER,\n  heightfieldCylinder: Shape.types.HEIGHTFIELD | Shape.types.CYLINDER,\n  particleCylinder: Shape.types.PARTICLE | Shape.types.CYLINDER,\n  sphereTrimesh: Shape.types.SPHERE | Shape.types.TRIMESH,\n  planeTrimesh: Shape.types.PLANE | Shape.types.TRIMESH\n};\n\n/**\n * Helper class for the World. Generates ContactEquations.\n * @todo Sphere-ConvexPolyhedron contacts\n * @todo Contact reduction\n * @todo should move methods to prototype\n */\nclass Narrowphase {\n  /**\n   * Internal storage of pooled contact points.\n   */\n\n  /**\n   * Pooled vectors.\n   */\n  get [COLLISION_TYPES.sphereSphere]() {\n    return this.sphereSphere;\n  }\n\n  get [COLLISION_TYPES.spherePlane]() {\n    return this.spherePlane;\n  }\n\n  get [COLLISION_TYPES.boxBox]() {\n    return this.boxBox;\n  }\n\n  get [COLLISION_TYPES.sphereBox]() {\n    return this.sphereBox;\n  }\n\n  get [COLLISION_TYPES.planeBox]() {\n    return this.planeBox;\n  }\n\n  get [COLLISION_TYPES.convexConvex]() {\n    return this.convexConvex;\n  }\n\n  get [COLLISION_TYPES.sphereConvex]() {\n    return this.sphereConvex;\n  }\n\n  get [COLLISION_TYPES.planeConvex]() {\n    return this.planeConvex;\n  }\n\n  get [COLLISION_TYPES.boxConvex]() {\n    return this.boxConvex;\n  }\n\n  get [COLLISION_TYPES.sphereHeightfield]() {\n    return this.sphereHeightfield;\n  }\n\n  get [COLLISION_TYPES.boxHeightfield]() {\n    return this.boxHeightfield;\n  }\n\n  get [COLLISION_TYPES.convexHeightfield]() {\n    return this.convexHeightfield;\n  }\n\n  get [COLLISION_TYPES.sphereParticle]() {\n    return this.sphereParticle;\n  }\n\n  get [COLLISION_TYPES.planeParticle]() {\n    return this.planeParticle;\n  }\n\n  get [COLLISION_TYPES.boxParticle]() {\n    return this.boxParticle;\n  }\n\n  get [COLLISION_TYPES.convexParticle]() {\n    return this.convexParticle;\n  }\n\n  get [COLLISION_TYPES.cylinderCylinder]() {\n    return this.convexConvex;\n  }\n\n  get [COLLISION_TYPES.sphereCylinder]() {\n    return this.sphereConvex;\n  }\n\n  get [COLLISION_TYPES.planeCylinder]() {\n    return this.planeConvex;\n  }\n\n  get [COLLISION_TYPES.boxCylinder]() {\n    return this.boxConvex;\n  }\n\n  get [COLLISION_TYPES.convexCylinder]() {\n    return this.convexConvex;\n  }\n\n  get [COLLISION_TYPES.heightfieldCylinder]() {\n    return this.heightfieldCylinder;\n  }\n\n  get [COLLISION_TYPES.particleCylinder]() {\n    return this.particleCylinder;\n  }\n\n  get [COLLISION_TYPES.sphereTrimesh]() {\n    return this.sphereTrimesh;\n  }\n\n  get [COLLISION_TYPES.planeTrimesh]() {\n    return this.planeTrimesh;\n  } // get [COLLISION_TYPES.convexTrimesh]() {\n  //   return this.convexTrimesh\n  // }\n\n\n  constructor(world) {\n    this.contactPointPool = [];\n    this.frictionEquationPool = [];\n    this.result = [];\n    this.frictionResult = [];\n    this.v3pool = new Vec3Pool();\n    this.world = world;\n    this.currentContactMaterial = world.defaultContactMaterial;\n    this.enableFrictionReduction = false;\n  }\n  /**\n   * Make a contact object, by using the internal pool or creating a new one.\n   */\n\n\n  createContactEquation(bi, bj, si, sj, overrideShapeA, overrideShapeB) {\n    let c;\n\n    if (this.contactPointPool.length) {\n      c = this.contactPointPool.pop();\n      c.bi = bi;\n      c.bj = bj;\n    } else {\n      c = new ContactEquation(bi, bj);\n    }\n\n    c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;\n    const cm = this.currentContactMaterial;\n    c.restitution = cm.restitution;\n    c.setSpookParams(cm.contactEquationStiffness, cm.contactEquationRelaxation, this.world.dt);\n    const matA = si.material || bi.material;\n    const matB = sj.material || bj.material;\n\n    if (matA && matB && matA.restitution >= 0 && matB.restitution >= 0) {\n      c.restitution = matA.restitution * matB.restitution;\n    }\n\n    c.si = overrideShapeA || si;\n    c.sj = overrideShapeB || sj;\n    return c;\n  }\n\n  createFrictionEquationsFromContact(contactEquation, outArray) {\n    const bodyA = contactEquation.bi;\n    const bodyB = contactEquation.bj;\n    const shapeA = contactEquation.si;\n    const shapeB = contactEquation.sj;\n    const world = this.world;\n    const cm = this.currentContactMaterial; // If friction or restitution were specified in the material, use them\n\n    let friction = cm.friction;\n    const matA = shapeA.material || bodyA.material;\n    const matB = shapeB.material || bodyB.material;\n\n    if (matA && matB && matA.friction >= 0 && matB.friction >= 0) {\n      friction = matA.friction * matB.friction;\n    }\n\n    if (friction > 0) {\n      // Create 2 tangent equations\n      // Users may provide a force different from global gravity to use when computing contact friction.\n      const mug = friction * (world.frictionGravity || world.gravity).length();\n      let reducedMass = bodyA.invMass + bodyB.invMass;\n\n      if (reducedMass > 0) {\n        reducedMass = 1 / reducedMass;\n      }\n\n      const pool = this.frictionEquationPool;\n      const c1 = pool.length ? pool.pop() : new FrictionEquation(bodyA, bodyB, mug * reducedMass);\n      const c2 = pool.length ? pool.pop() : new FrictionEquation(bodyA, bodyB, mug * reducedMass);\n      c1.bi = c2.bi = bodyA;\n      c1.bj = c2.bj = bodyB;\n      c1.minForce = c2.minForce = -mug * reducedMass;\n      c1.maxForce = c2.maxForce = mug * reducedMass; // Copy over the relative vectors\n\n      c1.ri.copy(contactEquation.ri);\n      c1.rj.copy(contactEquation.rj);\n      c2.ri.copy(contactEquation.ri);\n      c2.rj.copy(contactEquation.rj); // Construct tangents\n\n      contactEquation.ni.tangents(c1.t, c2.t); // Set spook params\n\n      c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);\n      c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);\n      c1.enabled = c2.enabled = contactEquation.enabled;\n      outArray.push(c1, c2);\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Take the average N latest contact point on the plane.\n   */\n\n\n  createFrictionFromAverage(numContacts) {\n    // The last contactEquation\n    let c = this.result[this.result.length - 1]; // Create the result: two \"average\" friction equations\n\n    if (!this.createFrictionEquationsFromContact(c, this.frictionResult) || numContacts === 1) {\n      return;\n    }\n\n    const f1 = this.frictionResult[this.frictionResult.length - 2];\n    const f2 = this.frictionResult[this.frictionResult.length - 1];\n    averageNormal.setZero();\n    averageContactPointA.setZero();\n    averageContactPointB.setZero();\n    const bodyA = c.bi;\n    c.bj;\n\n    for (let i = 0; i !== numContacts; i++) {\n      c = this.result[this.result.length - 1 - i];\n\n      if (c.bi !== bodyA) {\n        averageNormal.vadd(c.ni, averageNormal);\n        averageContactPointA.vadd(c.ri, averageContactPointA);\n        averageContactPointB.vadd(c.rj, averageContactPointB);\n      } else {\n        averageNormal.vsub(c.ni, averageNormal);\n        averageContactPointA.vadd(c.rj, averageContactPointA);\n        averageContactPointB.vadd(c.ri, averageContactPointB);\n      }\n    }\n\n    const invNumContacts = 1 / numContacts;\n    averageContactPointA.scale(invNumContacts, f1.ri);\n    averageContactPointB.scale(invNumContacts, f1.rj);\n    f2.ri.copy(f1.ri); // Should be the same\n\n    f2.rj.copy(f1.rj);\n    averageNormal.normalize();\n    averageNormal.tangents(f1.t, f2.t); // return eq;\n  }\n  /**\n   * Generate all contacts between a list of body pairs\n   * @param p1 Array of body indices\n   * @param p2 Array of body indices\n   * @param result Array to store generated contacts\n   * @param oldcontacts Optional. Array of reusable contact objects\n   */\n\n\n  getContacts(p1, p2, world, result, oldcontacts, frictionResult, frictionPool) {\n    // Save old contact objects\n    this.contactPointPool = oldcontacts;\n    this.frictionEquationPool = frictionPool;\n    this.result = result;\n    this.frictionResult = frictionResult;\n    const qi = tmpQuat1;\n    const qj = tmpQuat2;\n    const xi = tmpVec1;\n    const xj = tmpVec2;\n\n    for (let k = 0, N = p1.length; k !== N; k++) {\n      // Get current collision bodies\n      const bi = p1[k];\n      const bj = p2[k]; // Get contact material\n\n      let bodyContactMaterial = null;\n\n      if (bi.material && bj.material) {\n        bodyContactMaterial = world.getContactMaterial(bi.material, bj.material) || null;\n      }\n\n      const justTest = bi.type & Body.KINEMATIC && bj.type & Body.STATIC || bi.type & Body.STATIC && bj.type & Body.KINEMATIC || bi.type & Body.KINEMATIC && bj.type & Body.KINEMATIC;\n\n      for (let i = 0; i < bi.shapes.length; i++) {\n        bi.quaternion.mult(bi.shapeOrientations[i], qi);\n        bi.quaternion.vmult(bi.shapeOffsets[i], xi);\n        xi.vadd(bi.position, xi);\n        const si = bi.shapes[i];\n\n        for (let j = 0; j < bj.shapes.length; j++) {\n          // Compute world transform of shapes\n          bj.quaternion.mult(bj.shapeOrientations[j], qj);\n          bj.quaternion.vmult(bj.shapeOffsets[j], xj);\n          xj.vadd(bj.position, xj);\n          const sj = bj.shapes[j];\n\n          if (!(si.collisionFilterMask & sj.collisionFilterGroup && sj.collisionFilterMask & si.collisionFilterGroup)) {\n            continue;\n          }\n\n          if (xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius) {\n            continue;\n          } // Get collision material\n\n\n          let shapeContactMaterial = null;\n\n          if (si.material && sj.material) {\n            shapeContactMaterial = world.getContactMaterial(si.material, sj.material) || null;\n          }\n\n          this.currentContactMaterial = shapeContactMaterial || bodyContactMaterial || world.defaultContactMaterial; // Get contacts\n\n          const resolverIndex = si.type | sj.type;\n          const resolver = this[resolverIndex];\n\n          if (resolver) {\n            let retval = false; // TO DO: investigate why sphereParticle and convexParticle\n            // resolvers expect si and sj shapes to be in reverse order\n            // (i.e. larger integer value type first instead of smaller first)\n\n            if (si.type < sj.type) {\n              retval = resolver.call(this, si, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n            } else {\n              retval = resolver.call(this, sj, si, xj, xi, qj, qi, bj, bi, si, sj, justTest);\n            }\n\n            if (retval && justTest) {\n              // Register overlap\n              world.shapeOverlapKeeper.set(si.id, sj.id);\n              world.bodyOverlapKeeper.set(bi.id, bj.id);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  sphereSphere(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    if (justTest) {\n      return xi.distanceSquared(xj) < (si.radius + sj.radius) ** 2;\n    } // We will have only one contact in this case\n\n\n    const contactEq = this.createContactEquation(bi, bj, si, sj, rsi, rsj); // Contact normal\n\n    xj.vsub(xi, contactEq.ni);\n    contactEq.ni.normalize(); // Contact point locations\n\n    contactEq.ri.copy(contactEq.ni);\n    contactEq.rj.copy(contactEq.ni);\n    contactEq.ri.scale(si.radius, contactEq.ri);\n    contactEq.rj.scale(-sj.radius, contactEq.rj);\n    contactEq.ri.vadd(xi, contactEq.ri);\n    contactEq.ri.vsub(bi.position, contactEq.ri);\n    contactEq.rj.vadd(xj, contactEq.rj);\n    contactEq.rj.vsub(bj.position, contactEq.rj);\n    this.result.push(contactEq);\n    this.createFrictionEquationsFromContact(contactEq, this.frictionResult);\n  }\n\n  spherePlane(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    // We will have one contact in this case\n    const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj); // Contact normal\n\n    r.ni.set(0, 0, 1);\n    qj.vmult(r.ni, r.ni);\n    r.ni.negate(r.ni); // body i is the sphere, flip normal\n\n    r.ni.normalize(); // Needed?\n    // Vector from sphere center to contact point\n\n    r.ni.scale(si.radius, r.ri); // Project down sphere on plane\n\n    xi.vsub(xj, point_on_plane_to_sphere);\n    r.ni.scale(r.ni.dot(point_on_plane_to_sphere), plane_to_sphere_ortho);\n    point_on_plane_to_sphere.vsub(plane_to_sphere_ortho, r.rj); // The sphere position projected to plane\n\n    if (-point_on_plane_to_sphere.dot(r.ni) <= si.radius) {\n      if (justTest) {\n        return true;\n      } // Make it relative to the body\n\n\n      const ri = r.ri;\n      const rj = r.rj;\n      ri.vadd(xi, ri);\n      ri.vsub(bi.position, ri);\n      rj.vadd(xj, rj);\n      rj.vsub(bj.position, rj);\n      this.result.push(r);\n      this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n  }\n\n  boxBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    si.convexPolyhedronRepresentation.material = si.material;\n    sj.convexPolyhedronRepresentation.material = sj.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;\n    return this.convexConvex(si.convexPolyhedronRepresentation, sj.convexPolyhedronRepresentation, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  sphereBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    const v3pool = this.v3pool; // we refer to the box as body j\n\n    const sides = sphereBox_sides;\n    xi.vsub(xj, box_to_sphere);\n    sj.getSideNormals(sides, qj);\n    const R = si.radius;\n\n    let found = false; // Store the resulting side penetration info\n\n    const side_ns = sphereBox_side_ns;\n    const side_ns1 = sphereBox_side_ns1;\n    const side_ns2 = sphereBox_side_ns2;\n    let side_h = null;\n    let side_penetrations = 0;\n    let side_dot1 = 0;\n    let side_dot2 = 0;\n    let side_distance = null;\n\n    for (let idx = 0, nsides = sides.length; idx !== nsides && found === false; idx++) {\n      // Get the plane side normal (ns)\n      const ns = sphereBox_ns;\n      ns.copy(sides[idx]);\n      const h = ns.length();\n      ns.normalize(); // The normal/distance dot product tells which side of the plane we are\n\n      const dot = box_to_sphere.dot(ns);\n\n      if (dot < h + R && dot > 0) {\n        // Intersects plane. Now check the other two dimensions\n        const ns1 = sphereBox_ns1;\n        const ns2 = sphereBox_ns2;\n        ns1.copy(sides[(idx + 1) % 3]);\n        ns2.copy(sides[(idx + 2) % 3]);\n        const h1 = ns1.length();\n        const h2 = ns2.length();\n        ns1.normalize();\n        ns2.normalize();\n        const dot1 = box_to_sphere.dot(ns1);\n        const dot2 = box_to_sphere.dot(ns2);\n\n        if (dot1 < h1 && dot1 > -h1 && dot2 < h2 && dot2 > -h2) {\n          const dist = Math.abs(dot - h - R);\n\n          if (side_distance === null || dist < side_distance) {\n            side_distance = dist;\n            side_dot1 = dot1;\n            side_dot2 = dot2;\n            side_h = h;\n            side_ns.copy(ns);\n            side_ns1.copy(ns1);\n            side_ns2.copy(ns2);\n            side_penetrations++;\n\n            if (justTest) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    if (side_penetrations) {\n      found = true;\n      const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n      side_ns.scale(-R, r.ri); // Sphere r\n\n      r.ni.copy(side_ns);\n      r.ni.negate(r.ni); // Normal should be out of sphere\n\n      side_ns.scale(side_h, side_ns);\n      side_ns1.scale(side_dot1, side_ns1);\n      side_ns.vadd(side_ns1, side_ns);\n      side_ns2.scale(side_dot2, side_ns2);\n      side_ns.vadd(side_ns2, r.rj); // Make relative to bodies\n\n      r.ri.vadd(xi, r.ri);\n      r.ri.vsub(bi.position, r.ri);\n      r.rj.vadd(xj, r.rj);\n      r.rj.vsub(bj.position, r.rj);\n      this.result.push(r);\n      this.createFrictionEquationsFromContact(r, this.frictionResult);\n    } // Check corners\n\n\n    let rj = v3pool.get();\n    const sphere_to_corner = sphereBox_sphere_to_corner;\n\n    for (let j = 0; j !== 2 && !found; j++) {\n      for (let k = 0; k !== 2 && !found; k++) {\n        for (let l = 0; l !== 2 && !found; l++) {\n          rj.set(0, 0, 0);\n\n          if (j) {\n            rj.vadd(sides[0], rj);\n          } else {\n            rj.vsub(sides[0], rj);\n          }\n\n          if (k) {\n            rj.vadd(sides[1], rj);\n          } else {\n            rj.vsub(sides[1], rj);\n          }\n\n          if (l) {\n            rj.vadd(sides[2], rj);\n          } else {\n            rj.vsub(sides[2], rj);\n          } // World position of corner\n\n\n          xj.vadd(rj, sphere_to_corner);\n          sphere_to_corner.vsub(xi, sphere_to_corner);\n\n          if (sphere_to_corner.lengthSquared() < R * R) {\n            if (justTest) {\n              return true;\n            }\n\n            found = true;\n            const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n            r.ri.copy(sphere_to_corner);\n            r.ri.normalize();\n            r.ni.copy(r.ri);\n            r.ri.scale(R, r.ri);\n            r.rj.copy(rj); // Make relative to bodies\n\n            r.ri.vadd(xi, r.ri);\n            r.ri.vsub(bi.position, r.ri);\n            r.rj.vadd(xj, r.rj);\n            r.rj.vsub(bj.position, r.rj);\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n          }\n        }\n      }\n    }\n\n    v3pool.release(rj);\n    rj = null; // Check edges\n\n    const edgeTangent = v3pool.get();\n    const edgeCenter = v3pool.get();\n    const r = v3pool.get(); // r = edge center to sphere center\n\n    const orthogonal = v3pool.get();\n    const dist = v3pool.get();\n    const Nsides = sides.length;\n\n    for (let j = 0; j !== Nsides && !found; j++) {\n      for (let k = 0; k !== Nsides && !found; k++) {\n        if (j % 3 !== k % 3) {\n          // Get edge tangent\n          sides[k].cross(sides[j], edgeTangent);\n          edgeTangent.normalize();\n          sides[j].vadd(sides[k], edgeCenter);\n          r.copy(xi);\n          r.vsub(edgeCenter, r);\n          r.vsub(xj, r);\n          const orthonorm = r.dot(edgeTangent); // distance from edge center to sphere center in the tangent direction\n\n          edgeTangent.scale(orthonorm, orthogonal); // Vector from edge center to sphere center in the tangent direction\n          // Find the third side orthogonal to this one\n\n          let l = 0;\n\n          while (l === j % 3 || l === k % 3) {\n            l++;\n          } // vec from edge center to sphere projected to the plane orthogonal to the edge tangent\n\n\n          dist.copy(xi);\n          dist.vsub(orthogonal, dist);\n          dist.vsub(edgeCenter, dist);\n          dist.vsub(xj, dist); // Distances in tangent direction and distance in the plane orthogonal to it\n\n          const tdist = Math.abs(orthonorm);\n          const ndist = dist.length();\n\n          if (tdist < sides[l].length() && ndist < R) {\n            if (justTest) {\n              return true;\n            }\n\n            found = true;\n            const res = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n            edgeCenter.vadd(orthogonal, res.rj); // box rj\n\n            res.rj.copy(res.rj);\n            dist.negate(res.ni);\n            res.ni.normalize();\n            res.ri.copy(res.rj);\n            res.ri.vadd(xj, res.ri);\n            res.ri.vsub(xi, res.ri);\n            res.ri.normalize();\n            res.ri.scale(R, res.ri); // Make relative to bodies\n\n            res.ri.vadd(xi, res.ri);\n            res.ri.vsub(bi.position, res.ri);\n            res.rj.vadd(xj, res.rj);\n            res.rj.vsub(bj.position, res.rj);\n            this.result.push(res);\n            this.createFrictionEquationsFromContact(res, this.frictionResult);\n          }\n        }\n      }\n    }\n\n    v3pool.release(edgeTangent, edgeCenter, r, orthogonal, dist);\n  }\n\n  planeBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    sj.convexPolyhedronRepresentation.material = sj.material;\n    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;\n    sj.convexPolyhedronRepresentation.id = sj.id;\n    return this.planeConvex(si, sj.convexPolyhedronRepresentation, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  convexConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest, faceListA, faceListB) {\n    const sepAxis = convexConvex_sepAxis;\n\n    if (xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius) {\n      return;\n    }\n\n    if (si.findSeparatingAxis(sj, xi, qi, xj, qj, sepAxis, faceListA, faceListB)) {\n      const res = [];\n      const q = convexConvex_q;\n      si.clipAgainstHull(xi, qi, sj, xj, qj, sepAxis, -100, 100, res);\n      let numContacts = 0;\n\n      for (let j = 0; j !== res.length; j++) {\n        if (justTest) {\n          return true;\n        }\n\n        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n        const ri = r.ri;\n        const rj = r.rj;\n        sepAxis.negate(r.ni);\n        res[j].normal.negate(q);\n        q.scale(res[j].depth, q);\n        res[j].point.vadd(q, ri);\n        rj.copy(res[j].point); // Contact points are in world coordinates. Transform back to relative\n\n        ri.vsub(xi, ri);\n        rj.vsub(xj, rj); // Make relative to bodies\n\n        ri.vadd(xi, ri);\n        ri.vsub(bi.position, ri);\n        rj.vadd(xj, rj);\n        rj.vsub(bj.position, rj);\n        this.result.push(r);\n        numContacts++;\n\n        if (!this.enableFrictionReduction) {\n          this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n      }\n\n      if (this.enableFrictionReduction && numContacts) {\n        this.createFrictionFromAverage(numContacts);\n      }\n    }\n  }\n\n  sphereConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    const v3pool = this.v3pool;\n    xi.vsub(xj, convex_to_sphere);\n    const normals = sj.faceNormals;\n    const faces = sj.faces;\n    const verts = sj.vertices;\n    const R = si.radius;\n    //     return;\n    // }\n\n    let found = false; // Check corners\n\n    for (let i = 0; i !== verts.length; i++) {\n      const v = verts[i]; // World position of corner\n\n      const worldCorner = sphereConvex_worldCorner;\n      qj.vmult(v, worldCorner);\n      xj.vadd(worldCorner, worldCorner);\n      const sphere_to_corner = sphereConvex_sphereToCorner;\n      worldCorner.vsub(xi, sphere_to_corner);\n\n      if (sphere_to_corner.lengthSquared() < R * R) {\n        if (justTest) {\n          return true;\n        }\n\n        found = true;\n        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n        r.ri.copy(sphere_to_corner);\n        r.ri.normalize();\n        r.ni.copy(r.ri);\n        r.ri.scale(R, r.ri);\n        worldCorner.vsub(xj, r.rj); // Should be relative to the body.\n\n        r.ri.vadd(xi, r.ri);\n        r.ri.vsub(bi.position, r.ri); // Should be relative to the body.\n\n        r.rj.vadd(xj, r.rj);\n        r.rj.vsub(bj.position, r.rj);\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n        return;\n      }\n    } // Check side (plane) intersections\n\n\n    for (let i = 0, nfaces = faces.length; i !== nfaces && found === false; i++) {\n      const normal = normals[i];\n      const face = faces[i]; // Get world-transformed normal of the face\n\n      const worldNormal = sphereConvex_worldNormal;\n      qj.vmult(normal, worldNormal); // Get a world vertex from the face\n\n      const worldPoint = sphereConvex_worldPoint;\n      qj.vmult(verts[face[0]], worldPoint);\n      worldPoint.vadd(xj, worldPoint); // Get a point on the sphere, closest to the face normal\n\n      const worldSpherePointClosestToPlane = sphereConvex_worldSpherePointClosestToPlane;\n      worldNormal.scale(-R, worldSpherePointClosestToPlane);\n      xi.vadd(worldSpherePointClosestToPlane, worldSpherePointClosestToPlane); // Vector from a face point to the closest point on the sphere\n\n      const penetrationVec = sphereConvex_penetrationVec;\n      worldSpherePointClosestToPlane.vsub(worldPoint, penetrationVec); // The penetration. Negative value means overlap.\n\n      const penetration = penetrationVec.dot(worldNormal);\n      const worldPointToSphere = sphereConvex_sphereToWorldPoint;\n      xi.vsub(worldPoint, worldPointToSphere);\n\n      if (penetration < 0 && worldPointToSphere.dot(worldNormal) > 0) {\n        // Intersects plane. Now check if the sphere is inside the face polygon\n        const faceVerts = []; // Face vertices, in world coords\n\n        for (let j = 0, Nverts = face.length; j !== Nverts; j++) {\n          const worldVertex = v3pool.get();\n          qj.vmult(verts[face[j]], worldVertex);\n          xj.vadd(worldVertex, worldVertex);\n          faceVerts.push(worldVertex);\n        }\n\n        if (pointInPolygon(faceVerts, worldNormal, xi)) {\n          // Is the sphere center in the face polygon?\n          if (justTest) {\n            return true;\n          }\n\n          found = true;\n          const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n          worldNormal.scale(-R, r.ri); // Contact offset, from sphere center to contact\n\n          worldNormal.negate(r.ni); // Normal pointing out of sphere\n\n          const penetrationVec2 = v3pool.get();\n          worldNormal.scale(-penetration, penetrationVec2);\n          const penetrationSpherePoint = v3pool.get();\n          worldNormal.scale(-R, penetrationSpherePoint); //xi.vsub(xj).vadd(penetrationSpherePoint).vadd(penetrationVec2 , r.rj);\n\n          xi.vsub(xj, r.rj);\n          r.rj.vadd(penetrationSpherePoint, r.rj);\n          r.rj.vadd(penetrationVec2, r.rj); // Should be relative to the body.\n\n          r.rj.vadd(xj, r.rj);\n          r.rj.vsub(bj.position, r.rj); // Should be relative to the body.\n\n          r.ri.vadd(xi, r.ri);\n          r.ri.vsub(bi.position, r.ri);\n          v3pool.release(penetrationVec2);\n          v3pool.release(penetrationSpherePoint);\n          this.result.push(r);\n          this.createFrictionEquationsFromContact(r, this.frictionResult); // Release world vertices\n\n          for (let j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {\n            v3pool.release(faceVerts[j]);\n          }\n\n          return; // We only expect *one* face contact\n        } else {\n          // Edge?\n          for (let j = 0; j !== face.length; j++) {\n            // Get two world transformed vertices\n            const v1 = v3pool.get();\n            const v2 = v3pool.get();\n            qj.vmult(verts[face[(j + 1) % face.length]], v1);\n            qj.vmult(verts[face[(j + 2) % face.length]], v2);\n            xj.vadd(v1, v1);\n            xj.vadd(v2, v2); // Construct edge vector\n\n            const edge = sphereConvex_edge;\n            v2.vsub(v1, edge); // Construct the same vector, but normalized\n\n            const edgeUnit = sphereConvex_edgeUnit;\n            edge.unit(edgeUnit); // p is xi projected onto the edge\n\n            const p = v3pool.get();\n            const v1_to_xi = v3pool.get();\n            xi.vsub(v1, v1_to_xi);\n            const dot = v1_to_xi.dot(edgeUnit);\n            edgeUnit.scale(dot, p);\n            p.vadd(v1, p); // Compute a vector from p to the center of the sphere\n\n            const xi_to_p = v3pool.get();\n            p.vsub(xi, xi_to_p); // Collision if the edge-sphere distance is less than the radius\n            // AND if p is in between v1 and v2\n\n            if (dot > 0 && dot * dot < edge.lengthSquared() && xi_to_p.lengthSquared() < R * R) {\n              // Collision if the edge-sphere distance is less than the radius\n              // Edge contact!\n              if (justTest) {\n                return true;\n              }\n\n              const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n              p.vsub(xj, r.rj);\n              p.vsub(xi, r.ni);\n              r.ni.normalize();\n              r.ni.scale(R, r.ri); // Should be relative to the body.\n\n              r.rj.vadd(xj, r.rj);\n              r.rj.vsub(bj.position, r.rj); // Should be relative to the body.\n\n              r.ri.vadd(xi, r.ri);\n              r.ri.vsub(bi.position, r.ri);\n              this.result.push(r);\n              this.createFrictionEquationsFromContact(r, this.frictionResult); // Release world vertices\n\n              for (let j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {\n                v3pool.release(faceVerts[j]);\n              }\n\n              v3pool.release(v1);\n              v3pool.release(v2);\n              v3pool.release(p);\n              v3pool.release(xi_to_p);\n              v3pool.release(v1_to_xi);\n              return;\n            }\n\n            v3pool.release(v1);\n            v3pool.release(v2);\n            v3pool.release(p);\n            v3pool.release(xi_to_p);\n            v3pool.release(v1_to_xi);\n          }\n        } // Release world vertices\n\n\n        for (let j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {\n          v3pool.release(faceVerts[j]);\n        }\n      }\n    }\n  }\n\n  planeConvex(planeShape, convexShape, planePosition, convexPosition, planeQuat, convexQuat, planeBody, convexBody, si, sj, justTest) {\n    // Simply return the points behind the plane.\n    const worldVertex = planeConvex_v;\n    const worldNormal = planeConvex_normal;\n    worldNormal.set(0, 0, 1);\n    planeQuat.vmult(worldNormal, worldNormal); // Turn normal according to plane orientation\n\n    let numContacts = 0;\n    const relpos = planeConvex_relpos;\n\n    for (let i = 0; i !== convexShape.vertices.length; i++) {\n      // Get world convex vertex\n      worldVertex.copy(convexShape.vertices[i]);\n      convexQuat.vmult(worldVertex, worldVertex);\n      convexPosition.vadd(worldVertex, worldVertex);\n      worldVertex.vsub(planePosition, relpos);\n      const dot = worldNormal.dot(relpos);\n\n      if (dot <= 0.0) {\n        if (justTest) {\n          return true;\n        }\n\n        const r = this.createContactEquation(planeBody, convexBody, planeShape, convexShape, si, sj); // Get vertex position projected on plane\n\n        const projected = planeConvex_projected;\n        worldNormal.scale(worldNormal.dot(relpos), projected);\n        worldVertex.vsub(projected, projected);\n        projected.vsub(planePosition, r.ri); // From plane to vertex projected on plane\n\n        r.ni.copy(worldNormal); // Contact normal is the plane normal out from plane\n        // rj is now just the vector from the convex center to the vertex\n\n        worldVertex.vsub(convexPosition, r.rj); // Make it relative to the body\n\n        r.ri.vadd(planePosition, r.ri);\n        r.ri.vsub(planeBody.position, r.ri);\n        r.rj.vadd(convexPosition, r.rj);\n        r.rj.vsub(convexBody.position, r.rj);\n        this.result.push(r);\n        numContacts++;\n\n        if (!this.enableFrictionReduction) {\n          this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n      }\n    }\n\n    if (this.enableFrictionReduction && numContacts) {\n      this.createFrictionFromAverage(numContacts);\n    }\n  }\n\n  boxConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    return this.convexConvex(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  sphereHeightfield(sphereShape, hfShape, spherePos, hfPos, sphereQuat, hfQuat, sphereBody, hfBody, rsi, rsj, justTest) {\n    const data = hfShape.data;\n    const radius = sphereShape.radius;\n    const w = hfShape.elementSize;\n    const worldPillarOffset = sphereHeightfield_tmp2; // Get sphere position to heightfield local!\n\n    const localSpherePos = sphereHeightfield_tmp1;\n    Transform.pointToLocalFrame(hfPos, hfQuat, spherePos, localSpherePos); // Get the index of the data points to test against\n\n    let iMinX = Math.floor((localSpherePos.x - radius) / w) - 1;\n    let iMaxX = Math.ceil((localSpherePos.x + radius) / w) + 1;\n    let iMinY = Math.floor((localSpherePos.y - radius) / w) - 1;\n    let iMaxY = Math.ceil((localSpherePos.y + radius) / w) + 1; // Bail out if we are out of the terrain\n\n    if (iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMinY > data[0].length) {\n      return;\n    } // Clamp index to edges\n\n\n    if (iMinX < 0) {\n      iMinX = 0;\n    }\n\n    if (iMaxX < 0) {\n      iMaxX = 0;\n    }\n\n    if (iMinY < 0) {\n      iMinY = 0;\n    }\n\n    if (iMaxY < 0) {\n      iMaxY = 0;\n    }\n\n    if (iMinX >= data.length) {\n      iMinX = data.length - 1;\n    }\n\n    if (iMaxX >= data.length) {\n      iMaxX = data.length - 1;\n    }\n\n    if (iMaxY >= data[0].length) {\n      iMaxY = data[0].length - 1;\n    }\n\n    if (iMinY >= data[0].length) {\n      iMinY = data[0].length - 1;\n    }\n\n    const minMax = [];\n    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n    const min = minMax[0];\n    const max = minMax[1]; // Bail out if we can't touch the bounding height box\n\n    if (localSpherePos.z - radius > max || localSpherePos.z + radius < min) {\n      return;\n    }\n\n    const result = this.result;\n\n    for (let i = iMinX; i < iMaxX; i++) {\n      for (let j = iMinY; j < iMaxY; j++) {\n        const numContactsBefore = result.length;\n        let intersecting = false; // Lower triangle\n\n        hfShape.getConvexTrianglePillar(i, j, false);\n        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n\n        if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {\n          intersecting = this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody, sphereShape, hfShape, justTest);\n        }\n\n        if (justTest && intersecting) {\n          return true;\n        } // Upper triangle\n\n\n        hfShape.getConvexTrianglePillar(i, j, true);\n        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n\n        if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {\n          intersecting = this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody, sphereShape, hfShape, justTest);\n        }\n\n        if (justTest && intersecting) {\n          return true;\n        }\n\n        const numContacts = result.length - numContactsBefore;\n\n        if (numContacts > 2) {\n          return;\n        }\n        /*\n          // Skip all but 1\n          for (let k = 0; k < numContacts - 1; k++) {\n              result.pop();\n          }\n        */\n\n      }\n    }\n  }\n\n  boxHeightfield(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    return this.convexHeightfield(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  convexHeightfield(convexShape, hfShape, convexPos, hfPos, convexQuat, hfQuat, convexBody, hfBody, rsi, rsj, justTest) {\n    const data = hfShape.data;\n    const w = hfShape.elementSize;\n    const radius = convexShape.boundingSphereRadius;\n    const worldPillarOffset = convexHeightfield_tmp2;\n    const faceList = convexHeightfield_faceList; // Get sphere position to heightfield local!\n\n    const localConvexPos = convexHeightfield_tmp1;\n    Transform.pointToLocalFrame(hfPos, hfQuat, convexPos, localConvexPos); // Get the index of the data points to test against\n\n    let iMinX = Math.floor((localConvexPos.x - radius) / w) - 1;\n    let iMaxX = Math.ceil((localConvexPos.x + radius) / w) + 1;\n    let iMinY = Math.floor((localConvexPos.y - radius) / w) - 1;\n    let iMaxY = Math.ceil((localConvexPos.y + radius) / w) + 1; // Bail out if we are out of the terrain\n\n    if (iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMinY > data[0].length) {\n      return;\n    } // Clamp index to edges\n\n\n    if (iMinX < 0) {\n      iMinX = 0;\n    }\n\n    if (iMaxX < 0) {\n      iMaxX = 0;\n    }\n\n    if (iMinY < 0) {\n      iMinY = 0;\n    }\n\n    if (iMaxY < 0) {\n      iMaxY = 0;\n    }\n\n    if (iMinX >= data.length) {\n      iMinX = data.length - 1;\n    }\n\n    if (iMaxX >= data.length) {\n      iMaxX = data.length - 1;\n    }\n\n    if (iMaxY >= data[0].length) {\n      iMaxY = data[0].length - 1;\n    }\n\n    if (iMinY >= data[0].length) {\n      iMinY = data[0].length - 1;\n    }\n\n    const minMax = [];\n    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n    const min = minMax[0];\n    const max = minMax[1]; // Bail out if we're cant touch the bounding height box\n\n    if (localConvexPos.z - radius > max || localConvexPos.z + radius < min) {\n      return;\n    }\n\n    for (let i = iMinX; i < iMaxX; i++) {\n      for (let j = iMinY; j < iMaxY; j++) {\n        let intersecting = false; // Lower triangle\n\n        hfShape.getConvexTrianglePillar(i, j, false);\n        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n\n        if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {\n          intersecting = this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, justTest, faceList, null);\n        }\n\n        if (justTest && intersecting) {\n          return true;\n        } // Upper triangle\n\n\n        hfShape.getConvexTrianglePillar(i, j, true);\n        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n\n        if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {\n          intersecting = this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, justTest, faceList, null);\n        }\n\n        if (justTest && intersecting) {\n          return true;\n        }\n      }\n    }\n  }\n\n  sphereParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {\n    // The normal is the unit vector from sphere center to particle center\n    const normal = particleSphere_normal;\n    normal.set(0, 0, 1);\n    xi.vsub(xj, normal);\n    const lengthSquared = normal.lengthSquared();\n\n    if (lengthSquared <= sj.radius * sj.radius) {\n      if (justTest) {\n        return true;\n      }\n\n      const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n      normal.normalize();\n      r.rj.copy(normal);\n      r.rj.scale(sj.radius, r.rj);\n      r.ni.copy(normal); // Contact normal\n\n      r.ni.negate(r.ni);\n      r.ri.set(0, 0, 0); // Center of particle\n\n      this.result.push(r);\n      this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n  }\n\n  planeParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {\n    const normal = particlePlane_normal;\n    normal.set(0, 0, 1);\n    bj.quaternion.vmult(normal, normal); // Turn normal according to plane orientation\n\n    const relpos = particlePlane_relpos;\n    xi.vsub(bj.position, relpos);\n    const dot = normal.dot(relpos);\n\n    if (dot <= 0.0) {\n      if (justTest) {\n        return true;\n      }\n\n      const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n      r.ni.copy(normal); // Contact normal is the plane normal\n\n      r.ni.negate(r.ni);\n      r.ri.set(0, 0, 0); // Center of particle\n      // Get particle position projected on plane\n\n      const projected = particlePlane_projected;\n      normal.scale(normal.dot(xi), projected);\n      xi.vsub(projected, projected); //projected.vadd(bj.position,projected);\n      // rj is now the projected world position minus plane position\n\n      r.rj.copy(projected);\n      this.result.push(r);\n      this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n  }\n\n  boxParticle(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    return this.convexParticle(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  convexParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {\n    let penetratedFaceIndex = -1;\n    const penetratedFaceNormal = convexParticle_penetratedFaceNormal;\n    const worldPenetrationVec = convexParticle_worldPenetrationVec;\n    let minPenetration = null;\n\n    const local = convexParticle_local;\n    local.copy(xi);\n    local.vsub(xj, local); // Convert position to relative the convex origin\n\n    qj.conjugate(cqj);\n    cqj.vmult(local, local);\n\n    if (sj.pointIsInside(local)) {\n      if (sj.worldVerticesNeedsUpdate) {\n        sj.computeWorldVertices(xj, qj);\n      }\n\n      if (sj.worldFaceNormalsNeedsUpdate) {\n        sj.computeWorldFaceNormals(qj);\n      } // For each world polygon in the polyhedra\n\n\n      for (let i = 0, nfaces = sj.faces.length; i !== nfaces; i++) {\n        // Construct world face vertices\n        const verts = [sj.worldVertices[sj.faces[i][0]]];\n        const normal = sj.worldFaceNormals[i]; // Check how much the particle penetrates the polygon plane.\n\n        xi.vsub(verts[0], convexParticle_vertexToParticle);\n        const penetration = -normal.dot(convexParticle_vertexToParticle);\n\n        if (minPenetration === null || Math.abs(penetration) < Math.abs(minPenetration)) {\n          if (justTest) {\n            return true;\n          }\n\n          minPenetration = penetration;\n          penetratedFaceIndex = i;\n          penetratedFaceNormal.copy(normal);\n        }\n      }\n\n      if (penetratedFaceIndex !== -1) {\n        // Setup contact\n        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n        penetratedFaceNormal.scale(minPenetration, worldPenetrationVec); // rj is the particle position projected to the face\n\n        worldPenetrationVec.vadd(xi, worldPenetrationVec);\n        worldPenetrationVec.vsub(xj, worldPenetrationVec);\n        r.rj.copy(worldPenetrationVec); //const projectedToFace = xi.vsub(xj).vadd(worldPenetrationVec);\n        //projectedToFace.copy(r.rj);\n        //qj.vmult(r.rj,r.rj);\n\n        penetratedFaceNormal.negate(r.ni); // Contact normal\n\n        r.ri.set(0, 0, 0); // Center of particle\n\n        const ri = r.ri;\n        const rj = r.rj; // Make relative to bodies\n\n        ri.vadd(xi, ri);\n        ri.vsub(bi.position, ri);\n        rj.vadd(xj, rj);\n        rj.vsub(bj.position, rj);\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n      } else {\n        console.warn('Point found inside convex, but did not find penetrating face!');\n      }\n    }\n  }\n\n  heightfieldCylinder(hfShape, convexShape, hfPos, convexPos, hfQuat, convexQuat, hfBody, convexBody, rsi, rsj, justTest) {\n    return this.convexHeightfield(convexShape, hfShape, convexPos, hfPos, convexQuat, hfQuat, convexBody, hfBody, rsi, rsj, justTest);\n  }\n\n  particleCylinder(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    return this.convexParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest);\n  }\n\n  sphereTrimesh(sphereShape, trimeshShape, spherePos, trimeshPos, sphereQuat, trimeshQuat, sphereBody, trimeshBody, rsi, rsj, justTest) {\n    const edgeVertexA = sphereTrimesh_edgeVertexA;\n    const edgeVertexB = sphereTrimesh_edgeVertexB;\n    const edgeVector = sphereTrimesh_edgeVector;\n    const edgeVectorUnit = sphereTrimesh_edgeVectorUnit;\n    const localSpherePos = sphereTrimesh_localSpherePos;\n    const tmp = sphereTrimesh_tmp;\n    const localSphereAABB = sphereTrimesh_localSphereAABB;\n    const v2 = sphereTrimesh_v2;\n    const relpos = sphereTrimesh_relpos;\n    const triangles = sphereTrimesh_triangles; // Convert sphere position to local in the trimesh\n\n    Transform.pointToLocalFrame(trimeshPos, trimeshQuat, spherePos, localSpherePos); // Get the aabb of the sphere locally in the trimesh\n\n    const sphereRadius = sphereShape.radius;\n    localSphereAABB.lowerBound.set(localSpherePos.x - sphereRadius, localSpherePos.y - sphereRadius, localSpherePos.z - sphereRadius);\n    localSphereAABB.upperBound.set(localSpherePos.x + sphereRadius, localSpherePos.y + sphereRadius, localSpherePos.z + sphereRadius);\n    trimeshShape.getTrianglesInAABB(localSphereAABB, triangles); //for (let i = 0; i < trimeshShape.indices.length / 3; i++) triangles.push(i); // All\n    // Vertices\n\n    const v = sphereTrimesh_v;\n    const radiusSquared = sphereShape.radius * sphereShape.radius;\n\n    for (let i = 0; i < triangles.length; i++) {\n      for (let j = 0; j < 3; j++) {\n        trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], v); // Check vertex overlap in sphere\n\n        v.vsub(localSpherePos, relpos);\n\n        if (relpos.lengthSquared() <= radiusSquared) {\n          // Safe up\n          v2.copy(v);\n          Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v);\n          v.vsub(spherePos, relpos);\n\n          if (justTest) {\n            return true;\n          }\n\n          let r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);\n          r.ni.copy(relpos);\n          r.ni.normalize(); // ri is the vector from sphere center to the sphere surface\n\n          r.ri.copy(r.ni);\n          r.ri.scale(sphereShape.radius, r.ri);\n          r.ri.vadd(spherePos, r.ri);\n          r.ri.vsub(sphereBody.position, r.ri);\n          r.rj.copy(v);\n          r.rj.vsub(trimeshBody.position, r.rj); // Store result\n\n          this.result.push(r);\n          this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n      }\n    } // Check all edges\n\n\n    for (let i = 0; i < triangles.length; i++) {\n      for (let j = 0; j < 3; j++) {\n        trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], edgeVertexA);\n        trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + (j + 1) % 3], edgeVertexB);\n        edgeVertexB.vsub(edgeVertexA, edgeVector); // Project sphere position to the edge\n\n        localSpherePos.vsub(edgeVertexB, tmp);\n        const positionAlongEdgeB = tmp.dot(edgeVector);\n        localSpherePos.vsub(edgeVertexA, tmp);\n        let positionAlongEdgeA = tmp.dot(edgeVector);\n\n        if (positionAlongEdgeA > 0 && positionAlongEdgeB < 0) {\n          // Now check the orthogonal distance from edge to sphere center\n          localSpherePos.vsub(edgeVertexA, tmp);\n          edgeVectorUnit.copy(edgeVector);\n          edgeVectorUnit.normalize();\n          positionAlongEdgeA = tmp.dot(edgeVectorUnit);\n          edgeVectorUnit.scale(positionAlongEdgeA, tmp);\n          tmp.vadd(edgeVertexA, tmp); // tmp is now the sphere center position projected to the edge, defined locally in the trimesh frame\n\n          const dist = tmp.distanceTo(localSpherePos);\n\n          if (dist < sphereShape.radius) {\n            if (justTest) {\n              return true;\n            }\n\n            const r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);\n            tmp.vsub(localSpherePos, r.ni);\n            r.ni.normalize();\n            r.ni.scale(sphereShape.radius, r.ri);\n            r.ri.vadd(spherePos, r.ri);\n            r.ri.vsub(sphereBody.position, r.ri);\n            Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);\n            tmp.vsub(trimeshBody.position, r.rj);\n            Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);\n            Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n          }\n        }\n      }\n    } // Triangle faces\n\n\n    const va = sphereTrimesh_va;\n    const vb = sphereTrimesh_vb;\n    const vc = sphereTrimesh_vc;\n    const normal = sphereTrimesh_normal;\n\n    for (let i = 0, N = triangles.length; i !== N; i++) {\n      trimeshShape.getTriangleVertices(triangles[i], va, vb, vc);\n      trimeshShape.getNormal(triangles[i], normal);\n      localSpherePos.vsub(va, tmp);\n      let dist = tmp.dot(normal);\n      normal.scale(dist, tmp);\n      localSpherePos.vsub(tmp, tmp); // tmp is now the sphere position projected to the triangle plane\n\n      dist = tmp.distanceTo(localSpherePos);\n\n      if (Ray.pointInTriangle(tmp, va, vb, vc) && dist < sphereShape.radius) {\n        if (justTest) {\n          return true;\n        }\n\n        let r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);\n        tmp.vsub(localSpherePos, r.ni);\n        r.ni.normalize();\n        r.ni.scale(sphereShape.radius, r.ri);\n        r.ri.vadd(spherePos, r.ri);\n        r.ri.vsub(sphereBody.position, r.ri);\n        Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);\n        tmp.vsub(trimeshBody.position, r.rj);\n        Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);\n        Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n      }\n    }\n\n    triangles.length = 0;\n  }\n\n  planeTrimesh(planeShape, trimeshShape, planePos, trimeshPos, planeQuat, trimeshQuat, planeBody, trimeshBody, rsi, rsj, justTest) {\n    // Make contacts!\n    const v = new Vec3();\n    const normal = planeTrimesh_normal;\n    normal.set(0, 0, 1);\n    planeQuat.vmult(normal, normal); // Turn normal according to plane\n\n    for (let i = 0; i < trimeshShape.vertices.length / 3; i++) {\n      // Get world vertex from trimesh\n      trimeshShape.getVertex(i, v); // Safe up\n\n      const v2 = new Vec3();\n      v2.copy(v);\n      Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v); // Check plane side\n\n      const relpos = planeTrimesh_relpos;\n      v.vsub(planePos, relpos);\n      const dot = normal.dot(relpos);\n\n      if (dot <= 0.0) {\n        if (justTest) {\n          return true;\n        }\n\n        const r = this.createContactEquation(planeBody, trimeshBody, planeShape, trimeshShape, rsi, rsj);\n        r.ni.copy(normal); // Contact normal is the plane normal\n        // Get vertex position projected on plane\n\n        const projected = planeTrimesh_projected;\n        normal.scale(relpos.dot(normal), projected);\n        v.vsub(projected, projected); // ri is the projected world position minus plane position\n\n        r.ri.copy(projected);\n        r.ri.vsub(planeBody.position, r.ri);\n        r.rj.copy(v);\n        r.rj.vsub(trimeshBody.position, r.rj); // Store result\n\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n      }\n    }\n  } // convexTrimesh(\n  //   si: ConvexPolyhedron, sj: Trimesh, xi: Vec3, xj: Vec3, qi: Quaternion, qj: Quaternion,\n  //   bi: Body, bj: Body, rsi?: Shape | null, rsj?: Shape | null,\n  //   faceListA?: number[] | null, faceListB?: number[] | null,\n  // ) {\n  //   const sepAxis = convexConvex_sepAxis;\n  //   if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){\n  //       return;\n  //   }\n  //   // Construct a temp hull for each triangle\n  //   const hullB = new ConvexPolyhedron();\n  //   hullB.faces = [[0,1,2]];\n  //   const va = new Vec3();\n  //   const vb = new Vec3();\n  //   const vc = new Vec3();\n  //   hullB.vertices = [\n  //       va,\n  //       vb,\n  //       vc\n  //   ];\n  //   for (let i = 0; i < sj.indices.length / 3; i++) {\n  //       const triangleNormal = new Vec3();\n  //       sj.getNormal(i, triangleNormal);\n  //       hullB.faceNormals = [triangleNormal];\n  //       sj.getTriangleVertices(i, va, vb, vc);\n  //       let d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);\n  //       if(!d){\n  //           triangleNormal.scale(-1, triangleNormal);\n  //           d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);\n  //           if(!d){\n  //               continue;\n  //           }\n  //       }\n  //       const res: ConvexPolyhedronContactPoint[] = [];\n  //       const q = convexConvex_q;\n  //       si.clipAgainstHull(xi,qi,hullB,xj,qj,triangleNormal,-100,100,res);\n  //       for(let j = 0; j !== res.length; j++){\n  //           const r = this.createContactEquation(bi,bj,si,sj,rsi,rsj),\n  //               ri = r.ri,\n  //               rj = r.rj;\n  //           r.ni.copy(triangleNormal);\n  //           r.ni.negate(r.ni);\n  //           res[j].normal.negate(q);\n  //           q.mult(res[j].depth, q);\n  //           res[j].point.vadd(q, ri);\n  //           rj.copy(res[j].point);\n  //           // Contact points are in world coordinates. Transform back to relative\n  //           ri.vsub(xi,ri);\n  //           rj.vsub(xj,rj);\n  //           // Make relative to bodies\n  //           ri.vadd(xi, ri);\n  //           ri.vsub(bi.position, ri);\n  //           rj.vadd(xj, rj);\n  //           rj.vsub(bj.position, rj);\n  //           result.push(r);\n  //       }\n  //   }\n  // }\n\n\n}\nconst averageNormal = new Vec3();\nconst averageContactPointA = new Vec3();\nconst averageContactPointB = new Vec3();\nconst tmpVec1 = new Vec3();\nconst tmpVec2 = new Vec3();\nconst tmpQuat1 = new Quaternion();\nconst tmpQuat2 = new Quaternion();\n\nconst planeTrimesh_normal = new Vec3();\nconst planeTrimesh_relpos = new Vec3();\nconst planeTrimesh_projected = new Vec3();\nconst sphereTrimesh_normal = new Vec3();\nconst sphereTrimesh_relpos = new Vec3();\nnew Vec3();\nconst sphereTrimesh_v = new Vec3();\nconst sphereTrimesh_v2 = new Vec3();\nconst sphereTrimesh_edgeVertexA = new Vec3();\nconst sphereTrimesh_edgeVertexB = new Vec3();\nconst sphereTrimesh_edgeVector = new Vec3();\nconst sphereTrimesh_edgeVectorUnit = new Vec3();\nconst sphereTrimesh_localSpherePos = new Vec3();\nconst sphereTrimesh_tmp = new Vec3();\nconst sphereTrimesh_va = new Vec3();\nconst sphereTrimesh_vb = new Vec3();\nconst sphereTrimesh_vc = new Vec3();\nconst sphereTrimesh_localSphereAABB = new AABB();\nconst sphereTrimesh_triangles = [];\nconst point_on_plane_to_sphere = new Vec3();\nconst plane_to_sphere_ortho = new Vec3(); // See http://bulletphysics.com/Bullet/BulletFull/SphereTriangleDetector_8cpp_source.html\n\nconst pointInPolygon_edge = new Vec3();\nconst pointInPolygon_edge_x_normal = new Vec3();\nconst pointInPolygon_vtp = new Vec3();\n\nfunction pointInPolygon(verts, normal, p) {\n  let positiveResult = null;\n  const N = verts.length;\n\n  for (let i = 0; i !== N; i++) {\n    const v = verts[i]; // Get edge to the next vertex\n\n    const edge = pointInPolygon_edge;\n    verts[(i + 1) % N].vsub(v, edge); // Get cross product between polygon normal and the edge\n\n    const edge_x_normal = pointInPolygon_edge_x_normal; //const edge_x_normal = new Vec3();\n\n    edge.cross(normal, edge_x_normal); // Get vector between point and current vertex\n\n    const vertex_to_p = pointInPolygon_vtp;\n    p.vsub(v, vertex_to_p); // This dot product determines which side of the edge the point is\n\n    const r = edge_x_normal.dot(vertex_to_p); // If all such dot products have same sign, we are inside the polygon.\n\n    if (positiveResult === null || r > 0 && positiveResult === true || r <= 0 && positiveResult === false) {\n      if (positiveResult === null) {\n        positiveResult = r > 0;\n      }\n\n      continue;\n    } else {\n      return false; // Encountered some other sign. Exit.\n    }\n  } // If we got here, all dot products were of the same sign.\n\n\n  return true;\n}\n\nconst box_to_sphere = new Vec3();\nconst sphereBox_ns = new Vec3();\nconst sphereBox_ns1 = new Vec3();\nconst sphereBox_ns2 = new Vec3();\nconst sphereBox_sides = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\nconst sphereBox_sphere_to_corner = new Vec3();\nconst sphereBox_side_ns = new Vec3();\nconst sphereBox_side_ns1 = new Vec3();\nconst sphereBox_side_ns2 = new Vec3();\nconst convex_to_sphere = new Vec3();\nconst sphereConvex_edge = new Vec3();\nconst sphereConvex_edgeUnit = new Vec3();\nconst sphereConvex_sphereToCorner = new Vec3();\nconst sphereConvex_worldCorner = new Vec3();\nconst sphereConvex_worldNormal = new Vec3();\nconst sphereConvex_worldPoint = new Vec3();\nconst sphereConvex_worldSpherePointClosestToPlane = new Vec3();\nconst sphereConvex_penetrationVec = new Vec3();\nconst sphereConvex_sphereToWorldPoint = new Vec3();\nnew Vec3();\nnew Vec3();\nconst planeConvex_v = new Vec3();\nconst planeConvex_normal = new Vec3();\nconst planeConvex_relpos = new Vec3();\nconst planeConvex_projected = new Vec3();\nconst convexConvex_sepAxis = new Vec3();\nconst convexConvex_q = new Vec3();\nconst particlePlane_normal = new Vec3();\nconst particlePlane_relpos = new Vec3();\nconst particlePlane_projected = new Vec3();\nconst particleSphere_normal = new Vec3(); // WIP\n\nconst cqj = new Quaternion();\nconst convexParticle_local = new Vec3();\nnew Vec3();\nconst convexParticle_penetratedFaceNormal = new Vec3();\nconst convexParticle_vertexToParticle = new Vec3();\nconst convexParticle_worldPenetrationVec = new Vec3();\nconst convexHeightfield_tmp1 = new Vec3();\nconst convexHeightfield_tmp2 = new Vec3();\nconst convexHeightfield_faceList = [0];\nconst sphereHeightfield_tmp1 = new Vec3();\nconst sphereHeightfield_tmp2 = new Vec3();\n\nclass OverlapKeeper {\n  /**\n   * @todo Remove useless constructor\n   */\n  constructor() {\n    this.current = [];\n    this.previous = [];\n  }\n  /**\n   * getKey\n   */\n\n\n  getKey(i, j) {\n    if (j < i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    return i << 16 | j;\n  }\n  /**\n   * set\n   */\n\n\n  set(i, j) {\n    // Insertion sort. This way the diff will have linear complexity.\n    const key = this.getKey(i, j);\n    const current = this.current;\n    let index = 0;\n\n    while (key > current[index]) {\n      index++;\n    }\n\n    if (key === current[index]) {\n      return; // Pair was already added\n    }\n\n    for (let j = current.length - 1; j >= index; j--) {\n      current[j + 1] = current[j];\n    }\n\n    current[index] = key;\n  }\n  /**\n   * tick\n   */\n\n\n  tick() {\n    const tmp = this.current;\n    this.current = this.previous;\n    this.previous = tmp;\n    this.current.length = 0;\n  }\n  /**\n   * getDiff\n   */\n\n\n  getDiff(additions, removals) {\n    const a = this.current;\n    const b = this.previous;\n    const al = a.length;\n    const bl = b.length;\n    let j = 0;\n\n    for (let i = 0; i < al; i++) {\n      let found = false;\n      const keyA = a[i];\n\n      while (keyA > b[j]) {\n        j++;\n      }\n\n      found = keyA === b[j];\n\n      if (!found) {\n        unpackAndPush(additions, keyA);\n      }\n    }\n\n    j = 0;\n\n    for (let i = 0; i < bl; i++) {\n      let found = false;\n      const keyB = b[i];\n\n      while (keyB > a[j]) {\n        j++;\n      }\n\n      found = a[j] === keyB;\n\n      if (!found) {\n        unpackAndPush(removals, keyB);\n      }\n    }\n  }\n\n}\n\nfunction unpackAndPush(array, key) {\n  array.push((key & 0xffff0000) >> 16, key & 0x0000ffff);\n}\n\nconst getKey = (i, j) => i < j ? `${i}-${j}` : `${j}-${i}`;\n/**\n * TupleDictionary\n */\n\n\nclass TupleDictionary {\n  constructor() {\n    this.data = {\n      keys: []\n    };\n  }\n\n  /** get */\n  get(i, j) {\n    const key = getKey(i, j);\n    return this.data[key];\n  }\n  /** set */\n\n\n  set(i, j, value) {\n    const key = getKey(i, j); // Check if key already exists\n\n    if (!this.get(i, j)) {\n      this.data.keys.push(key);\n    }\n\n    this.data[key] = value;\n  }\n  /** delete */\n\n\n  delete(i, j) {\n    const key = getKey(i, j);\n    const index = this.data.keys.indexOf(key);\n\n    if (index !== -1) {\n      this.data.keys.splice(index, 1);\n    }\n\n    delete this.data[key];\n  }\n  /** reset */\n\n\n  reset() {\n    const data = this.data;\n    const keys = data.keys;\n\n    while (keys.length > 0) {\n      const key = keys.pop();\n      delete data[key];\n    }\n  }\n\n}\n\n/**\n * The physics world\n */\nclass World extends EventTarget {\n  /**\n   * Currently / last used timestep. Is set to -1 if not available. This value is updated before each internal step, which means that it is \"fresh\" inside event callbacks.\n   */\n\n  /**\n   * Makes bodies go to sleep when they've been inactive.\n   * @default false\n   */\n\n  /**\n   * All the current contacts (instances of ContactEquation) in the world.\n   */\n\n  /**\n   * How often to normalize quaternions. Set to 0 for every step, 1 for every second etc.. A larger value increases performance. If bodies tend to explode, set to a smaller value (zero to be sure nothing can go wrong).\n   * @default 0\n   */\n\n  /**\n   * Set to true to use fast quaternion normalization. It is often enough accurate to use.\n   * If bodies tend to explode, set to false.\n   * @default false\n   */\n\n  /**\n   * The wall-clock time since simulation start.\n   */\n\n  /**\n   * Number of timesteps taken since start.\n   */\n\n  /**\n   * Default and last timestep sizes.\n   */\n\n  /**\n   * The gravity of the world.\n   */\n\n  /**\n   * Gravity to use when approximating the friction max force (mu*mass*gravity).\n   * If undefined, global gravity will be used.\n   * Use to enable friction in a World with a null gravity vector (no gravity).\n   */\n\n  /**\n   * The broadphase algorithm to use.\n   * @default NaiveBroadphase\n   */\n\n  /**\n   * All bodies in this world\n   */\n\n  /**\n   * True if any bodies are not sleeping, false if every body is sleeping.\n   */\n\n  /**\n   * The solver algorithm to use.\n   * @default GSSolver\n   */\n\n  /**\n   * collisionMatrix\n   */\n\n  /**\n   * CollisionMatrix from the previous step.\n   */\n\n  /**\n   * All added contactmaterials.\n   */\n\n  /**\n   * Used to look up a ContactMaterial given two instances of Material.\n   */\n\n  /**\n   * The default material of the bodies.\n   */\n\n  /**\n   * This contact material is used if no suitable contactmaterial is found for a contact.\n   */\n\n  /**\n   * Time accumulator for interpolation.\n   * @see https://gafferongames.com/game-physics/fix-your-timestep/\n   */\n\n  /**\n   * Dispatched after a body has been added to the world.\n   */\n\n  /**\n   * Dispatched after a body has been removed from the world.\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    super();\n    this.dt = -1;\n    this.allowSleep = !!options.allowSleep;\n    this.contacts = [];\n    this.frictionEquations = [];\n    this.quatNormalizeSkip = options.quatNormalizeSkip !== undefined ? options.quatNormalizeSkip : 0;\n    this.quatNormalizeFast = options.quatNormalizeFast !== undefined ? options.quatNormalizeFast : false;\n    this.time = 0.0;\n    this.stepnumber = 0;\n    this.default_dt = 1 / 60;\n    this.nextId = 0;\n    this.gravity = new Vec3();\n\n    if (options.gravity) {\n      this.gravity.copy(options.gravity);\n    }\n\n    if (options.frictionGravity) {\n      this.frictionGravity = new Vec3();\n      this.frictionGravity.copy(options.frictionGravity);\n    }\n\n    this.broadphase = options.broadphase !== undefined ? options.broadphase : new NaiveBroadphase();\n    this.bodies = [];\n    this.hasActiveBodies = false;\n    this.solver = options.solver !== undefined ? options.solver : new GSSolver();\n    this.constraints = [];\n    this.narrowphase = new Narrowphase(this);\n    this.collisionMatrix = new ArrayCollisionMatrix();\n    this.collisionMatrixPrevious = new ArrayCollisionMatrix();\n    this.bodyOverlapKeeper = new OverlapKeeper();\n    this.shapeOverlapKeeper = new OverlapKeeper();\n    this.contactmaterials = [];\n    this.contactMaterialTable = new TupleDictionary();\n    this.defaultMaterial = new Material('default');\n    this.defaultContactMaterial = new ContactMaterial(this.defaultMaterial, this.defaultMaterial, {\n      friction: 0.3,\n      restitution: 0.0\n    });\n    this.doProfiling = false;\n    this.profile = {\n      solve: 0,\n      makeContactConstraints: 0,\n      broadphase: 0,\n      integrate: 0,\n      narrowphase: 0\n    };\n    this.accumulator = 0;\n    this.subsystems = [];\n    this.addBodyEvent = {\n      type: 'addBody',\n      body: null\n    };\n    this.removeBodyEvent = {\n      type: 'removeBody',\n      body: null\n    };\n    this.idToBodyMap = {};\n    this.broadphase.setWorld(this);\n  }\n  /**\n   * Get the contact material between materials m1 and m2\n   * @return The contact material if it was found.\n   */\n\n\n  getContactMaterial(m1, m2) {\n    return this.contactMaterialTable.get(m1.id, m2.id);\n  }\n  /**\n   * Store old collision state info\n   */\n\n\n  collisionMatrixTick() {\n    const temp = this.collisionMatrixPrevious;\n    this.collisionMatrixPrevious = this.collisionMatrix;\n    this.collisionMatrix = temp;\n    this.collisionMatrix.reset();\n    this.bodyOverlapKeeper.tick();\n    this.shapeOverlapKeeper.tick();\n  }\n  /**\n   * Add a constraint to the simulation.\n   */\n\n\n  addConstraint(c) {\n    this.constraints.push(c);\n  }\n  /**\n   * Removes a constraint\n   */\n\n\n  removeConstraint(c) {\n    const idx = this.constraints.indexOf(c);\n\n    if (idx !== -1) {\n      this.constraints.splice(idx, 1);\n    }\n  }\n  /**\n   * Raycast test\n   * @deprecated Use .raycastAll, .raycastClosest or .raycastAny instead.\n   */\n\n\n  rayTest(from, to, result) {\n    if (result instanceof RaycastResult) {\n      // Do raycastClosest\n      this.raycastClosest(from, to, {\n        skipBackfaces: true\n      }, result);\n    } else {\n      // Do raycastAll\n      this.raycastAll(from, to, {\n        skipBackfaces: true\n      }, result);\n    }\n  }\n  /**\n   * Ray cast against all bodies. The provided callback will be executed for each hit with a RaycastResult as single argument.\n   * @return True if any body was hit.\n   */\n\n\n  raycastAll(from, to, options, callback) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    options.mode = Ray.ALL;\n    options.from = from;\n    options.to = to;\n    options.callback = callback;\n    return tmpRay.intersectWorld(this, options);\n  }\n  /**\n   * Ray cast, and stop at the first result. Note that the order is random - but the method is fast.\n   * @return True if any body was hit.\n   */\n\n\n  raycastAny(from, to, options, result) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    options.mode = Ray.ANY;\n    options.from = from;\n    options.to = to;\n    options.result = result;\n    return tmpRay.intersectWorld(this, options);\n  }\n  /**\n   * Ray cast, and return information of the closest hit.\n   * @return True if any body was hit.\n   */\n\n\n  raycastClosest(from, to, options, result) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    options.mode = Ray.CLOSEST;\n    options.from = from;\n    options.to = to;\n    options.result = result;\n    return tmpRay.intersectWorld(this, options);\n  }\n  /**\n   * Add a rigid body to the simulation.\n   * @todo If the simulation has not yet started, why recrete and copy arrays for each body? Accumulate in dynamic arrays in this case.\n   * @todo Adding an array of bodies should be possible. This would save some loops too\n   */\n\n\n  addBody(body) {\n    if (this.bodies.includes(body)) {\n      return;\n    }\n\n    body.index = this.bodies.length;\n    this.bodies.push(body);\n    body.world = this;\n    body.initPosition.copy(body.position);\n    body.initVelocity.copy(body.velocity);\n    body.timeLastSleepy = this.time;\n\n    if (body instanceof Body) {\n      body.initAngularVelocity.copy(body.angularVelocity);\n      body.initQuaternion.copy(body.quaternion);\n    }\n\n    this.collisionMatrix.setNumObjects(this.bodies.length);\n    this.addBodyEvent.body = body;\n    this.idToBodyMap[body.id] = body;\n    this.dispatchEvent(this.addBodyEvent);\n  }\n  /**\n   * Remove a rigid body from the simulation.\n   */\n\n\n  removeBody(body) {\n    body.world = null;\n    const n = this.bodies.length - 1;\n    const bodies = this.bodies;\n    const idx = bodies.indexOf(body);\n\n    if (idx !== -1) {\n      bodies.splice(idx, 1); // Todo: should use a garbage free method\n      // Recompute index\n\n      for (let i = 0; i !== bodies.length; i++) {\n        bodies[i].index = i;\n      }\n\n      this.collisionMatrix.setNumObjects(n);\n      this.removeBodyEvent.body = body;\n      delete this.idToBodyMap[body.id];\n      this.dispatchEvent(this.removeBodyEvent);\n    }\n  }\n\n  getBodyById(id) {\n    return this.idToBodyMap[id];\n  }\n  /**\n   * @todo Make a faster map\n   */\n\n\n  getShapeById(id) {\n    const bodies = this.bodies;\n\n    for (let i = 0; i < bodies.length; i++) {\n      const shapes = bodies[i].shapes;\n\n      for (let j = 0; j < shapes.length; j++) {\n        const shape = shapes[j];\n\n        if (shape.id === id) {\n          return shape;\n        }\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Adds a contact material to the World\n   */\n\n\n  addContactMaterial(cmat) {\n    // Add contact material\n    this.contactmaterials.push(cmat); // Add current contact material to the material table\n\n    this.contactMaterialTable.set(cmat.materials[0].id, cmat.materials[1].id, cmat);\n  }\n  /**\n   * Removes a contact material from the World.\n   */\n\n\n  removeContactMaterial(cmat) {\n    const idx = this.contactmaterials.indexOf(cmat);\n\n    if (idx === -1) {\n      return;\n    }\n\n    this.contactmaterials.splice(idx, 1);\n    this.contactMaterialTable.delete(cmat.materials[0].id, cmat.materials[1].id);\n  }\n  /**\n   * Step the simulation forward keeping track of last called time\n   * to be able to step the world at a fixed rate, independently of framerate.\n   *\n   * @param dt The fixed time step size to use (default: 1 / 60).\n   * @param maxSubSteps Maximum number of fixed steps to take per function call (default: 10).\n   * @see https://gafferongames.com/post/fix_your_timestep/\n   * @example\n   *     // Run the simulation independently of framerate every 1 / 60 ms\n   *     world.fixedStep()\n   */\n\n\n  fixedStep(dt, maxSubSteps) {\n    if (dt === void 0) {\n      dt = 1 / 60;\n    }\n\n    if (maxSubSteps === void 0) {\n      maxSubSteps = 10;\n    }\n\n    const time = performance.now() / 1000; // seconds\n\n    if (!this.lastCallTime) {\n      this.step(dt, undefined, maxSubSteps);\n    } else {\n      const timeSinceLastCalled = time - this.lastCallTime;\n      this.step(dt, timeSinceLastCalled, maxSubSteps);\n    }\n\n    this.lastCallTime = time;\n  }\n  /**\n   * Step the physics world forward in time.\n   *\n   * There are two modes. The simple mode is fixed timestepping without interpolation. In this case you only use the first argument. The second case uses interpolation. In that you also provide the time since the function was last used, as well as the maximum fixed timesteps to take.\n   *\n   * @param dt The fixed time step size to use.\n   * @param timeSinceLastCalled The time elapsed since the function was last called.\n   * @param maxSubSteps Maximum number of fixed steps to take per function call (default: 10).\n   * @see https://web.archive.org/web/20180426154531/http://bulletphysics.org/mediawiki-1.5.8/index.php/Stepping_The_World#What_do_the_parameters_to_btDynamicsWorld::stepSimulation_mean.3F\n   * @example\n   *     // fixed timestepping without interpolation\n   *     world.step(1 / 60)\n   */\n\n\n  step(dt, timeSinceLastCalled, maxSubSteps) {\n    if (maxSubSteps === void 0) {\n      maxSubSteps = 10;\n    }\n\n    if (timeSinceLastCalled === undefined) {\n      // Fixed, simple stepping\n      this.internalStep(dt); // Increment time\n\n      this.time += dt;\n    } else {\n      this.accumulator += timeSinceLastCalled;\n      const t0 = performance.now();\n      let substeps = 0;\n\n      while (this.accumulator >= dt && substeps < maxSubSteps) {\n        // Do fixed steps to catch up\n        this.internalStep(dt);\n        this.accumulator -= dt;\n        substeps++;\n\n        if (performance.now() - t0 > dt * 1000) {\n          // The framerate is not interactive anymore.\n          // We are below the target framerate.\n          // Better bail out.\n          break;\n        }\n      } // Remove the excess accumulator, since we may not\n      // have had enough substeps available to catch up\n\n\n      this.accumulator = this.accumulator % dt;\n      const t = this.accumulator / dt;\n\n      for (let j = 0; j !== this.bodies.length; j++) {\n        const b = this.bodies[j];\n        b.previousPosition.lerp(b.position, t, b.interpolatedPosition);\n        b.previousQuaternion.slerp(b.quaternion, t, b.interpolatedQuaternion);\n        b.previousQuaternion.normalize();\n      }\n\n      this.time += timeSinceLastCalled;\n    }\n  }\n\n  internalStep(dt) {\n    this.dt = dt;\n    const contacts = this.contacts;\n    const p1 = World_step_p1;\n    const p2 = World_step_p2;\n    const N = this.bodies.length;\n    const bodies = this.bodies;\n    const solver = this.solver;\n    const gravity = this.gravity;\n    const doProfiling = this.doProfiling;\n    const profile = this.profile;\n    const DYNAMIC = Body.DYNAMIC;\n    let profilingStart = -Infinity;\n    const constraints = this.constraints;\n    const frictionEquationPool = World_step_frictionEquationPool;\n    gravity.length();\n    const gx = gravity.x;\n    const gy = gravity.y;\n    const gz = gravity.z;\n    let i = 0;\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    } // Add gravity to all objects\n\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n\n      if (bi.type === DYNAMIC) {\n        // Only for dynamic bodies\n        const f = bi.force;\n        const m = bi.mass;\n        f.x += m * gx;\n        f.y += m * gy;\n        f.z += m * gz;\n      }\n    } // Update subsystems\n\n\n    for (let i = 0, Nsubsystems = this.subsystems.length; i !== Nsubsystems; i++) {\n      this.subsystems[i].update();\n    } // Collision detection\n\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    }\n\n    p1.length = 0; // Clean up pair arrays from last step\n\n    p2.length = 0;\n    this.broadphase.collisionPairs(this, p1, p2);\n\n    if (doProfiling) {\n      profile.broadphase = performance.now() - profilingStart;\n    } // Remove constrained pairs with collideConnected == false\n\n\n    let Nconstraints = constraints.length;\n\n    for (i = 0; i !== Nconstraints; i++) {\n      const c = constraints[i];\n\n      if (!c.collideConnected) {\n        for (let j = p1.length - 1; j >= 0; j -= 1) {\n          if (c.bodyA === p1[j] && c.bodyB === p2[j] || c.bodyB === p1[j] && c.bodyA === p2[j]) {\n            p1.splice(j, 1);\n            p2.splice(j, 1);\n          }\n        }\n      }\n    }\n\n    this.collisionMatrixTick(); // Generate contacts\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    }\n\n    const oldcontacts = World_step_oldContacts;\n    const NoldContacts = contacts.length;\n\n    for (i = 0; i !== NoldContacts; i++) {\n      oldcontacts.push(contacts[i]);\n    }\n\n    contacts.length = 0; // Transfer FrictionEquation from current list to the pool for reuse\n\n    const NoldFrictionEquations = this.frictionEquations.length;\n\n    for (i = 0; i !== NoldFrictionEquations; i++) {\n      frictionEquationPool.push(this.frictionEquations[i]);\n    }\n\n    this.frictionEquations.length = 0;\n    this.narrowphase.getContacts(p1, p2, this, contacts, oldcontacts, // To be reused\n    this.frictionEquations, frictionEquationPool);\n\n    if (doProfiling) {\n      profile.narrowphase = performance.now() - profilingStart;\n    } // Loop over all collisions\n\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    } // Add all friction eqs\n\n\n    for (i = 0; i < this.frictionEquations.length; i++) {\n      solver.addEquation(this.frictionEquations[i]);\n    }\n\n    const ncontacts = contacts.length;\n\n    for (let k = 0; k !== ncontacts; k++) {\n      // Current contact\n      const c = contacts[k]; // Get current collision indeces\n\n      const bi = c.bi;\n      const bj = c.bj;\n      const si = c.si;\n      const sj = c.sj; // Get collision properties\n\n      let cm;\n\n      if (bi.material && bj.material) {\n        cm = this.getContactMaterial(bi.material, bj.material) || this.defaultContactMaterial;\n      } else {\n        cm = this.defaultContactMaterial;\n      } // c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;\n\n\n      cm.friction; // c.restitution = cm.restitution;\n      // If friction or restitution were specified in the material, use them\n\n      if (bi.material && bj.material) {\n        if (bi.material.friction >= 0 && bj.material.friction >= 0) {\n          bi.material.friction * bj.material.friction;\n        }\n\n        if (bi.material.restitution >= 0 && bj.material.restitution >= 0) {\n          c.restitution = bi.material.restitution * bj.material.restitution;\n        }\n      } // c.setSpookParams(\n      //           cm.contactEquationStiffness,\n      //           cm.contactEquationRelaxation,\n      //           dt\n      //       );\n\n\n      solver.addEquation(c); // // Add friction constraint equation\n      // if(mu > 0){\n      // \t// Create 2 tangent equations\n      // \tconst mug = mu * gnorm;\n      // \tconst reducedMass = (bi.invMass + bj.invMass);\n      // \tif(reducedMass > 0){\n      // \t\treducedMass = 1/reducedMass;\n      // \t}\n      // \tconst pool = frictionEquationPool;\n      // \tconst c1 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);\n      // \tconst c2 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);\n      // \tthis.frictionEquations.push(c1, c2);\n      // \tc1.bi = c2.bi = bi;\n      // \tc1.bj = c2.bj = bj;\n      // \tc1.minForce = c2.minForce = -mug*reducedMass;\n      // \tc1.maxForce = c2.maxForce = mug*reducedMass;\n      // \t// Copy over the relative vectors\n      // \tc1.ri.copy(c.ri);\n      // \tc1.rj.copy(c.rj);\n      // \tc2.ri.copy(c.ri);\n      // \tc2.rj.copy(c.rj);\n      // \t// Construct tangents\n      // \tc.ni.tangents(c1.t, c2.t);\n      //           // Set spook params\n      //           c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);\n      //           c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);\n      //           c1.enabled = c2.enabled = c.enabled;\n      // \t// Add equations to solver\n      // \tsolver.addEquation(c1);\n      // \tsolver.addEquation(c2);\n      // }\n\n      if (bi.allowSleep && bi.type === Body.DYNAMIC && bi.sleepState === Body.SLEEPING && bj.sleepState === Body.AWAKE && bj.type !== Body.STATIC) {\n        const speedSquaredB = bj.velocity.lengthSquared() + bj.angularVelocity.lengthSquared();\n        const speedLimitSquaredB = bj.sleepSpeedLimit ** 2;\n\n        if (speedSquaredB >= speedLimitSquaredB * 2) {\n          bi.wakeUpAfterNarrowphase = true;\n        }\n      }\n\n      if (bj.allowSleep && bj.type === Body.DYNAMIC && bj.sleepState === Body.SLEEPING && bi.sleepState === Body.AWAKE && bi.type !== Body.STATIC) {\n        const speedSquaredA = bi.velocity.lengthSquared() + bi.angularVelocity.lengthSquared();\n        const speedLimitSquaredA = bi.sleepSpeedLimit ** 2;\n\n        if (speedSquaredA >= speedLimitSquaredA * 2) {\n          bj.wakeUpAfterNarrowphase = true;\n        }\n      } // Now we know that i and j are in contact. Set collision matrix state\n\n\n      this.collisionMatrix.set(bi, bj, true);\n\n      if (!this.collisionMatrixPrevious.get(bi, bj)) {\n        // First contact!\n        // We reuse the collideEvent object, otherwise we will end up creating new objects for each new contact, even if there's no event listener attached.\n        World_step_collideEvent.body = bj;\n        World_step_collideEvent.contact = c;\n        bi.dispatchEvent(World_step_collideEvent);\n        World_step_collideEvent.body = bi;\n        bj.dispatchEvent(World_step_collideEvent);\n      }\n\n      this.bodyOverlapKeeper.set(bi.id, bj.id);\n      this.shapeOverlapKeeper.set(si.id, sj.id);\n    }\n\n    this.emitContactEvents();\n\n    if (doProfiling) {\n      profile.makeContactConstraints = performance.now() - profilingStart;\n      profilingStart = performance.now();\n    } // Wake up bodies\n\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n\n      if (bi.wakeUpAfterNarrowphase) {\n        bi.wakeUp();\n        bi.wakeUpAfterNarrowphase = false;\n      }\n    } // Add user-added constraints\n\n\n    Nconstraints = constraints.length;\n\n    for (i = 0; i !== Nconstraints; i++) {\n      const c = constraints[i];\n      c.update();\n\n      for (let j = 0, Neq = c.equations.length; j !== Neq; j++) {\n        const eq = c.equations[j];\n        solver.addEquation(eq);\n      }\n    } // Solve the constrained system\n\n\n    solver.solve(dt, this);\n\n    if (doProfiling) {\n      profile.solve = performance.now() - profilingStart;\n    } // Remove all contacts from solver\n\n\n    solver.removeAllEquations(); // Apply damping, see http://code.google.com/p/bullet/issues/detail?id=74 for details\n\n    const pow = Math.pow;\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n\n      if (bi.type & DYNAMIC) {\n        // Only for dynamic bodies\n        const ld = pow(1.0 - bi.linearDamping, dt);\n        const v = bi.velocity;\n        v.scale(ld, v);\n        const av = bi.angularVelocity;\n\n        if (av) {\n          const ad = pow(1.0 - bi.angularDamping, dt);\n          av.scale(ad, av);\n        }\n      }\n    }\n\n    this.dispatchEvent(World_step_preStepEvent); // Leap frog\n    // vnew = v + h*f/m\n    // xnew = x + h*vnew\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    }\n\n    const stepnumber = this.stepnumber;\n    const quatNormalize = stepnumber % (this.quatNormalizeSkip + 1) === 0;\n    const quatNormalizeFast = this.quatNormalizeFast;\n\n    for (i = 0; i !== N; i++) {\n      bodies[i].integrate(dt, quatNormalize, quatNormalizeFast);\n    }\n\n    this.clearForces();\n    this.broadphase.dirty = true;\n\n    if (doProfiling) {\n      profile.integrate = performance.now() - profilingStart;\n    } // Update step number\n\n\n    this.stepnumber += 1;\n    this.dispatchEvent(World_step_postStepEvent); // Sleeping update\n\n    let hasActiveBodies = true;\n\n    if (this.allowSleep) {\n      hasActiveBodies = false;\n\n      for (i = 0; i !== N; i++) {\n        const bi = bodies[i];\n        bi.sleepTick(this.time);\n\n        if (bi.sleepState !== Body.SLEEPING) {\n          hasActiveBodies = true;\n        }\n      }\n    }\n\n    this.hasActiveBodies = hasActiveBodies;\n  }\n\n  emitContactEvents() {\n    const hasBeginContact = this.hasAnyEventListener('beginContact');\n    const hasEndContact = this.hasAnyEventListener('endContact');\n\n    if (hasBeginContact || hasEndContact) {\n      this.bodyOverlapKeeper.getDiff(additions, removals);\n    }\n\n    if (hasBeginContact) {\n      for (let i = 0, l = additions.length; i < l; i += 2) {\n        beginContactEvent.bodyA = this.getBodyById(additions[i]);\n        beginContactEvent.bodyB = this.getBodyById(additions[i + 1]);\n        this.dispatchEvent(beginContactEvent);\n      }\n\n      beginContactEvent.bodyA = beginContactEvent.bodyB = null;\n    }\n\n    if (hasEndContact) {\n      for (let i = 0, l = removals.length; i < l; i += 2) {\n        endContactEvent.bodyA = this.getBodyById(removals[i]);\n        endContactEvent.bodyB = this.getBodyById(removals[i + 1]);\n        this.dispatchEvent(endContactEvent);\n      }\n\n      endContactEvent.bodyA = endContactEvent.bodyB = null;\n    }\n\n    additions.length = removals.length = 0;\n    const hasBeginShapeContact = this.hasAnyEventListener('beginShapeContact');\n    const hasEndShapeContact = this.hasAnyEventListener('endShapeContact');\n\n    if (hasBeginShapeContact || hasEndShapeContact) {\n      this.shapeOverlapKeeper.getDiff(additions, removals);\n    }\n\n    if (hasBeginShapeContact) {\n      for (let i = 0, l = additions.length; i < l; i += 2) {\n        const shapeA = this.getShapeById(additions[i]);\n        const shapeB = this.getShapeById(additions[i + 1]);\n        beginShapeContactEvent.shapeA = shapeA;\n        beginShapeContactEvent.shapeB = shapeB;\n        if (shapeA) beginShapeContactEvent.bodyA = shapeA.body;\n        if (shapeB) beginShapeContactEvent.bodyB = shapeB.body;\n        this.dispatchEvent(beginShapeContactEvent);\n      }\n\n      beginShapeContactEvent.bodyA = beginShapeContactEvent.bodyB = beginShapeContactEvent.shapeA = beginShapeContactEvent.shapeB = null;\n    }\n\n    if (hasEndShapeContact) {\n      for (let i = 0, l = removals.length; i < l; i += 2) {\n        const shapeA = this.getShapeById(removals[i]);\n        const shapeB = this.getShapeById(removals[i + 1]);\n        endShapeContactEvent.shapeA = shapeA;\n        endShapeContactEvent.shapeB = shapeB;\n        if (shapeA) endShapeContactEvent.bodyA = shapeA.body;\n        if (shapeB) endShapeContactEvent.bodyB = shapeB.body;\n        this.dispatchEvent(endShapeContactEvent);\n      }\n\n      endShapeContactEvent.bodyA = endShapeContactEvent.bodyB = endShapeContactEvent.shapeA = endShapeContactEvent.shapeB = null;\n    }\n  }\n  /**\n   * Sets all body forces in the world to zero.\n   */\n\n\n  clearForces() {\n    const bodies = this.bodies;\n    const N = bodies.length;\n\n    for (let i = 0; i !== N; i++) {\n      const b = bodies[i];\n      b.force;\n      b.torque;\n      b.force.set(0, 0, 0);\n      b.torque.set(0, 0, 0);\n    }\n  }\n\n} // Temp stuff\n\nnew AABB();\nconst tmpRay = new Ray(); // performance.now() fallback on Date.now()\n\nconst performance = globalThis.performance || {};\n\nif (!performance.now) {\n  let nowOffset = Date.now();\n\n  if (performance.timing && performance.timing.navigationStart) {\n    nowOffset = performance.timing.navigationStart;\n  }\n\n  performance.now = () => Date.now() - nowOffset;\n}\n\nnew Vec3(); // Dispatched after the world has stepped forward in time.\n// Reusable event objects to save memory.\n\nconst World_step_postStepEvent = {\n  type: 'postStep'\n}; // Dispatched before the world steps forward in time.\n\nconst World_step_preStepEvent = {\n  type: 'preStep'\n};\nconst World_step_collideEvent = {\n  type: Body.COLLIDE_EVENT_NAME,\n  body: null,\n  contact: null\n}; // Pools for unused objects\n\nconst World_step_oldContacts = [];\nconst World_step_frictionEquationPool = []; // Reusable arrays for collision pairs\n\nconst World_step_p1 = [];\nconst World_step_p2 = []; // Stuff for emitContactEvents\n\nconst additions = [];\nconst removals = [];\nconst beginContactEvent = {\n  type: 'beginContact',\n  bodyA: null,\n  bodyB: null\n};\nconst endContactEvent = {\n  type: 'endContact',\n  bodyA: null,\n  bodyB: null\n};\nconst beginShapeContactEvent = {\n  type: 'beginShapeContact',\n  bodyA: null,\n  bodyB: null,\n  shapeA: null,\n  shapeB: null\n};\nconst endShapeContactEvent = {\n  type: 'endShapeContact',\n  bodyA: null,\n  bodyB: null,\n  shapeA: null,\n  shapeB: null\n};\n\nexport { AABB, ArrayCollisionMatrix, BODY_SLEEP_STATES, BODY_TYPES, Body, Box, Broadphase, COLLISION_TYPES, ConeTwistConstraint, Constraint, ContactEquation, ContactMaterial, ConvexPolyhedron, Cylinder, DistanceConstraint, Equation, EventTarget, FrictionEquation, GSSolver, GridBroadphase, Heightfield, HingeConstraint, JacobianElement, LockConstraint, Mat3, Material, NaiveBroadphase, Narrowphase, ObjectCollisionMatrix, Particle, Plane, PointToPointConstraint, Pool, Quaternion, RAY_MODES, Ray, RaycastResult, RaycastVehicle, RigidVehicle, RotationalEquation, RotationalMotorEquation, SAPBroadphase, SHAPE_TYPES, SPHSystem, Shape, Solver, Sphere, SplitSolver, Spring, Transform, Trimesh, Vec3, Vec3Pool, WheelInfo, World };\n","import { ContactMaterial } from 'cannon-es'\n\nimport type { CannonMessageBody } from '../types'\nimport type { CreateMaterial } from './material'\nimport type { State } from './state'\nimport type { WithUUID } from './types'\n\nexport const addContactMaterial = (\n  world: State['world'],\n  createMaterial: CreateMaterial,\n  [materialA, materialB, options]: CannonMessageBody<'addContactMaterial'>['props'],\n  uuid: string,\n) => {\n  const matA = createMaterial(materialA)\n  const matB = createMaterial(materialB)\n  const contactMaterial: WithUUID<ContactMaterial> = new ContactMaterial(matA, matB, options)\n  contactMaterial.uuid = uuid\n  world.addContactMaterial(contactMaterial)\n}\n\nexport const removeContactMaterial = (world: State['world'], cmUUID: string) => {\n  const index = world.contactmaterials.findIndex(({ uuid }) => uuid === cmUUID)\n  const [{ id: i }, { id: j }] = world.contactmaterials[index].materials\n\n  world.contactmaterials.splice(index, 1)\n  delete world.contactMaterialTable.data[i < j ? `${i}-${j}` : `${j}-${i}`]\n}\n","import { Material } from 'cannon-es'\n\ntype MaterialOptions = {\n  friction?: number\n  name?: string | symbol\n  restitution?: number\n}\n\nexport type CreateMaterial = (nameOrOptions?: MaterialOptions | string) => Material\n\nlet materialId = 0\n\nexport const createMaterialFactory =\n  (materials: Record<string | symbol, Material>): CreateMaterial =>\n  (nameOrOptions = {}) => {\n    const materialOptions =\n      typeof nameOrOptions === 'string'\n        ? { name: nameOrOptions }\n        : { name: Symbol.for(`Material${materialId++}`), ...nameOrOptions }\n    const { name } = materialOptions\n    materials[name] = materials[name] || new Material(materialOptions)\n    return materials[name]\n  }\n","import {\n  Body,\n  Box,\n  ConvexPolyhedron,\n  Cylinder,\n  Heightfield,\n  Material,\n  Particle,\n  Plane,\n  Quaternion,\n  Sphere,\n  Trimesh,\n  Vec3,\n} from 'cannon-es'\n/**\n * @typedef { import('cannon-es').MaterialOptions } MaterialOptions\n */\n\nconst makeVec3 = ([x, y, z]) => new Vec3(x, y, z)\nconst prepareSphere = (args) => (Array.isArray(args) ? args : [args])\nconst prepareConvexPolyhedron = ([v, faces, n, a, boundingSphereRadius]) => [\n  {\n    axes: a ? a.map(makeVec3) : undefined,\n    boundingSphereRadius,\n    faces,\n    normals: n ? n.map(makeVec3) : undefined,\n    vertices: v ? v.map(makeVec3) : undefined,\n  },\n]\n\nfunction createShape(type, args) {\n  switch (type) {\n    case 'Box':\n      return new Box(new Vec3(...args.map((v) => v / 2))) // extents => halfExtents\n    case 'ConvexPolyhedron':\n      return new ConvexPolyhedron(...prepareConvexPolyhedron(args))\n    case 'Cylinder':\n      return new Cylinder(...args) // [ radiusTop, radiusBottom, height, numSegments ] = args\n    case 'Heightfield':\n      return new Heightfield(...args) // [ Array data, options: {minValue, maxValue, elementSize}  ] = args\n    case 'Particle':\n      return new Particle() // no args\n    case 'Plane':\n      return new Plane() // no args, infinite x and y\n    case 'Sphere':\n      return new Sphere(...prepareSphere(args)) // radius = args\n    case 'Trimesh':\n      return new Trimesh(...args) // [vertices, indices] = args\n  }\n}\n\n/**\n * @function\n * @param {Object} options\n * @param {string} options.uuid\n * @param {BodyProps} options.props\n * @param {BodyShapeType} options.type\n * @param {(materialOptions: MaterialOptions) => Material =} options.createMaterial\n * @returns {Body}\n */\nexport const propsToBody = (options) => {\n  const { uuid, props, type, createMaterial = (materialOptions) => new Material(materialOptions) } = options\n  const {\n    angularFactor = [1, 1, 1],\n    angularVelocity = [0, 0, 0],\n    args = [],\n    collisionResponse,\n    linearFactor = [1, 1, 1],\n    mass,\n    material,\n    onCollide,\n    position = [0, 0, 0],\n    rotation = [0, 0, 0],\n    shapes,\n    type: bodyType,\n    velocity = [0, 0, 0],\n    ...extra\n  } = props\n\n  const body = new Body({\n    ...extra,\n    mass: bodyType === 'Static' ? 0 : mass,\n    material: material ? createMaterial(material) : undefined,\n    type: bodyType ? Body[bodyType.toUpperCase()] : undefined,\n  })\n  body.uuid = uuid\n\n  if (collisionResponse !== undefined) {\n    body.collisionResponse = collisionResponse\n  }\n\n  if (type === 'Compound') {\n    shapes.forEach(({ type, args, position, rotation, material, ...extra }) => {\n      const shapeBody = body.addShape(\n        createShape(type, args),\n        position ? new Vec3(...position) : undefined,\n        rotation ? new Quaternion().setFromEuler(...rotation) : undefined,\n      )\n      if (material) shapeBody.material = createMaterial(material)\n      Object.assign(shapeBody, extra)\n    })\n  } else {\n    body.addShape(createShape(type, args))\n  }\n\n  body.position.set(position[0], position[1], position[2])\n  body.quaternion.setFromEuler(rotation[0], rotation[1], rotation[2])\n  body.velocity.set(velocity[0], velocity[1], velocity[2])\n  body.angularVelocity.set(angularVelocity[0], angularVelocity[1], angularVelocity[2])\n  body.linearFactor.set(linearFactor[0], linearFactor[1], linearFactor[2])\n  body.angularFactor.set(angularFactor[0], angularFactor[1], angularFactor[2])\n  return body\n}\n","import { propsToBody } from '../../props-to-body'\nimport type { CannonMessageMap } from '../../types'\nimport type { CreateMaterial } from '../material'\nimport type { State } from '../state'\nimport type { CannonCollideEvent, CannonWorkerGlobalScope } from '../types'\n\ndeclare const self: CannonWorkerGlobalScope\n\nexport const addBodies = (\n  state: State,\n  createMaterial: CreateMaterial,\n  { props, type, uuid }: CannonMessageMap['addBodies'],\n) => {\n  for (let i = 0; i < uuid.length; i++) {\n    const body = propsToBody({\n      createMaterial,\n      props: props[i],\n      type,\n      uuid: uuid[i],\n    })\n    state.world.addBody(body)\n\n    if (props[i].onCollide)\n      body.addEventListener('collide', ({ type, body, target, contact }: CannonCollideEvent) => {\n        if (!body.uuid || !target.uuid) return\n\n        const { ni, ri, rj, bi, bj, id } = contact\n        const contactPoint = bi.position.vadd(ri)\n        const contactNormal = bi === body ? ni : ni.scale(-1)\n\n        self.postMessage({\n          body: body.uuid,\n          collisionFilters: {\n            bodyFilterGroup: body.collisionFilterGroup,\n            bodyFilterMask: body.collisionFilterMask,\n            targetFilterGroup: target.collisionFilterGroup,\n            targetFilterMask: target.collisionFilterMask,\n          },\n          contact: {\n            // @ts-expect-error TODO: use id instead of uuid\n            bi: bi.uuid,\n            // @ts-expect-error TODO: use id instead of uuid\n            bj: bj.uuid,\n            // Normal of the contact, relative to the colliding body\n            contactNormal: contactNormal.toArray(),\n            // World position of the contact\n            contactPoint: contactPoint.toArray(),\n            id,\n            impactVelocity: contact.getImpactVelocityAlongNormal(),\n            ni: ni.toArray(),\n            ri: ri.toArray(),\n            rj: rj.toArray(),\n          },\n          op: 'event',\n          target: target.uuid,\n          type,\n        })\n      })\n  }\n}\n","import { Vec3 } from 'cannon-es'\n\nimport type { Triplet } from '../types'\n\nexport const tripletToVec3 = (t?: Triplet) => (t ? new Vec3(...t) : undefined)\n","import {\n  ConeTwistConstraint,\n  Constraint,\n  DistanceConstraint,\n  HingeConstraint,\n  LockConstraint,\n  PointToPointConstraint,\n} from 'cannon-es'\n\nimport type { CannonMessageMap } from '../../types'\nimport type { State } from '../state'\nimport { tripletToVec3 } from '../triplet-to-vec3'\nimport type { WithUUID } from '../types'\n\nexport const addConstraint = (\n  state: State,\n  {\n    props: [\n      bodyA,\n      bodyB,\n      {\n        angle,\n        axisA,\n        axisB,\n        collideConnected,\n        distance,\n        maxForce,\n        maxMultiplier,\n        pivotA,\n        pivotB,\n        twistAngle,\n        wakeUpBodies,\n      },\n    ],\n    type,\n    uuid,\n  }: CannonMessageMap['addConstraint'],\n) => {\n  let constraint: WithUUID<Constraint>\n\n  switch (type) {\n    case 'PointToPoint':\n      constraint = new PointToPointConstraint(\n        state.bodies[bodyA],\n        tripletToVec3(pivotA),\n        state.bodies[bodyB],\n        tripletToVec3(pivotB),\n        maxForce,\n      )\n      break\n    case 'ConeTwist':\n      constraint = new ConeTwistConstraint(state.bodies[bodyA], state.bodies[bodyB], {\n        angle,\n        axisA: tripletToVec3(axisA),\n        axisB: tripletToVec3(axisB),\n        collideConnected,\n        maxForce,\n        pivotA: tripletToVec3(pivotA),\n        pivotB: tripletToVec3(pivotB),\n        twistAngle,\n      })\n      break\n    case 'Hinge':\n      constraint = new HingeConstraint(state.bodies[bodyA], state.bodies[bodyB], {\n        axisA: tripletToVec3(axisA),\n        axisB: tripletToVec3(axisB),\n        collideConnected,\n        maxForce,\n        pivotA: tripletToVec3(pivotA),\n        pivotB: tripletToVec3(pivotB),\n      })\n      break\n    case 'Distance':\n      constraint = new DistanceConstraint(state.bodies[bodyA], state.bodies[bodyB], distance, maxForce)\n      break\n    case 'Lock':\n      constraint = new LockConstraint(state.bodies[bodyA], state.bodies[bodyB], { maxForce })\n      break\n    default:\n      constraint = new Constraint(state.bodies[bodyA], state.bodies[bodyB], {\n        collideConnected,\n        wakeUpBodies,\n      })\n      break\n  }\n  constraint.uuid = uuid\n  state.world.addConstraint(constraint)\n\n  if (maxMultiplier !== undefined) {\n    const postStepConstraint = () => {\n      // The multiplier is proportional to how much force is added to the bodies by the constraint.\n      // If this exceeds a limit the constraint is disabled.\n      const multiplier = Math.abs(constraint.equations[0].multiplier)\n      if (multiplier > maxMultiplier) {\n        constraint.disable()\n      }\n    }\n    state.constraints[uuid] = postStepConstraint\n    state.world.addEventListener('postStep', state.constraints[uuid])\n  }\n}\n","import type { Body, RayOptions } from 'cannon-es'\nimport { Ray, RAY_MODES, RaycastResult } from 'cannon-es'\n\nimport type { CannonMessageMap } from '../../types'\nimport type { State } from '../state'\nimport { tripletToVec3 } from '../triplet-to-vec3'\nimport type { CannonWorkerGlobalScope, WithUUID } from '../types'\n\ndeclare const self: CannonWorkerGlobalScope\n\nfunction toUppercase<T extends string>(str: T): Uppercase<T> {\n  return str.toUpperCase() as Uppercase<T>\n}\n\nexport const addRay = (\n  state: State,\n  { props: { from, mode, to, ...rayOptions }, uuid }: CannonMessageMap['addRay'],\n) => {\n  const ray = new Ray(tripletToVec3(from), tripletToVec3(to))\n\n  const options: RayOptions = {\n    mode: RAY_MODES[toUppercase(mode)],\n    result: new RaycastResult(),\n    ...rayOptions,\n  }\n\n  state.rays[uuid] = () => {\n    ray.intersectWorld(state.world, options)\n\n    if (!options.result || !options.result.body) return\n\n    const { body, shape, rayFromWorld, rayToWorld, hitNormalWorld, hitPointWorld, ...rest } = options.result\n\n    const bodyUUID = (body as WithUUID<Body>).uuid\n\n    if (!bodyUUID) return\n\n    self.postMessage({\n      body: bodyUUID,\n      hitNormalWorld: hitNormalWorld.toArray(),\n      hitPointWorld: hitPointWorld.toArray(),\n      op: 'event',\n      ray: {\n        collisionFilterGroup: ray.collisionFilterGroup,\n        collisionFilterMask: ray.collisionFilterMask,\n        direction: ray.direction.toArray(),\n        from,\n        to,\n        uuid,\n      },\n      rayFromWorld: rayFromWorld.toArray(),\n      rayToWorld: rayToWorld.toArray(),\n      shape: shape ? { ...shape, body: bodyUUID } : null,\n      type: 'rayhit',\n      ...rest,\n    })\n  }\n\n  state.world.addEventListener('preStep', state.rays[uuid])\n}\n","import { RaycastVehicle } from 'cannon-es'\n\nimport type { CannonMessageMap } from '../../types'\nimport type { State } from '../state'\nimport { tripletToVec3 } from '../triplet-to-vec3'\n\nexport const addRaycastVehicle = (state: State, data: CannonMessageMap['addRaycastVehicle']) => {\n  const [chassisBody, wheels, wheelInfos, indexForwardAxis, indexRightAxis, indexUpAxis] = data.props\n\n  const vehicle = new RaycastVehicle({\n    chassisBody: state.bodies[chassisBody],\n    indexForwardAxis,\n    indexRightAxis,\n    indexUpAxis,\n  })\n\n  vehicle.world = state.world\n\n  for (let i = 0; i < wheelInfos.length; i++) {\n    const { axleLocal, chassisConnectionPointLocal, directionLocal, ...rest } = wheelInfos[i]\n\n    vehicle.addWheel({\n      axleLocal: tripletToVec3(axleLocal),\n      chassisConnectionPointLocal: tripletToVec3(chassisConnectionPointLocal),\n      directionLocal: tripletToVec3(directionLocal),\n      ...rest,\n    })\n  }\n\n  const preStep = () => {\n    vehicle.updateVehicle(state.world.dt)\n  }\n\n  const postStep = () => {\n    for (let i = 0; i < vehicle.wheelInfos.length; i++) {\n      vehicle.updateWheelTransform(i)\n\n      const t = vehicle.wheelInfos[i].worldTransform\n      const wheelBody = state.bodies[wheels[i]]\n\n      wheelBody.position.copy(t.position)\n      wheelBody.quaternion.copy(t.quaternion)\n    }\n  }\n\n  state.vehicles[data.uuid] = { postStep, preStep, vehicle }\n\n  state.world.addEventListener('preStep', preStep)\n  state.world.addEventListener('postStep', postStep)\n}\n","import { Spring } from 'cannon-es'\n\nimport type { CannonMessageMap } from '../../types'\nimport type { State } from '../state'\nimport { tripletToVec3 } from '../triplet-to-vec3'\nimport type { WithUUID } from '../types'\n\nexport const addSpring = (\n  state: State,\n  {\n    props: [\n      bodyA,\n      bodyB,\n      { damping, localAnchorA, localAnchorB, restLength, stiffness, worldAnchorA, worldAnchorB },\n    ],\n    uuid,\n  }: CannonMessageMap['addSpring'],\n) => {\n  const spring: WithUUID<Spring> = new Spring(state.bodies[bodyA], state.bodies[bodyB], {\n    damping,\n    localAnchorA: tripletToVec3(localAnchorA),\n    localAnchorB: tripletToVec3(localAnchorB),\n    restLength,\n    stiffness,\n    worldAnchorA: tripletToVec3(worldAnchorA),\n    worldAnchorB: tripletToVec3(worldAnchorB),\n  })\n\n  spring.uuid = uuid\n\n  const postStepSpring = () => spring.applyForce()\n\n  state.springs[uuid] = postStepSpring\n  state.springInstances[uuid] = spring\n\n  // Compute the force after each step\n  state.world.addEventListener('postStep', state.springs[uuid])\n}\n","import type { Body } from 'cannon-es'\nimport { GSSolver, NaiveBroadphase, SAPBroadphase, SplitSolver, Vec3 } from 'cannon-es'\n\nimport type { CannonMessageProps } from '../../types'\nimport type { DecoratedWorld } from '../state'\nimport type { CannonWorkerGlobalScope, WithUUID } from '../types'\n\ndeclare const self: CannonWorkerGlobalScope\n\ntype TwoBodies = {\n  bodyA?: WithUUID<Body>\n  bodyB?: WithUUID<Body>\n}\n\nfunction emitBeginContact({ bodyA, bodyB }: TwoBodies) {\n  if (!bodyA?.uuid || !bodyB?.uuid) return\n  self.postMessage({ bodyA: bodyA.uuid, bodyB: bodyB.uuid, op: 'event', type: 'collideBegin' })\n}\n\nfunction emitEndContact({ bodyA, bodyB }: TwoBodies) {\n  if (!bodyA?.uuid || !bodyB?.uuid) return\n  self.postMessage({ bodyA: bodyA.uuid, bodyB: bodyB.uuid, op: 'event', type: 'collideEnd' })\n}\n\nexport const init = (\n  world: DecoratedWorld,\n  {\n    allowSleep,\n    axisIndex = 0,\n    broadphase,\n    defaultContactMaterial,\n    frictionGravity,\n    gravity,\n    iterations,\n    quatNormalizeFast,\n    quatNormalizeSkip,\n    solver,\n    tolerance,\n  }: CannonMessageProps<'init'>,\n): void => {\n  world.allowSleep = allowSleep\n  world.gravity.set(...gravity)\n  world.frictionGravity = frictionGravity ? new Vec3(...frictionGravity) : undefined\n  world.quatNormalizeFast = quatNormalizeFast\n  world.quatNormalizeSkip = quatNormalizeSkip\n\n  if (solver === 'Split') {\n    world.solver = new SplitSolver(new GSSolver())\n  }\n\n  if (world.solver instanceof GSSolver) {\n    world.solver.tolerance = tolerance\n    world.solver.iterations = iterations\n  }\n\n  world.broadphase = broadphase === 'SAP' ? new SAPBroadphase(world) : new NaiveBroadphase()\n\n  if (world.broadphase instanceof SAPBroadphase) {\n    world.broadphase.axisIndex = axisIndex\n  }\n\n  world.addEventListener('beginContact', emitBeginContact)\n  world.addEventListener('endContact', emitEndContact)\n\n  Object.assign(world.defaultContactMaterial, defaultContactMaterial)\n}\n","import { Quaternion, Vec3 } from 'cannon-es'\n\nimport type { CannonMessageMap, Observation, PropValue, WorkerFrameMessage } from '../../types'\nimport type { State } from '../state'\nimport type { CannonWorkerGlobalScope } from '../types'\n\ndeclare const self: CannonWorkerGlobalScope\n\nconst isQorV = (v: unknown): v is Quaternion | Vec3 => v instanceof Quaternion || v instanceof Vec3\n\nexport const step = (\n  state: State,\n  { positions, props: { maxSubSteps, stepSize, timeSinceLastCalled }, quaternions }: CannonMessageMap['step'],\n) => {\n  state.world.step(stepSize, timeSinceLastCalled, maxSubSteps)\n\n  for (let i = 0; i < state.world.bodies.length; i += 1) {\n    const p = state.world.bodies[i].position\n    const q = state.world.bodies[i].quaternion\n\n    positions[3 * i + 0] = p.x\n    positions[3 * i + 1] = p.y\n    positions[3 * i + 2] = p.z\n\n    quaternions[4 * i + 0] = q.x\n    quaternions[4 * i + 1] = q.y\n    quaternions[4 * i + 2] = q.z\n    quaternions[4 * i + 3] = q.w\n  }\n\n  const observations: Observation[] = []\n\n  for (const id of Object.keys(state.subscriptions)) {\n    const [uuid, type, target = 'bodies'] = state.subscriptions[id]\n\n    const { bodies, vehicles } = state\n\n    const value =\n      target === 'vehicles'\n        ? // @ts-expect-error TODO: Differentiate these \"types\"\n          vehicles[uuid].vehicle[type]\n        : // @ts-expect-error TODO: Differentiate these \"types\"\n          bodies[uuid][type]\n\n    const serializableValue: PropValue<typeof type> = isQorV(value) ? value.toArray() : value\n\n    observations.push([\n      Number(id),\n      serializableValue,\n      // @ts-expect-error TODO: Differentiate these \"types\"\n      type,\n    ])\n  }\n\n  const message: WorkerFrameMessage['data'] = {\n    active: state.world.hasActiveBodies,\n    observations,\n    op: 'frame',\n    positions,\n    quaternions,\n  }\n\n  if (state.bodiesNeedSyncing) {\n    message.bodies = state.world.bodies.reduce((bodies: string[], body) => {\n      if (body.uuid) bodies.push(body.uuid)\n      return bodies\n    }, [])\n    state.bodiesNeedSyncing = false\n  }\n\n  self.postMessage(message, [positions.buffer, quaternions.buffer])\n}\n","import type { Body, Constraint, ContactMaterial, Material, RaycastVehicle, Spring } from 'cannon-es'\nimport { World } from 'cannon-es'\n\nimport type { SubscriptionName, SubscriptionTarget } from '../types'\nimport type { WithUUID } from './types'\n\nexport interface DecoratedWorld extends World {\n  bodies: WithUUID<Body>[]\n  constraints: WithUUID<Constraint>[]\n  contactmaterials: WithUUID<ContactMaterial>[]\n}\n\nexport interface State {\n  bodies: { [uuid: string]: Body }\n  bodiesNeedSyncing: boolean\n  constraints: { [uuid: string]: () => void }\n  materials: { [uuid: string]: Material }\n  rays: { [uuid: string]: () => void }\n  springInstances: { [uuid: string]: Spring }\n  springs: { [uuid: string]: () => void }\n  subscriptions: { [id: string]: [uuid: string, type: SubscriptionName, target: SubscriptionTarget] }\n  vehicles: { [uuid: string]: { postStep: () => void; preStep: () => void; vehicle: RaycastVehicle } }\n  world: DecoratedWorld\n}\n\nexport const state: State = {\n  bodies: {},\n  bodiesNeedSyncing: false,\n  constraints: {},\n  materials: {},\n  rays: {},\n  springInstances: {},\n  springs: {},\n  subscriptions: {},\n  vehicles: {},\n  world: new World(),\n}\n","/// <reference no-default-lib=\"true\"/>\n/// <reference lib=\"esnext\" />\n/// <reference lib=\"webworker\" />\n\nimport { GSSolver, HingeConstraint, NaiveBroadphase, SAPBroadphase, Vec3 } from 'cannon-es'\n\nimport type { CannonMessage } from '../types'\nimport { addContactMaterial, removeContactMaterial } from './contact-material'\nimport { createMaterialFactory } from './material'\nimport { addBodies, addConstraint, addRay, addRaycastVehicle, addSpring, init, step } from './operations'\nimport { state } from './state'\nimport type { CannonWorkerGlobalScope } from './types'\n\n// TODO: Declare this for all files in worker\ndeclare const self: CannonWorkerGlobalScope\n\nconst isHingeConstraint = (c: unknown): c is HingeConstraint => c instanceof HingeConstraint\n\nfunction syncBodies() {\n  state.bodiesNeedSyncing = true\n  state.bodies = state.world.bodies.reduce(\n    (bodies, body) => (body.uuid ? { ...bodies, [body.uuid]: body } : bodies),\n    {},\n  )\n}\n\nconst broadphases = { NaiveBroadphase, SAPBroadphase }\nconst createMaterial = createMaterialFactory(state.materials)\n\nself.onmessage = ({ data }: { data: CannonMessage }) => {\n  switch (data.op) {\n    case 'init': {\n      init(state.world, data.props)\n      break\n    }\n    case 'step': {\n      step(state, data)\n      break\n    }\n    case 'addBodies': {\n      addBodies(state, createMaterial, data)\n      syncBodies()\n      break\n    }\n    case 'removeBodies': {\n      for (let i = 0; i < data.uuid.length; i++) {\n        state.world.removeBody(state.bodies[data.uuid[i]])\n        const key = Object.keys(state.subscriptions).find((k) => state.subscriptions[k][0] === data.uuid[i])\n        if (key) {\n          delete state.subscriptions[key]\n        }\n      }\n      syncBodies()\n      break\n    }\n    case 'subscribe': {\n      const { id, target, type } = data.props\n      state.subscriptions[id] = [data.uuid, type, target]\n      break\n    }\n    case 'unsubscribe': {\n      delete state.subscriptions[data.props]\n      break\n    }\n    case 'setPosition':\n      state.bodies[data.uuid].position.set(data.props[0], data.props[1], data.props[2])\n      break\n    case 'setQuaternion':\n      state.bodies[data.uuid].quaternion.set(data.props[0], data.props[1], data.props[2], data.props[3])\n      break\n    case 'setRotation':\n      state.bodies[data.uuid].quaternion.setFromEuler(data.props[0], data.props[1], data.props[2])\n      break\n    case 'setVelocity':\n      state.bodies[data.uuid].velocity.set(data.props[0], data.props[1], data.props[2])\n      break\n    case 'setAngularVelocity':\n      state.bodies[data.uuid].angularVelocity.set(data.props[0], data.props[1], data.props[2])\n      break\n    case 'setLinearFactor':\n      state.bodies[data.uuid].linearFactor.set(data.props[0], data.props[1], data.props[2])\n      break\n    case 'setAngularFactor':\n      state.bodies[data.uuid].angularFactor.set(data.props[0], data.props[1], data.props[2])\n      break\n    case 'setMass':\n      state.bodies[data.uuid].mass = data.props\n      state.bodies[data.uuid].updateMassProperties()\n      break\n    case 'setMaterial':\n      state.bodies[data.uuid].material = data.props ? createMaterial(data.props) : null\n      break\n    case 'setLinearDamping':\n      state.bodies[data.uuid].linearDamping = data.props\n      break\n    case 'setAngularDamping':\n      state.bodies[data.uuid].angularDamping = data.props\n      break\n    case 'setAllowSleep':\n      state.bodies[data.uuid].allowSleep = data.props\n      break\n    case 'setSleepSpeedLimit':\n      state.bodies[data.uuid].sleepSpeedLimit = data.props\n      break\n    case 'setSleepTimeLimit':\n      state.bodies[data.uuid].sleepTimeLimit = data.props\n      break\n    case 'setCollisionFilterGroup':\n      state.bodies[data.uuid].collisionFilterGroup = data.props\n      break\n    case 'setCollisionFilterMask':\n      state.bodies[data.uuid].collisionFilterMask = data.props\n      break\n    case 'setCollisionResponse':\n      state.bodies[data.uuid].collisionResponse = data.props\n      break\n    case 'setFixedRotation':\n      state.bodies[data.uuid].fixedRotation = data.props\n      break\n    case 'setFrictionGravity':\n      state.world.frictionGravity = data.props ? new Vec3(...data.props) : undefined\n      break\n    case 'setIsTrigger':\n      state.bodies[data.uuid].isTrigger = data.props\n      break\n    case 'setGravity':\n      state.world.gravity.set(data.props[0], data.props[1], data.props[2])\n      break\n    case 'setTolerance':\n      if (state.world.solver instanceof GSSolver) {\n        state.world.solver.tolerance = data.props\n      }\n      break\n    case 'setIterations':\n      if (state.world.solver instanceof GSSolver) {\n        state.world.solver.iterations = data.props\n      }\n      break\n    case 'setBroadphase':\n      state.world.broadphase = new (broadphases[`${data.props}Broadphase`] || NaiveBroadphase)(state.world)\n      break\n    case 'setAxisIndex':\n      if (state.world.broadphase instanceof SAPBroadphase) {\n        state.world.broadphase.axisIndex = data.props === undefined || data.props === null ? 0 : data.props\n      }\n      break\n    case 'applyForce':\n      state.bodies[data.uuid].applyForce(new Vec3(...data.props[0]), new Vec3(...data.props[1]))\n      break\n    case 'applyImpulse':\n      state.bodies[data.uuid].applyImpulse(new Vec3(...data.props[0]), new Vec3(...data.props[1]))\n      break\n    case 'applyLocalForce':\n      state.bodies[data.uuid].applyLocalForce(new Vec3(...data.props[0]), new Vec3(...data.props[1]))\n      break\n    case 'applyLocalImpulse':\n      state.bodies[data.uuid].applyLocalImpulse(new Vec3(...data.props[0]), new Vec3(...data.props[1]))\n      break\n    case 'applyTorque':\n      state.bodies[data.uuid].applyTorque(new Vec3(...data.props[0]))\n      break\n    case 'addConstraint': {\n      addConstraint(state, data)\n      break\n    }\n    case 'removeConstraint':\n      state.world.constraints\n        .filter(({ uuid }) => uuid === data.uuid)\n        .map((c) => state.world.removeConstraint(c))\n      if (state.constraints[data.uuid]) {\n        state.world.removeEventListener('postStep', state.constraints[data.uuid])\n        delete state.constraints[data.uuid]\n      }\n      break\n    case 'enableConstraint':\n      state.world.constraints.filter((c) => c.uuid === data.uuid).map((c) => c.enable())\n      break\n    case 'disableConstraint':\n      state.world.constraints.filter((c) => c.uuid === data.uuid).map((c) => c.disable())\n      break\n    case 'enableConstraintMotor':\n      state.world.constraints\n        .filter((c) => c.uuid === data.uuid)\n        .filter(isHingeConstraint)\n        .map((c) => c.enableMotor())\n      break\n    case 'disableConstraintMotor':\n      state.world.constraints\n        .filter((c) => c.uuid === data.uuid)\n        .filter(isHingeConstraint)\n        .map((c) => c.disableMotor())\n      break\n    case 'setConstraintMotorSpeed':\n      state.world.constraints\n        .filter((c) => c.uuid === data.uuid)\n        .filter(isHingeConstraint)\n        .map((c) => c.setMotorSpeed(data.props))\n      break\n    case 'setConstraintMotorMaxForce':\n      state.world.constraints\n        .filter((c) => c.uuid === data.uuid)\n        .filter(isHingeConstraint)\n        .map((c) => c.setMotorMaxForce(data.props))\n      break\n    case 'addSpring': {\n      addSpring(state, data)\n      break\n    }\n    case 'setSpringStiffness': {\n      state.springInstances[data.uuid].stiffness = data.props\n      break\n    }\n    case 'setSpringRestLength': {\n      state.springInstances[data.uuid].restLength = data.props\n      break\n    }\n    case 'setSpringDamping': {\n      state.springInstances[data.uuid].damping = data.props\n      break\n    }\n    case 'removeSpring': {\n      state.world.removeEventListener('postStep', state.springs[data.uuid])\n      break\n    }\n    case 'addRay': {\n      addRay(state, data)\n      break\n    }\n    case 'removeRay': {\n      state.world.removeEventListener('preStep', state.rays[data.uuid])\n      delete state.rays[data.uuid]\n      break\n    }\n    case 'addRaycastVehicle': {\n      addRaycastVehicle(state, data)\n      break\n    }\n    case 'removeRaycastVehicle': {\n      state.world.removeEventListener('preStep', state.vehicles[data.uuid].preStep)\n      state.world.removeEventListener('postStep', state.vehicles[data.uuid].postStep)\n      state.vehicles[data.uuid].vehicle.world = null\n      delete state.vehicles[data.uuid]\n      const key = Object.keys(state.subscriptions).find((k) => state.subscriptions[k][0] === data.uuid)\n      if (key) {\n        delete state.subscriptions[key]\n      }\n      break\n    }\n    case 'setRaycastVehicleSteeringValue': {\n      const [value, wheelIndex] = data.props\n      state.vehicles[data.uuid].vehicle.setSteeringValue(value, wheelIndex)\n      break\n    }\n    case 'applyRaycastVehicleEngineForce': {\n      const [value, wheelIndex] = data.props\n      state.vehicles[data.uuid].vehicle.applyEngineForce(value, wheelIndex)\n      break\n    }\n    case 'setRaycastVehicleBrake': {\n      const [brake, wheelIndex] = data.props\n      state.vehicles[data.uuid].vehicle.setBrake(brake, wheelIndex)\n      break\n    }\n    case 'addContactMaterial': {\n      addContactMaterial(state.world, createMaterial, data.props, data.uuid)\n      break\n    }\n    case 'removeContactMaterial': {\n      removeContactMaterial(state.world, data.uuid)\n      break\n    }\n    case 'wakeUp': {\n      state.bodies[data.uuid].wakeUp()\n      break\n    }\n    case 'sleep': {\n      state.bodies[data.uuid].sleep()\n      break\n    }\n  }\n}\n"],"names":["addContactMaterial","world","createMaterial","uuid","materialA","materialB","options","matA","matB","contactMaterial","ContactMaterial","removeContactMaterial","cmUUID","index","contactmaterials","findIndex","id","i","j","materials","splice","contactMaterialTable","data","materialId","createMaterialFactory","nameOrOptions","materialOptions","name","Symbol","for","Material","makeVec3","x","y","z","Vec3","prepareSphere","args","Array","isArray","prepareConvexPolyhedron","v","faces","n","a","boundingSphereRadius","axes","map","undefined","normals","vertices","createShape","type","Box","ConvexPolyhedron","Cylinder","Heightfield","Particle","Plane","Sphere","Trimesh","propsToBody","props","angularFactor","angularVelocity","collisionResponse","linearFactor","mass","material","onCollide","position","rotation","shapes","bodyType","velocity","extra","body","Body","toUpperCase","forEach","shapeBody","addShape","Quaternion","setFromEuler","Object","assign","set","quaternion","addBodies","state","length","addBody","addEventListener","target","contact","ni","ri","rj","bi","bj","contactPoint","vadd","contactNormal","scale","self","postMessage","collisionFilters","bodyFilterGroup","collisionFilterGroup","bodyFilterMask","collisionFilterMask","targetFilterGroup","targetFilterMask","toArray","impactVelocity","getImpactVelocityAlongNormal","op","tripletToVec3","t","addConstraint","bodyA","bodyB","angle","axisA","axisB","collideConnected","distance","maxForce","maxMultiplier","pivotA","pivotB","twistAngle","wakeUpBodies","constraint","PointToPointConstraint","bodies","ConeTwistConstraint","HingeConstraint","DistanceConstraint","LockConstraint","Constraint","postStepConstraint","multiplier","Math","abs","equations","disable","constraints","toUppercase","str","addRay","from","mode","to","rayOptions","ray","Ray","RAY_MODES","result","RaycastResult","rays","intersectWorld","shape","rayFromWorld","rayToWorld","hitNormalWorld","hitPointWorld","rest","bodyUUID","direction","addRaycastVehicle","chassisBody","wheels","wheelInfos","indexForwardAxis","indexRightAxis","indexUpAxis","vehicle","RaycastVehicle","axleLocal","chassisConnectionPointLocal","directionLocal","addWheel","preStep","updateVehicle","dt","postStep","updateWheelTransform","worldTransform","wheelBody","copy","vehicles","addSpring","damping","localAnchorA","localAnchorB","restLength","stiffness","worldAnchorA","worldAnchorB","spring","Spring","postStepSpring","applyForce","springs","springInstances","emitBeginContact","emitEndContact","init","allowSleep","axisIndex","broadphase","defaultContactMaterial","frictionGravity","gravity","iterations","quatNormalizeFast","quatNormalizeSkip","solver","tolerance","SplitSolver","GSSolver","SAPBroadphase","NaiveBroadphase","isQorV","step","positions","maxSubSteps","stepSize","timeSinceLastCalled","quaternions","p","q","w","observations","keys","subscriptions","value","serializableValue","push","Number","message","active","hasActiveBodies","bodiesNeedSyncing","reduce","buffer","World","isHingeConstraint","c","syncBodies","broadphases","onmessage","removeBody","key","find","k","updateMassProperties","linearDamping","angularDamping","sleepSpeedLimit","sleepTimeLimit","fixedRotation","isTrigger","applyImpulse","applyLocalForce","applyLocalImpulse","applyTorque","filter","removeConstraint","removeEventListener","enable","enableMotor","disableMotor","setMotorSpeed","setMotorMaxForce","wheelIndex","setSteeringValue","applyEngineForce","brake","setBrake","wakeUp","sleep"],"mappings":"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,CAAC;EACpB,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EACpB,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EACpB,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EACpB,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EACpB,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EACpB,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EACpB,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EACpB,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EACpB,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EACpB,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EACpB,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EACpB,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACrB,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAC7C,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAC7C,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAC7C,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAC7C,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAC7C,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAC7C,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG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,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,KAAK,MAAM,IAAI,KAAK,KAAK,KAAK,EAAE;EAChC,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,KAAK,MAAM,IAAI,KAAK,KAAK,KAAK,EAAE;EAChC,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,KAAK,MAAM,IAAI,KAAK,KAAK,KAAK,EAAE;EAChC,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,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AC3B,IAAI,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AAC3B;EACA,IAAI,OAAO,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;EAC5B,MAAM,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;EAC7B,MAAM,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;EACvB,KAAK;EACL,GAAG;AACH;EACA,CAAC;AACD;EACA;EACA;EACA;EACA,MAAM,KAAK,SAAS,WAAW,CAAC;EAChC;EACA;EACA;AACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA,EAAE,WAAW,CAAC,OAAO,EAAE;EACvB,IAAI,IAAI,OAAO,KAAK,KAAK,CAAC,EAAE;EAC5B,MAAM,OAAO,GAAG,EAAE,CAAC;EACnB,KAAK;AACL;EACA,IAAI,KAAK,EAAE,CAAC;EACZ,IAAI,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;EACjB,IAAI,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC;EAC3C,IAAI,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;EACvB,IAAI,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;EAChC,IAAI,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,KAAK,SAAS,GAAG,OAAO,CAAC,iBAAiB,GAAG,CAAC,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"}', false);
+var WorkerFactory = createBase64WorkerFactory('/* rollup-plugin-web-worker-loader */
(function () {
  'use strict';

  /**
   * Records what objects are colliding with each other
   */

  /**
   * A 3x3 matrix.
   * Authored by {@link http://github.com/schteppe/ schteppe}
   */
  class Mat3 {
    /**
     * A vector of length 9, containing all matrix elements.
     */

    /**
     * @param elements A vector of length 9, containing all matrix elements.
     */
    constructor(elements) {
      if (elements === void 0) {
        elements = [0, 0, 0, 0, 0, 0, 0, 0, 0];
      }

      this.elements = elements;
    }
    /**
     * Sets the matrix to identity
     * @todo Should perhaps be renamed to `setIdentity()` to be more clear.
     * @todo Create another function that immediately creates an identity matrix eg. `eye()`
     */


    identity() {
      const e = this.elements;
      e[0] = 1;
      e[1] = 0;
      e[2] = 0;
      e[3] = 0;
      e[4] = 1;
      e[5] = 0;
      e[6] = 0;
      e[7] = 0;
      e[8] = 1;
    }
    /**
     * Set all elements to zero
     */


    setZero() {
      const e = this.elements;
      e[0] = 0;
      e[1] = 0;
      e[2] = 0;
      e[3] = 0;
      e[4] = 0;
      e[5] = 0;
      e[6] = 0;
      e[7] = 0;
      e[8] = 0;
    }
    /**
     * Sets the matrix diagonal elements from a Vec3
     */


    setTrace(vector) {
      const e = this.elements;
      e[0] = vector.x;
      e[4] = vector.y;
      e[8] = vector.z;
    }
    /**
     * Gets the matrix diagonal elements
     */


    getTrace(target) {
      if (target === void 0) {
        target = new Vec3();
      }

      const e = this.elements;
      target.x = e[0];
      target.y = e[4];
      target.z = e[8];
      return target;
    }
    /**
     * Matrix-Vector multiplication
     * @param v The vector to multiply with
     * @param target Optional, target to save the result in.
     */


    vmult(v, target) {
      if (target === void 0) {
        target = new Vec3();
      }

      const e = this.elements;
      const x = v.x;
      const y = v.y;
      const z = v.z;
      target.x = e[0] * x + e[1] * y + e[2] * z;
      target.y = e[3] * x + e[4] * y + e[5] * z;
      target.z = e[6] * x + e[7] * y + e[8] * z;
      return target;
    }
    /**
     * Matrix-scalar multiplication
     */


    smult(s) {
      for (let i = 0; i < this.elements.length; i++) {
        this.elements[i] *= s;
      }
    }
    /**
     * Matrix multiplication
     * @param matrix Matrix to multiply with from left side.
     */


    mmult(matrix, target) {
      if (target === void 0) {
        target = new Mat3();
      }

      const A = this.elements;
      const B = matrix.elements;
      const T = target.elements;
      const a11 = A[0],
            a12 = A[1],
            a13 = A[2],
            a21 = A[3],
            a22 = A[4],
            a23 = A[5],
            a31 = A[6],
            a32 = A[7],
            a33 = A[8];
      const b11 = B[0],
            b12 = B[1],
            b13 = B[2],
            b21 = B[3],
            b22 = B[4],
            b23 = B[5],
            b31 = B[6],
            b32 = B[7],
            b33 = B[8];
      T[0] = a11 * b11 + a12 * b21 + a13 * b31;
      T[1] = a11 * b12 + a12 * b22 + a13 * b32;
      T[2] = a11 * b13 + a12 * b23 + a13 * b33;
      T[3] = a21 * b11 + a22 * b21 + a23 * b31;
      T[4] = a21 * b12 + a22 * b22 + a23 * b32;
      T[5] = a21 * b13 + a22 * b23 + a23 * b33;
      T[6] = a31 * b11 + a32 * b21 + a33 * b31;
      T[7] = a31 * b12 + a32 * b22 + a33 * b32;
      T[8] = a31 * b13 + a32 * b23 + a33 * b33;
      return target;
    }
    /**
     * Scale each column of the matrix
     */


    scale(vector, target) {
      if (target === void 0) {
        target = new Mat3();
      }

      const e = this.elements;
      const t = target.elements;

      for (let i = 0; i !== 3; i++) {
        t[3 * i + 0] = vector.x * e[3 * i + 0];
        t[3 * i + 1] = vector.y * e[3 * i + 1];
        t[3 * i + 2] = vector.z * e[3 * i + 2];
      }

      return target;
    }
    /**
     * Solve Ax=b
     * @param b The right hand side
     * @param target Optional. Target vector to save in.
     * @return The solution x
     * @todo should reuse arrays
     */


    solve(b, target) {
      if (target === void 0) {
        target = new Vec3();
      }

      // Construct equations
      const nr = 3; // num rows

      const nc = 4; // num cols

      const eqns = [];
      let i;
      let j;

      for (i = 0; i < nr * nc; i++) {
        eqns.push(0);
      }

      for (i = 0; i < 3; i++) {
        for (j = 0; j < 3; j++) {
          eqns[i + nc * j] = this.elements[i + 3 * j];
        }
      }

      eqns[3 + 4 * 0] = b.x;
      eqns[3 + 4 * 1] = b.y;
      eqns[3 + 4 * 2] = b.z; // Compute right upper triangular version of the matrix - Gauss elimination

      let n = 3;
      const k = n;
      let np;
      const kp = 4; // num rows

      let p;

      do {
        i = k - n;

        if (eqns[i + nc * i] === 0) {
          // the pivot is null, swap lines
          for (j = i + 1; j < k; j++) {
            if (eqns[i + nc * j] !== 0) {
              np = kp;

              do {
                // do ligne( i ) = ligne( i ) + ligne( k )
                p = kp - np;
                eqns[p + nc * i] += eqns[p + nc * j];
              } while (--np);

              break;
            }
          }
        }

        if (eqns[i + nc * i] !== 0) {
          for (j = i + 1; j < k; j++) {
            const multiplier = eqns[i + nc * j] / eqns[i + nc * i];
            np = kp;

            do {
              // do ligne( k ) = ligne( k ) - multiplier * ligne( i )
              p = kp - np;
              eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;
            } while (--np);
          }
        }
      } while (--n); // Get the solution


      target.z = eqns[2 * nc + 3] / eqns[2 * nc + 2];
      target.y = (eqns[1 * nc + 3] - eqns[1 * nc + 2] * target.z) / eqns[1 * nc + 1];
      target.x = (eqns[0 * nc + 3] - eqns[0 * nc + 2] * target.z - eqns[0 * nc + 1] * target.y) / eqns[0 * nc + 0];

      if (isNaN(target.x) || isNaN(target.y) || isNaN(target.z) || target.x === Infinity || target.y === Infinity || target.z === Infinity) {
        throw `Could not solve equation! Got x=[${target.toString()}], b=[${b.toString()}], A=[${this.toString()}]`;
      }

      return target;
    }
    /**
     * Get an element in the matrix by index. Index starts at 0, not 1!!!
     * @param value If provided, the matrix element will be set to this value.
     */


    e(row, column, value) {
      if (value === undefined) {
        return this.elements[column + 3 * row];
      } else {
        // Set value
        this.elements[column + 3 * row] = value;
      }
    }
    /**
     * Copy another matrix into this matrix object.
     */


    copy(matrix) {
      for (let i = 0; i < matrix.elements.length; i++) {
        this.elements[i] = matrix.elements[i];
      }

      return this;
    }
    /**
     * Returns a string representation of the matrix.
     */


    toString() {
      let r = '';
      const sep = ',';

      for (let i = 0; i < 9; i++) {
        r += this.elements[i] + sep;
      }

      return r;
    }
    /**
     * reverse the matrix
     * @param target Target matrix to save in.
     * @return The solution x
     */


    reverse(target) {
      if (target === void 0) {
        target = new Mat3();
      }

      // Construct equations
      const nr = 3; // num rows

      const nc = 6; // num cols

      const eqns = reverse_eqns;
      let i;
      let j;

      for (i = 0; i < 3; i++) {
        for (j = 0; j < 3; j++) {
          eqns[i + nc * j] = this.elements[i + 3 * j];
        }
      }

      eqns[3 + 6 * 0] = 1;
      eqns[3 + 6 * 1] = 0;
      eqns[3 + 6 * 2] = 0;
      eqns[4 + 6 * 0] = 0;
      eqns[4 + 6 * 1] = 1;
      eqns[4 + 6 * 2] = 0;
      eqns[5 + 6 * 0] = 0;
      eqns[5 + 6 * 1] = 0;
      eqns[5 + 6 * 2] = 1; // Compute right upper triangular version of the matrix - Gauss elimination

      let n = 3;
      const k = n;
      let np;
      const kp = nc; // num rows

      let p;

      do {
        i = k - n;

        if (eqns[i + nc * i] === 0) {
          // the pivot is null, swap lines
          for (j = i + 1; j < k; j++) {
            if (eqns[i + nc * j] !== 0) {
              np = kp;

              do {
                // do line( i ) = line( i ) + line( k )
                p = kp - np;
                eqns[p + nc * i] += eqns[p + nc * j];
              } while (--np);

              break;
            }
          }
        }

        if (eqns[i + nc * i] !== 0) {
          for (j = i + 1; j < k; j++) {
            const multiplier = eqns[i + nc * j] / eqns[i + nc * i];
            np = kp;

            do {
              // do line( k ) = line( k ) - multiplier * line( i )
              p = kp - np;
              eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;
            } while (--np);
          }
        }
      } while (--n); // eliminate the upper left triangle of the matrix


      i = 2;

      do {
        j = i - 1;

        do {
          const multiplier = eqns[i + nc * j] / eqns[i + nc * i];
          np = nc;

          do {
            p = nc - np;
            eqns[p + nc * j] = eqns[p + nc * j] - eqns[p + nc * i] * multiplier;
          } while (--np);
        } while (j--);
      } while (--i); // operations on the diagonal


      i = 2;

      do {
        const multiplier = 1 / eqns[i + nc * i];
        np = nc;

        do {
          p = nc - np;
          eqns[p + nc * i] = eqns[p + nc * i] * multiplier;
        } while (--np);
      } while (i--);

      i = 2;

      do {
        j = 2;

        do {
          p = eqns[nr + j + nc * i];

          if (isNaN(p) || p === Infinity) {
            throw `Could not reverse! A=[${this.toString()}]`;
          }

          target.e(i, j, p);
        } while (j--);
      } while (i--);

      return target;
    }
    /**
     * Set the matrix from a quaterion
     */


    setRotationFromQuaternion(q) {
      const x = q.x;
      const y = q.y;
      const z = q.z;
      const w = q.w;
      const x2 = x + x;
      const y2 = y + y;
      const z2 = z + z;
      const xx = x * x2;
      const xy = x * y2;
      const xz = x * z2;
      const yy = y * y2;
      const yz = y * z2;
      const zz = z * z2;
      const wx = w * x2;
      const wy = w * y2;
      const wz = w * z2;
      const e = this.elements;
      e[3 * 0 + 0] = 1 - (yy + zz);
      e[3 * 0 + 1] = xy - wz;
      e[3 * 0 + 2] = xz + wy;
      e[3 * 1 + 0] = xy + wz;
      e[3 * 1 + 1] = 1 - (xx + zz);
      e[3 * 1 + 2] = yz - wx;
      e[3 * 2 + 0] = xz - wy;
      e[3 * 2 + 1] = yz + wx;
      e[3 * 2 + 2] = 1 - (xx + yy);
      return this;
    }
    /**
     * Transpose the matrix
     * @param target Optional. Where to store the result.
     * @return The target Mat3, or a new Mat3 if target was omitted.
     */


    transpose(target) {
      if (target === void 0) {
        target = new Mat3();
      }

      const M = this.elements;
      const T = target.elements;
      let tmp; //Set diagonals

      T[0] = M[0];
      T[4] = M[4];
      T[8] = M[8];
      tmp = M[1];
      T[1] = M[3];
      T[3] = tmp;
      tmp = M[2];
      T[2] = M[6];
      T[6] = tmp;
      tmp = M[5];
      T[5] = M[7];
      T[7] = tmp;
      return target;
    }

  }
  const reverse_eqns = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

  /**
   * 3-dimensional vector
   * @example
   *     const v = new Vec3(1, 2, 3)
   *     console.log('x=' + v.x) // x=1
   */

  class Vec3 {
    constructor(x, y, z) {
      if (x === void 0) {
        x = 0.0;
      }

      if (y === void 0) {
        y = 0.0;
      }

      if (z === void 0) {
        z = 0.0;
      }

      this.x = x;
      this.y = y;
      this.z = z;
    }
    /**
     * Vector cross product
     * @param target Optional target to save in.
     */


    cross(vector, target) {
      if (target === void 0) {
        target = new Vec3();
      }

      const vx = vector.x;
      const vy = vector.y;
      const vz = vector.z;
      const x = this.x;
      const y = this.y;
      const z = this.z;
      target.x = y * vz - z * vy;
      target.y = z * vx - x * vz;
      target.z = x * vy - y * vx;
      return target;
    }
    /**
     * Set the vectors' 3 elements
     */


    set(x, y, z) {
      this.x = x;
      this.y = y;
      this.z = z;
      return this;
    }
    /**
     * Set all components of the vector to zero.
     */


    setZero() {
      this.x = this.y = this.z = 0;
    }
    /**
     * Vector addition
     */


    vadd(vector, target) {
      if (target) {
        target.x = vector.x + this.x;
        target.y = vector.y + this.y;
        target.z = vector.z + this.z;
      } else {
        return new Vec3(this.x + vector.x, this.y + vector.y, this.z + vector.z);
      }
    }
    /**
     * Vector subtraction
     * @param target Optional target to save in.
     */


    vsub(vector, target) {
      if (target) {
        target.x = this.x - vector.x;
        target.y = this.y - vector.y;
        target.z = this.z - vector.z;
      } else {
        return new Vec3(this.x - vector.x, this.y - vector.y, this.z - vector.z);
      }
    }
    /**
     * Get the cross product matrix a_cross from a vector, such that a x b = a_cross * b = c
     *
     * See {@link https://www8.cs.umu.se/kurser/TDBD24/VT06/lectures/Lecture6.pdf Umeå University Lecture}
     */


    crossmat() {
      return new Mat3([0, -this.z, this.y, this.z, 0, -this.x, -this.y, this.x, 0]);
    }
    /**
     * Normalize the vector. Note that this changes the values in the vector.
      * @return Returns the norm of the vector
     */


    normalize() {
      const x = this.x;
      const y = this.y;
      const z = this.z;
      const n = Math.sqrt(x * x + y * y + z * z);

      if (n > 0.0) {
        const invN = 1 / n;
        this.x *= invN;
        this.y *= invN;
        this.z *= invN;
      } else {
        // Make something up
        this.x = 0;
        this.y = 0;
        this.z = 0;
      }

      return n;
    }
    /**
     * Get the version of this vector that is of length 1.
     * @param target Optional target to save in
     * @return Returns the unit vector
     */


    unit(target) {
      if (target === void 0) {
        target = new Vec3();
      }

      const x = this.x;
      const y = this.y;
      const z = this.z;
      let ninv = Math.sqrt(x * x + y * y + z * z);

      if (ninv > 0.0) {
        ninv = 1.0 / ninv;
        target.x = x * ninv;
        target.y = y * ninv;
        target.z = z * ninv;
      } else {
        target.x = 1;
        target.y = 0;
        target.z = 0;
      }

      return target;
    }
    /**
     * Get the length of the vector
     */


    length() {
      const x = this.x;
      const y = this.y;
      const z = this.z;
      return Math.sqrt(x * x + y * y + z * z);
    }
    /**
     * Get the squared length of the vector.
     */


    lengthSquared() {
      return this.dot(this);
    }
    /**
     * Get distance from this point to another point
     */


    distanceTo(p) {
      const x = this.x;
      const y = this.y;
      const z = this.z;
      const px = p.x;
      const py = p.y;
      const pz = p.z;
      return Math.sqrt((px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z));
    }
    /**
     * Get squared distance from this point to another point
     */


    distanceSquared(p) {
      const x = this.x;
      const y = this.y;
      const z = this.z;
      const px = p.x;
      const py = p.y;
      const pz = p.z;
      return (px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z);
    }
    /**
     * Multiply all the components of the vector with a scalar.
     * @param target The vector to save the result in.
     */


    scale(scalar, target) {
      if (target === void 0) {
        target = new Vec3();
      }

      const x = this.x;
      const y = this.y;
      const z = this.z;
      target.x = scalar * x;
      target.y = scalar * y;
      target.z = scalar * z;
      return target;
    }
    /**
     * Multiply the vector with an other vector, component-wise.
     * @param target The vector to save the result in.
     */


    vmul(vector, target) {
      if (target === void 0) {
        target = new Vec3();
      }

      target.x = vector.x * this.x;
      target.y = vector.y * this.y;
      target.z = vector.z * this.z;
      return target;
    }
    /**
     * Scale a vector and add it to this vector. Save the result in "target". (target = this + vector * scalar)
     * @param target The vector to save the result in.
     */


    addScaledVector(scalar, vector, target) {
      if (target === void 0) {
        target = new Vec3();
      }

      target.x = this.x + scalar * vector.x;
      target.y = this.y + scalar * vector.y;
      target.z = this.z + scalar * vector.z;
      return target;
    }
    /**
     * Calculate dot product
     * @param vector
     */


    dot(vector) {
      return this.x * vector.x + this.y * vector.y + this.z * vector.z;
    }

    isZero() {
      return this.x === 0 && this.y === 0 && this.z === 0;
    }
    /**
     * Make the vector point in the opposite direction.
     * @param target Optional target to save in
     */


    negate(target) {
      if (target === void 0) {
        target = new Vec3();
      }

      target.x = -this.x;
      target.y = -this.y;
      target.z = -this.z;
      return target;
    }
    /**
     * Compute two artificial tangents to the vector
     * @param t1 Vector object to save the first tangent in
     * @param t2 Vector object to save the second tangent in
     */


    tangents(t1, t2) {
      const norm = this.length();

      if (norm > 0.0) {
        const n = Vec3_tangents_n;
        const inorm = 1 / norm;
        n.set(this.x * inorm, this.y * inorm, this.z * inorm);
        const randVec = Vec3_tangents_randVec;

        if (Math.abs(n.x) < 0.9) {
          randVec.set(1, 0, 0);
          n.cross(randVec, t1);
        } else {
          randVec.set(0, 1, 0);
          n.cross(randVec, t1);
        }

        n.cross(t1, t2);
      } else {
        // The normal length is zero, make something up
        t1.set(1, 0, 0);
        t2.set(0, 1, 0);
      }
    }
    /**
     * Converts to a more readable format
     */


    toString() {
      return `${this.x},${this.y},${this.z}`;
    }
    /**
     * Converts to an array
     */


    toArray() {
      return [this.x, this.y, this.z];
    }
    /**
     * Copies value of source to this vector.
     */


    copy(vector) {
      this.x = vector.x;
      this.y = vector.y;
      this.z = vector.z;
      return this;
    }
    /**
     * Do a linear interpolation between two vectors
     * @param t A number between 0 and 1. 0 will make this function return u, and 1 will make it return v. Numbers in between will generate a vector in between them.
     */


    lerp(vector, t, target) {
      const x = this.x;
      const y = this.y;
      const z = this.z;
      target.x = x + (vector.x - x) * t;
      target.y = y + (vector.y - y) * t;
      target.z = z + (vector.z - z) * t;
    }
    /**
     * Check if a vector equals is almost equal to another one.
     */


    almostEquals(vector, precision) {
      if (precision === void 0) {
        precision = 1e-6;
      }

      if (Math.abs(this.x - vector.x) > precision || Math.abs(this.y - vector.y) > precision || Math.abs(this.z - vector.z) > precision) {
        return false;
      }

      return true;
    }
    /**
     * Check if a vector is almost zero
     */


    almostZero(precision) {
      if (precision === void 0) {
        precision = 1e-6;
      }

      if (Math.abs(this.x) > precision || Math.abs(this.y) > precision || Math.abs(this.z) > precision) {
        return false;
      }

      return true;
    }
    /**
     * Check if the vector is anti-parallel to another vector.
     * @param precision Set to zero for exact comparisons
     */


    isAntiparallelTo(vector, precision) {
      this.negate(antip_neg);
      return antip_neg.almostEquals(vector, precision);
    }
    /**
     * Clone the vector
     */


    clone() {
      return new Vec3(this.x, this.y, this.z);
    }

  }
  Vec3.ZERO = new Vec3(0, 0, 0);
  Vec3.UNIT_X = new Vec3(1, 0, 0);
  Vec3.UNIT_Y = new Vec3(0, 1, 0);
  Vec3.UNIT_Z = new Vec3(0, 0, 1);
  const Vec3_tangents_n = new Vec3();
  const Vec3_tangents_randVec = new Vec3();
  const antip_neg = new Vec3();

  /**
   * Axis aligned bounding box class.
   */
  class AABB {
    /**
     * The lower bound of the bounding box
     */

    /**
     * The upper bound of the bounding box
     */
    constructor(options) {
      if (options === void 0) {
        options = {};
      }

      this.lowerBound = new Vec3();
      this.upperBound = new Vec3();

      if (options.lowerBound) {
        this.lowerBound.copy(options.lowerBound);
      }

      if (options.upperBound) {
        this.upperBound.copy(options.upperBound);
      }
    }
    /**
     * Set the AABB bounds from a set of points.
     * @param points An array of Vec3's.
     * @return The self object
     */


    setFromPoints(points, position, quaternion, skinSize) {
      const l = this.lowerBound;
      const u = this.upperBound;
      const q = quaternion; // Set to the first point

      l.copy(points[0]);

      if (q) {
        q.vmult(l, l);
      }

      u.copy(l);

      for (let i = 1; i < points.length; i++) {
        let p = points[i];

        if (q) {
          q.vmult(p, tmp$1);
          p = tmp$1;
        }

        if (p.x > u.x) {
          u.x = p.x;
        }

        if (p.x < l.x) {
          l.x = p.x;
        }

        if (p.y > u.y) {
          u.y = p.y;
        }

        if (p.y < l.y) {
          l.y = p.y;
        }

        if (p.z > u.z) {
          u.z = p.z;
        }

        if (p.z < l.z) {
          l.z = p.z;
        }
      } // Add offset


      if (position) {
        position.vadd(l, l);
        position.vadd(u, u);
      }

      if (skinSize) {
        l.x -= skinSize;
        l.y -= skinSize;
        l.z -= skinSize;
        u.x += skinSize;
        u.y += skinSize;
        u.z += skinSize;
      }

      return this;
    }
    /**
     * Copy bounds from an AABB to this AABB
     * @param aabb Source to copy from
     * @return The this object, for chainability
     */


    copy(aabb) {
      this.lowerBound.copy(aabb.lowerBound);
      this.upperBound.copy(aabb.upperBound);
      return this;
    }
    /**
     * Clone an AABB
     */


    clone() {
      return new AABB().copy(this);
    }
    /**
     * Extend this AABB so that it covers the given AABB too.
     */


    extend(aabb) {
      this.lowerBound.x = Math.min(this.lowerBound.x, aabb.lowerBound.x);
      this.upperBound.x = Math.max(this.upperBound.x, aabb.upperBound.x);
      this.lowerBound.y = Math.min(this.lowerBound.y, aabb.lowerBound.y);
      this.upperBound.y = Math.max(this.upperBound.y, aabb.upperBound.y);
      this.lowerBound.z = Math.min(this.lowerBound.z, aabb.lowerBound.z);
      this.upperBound.z = Math.max(this.upperBound.z, aabb.upperBound.z);
    }
    /**
     * Returns true if the given AABB overlaps this AABB.
     */


    overlaps(aabb) {
      const l1 = this.lowerBound;
      const u1 = this.upperBound;
      const l2 = aabb.lowerBound;
      const u2 = aabb.upperBound; //      l2        u2
      //      |---------|
      // |--------|
      // l1       u1

      const overlapsX = l2.x <= u1.x && u1.x <= u2.x || l1.x <= u2.x && u2.x <= u1.x;
      const overlapsY = l2.y <= u1.y && u1.y <= u2.y || l1.y <= u2.y && u2.y <= u1.y;
      const overlapsZ = l2.z <= u1.z && u1.z <= u2.z || l1.z <= u2.z && u2.z <= u1.z;
      return overlapsX && overlapsY && overlapsZ;
    } // Mostly for debugging


    volume() {
      const l = this.lowerBound;
      const u = this.upperBound;
      return (u.x - l.x) * (u.y - l.y) * (u.z - l.z);
    }
    /**
     * Returns true if the given AABB is fully contained in this AABB.
     */


    contains(aabb) {
      const l1 = this.lowerBound;
      const u1 = this.upperBound;
      const l2 = aabb.lowerBound;
      const u2 = aabb.upperBound; //      l2        u2
      //      |---------|
      // |---------------|
      // l1              u1

      return l1.x <= l2.x && u1.x >= u2.x && l1.y <= l2.y && u1.y >= u2.y && l1.z <= l2.z && u1.z >= u2.z;
    }

    getCorners(a, b, c, d, e, f, g, h) {
      const l = this.lowerBound;
      const u = this.upperBound;
      a.copy(l);
      b.set(u.x, l.y, l.z);
      c.set(u.x, u.y, l.z);
      d.set(l.x, u.y, u.z);
      e.set(u.x, l.y, u.z);
      f.set(l.x, u.y, l.z);
      g.set(l.x, l.y, u.z);
      h.copy(u);
    }
    /**
     * Get the representation of an AABB in another frame.
     * @return The "target" AABB object.
     */


    toLocalFrame(frame, target) {
      const corners = transformIntoFrame_corners;
      const a = corners[0];
      const b = corners[1];
      const c = corners[2];
      const d = corners[3];
      const e = corners[4];
      const f = corners[5];
      const g = corners[6];
      const h = corners[7]; // Get corners in current frame

      this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame

      for (let i = 0; i !== 8; i++) {
        const corner = corners[i];
        frame.pointToLocal(corner, corner);
      }

      return target.setFromPoints(corners);
    }
    /**
     * Get the representation of an AABB in the global frame.
     * @return The "target" AABB object.
     */


    toWorldFrame(frame, target) {
      const corners = transformIntoFrame_corners;
      const a = corners[0];
      const b = corners[1];
      const c = corners[2];
      const d = corners[3];
      const e = corners[4];
      const f = corners[5];
      const g = corners[6];
      const h = corners[7]; // Get corners in current frame

      this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame

      for (let i = 0; i !== 8; i++) {
        const corner = corners[i];
        frame.pointToWorld(corner, corner);
      }

      return target.setFromPoints(corners);
    }
    /**
     * Check if the AABB is hit by a ray.
     */


    overlapsRay(ray) {
      const {
        direction,
        from
      } = ray; // const t = 0
      // ray.direction is unit direction vector of ray

      const dirFracX = 1 / direction.x;
      const dirFracY = 1 / direction.y;
      const dirFracZ = 1 / direction.z; // this.lowerBound is the corner of AABB with minimal coordinates - left bottom, rt is maximal corner

      const t1 = (this.lowerBound.x - from.x) * dirFracX;
      const t2 = (this.upperBound.x - from.x) * dirFracX;
      const t3 = (this.lowerBound.y - from.y) * dirFracY;
      const t4 = (this.upperBound.y - from.y) * dirFracY;
      const t5 = (this.lowerBound.z - from.z) * dirFracZ;
      const t6 = (this.upperBound.z - from.z) * dirFracZ; // const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)));
      // const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)));

      const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)), Math.min(t5, t6));
      const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)), Math.max(t5, t6)); // if tmax < 0, ray (line) is intersecting AABB, but whole AABB is behing us

      if (tmax < 0) {
        //t = tmax;
        return false;
      } // if tmin > tmax, ray doesn't intersect AABB


      if (tmin > tmax) {
        //t = tmax;
        return false;
      }

      return true;
    }

  }
  const tmp$1 = new Vec3();
  const transformIntoFrame_corners = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];

  /**
   * Collision "matrix".
   * It's actually a triangular-shaped array of whether two bodies are touching this step, for reference next step
   */
  class ArrayCollisionMatrix {
    /**
     * The matrix storage.
     */
    constructor() {
      this.matrix = [];
    }
    /**
     * Get an element
     */


    get(bi, bj) {
      let {
        index: i
      } = bi;
      let {
        index: j
      } = bj;

      if (j > i) {
        const temp = j;
        j = i;
        i = temp;
      }

      return this.matrix[(i * (i + 1) >> 1) + j - 1];
    }
    /**
     * Set an element
     */


    set(bi, bj, value) {
      let {
        index: i
      } = bi;
      let {
        index: j
      } = bj;

      if (j > i) {
        const temp = j;
        j = i;
        i = temp;
      }

      this.matrix[(i * (i + 1) >> 1) + j - 1] = value ? 1 : 0;
    }
    /**
     * Sets all elements to zero
     */


    reset() {
      for (let i = 0, l = this.matrix.length; i !== l; i++) {
        this.matrix[i] = 0;
      }
    }
    /**
     * Sets the max number of objects
     */


    setNumObjects(n) {
      this.matrix.length = n * (n - 1) >> 1;
    }

  }

  /**
   * Base class for objects that dispatches events.
   */
  class EventTarget {
    /**
     * Add an event listener
     * @return The self object, for chainability.
     */
    addEventListener(type, listener) {
      if (this._listeners === undefined) {
        this._listeners = {};
      }

      const listeners = this._listeners;

      if (listeners[type] === undefined) {
        listeners[type] = [];
      }

      if (!listeners[type].includes(listener)) {
        listeners[type].push(listener);
      }

      return this;
    }
    /**
     * Check if an event listener is added
     */


    hasEventListener(type, listener) {
      if (this._listeners === undefined) {
        return false;
      }

      const listeners = this._listeners;

      if (listeners[type] !== undefined && listeners[type].includes(listener)) {
        return true;
      }

      return false;
    }
    /**
     * Check if any event listener of the given type is added
     */


    hasAnyEventListener(type) {
      if (this._listeners === undefined) {
        return false;
      }

      const listeners = this._listeners;
      return listeners[type] !== undefined;
    }
    /**
     * Remove an event listener
     * @return The self object, for chainability.
     */


    removeEventListener(type, listener) {
      if (this._listeners === undefined) {
        return this;
      }

      const listeners = this._listeners;

      if (listeners[type] === undefined) {
        return this;
      }

      const index = listeners[type].indexOf(listener);

      if (index !== -1) {
        listeners[type].splice(index, 1);
      }

      return this;
    }
    /**
     * Emit an event.
     * @return The self object, for chainability.
     */


    dispatchEvent(event) {
      if (this._listeners === undefined) {
        return this;
      }

      const listeners = this._listeners;
      const listenerArray = listeners[event.type];

      if (listenerArray !== undefined) {
        event.target = this;

        for (let i = 0, l = listenerArray.length; i < l; i++) {
          listenerArray[i].call(this, event);
        }
      }

      return this;
    }

  }

  /**
   * A Quaternion describes a rotation in 3D space. The Quaternion is mathematically defined as Q = x*i + y*j + z*k + w, where (i,j,k) are imaginary basis vectors. (x,y,z) can be seen as a vector related to the axis of rotation, while the real multiplier, w, is related to the amount of rotation.
   * @param x Multiplier of the imaginary basis vector i.
   * @param y Multiplier of the imaginary basis vector j.
   * @param z Multiplier of the imaginary basis vector k.
   * @param w Multiplier of the real part.
   * @see http://en.wikipedia.org/wiki/Quaternion
   */

  class Quaternion {
    constructor(x, y, z, w) {
      if (x === void 0) {
        x = 0;
      }

      if (y === void 0) {
        y = 0;
      }

      if (z === void 0) {
        z = 0;
      }

      if (w === void 0) {
        w = 1;
      }

      this.x = x;
      this.y = y;
      this.z = z;
      this.w = w;
    }
    /**
     * Set the value of the quaternion.
     */


    set(x, y, z, w) {
      this.x = x;
      this.y = y;
      this.z = z;
      this.w = w;
      return this;
    }
    /**
     * Convert to a readable format
     * @return "x,y,z,w"
     */


    toString() {
      return `${this.x},${this.y},${this.z},${this.w}`;
    }
    /**
     * Convert to an Array
     * @return [x, y, z, w]
     */


    toArray() {
      return [this.x, this.y, this.z, this.w];
    }
    /**
     * Set the quaternion components given an axis and an angle in radians.
     */


    setFromAxisAngle(vector, angle) {
      const s = Math.sin(angle * 0.5);
      this.x = vector.x * s;
      this.y = vector.y * s;
      this.z = vector.z * s;
      this.w = Math.cos(angle * 0.5);
      return this;
    }
    /**
     * Converts the quaternion to [ axis, angle ] representation.
     * @param targetAxis A vector object to reuse for storing the axis.
     * @return An array, first element is the axis and the second is the angle in radians.
     */


    toAxisAngle(targetAxis) {
      if (targetAxis === void 0) {
        targetAxis = new Vec3();
      }

      this.normalize(); // if w>1 acos and sqrt will produce errors, this cant happen if quaternion is normalised

      const angle = 2 * Math.acos(this.w);
      const s = Math.sqrt(1 - this.w * this.w); // assuming quaternion normalised then w is less than 1, so term always positive.

      if (s < 0.001) {
        // test to avoid divide by zero, s is always positive due to sqrt
        // if s close to zero then direction of axis not important
        targetAxis.x = this.x; // if it is important that axis is normalised then replace with x=1; y=z=0;

        targetAxis.y = this.y;
        targetAxis.z = this.z;
      } else {
        targetAxis.x = this.x / s; // normalise axis

        targetAxis.y = this.y / s;
        targetAxis.z = this.z / s;
      }

      return [targetAxis, angle];
    }
    /**
     * Set the quaternion value given two vectors. The resulting rotation will be the needed rotation to rotate u to v.
     */


    setFromVectors(u, v) {
      if (u.isAntiparallelTo(v)) {
        const t1 = sfv_t1;
        const t2 = sfv_t2;
        u.tangents(t1, t2);
        this.setFromAxisAngle(t1, Math.PI);
      } else {
        const a = u.cross(v);
        this.x = a.x;
        this.y = a.y;
        this.z = a.z;
        this.w = Math.sqrt(u.length() ** 2 * v.length() ** 2) + u.dot(v);
        this.normalize();
      }

      return this;
    }
    /**
     * Multiply the quaternion with an other quaternion.
     */


    mult(quat, target) {
      if (target === void 0) {
        target = new Quaternion();
      }

      const ax = this.x;
      const ay = this.y;
      const az = this.z;
      const aw = this.w;
      const bx = quat.x;
      const by = quat.y;
      const bz = quat.z;
      const bw = quat.w;
      target.x = ax * bw + aw * bx + ay * bz - az * by;
      target.y = ay * bw + aw * by + az * bx - ax * bz;
      target.z = az * bw + aw * bz + ax * by - ay * bx;
      target.w = aw * bw - ax * bx - ay * by - az * bz;
      return target;
    }
    /**
     * Get the inverse quaternion rotation.
     */


    inverse(target) {
      if (target === void 0) {
        target = new Quaternion();
      }

      const x = this.x;
      const y = this.y;
      const z = this.z;
      const w = this.w;
      this.conjugate(target);
      const inorm2 = 1 / (x * x + y * y + z * z + w * w);
      target.x *= inorm2;
      target.y *= inorm2;
      target.z *= inorm2;
      target.w *= inorm2;
      return target;
    }
    /**
     * Get the quaternion conjugate
     */


    conjugate(target) {
      if (target === void 0) {
        target = new Quaternion();
      }

      target.x = -this.x;
      target.y = -this.y;
      target.z = -this.z;
      target.w = this.w;
      return target;
    }
    /**
     * Normalize the quaternion. Note that this changes the values of the quaternion.
     */


    normalize() {
      let l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);

      if (l === 0) {
        this.x = 0;
        this.y = 0;
        this.z = 0;
        this.w = 0;
      } else {
        l = 1 / l;
        this.x *= l;
        this.y *= l;
        this.z *= l;
        this.w *= l;
      }

      return this;
    }
    /**
     * Approximation of quaternion normalization. Works best when quat is already almost-normalized.
     * @author unphased, https://github.com/unphased
     */


    normalizeFast() {
      const f = (3.0 - (this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)) / 2.0;

      if (f === 0) {
        this.x = 0;
        this.y = 0;
        this.z = 0;
        this.w = 0;
      } else {
        this.x *= f;
        this.y *= f;
        this.z *= f;
        this.w *= f;
      }

      return this;
    }
    /**
     * Multiply the quaternion by a vector
     */


    vmult(v, target) {
      if (target === void 0) {
        target = new Vec3();
      }

      const x = v.x;
      const y = v.y;
      const z = v.z;
      const qx = this.x;
      const qy = this.y;
      const qz = this.z;
      const qw = this.w; // q*v

      const ix = qw * x + qy * z - qz * y;
      const iy = qw * y + qz * x - qx * z;
      const iz = qw * z + qx * y - qy * x;
      const iw = -qx * x - qy * y - qz * z;
      target.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
      target.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
      target.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
      return target;
    }
    /**
     * Copies value of source to this quaternion.
     * @return this
     */


    copy(quat) {
      this.x = quat.x;
      this.y = quat.y;
      this.z = quat.z;
      this.w = quat.w;
      return this;
    }
    /**
     * Convert the quaternion to euler angle representation. Order: YZX, as this page describes: https://www.euclideanspace.com/maths/standards/index.htm
     * @param order Three-character string, defaults to "YZX"
     */


    toEuler(target, order) {
      if (order === void 0) {
        order = 'YZX';
      }

      let heading;
      let attitude;
      let bank;
      const x = this.x;
      const y = this.y;
      const z = this.z;
      const w = this.w;

      switch (order) {
        case 'YZX':
          const test = x * y + z * w;

          if (test > 0.499) {
            // singularity at north pole
            heading = 2 * Math.atan2(x, w);
            attitude = Math.PI / 2;
            bank = 0;
          }

          if (test < -0.499) {
            // singularity at south pole
            heading = -2 * Math.atan2(x, w);
            attitude = -Math.PI / 2;
            bank = 0;
          }

          if (heading === undefined) {
            const sqx = x * x;
            const sqy = y * y;
            const sqz = z * z;
            heading = Math.atan2(2 * y * w - 2 * x * z, 1 - 2 * sqy - 2 * sqz); // Heading

            attitude = Math.asin(2 * test); // attitude

            bank = Math.atan2(2 * x * w - 2 * y * z, 1 - 2 * sqx - 2 * sqz); // bank
          }

          break;

        default:
          throw new Error(`Euler order ${order} not supported yet.`);
      }

      target.y = heading;
      target.z = attitude;
      target.x = bank;
    }
    /**
     * Set the quaternion components given Euler angle representation.
     *
     * @param order The order to apply angles: 'XYZ' or 'YXZ' or any other combination.
     *
     * See {@link https://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors MathWorks} reference
     */


    setFromEuler(x, y, z, order) {
      if (order === void 0) {
        order = 'XYZ';
      }

      const c1 = Math.cos(x / 2);
      const c2 = Math.cos(y / 2);
      const c3 = Math.cos(z / 2);
      const s1 = Math.sin(x / 2);
      const s2 = Math.sin(y / 2);
      const s3 = Math.sin(z / 2);

      if (order === 'XYZ') {
        this.x = s1 * c2 * c3 + c1 * s2 * s3;
        this.y = c1 * s2 * c3 - s1 * c2 * s3;
        this.z = c1 * c2 * s3 + s1 * s2 * c3;
        this.w = c1 * c2 * c3 - s1 * s2 * s3;
      } else if (order === 'YXZ') {
        this.x = s1 * c2 * c3 + c1 * s2 * s3;
        this.y = c1 * s2 * c3 - s1 * c2 * s3;
        this.z = c1 * c2 * s3 - s1 * s2 * c3;
        this.w = c1 * c2 * c3 + s1 * s2 * s3;
      } else if (order === 'ZXY') {
        this.x = s1 * c2 * c3 - c1 * s2 * s3;
        this.y = c1 * s2 * c3 + s1 * c2 * s3;
        this.z = c1 * c2 * s3 + s1 * s2 * c3;
        this.w = c1 * c2 * c3 - s1 * s2 * s3;
      } else if (order === 'ZYX') {
        this.x = s1 * c2 * c3 - c1 * s2 * s3;
        this.y = c1 * s2 * c3 + s1 * c2 * s3;
        this.z = c1 * c2 * s3 - s1 * s2 * c3;
        this.w = c1 * c2 * c3 + s1 * s2 * s3;
      } else if (order === 'YZX') {
        this.x = s1 * c2 * c3 + c1 * s2 * s3;
        this.y = c1 * s2 * c3 + s1 * c2 * s3;
        this.z = c1 * c2 * s3 - s1 * s2 * c3;
        this.w = c1 * c2 * c3 - s1 * s2 * s3;
      } else if (order === 'XZY') {
        this.x = s1 * c2 * c3 - c1 * s2 * s3;
        this.y = c1 * s2 * c3 - s1 * c2 * s3;
        this.z = c1 * c2 * s3 + s1 * s2 * c3;
        this.w = c1 * c2 * c3 + s1 * s2 * s3;
      }

      return this;
    }

    clone() {
      return new Quaternion(this.x, this.y, this.z, this.w);
    }
    /**
     * Performs a spherical linear interpolation between two quat
     *
     * @param toQuat second operand
     * @param t interpolation amount between the self quaternion and toQuat
     * @param target A quaternion to store the result in. If not provided, a new one will be created.
     * @returns {Quaternion} The "target" object
     */


    slerp(toQuat, t, target) {
      if (target === void 0) {
        target = new Quaternion();
      }

      const ax = this.x;
      const ay = this.y;
      const az = this.z;
      const aw = this.w;
      let bx = toQuat.x;
      let by = toQuat.y;
      let bz = toQuat.z;
      let bw = toQuat.w;
      let omega;
      let cosom;
      let sinom;
      let scale0;
      let scale1; // calc cosine

      cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)

      if (cosom < 0.0) {
        cosom = -cosom;
        bx = -bx;
        by = -by;
        bz = -bz;
        bw = -bw;
      } // calculate coefficients


      if (1.0 - cosom > 0.000001) {
        // standard case (slerp)
        omega = Math.acos(cosom);
        sinom = Math.sin(omega);
        scale0 = Math.sin((1.0 - t) * omega) / sinom;
        scale1 = Math.sin(t * omega) / sinom;
      } else {
        // "from" and "to" quaternions are very close
        //  ... so we can do a linear interpolation
        scale0 = 1.0 - t;
        scale1 = t;
      } // calculate final values


      target.x = scale0 * ax + scale1 * bx;
      target.y = scale0 * ay + scale1 * by;
      target.z = scale0 * az + scale1 * bz;
      target.w = scale0 * aw + scale1 * bw;
      return target;
    }
    /**
     * Rotate an absolute orientation quaternion given an angular velocity and a time step.
     */


    integrate(angularVelocity, dt, angularFactor, target) {
      if (target === void 0) {
        target = new Quaternion();
      }

      const ax = angularVelocity.x * angularFactor.x,
            ay = angularVelocity.y * angularFactor.y,
            az = angularVelocity.z * angularFactor.z,
            bx = this.x,
            by = this.y,
            bz = this.z,
            bw = this.w;
      const half_dt = dt * 0.5;
      target.x += half_dt * (ax * bw + ay * bz - az * by);
      target.y += half_dt * (ay * bw + az * bx - ax * bz);
      target.z += half_dt * (az * bw + ax * by - ay * bx);
      target.w += half_dt * (-ax * bx - ay * by - az * bz);
      return target;
    }

  }
  const sfv_t1 = new Vec3();
  const sfv_t2 = new Vec3();

  /**
   * The available shape types.
   */
  const SHAPE_TYPES = {
    /** SPHERE */
    SPHERE: 1,

    /** PLANE */
    PLANE: 2,

    /** BOX */
    BOX: 4,

    /** COMPOUND */
    COMPOUND: 8,

    /** CONVEXPOLYHEDRON */
    CONVEXPOLYHEDRON: 16,

    /** HEIGHTFIELD */
    HEIGHTFIELD: 32,

    /** PARTICLE */
    PARTICLE: 64,

    /** CYLINDER */
    CYLINDER: 128,

    /** TRIMESH */
    TRIMESH: 256
  };
  /**
   * ShapeType
   */

  /**
   * Base class for shapes
   */
  class Shape {
    /**
     * Identifier of the Shape.
     */

    /**
     * The type of this shape. Must be set to an int > 0 by subclasses.
     */

    /**
     * The local bounding sphere radius of this shape.
     */

    /**
     * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.
     * @default true
     */

    /**
     * @default 1
     */

    /**
     * @default -1
     */

    /**
     * Optional material of the shape that regulates contact properties.
     */

    /**
     * The body to which the shape is added to.
     */

    /**
     * All the Shape types.
     */
    constructor(options) {
      if (options === void 0) {
        options = {};
      }

      this.id = Shape.idCounter++;
      this.type = options.type || 0;
      this.boundingSphereRadius = 0;
      this.collisionResponse = options.collisionResponse ? options.collisionResponse : true;
      this.collisionFilterGroup = options.collisionFilterGroup !== undefined ? options.collisionFilterGroup : 1;
      this.collisionFilterMask = options.collisionFilterMask !== undefined ? options.collisionFilterMask : -1;
      this.material = options.material ? options.material : null;
      this.body = null;
    }
    /**
     * Computes the bounding sphere radius.
     * The result is stored in the property `.boundingSphereRadius`
     */


    updateBoundingSphereRadius() {
      throw `computeBoundingSphereRadius() not implemented for shape type ${this.type}`;
    }
    /**
     * Get the volume of this shape
     */


    volume() {
      throw `volume() not implemented for shape type ${this.type}`;
    }
    /**
     * Calculates the inertia in the local frame for this shape.
     * @see http://en.wikipedia.org/wiki/List_of_moments_of_inertia
     */


    calculateLocalInertia(mass, target) {
      throw `calculateLocalInertia() not implemented for shape type ${this.type}`;
    }
    /**
     * @todo use abstract for these kind of methods
     */


    calculateWorldAABB(pos, quat, min, max) {
      throw `calculateWorldAABB() not implemented for shape type ${this.type}`;
    }

  }
  Shape.idCounter = 0;
  Shape.types = SHAPE_TYPES;

  /**
   * Transformation utilities.
   */
  class Transform {
    /**
     * position
     */

    /**
     * quaternion
     */
    constructor(options) {
      if (options === void 0) {
        options = {};
      }

      this.position = new Vec3();
      this.quaternion = new Quaternion();

      if (options.position) {
        this.position.copy(options.position);
      }

      if (options.quaternion) {
        this.quaternion.copy(options.quaternion);
      }
    }
    /**
     * Get a global point in local transform coordinates.
     */


    pointToLocal(worldPoint, result) {
      return Transform.pointToLocalFrame(this.position, this.quaternion, worldPoint, result);
    }
    /**
     * Get a local point in global transform coordinates.
     */


    pointToWorld(localPoint, result) {
      return Transform.pointToWorldFrame(this.position, this.quaternion, localPoint, result);
    }
    /**
     * vectorToWorldFrame
     */


    vectorToWorldFrame(localVector, result) {
      if (result === void 0) {
        result = new Vec3();
      }

      this.quaternion.vmult(localVector, result);
      return result;
    }
    /**
     * pointToLocalFrame
     */


    static pointToLocalFrame(position, quaternion, worldPoint, result) {
      if (result === void 0) {
        result = new Vec3();
      }

      worldPoint.vsub(position, result);
      quaternion.conjugate(tmpQuat$1);
      tmpQuat$1.vmult(result, result);
      return result;
    }
    /**
     * pointToWorldFrame
     */


    static pointToWorldFrame(position, quaternion, localPoint, result) {
      if (result === void 0) {
        result = new Vec3();
      }

      quaternion.vmult(localPoint, result);
      result.vadd(position, result);
      return result;
    }
    /**
     * vectorToWorldFrame
     */


    static vectorToWorldFrame(quaternion, localVector, result) {
      if (result === void 0) {
        result = new Vec3();
      }

      quaternion.vmult(localVector, result);
      return result;
    }
    /**
     * vectorToLocalFrame
     */


    static vectorToLocalFrame(position, quaternion, worldVector, result) {
      if (result === void 0) {
        result = new Vec3();
      }

      quaternion.w *= -1;
      quaternion.vmult(worldVector, result);
      quaternion.w *= -1;
      return result;
    }

  }
  const tmpQuat$1 = new Quaternion();

  /**
   * A set of polygons describing a convex shape.
   *
   * The shape MUST be convex for the code to work properly. No polygons may be coplanar (contained
   * in the same 3D plane), instead these should be merged into one polygon.
   *
   * @author qiao / https://github.com/qiao (original author, see https://github.com/qiao/three.js/commit/85026f0c769e4000148a67d45a9e9b9c5108836f)
   * @author schteppe / https://github.com/schteppe
   * @see https://www.altdevblogaday.com/2011/05/13/contact-generation-between-3d-convex-meshes/
   *
   * @todo Move the clipping functions to ContactGenerator?
   * @todo Automatically merge coplanar polygons in constructor.
   * @example
   *     const convexShape = new CANNON.ConvexPolyhedron({ vertices, faces })
   *     const convexBody = new CANNON.Body({ mass: 1, shape: convexShape })
   *     world.addBody(convexBody)
   */
  class ConvexPolyhedron extends Shape {
    /** vertices */

    /**
     * Array of integer arrays, indicating which vertices each face consists of
     */

    /** faceNormals */

    /** worldVertices */

    /** worldVerticesNeedsUpdate */

    /** worldFaceNormals */

    /** worldFaceNormalsNeedsUpdate */

    /**
     * If given, these locally defined, normalized axes are the only ones being checked when doing separating axis check.
     */

    /** uniqueEdges */

    /**
     * @param vertices An array of Vec3's
     * @param faces Array of integer arrays, describing which vertices that is included in each face.
     */
    constructor(props) {
      if (props === void 0) {
        props = {};
      }

      const {
        vertices = [],
        faces = [],
        normals = [],
        axes,
        boundingSphereRadius
      } = props;
      super({
        type: Shape.types.CONVEXPOLYHEDRON
      });
      this.vertices = vertices;
      this.faces = faces;
      this.faceNormals = normals;

      if (this.faceNormals.length === 0) {
        this.computeNormals();
      }

      if (!boundingSphereRadius) {
        this.updateBoundingSphereRadius();
      } else {
        this.boundingSphereRadius = boundingSphereRadius;
      }

      this.worldVertices = []; // World transformed version of .vertices

      this.worldVerticesNeedsUpdate = true;
      this.worldFaceNormals = []; // World transformed version of .faceNormals

      this.worldFaceNormalsNeedsUpdate = true;
      this.uniqueAxes = axes ? axes.slice() : null;
      this.uniqueEdges = [];
      this.computeEdges();
    }
    /**
     * Computes uniqueEdges
     */


    computeEdges() {
      const faces = this.faces;
      const vertices = this.vertices;
      const edges = this.uniqueEdges;
      edges.length = 0;
      const edge = new Vec3();

      for (let i = 0; i !== faces.length; i++) {
        const face = faces[i];
        const numVertices = face.length;

        for (let j = 0; j !== numVertices; j++) {
          const k = (j + 1) % numVertices;
          vertices[face[j]].vsub(vertices[face[k]], edge);
          edge.normalize();
          let found = false;

          for (let p = 0; p !== edges.length; p++) {
            if (edges[p].almostEquals(edge) || edges[p].almostEquals(edge)) {
              found = true;
              break;
            }
          }

          if (!found) {
            edges.push(edge.clone());
          }
        }
      }
    }
    /**
     * Compute the normals of the faces.
     * Will reuse existing Vec3 objects in the `faceNormals` array if they exist.
     */


    computeNormals() {
      this.faceNormals.length = this.faces.length; // Generate normals

      for (let i = 0; i < this.faces.length; i++) {
        // Check so all vertices exists for this face
        for (let j = 0; j < this.faces[i].length; j++) {
          if (!this.vertices[this.faces[i][j]]) {
            throw new Error(`Vertex ${this.faces[i][j]} not found!`);
          }
        }

        const n = this.faceNormals[i] || new Vec3();
        this.getFaceNormal(i, n);
        n.negate(n);
        this.faceNormals[i] = n;
        const vertex = this.vertices[this.faces[i][0]];

        if (n.dot(vertex) < 0) {
          console.error(`.faceNormals[${i}] = Vec3(${n.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);

          for (let j = 0; j < this.faces[i].length; j++) {
            console.warn(`.vertices[${this.faces[i][j]}] = Vec3(${this.vertices[this.faces[i][j]].toString()})`);
          }
        }
      }
    }
    /**
     * Compute the normal of a face from its vertices
     */


    getFaceNormal(i, target) {
      const f = this.faces[i];
      const va = this.vertices[f[0]];
      const vb = this.vertices[f[1]];
      const vc = this.vertices[f[2]];
      ConvexPolyhedron.computeNormal(va, vb, vc, target);
    }
    /**
     * Get face normal given 3 vertices
     */


    static computeNormal(va, vb, vc, target) {
      const cb = new Vec3();
      const ab = new Vec3();
      vb.vsub(va, ab);
      vc.vsub(vb, cb);
      cb.cross(ab, target);

      if (!target.isZero()) {
        target.normalize();
      }
    }
    /**
     * @param minDist Clamp distance
     * @param result The an array of contact point objects, see clipFaceAgainstHull
     */


    clipAgainstHull(posA, quatA, hullB, posB, quatB, separatingNormal, minDist, maxDist, result) {
      const WorldNormal = new Vec3();
      let closestFaceB = -1;
      let dmax = -Number.MAX_VALUE;

      for (let face = 0; face < hullB.faces.length; face++) {
        WorldNormal.copy(hullB.faceNormals[face]);
        quatB.vmult(WorldNormal, WorldNormal);
        const d = WorldNormal.dot(separatingNormal);

        if (d > dmax) {
          dmax = d;
          closestFaceB = face;
        }
      }

      const worldVertsB1 = [];

      for (let i = 0; i < hullB.faces[closestFaceB].length; i++) {
        const b = hullB.vertices[hullB.faces[closestFaceB][i]];
        const worldb = new Vec3();
        worldb.copy(b);
        quatB.vmult(worldb, worldb);
        posB.vadd(worldb, worldb);
        worldVertsB1.push(worldb);
      }

      if (closestFaceB >= 0) {
        this.clipFaceAgainstHull(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist, result);
      }
    }
    /**
     * Find the separating axis between this hull and another
     * @param target The target vector to save the axis in
     * @return Returns false if a separation is found, else true
     */


    findSeparatingAxis(hullB, posA, quatA, posB, quatB, target, faceListA, faceListB) {
      const faceANormalWS3 = new Vec3();
      const Worldnormal1 = new Vec3();
      const deltaC = new Vec3();
      const worldEdge0 = new Vec3();
      const worldEdge1 = new Vec3();
      const Cross = new Vec3();
      let dmin = Number.MAX_VALUE;
      const hullA = this;

      if (!hullA.uniqueAxes) {
        const numFacesA = faceListA ? faceListA.length : hullA.faces.length; // Test face normals from hullA

        for (let i = 0; i < numFacesA; i++) {
          const fi = faceListA ? faceListA[i] : i; // Get world face normal

          faceANormalWS3.copy(hullA.faceNormals[fi]);
          quatA.vmult(faceANormalWS3, faceANormalWS3);
          const d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);

          if (d === false) {
            return false;
          }

          if (d < dmin) {
            dmin = d;
            target.copy(faceANormalWS3);
          }
        }
      } else {
        // Test unique axes
        for (let i = 0; i !== hullA.uniqueAxes.length; i++) {
          // Get world axis
          quatA.vmult(hullA.uniqueAxes[i], faceANormalWS3);
          const d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);

          if (d === false) {
            return false;
          }

          if (d < dmin) {
            dmin = d;
            target.copy(faceANormalWS3);
          }
        }
      }

      if (!hullB.uniqueAxes) {
        // Test face normals from hullB
        const numFacesB = faceListB ? faceListB.length : hullB.faces.length;

        for (let i = 0; i < numFacesB; i++) {
          const fi = faceListB ? faceListB[i] : i;
          Worldnormal1.copy(hullB.faceNormals[fi]);
          quatB.vmult(Worldnormal1, Worldnormal1);
          const d = hullA.testSepAxis(Worldnormal1, hullB, posA, quatA, posB, quatB);

          if (d === false) {
            return false;
          }

          if (d < dmin) {
            dmin = d;
            target.copy(Worldnormal1);
          }
        }
      } else {
        // Test unique axes in B
        for (let i = 0; i !== hullB.uniqueAxes.length; i++) {
          quatB.vmult(hullB.uniqueAxes[i], Worldnormal1);
          const d = hullA.testSepAxis(Worldnormal1, hullB, posA, quatA, posB, quatB);

          if (d === false) {
            return false;
          }

          if (d < dmin) {
            dmin = d;
            target.copy(Worldnormal1);
          }
        }
      } // Test edges


      for (let e0 = 0; e0 !== hullA.uniqueEdges.length; e0++) {
        // Get world edge
        quatA.vmult(hullA.uniqueEdges[e0], worldEdge0);

        for (let e1 = 0; e1 !== hullB.uniqueEdges.length; e1++) {
          // Get world edge 2
          quatB.vmult(hullB.uniqueEdges[e1], worldEdge1);
          worldEdge0.cross(worldEdge1, Cross);

          if (!Cross.almostZero()) {
            Cross.normalize();
            const dist = hullA.testSepAxis(Cross, hullB, posA, quatA, posB, quatB);

            if (dist === false) {
              return false;
            }

            if (dist < dmin) {
              dmin = dist;
              target.copy(Cross);
            }
          }
        }
      }

      posB.vsub(posA, deltaC);

      if (deltaC.dot(target) > 0.0) {
        target.negate(target);
      }

      return true;
    }
    /**
     * Test separating axis against two hulls. Both hulls are projected onto the axis and the overlap size is returned if there is one.
     * @return The overlap depth, or FALSE if no penetration.
     */


    testSepAxis(axis, hullB, posA, quatA, posB, quatB) {
      const hullA = this;
      ConvexPolyhedron.project(hullA, axis, posA, quatA, maxminA);
      ConvexPolyhedron.project(hullB, axis, posB, quatB, maxminB);
      const maxA = maxminA[0];
      const minA = maxminA[1];
      const maxB = maxminB[0];
      const minB = maxminB[1];

      if (maxA < minB || maxB < minA) {
        return false; // Separated
      }

      const d0 = maxA - minB;
      const d1 = maxB - minA;
      const depth = d0 < d1 ? d0 : d1;
      return depth;
    }
    /**
     * calculateLocalInertia
     */


    calculateLocalInertia(mass, target) {
      // Approximate with box inertia
      // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it
      const aabbmax = new Vec3();
      const aabbmin = new Vec3();
      this.computeLocalAABB(aabbmin, aabbmax);
      const x = aabbmax.x - aabbmin.x;
      const y = aabbmax.y - aabbmin.y;
      const z = aabbmax.z - aabbmin.z;
      target.x = 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * z * 2 * z);
      target.y = 1.0 / 12.0 * mass * (2 * x * 2 * x + 2 * z * 2 * z);
      target.z = 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * x * 2 * x);
    }
    /**
     * @param face_i Index of the face
     */


    getPlaneConstantOfFace(face_i) {
      const f = this.faces[face_i];
      const n = this.faceNormals[face_i];
      const v = this.vertices[f[0]];
      const c = -n.dot(v);
      return c;
    }
    /**
     * Clip a face against a hull.
     * @param worldVertsB1 An array of Vec3 with vertices in the world frame.
     * @param minDist Distance clamping
     * @param Array result Array to store resulting contact points in. Will be objects with properties: point, depth, normal. These are represented in world coordinates.
     */


    clipFaceAgainstHull(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist, result) {
      const faceANormalWS = new Vec3();
      const edge0 = new Vec3();
      const WorldEdge0 = new Vec3();
      const worldPlaneAnormal1 = new Vec3();
      const planeNormalWS1 = new Vec3();
      const worldA1 = new Vec3();
      const localPlaneNormal = new Vec3();
      const planeNormalWS = new Vec3();
      const hullA = this;
      const worldVertsB2 = [];
      const pVtxIn = worldVertsB1;
      const pVtxOut = worldVertsB2;
      let closestFaceA = -1;
      let dmin = Number.MAX_VALUE; // Find the face with normal closest to the separating axis

      for (let face = 0; face < hullA.faces.length; face++) {
        faceANormalWS.copy(hullA.faceNormals[face]);
        quatA.vmult(faceANormalWS, faceANormalWS);
        const d = faceANormalWS.dot(separatingNormal);

        if (d < dmin) {
          dmin = d;
          closestFaceA = face;
        }
      }

      if (closestFaceA < 0) {
        return;
      } // Get the face and construct connected faces


      const polyA = hullA.faces[closestFaceA];
      polyA.connectedFaces = [];

      for (let i = 0; i < hullA.faces.length; i++) {
        for (let j = 0; j < hullA.faces[i].length; j++) {
          if (
          /* Sharing a vertex*/
          polyA.indexOf(hullA.faces[i][j]) !== -1 &&
          /* Not the one we are looking for connections from */
          i !== closestFaceA &&
          /* Not already added */
          polyA.connectedFaces.indexOf(i) === -1) {
            polyA.connectedFaces.push(i);
          }
        }
      } // Clip the polygon to the back of the planes of all faces of hull A,
      // that are adjacent to the witness face


      const numVerticesA = polyA.length;

      for (let i = 0; i < numVerticesA; i++) {
        const a = hullA.vertices[polyA[i]];
        const b = hullA.vertices[polyA[(i + 1) % numVerticesA]];
        a.vsub(b, edge0);
        WorldEdge0.copy(edge0);
        quatA.vmult(WorldEdge0, WorldEdge0);
        posA.vadd(WorldEdge0, WorldEdge0);
        worldPlaneAnormal1.copy(this.faceNormals[closestFaceA]);
        quatA.vmult(worldPlaneAnormal1, worldPlaneAnormal1);
        posA.vadd(worldPlaneAnormal1, worldPlaneAnormal1);
        WorldEdge0.cross(worldPlaneAnormal1, planeNormalWS1);
        planeNormalWS1.negate(planeNormalWS1);
        worldA1.copy(a);
        quatA.vmult(worldA1, worldA1);
        posA.vadd(worldA1, worldA1);
        const otherFace = polyA.connectedFaces[i];
        localPlaneNormal.copy(this.faceNormals[otherFace]);
        const localPlaneEq = this.getPlaneConstantOfFace(otherFace);
        planeNormalWS.copy(localPlaneNormal);
        quatA.vmult(planeNormalWS, planeNormalWS);
        const planeEqWS = localPlaneEq - planeNormalWS.dot(posA); // Clip face against our constructed plane

        this.clipFaceAgainstPlane(pVtxIn, pVtxOut, planeNormalWS, planeEqWS); // Throw away all clipped points, but save the remaining until next clip

        while (pVtxIn.length) {
          pVtxIn.shift();
        }

        while (pVtxOut.length) {
          pVtxIn.push(pVtxOut.shift());
        }
      } // only keep contact points that are behind the witness face


      localPlaneNormal.copy(this.faceNormals[closestFaceA]);
      const localPlaneEq = this.getPlaneConstantOfFace(closestFaceA);
      planeNormalWS.copy(localPlaneNormal);
      quatA.vmult(planeNormalWS, planeNormalWS);
      const planeEqWS = localPlaneEq - planeNormalWS.dot(posA);

      for (let i = 0; i < pVtxIn.length; i++) {
        let depth = planeNormalWS.dot(pVtxIn[i]) + planeEqWS; // ???

        if (depth <= minDist) {
          console.log(`clamped: depth=${depth} to minDist=${minDist}`);
          depth = minDist;
        }

        if (depth <= maxDist) {
          const point = pVtxIn[i];

          if (depth <= 1e-6) {
            const p = {
              point,
              normal: planeNormalWS,
              depth
            };
            result.push(p);
          }
        }
      }
    }
    /**
     * Clip a face in a hull against the back of a plane.
     * @param planeConstant The constant in the mathematical plane equation
     */


    clipFaceAgainstPlane(inVertices, outVertices, planeNormal, planeConstant) {
      let n_dot_first;
      let n_dot_last;
      const numVerts = inVertices.length;

      if (numVerts < 2) {
        return outVertices;
      }

      let firstVertex = inVertices[inVertices.length - 1];
      let lastVertex = inVertices[0];
      n_dot_first = planeNormal.dot(firstVertex) + planeConstant;

      for (let vi = 0; vi < numVerts; vi++) {
        lastVertex = inVertices[vi];
        n_dot_last = planeNormal.dot(lastVertex) + planeConstant;

        if (n_dot_first < 0) {
          if (n_dot_last < 0) {
            // Start < 0, end < 0, so output lastVertex
            const newv = new Vec3();
            newv.copy(lastVertex);
            outVertices.push(newv);
          } else {
            // Start < 0, end >= 0, so output intersection
            const newv = new Vec3();
            firstVertex.lerp(lastVertex, n_dot_first / (n_dot_first - n_dot_last), newv);
            outVertices.push(newv);
          }
        } else {
          if (n_dot_last < 0) {
            // Start >= 0, end < 0 so output intersection and end
            const newv = new Vec3();
            firstVertex.lerp(lastVertex, n_dot_first / (n_dot_first - n_dot_last), newv);
            outVertices.push(newv);
            outVertices.push(lastVertex);
          }
        }

        firstVertex = lastVertex;
        n_dot_first = n_dot_last;
      }

      return outVertices;
    }
    /**
     * Updates `.worldVertices` and sets `.worldVerticesNeedsUpdate` to false.
     */


    computeWorldVertices(position, quat) {
      while (this.worldVertices.length < this.vertices.length) {
        this.worldVertices.push(new Vec3());
      }

      const verts = this.vertices;
      const worldVerts = this.worldVertices;

      for (let i = 0; i !== this.vertices.length; i++) {
        quat.vmult(verts[i], worldVerts[i]);
        position.vadd(worldVerts[i], worldVerts[i]);
      }

      this.worldVerticesNeedsUpdate = false;
    }

    computeLocalAABB(aabbmin, aabbmax) {
      const vertices = this.vertices;
      aabbmin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
      aabbmax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);

      for (let i = 0; i < this.vertices.length; i++) {
        const v = vertices[i];

        if (v.x < aabbmin.x) {
          aabbmin.x = v.x;
        } else if (v.x > aabbmax.x) {
          aabbmax.x = v.x;
        }

        if (v.y < aabbmin.y) {
          aabbmin.y = v.y;
        } else if (v.y > aabbmax.y) {
          aabbmax.y = v.y;
        }

        if (v.z < aabbmin.z) {
          aabbmin.z = v.z;
        } else if (v.z > aabbmax.z) {
          aabbmax.z = v.z;
        }
      }
    }
    /**
     * Updates `worldVertices` and sets `worldVerticesNeedsUpdate` to false.
     */


    computeWorldFaceNormals(quat) {
      const N = this.faceNormals.length;

      while (this.worldFaceNormals.length < N) {
        this.worldFaceNormals.push(new Vec3());
      }

      const normals = this.faceNormals;
      const worldNormals = this.worldFaceNormals;

      for (let i = 0; i !== N; i++) {
        quat.vmult(normals[i], worldNormals[i]);
      }

      this.worldFaceNormalsNeedsUpdate = false;
    }
    /**
     * updateBoundingSphereRadius
     */


    updateBoundingSphereRadius() {
      // Assume points are distributed with local (0,0,0) as center
      let max2 = 0;
      const verts = this.vertices;

      for (let i = 0; i !== verts.length; i++) {
        const norm2 = verts[i].lengthSquared();

        if (norm2 > max2) {
          max2 = norm2;
        }
      }

      this.boundingSphereRadius = Math.sqrt(max2);
    }
    /**
     * calculateWorldAABB
     */


    calculateWorldAABB(pos, quat, min, max) {
      const verts = this.vertices;
      let minx;
      let miny;
      let minz;
      let maxx;
      let maxy;
      let maxz;
      let tempWorldVertex = new Vec3();

      for (let i = 0; i < verts.length; i++) {
        tempWorldVertex.copy(verts[i]);
        quat.vmult(tempWorldVertex, tempWorldVertex);
        pos.vadd(tempWorldVertex, tempWorldVertex);
        const v = tempWorldVertex;

        if (minx === undefined || v.x < minx) {
          minx = v.x;
        }

        if (maxx === undefined || v.x > maxx) {
          maxx = v.x;
        }

        if (miny === undefined || v.y < miny) {
          miny = v.y;
        }

        if (maxy === undefined || v.y > maxy) {
          maxy = v.y;
        }

        if (minz === undefined || v.z < minz) {
          minz = v.z;
        }

        if (maxz === undefined || v.z > maxz) {
          maxz = v.z;
        }
      }

      min.set(minx, miny, minz);
      max.set(maxx, maxy, maxz);
    }
    /**
     * Get approximate convex volume
     */


    volume() {
      return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;
    }
    /**
     * Get an average of all the vertices positions
     */


    getAveragePointLocal(target) {
      if (target === void 0) {
        target = new Vec3();
      }

      const verts = this.vertices;

      for (let i = 0; i < verts.length; i++) {
        target.vadd(verts[i], target);
      }

      target.scale(1 / verts.length, target);
      return target;
    }
    /**
     * Transform all local points. Will change the .vertices
     */


    transformAllPoints(offset, quat) {
      const n = this.vertices.length;
      const verts = this.vertices; // Apply rotation

      if (quat) {
        // Rotate vertices
        for (let i = 0; i < n; i++) {
          const v = verts[i];
          quat.vmult(v, v);
        } // Rotate face normals


        for (let i = 0; i < this.faceNormals.length; i++) {
          const v = this.faceNormals[i];
          quat.vmult(v, v);
        }
        /*
              // Rotate edges
              for(let i=0; i<this.uniqueEdges.length; i++){
                  const v = this.uniqueEdges[i];
                  quat.vmult(v,v);
              }*/

      } // Apply offset


      if (offset) {
        for (let i = 0; i < n; i++) {
          const v = verts[i];
          v.vadd(offset, v);
        }
      }
    }
    /**
     * Checks whether p is inside the polyhedra. Must be in local coords.
     * The point lies outside of the convex hull of the other points if and only if the direction
     * of all the vectors from it to those other points are on less than one half of a sphere around it.
     * @param p A point given in local coordinates
     */


    pointIsInside(p) {
      const verts = this.vertices;
      const faces = this.faces;
      const normals = this.faceNormals;
      const positiveResult = null;
      const pointInside = new Vec3();
      this.getAveragePointLocal(pointInside);

      for (let i = 0; i < this.faces.length; i++) {
        let n = normals[i];
        const v = verts[faces[i][0]]; // We only need one point in the face
        // This dot product determines which side of the edge the point is

        const vToP = new Vec3();
        p.vsub(v, vToP);
        const r1 = n.dot(vToP);
        const vToPointInside = new Vec3();
        pointInside.vsub(v, vToPointInside);
        const r2 = n.dot(vToPointInside);

        if (r1 < 0 && r2 > 0 || r1 > 0 && r2 < 0) {
          return false; // Encountered some other sign. Exit.
        }
      } // If we got here, all dot products were of the same sign.


      return positiveResult ? 1 : -1;
    }
    /**
     * Get max and min dot product of a convex hull at position (pos,quat) projected onto an axis.
     * Results are saved in the array maxmin.
     * @param result result[0] and result[1] will be set to maximum and minimum, respectively.
     */


    static project(shape, axis, pos, quat, result) {
      const n = shape.vertices.length;
      const localAxis = project_localAxis;
      let max = 0;
      let min = 0;
      const localOrigin = project_localOrigin;
      const vs = shape.vertices;
      localOrigin.setZero(); // Transform the axis to local

      Transform.vectorToLocalFrame(pos, quat, axis, localAxis);
      Transform.pointToLocalFrame(pos, quat, localOrigin, localOrigin);
      const add = localOrigin.dot(localAxis);
      min = max = vs[0].dot(localAxis);

      for (let i = 1; i < n; i++) {
        const val = vs[i].dot(localAxis);

        if (val > max) {
          max = val;
        }

        if (val < min) {
          min = val;
        }
      }

      min -= add;
      max -= add;

      if (min > max) {
        // Inconsistent - swap
        const temp = min;
        min = max;
        max = temp;
      } // Output


      result[0] = max;
      result[1] = min;
    }

  }
  const maxminA = [];
  const maxminB = [];
  new Vec3();
  const project_localAxis = new Vec3();
  const project_localOrigin = new Vec3();

  /**
   * A 3d box shape.
   * @example
   *     const size = 1
   *     const halfExtents = new CANNON.Vec3(size, size, size)
   *     const boxShape = new CANNON.Box(halfExtents)
   *     const boxBody = new CANNON.Body({ mass: 1, shape: boxShape })
   *     world.addBody(boxBody)
   */
  class Box extends Shape {
    /**
     * The half extents of the box.
     */

    /**
     * Used by the contact generator to make contacts with other convex polyhedra for example.
     */
    constructor(halfExtents) {
      super({
        type: Shape.types.BOX
      });
      this.halfExtents = halfExtents;
      this.convexPolyhedronRepresentation = null;
      this.updateConvexPolyhedronRepresentation();
      this.updateBoundingSphereRadius();
    }
    /**
     * Updates the local convex polyhedron representation used for some collisions.
     */


    updateConvexPolyhedronRepresentation() {
      const sx = this.halfExtents.x;
      const sy = this.halfExtents.y;
      const sz = this.halfExtents.z;
      const V = Vec3;
      const vertices = [new V(-sx, -sy, -sz), new V(sx, -sy, -sz), new V(sx, sy, -sz), new V(-sx, sy, -sz), new V(-sx, -sy, sz), new V(sx, -sy, sz), new V(sx, sy, sz), new V(-sx, sy, sz)];
      const faces = [[3, 2, 1, 0], // -z
      [4, 5, 6, 7], // +z
      [5, 4, 0, 1], // -y
      [2, 3, 7, 6], // +y
      [0, 4, 7, 3], // -x
      [1, 2, 6, 5] // +x
      ];
      const axes = [new V(0, 0, 1), new V(0, 1, 0), new V(1, 0, 0)];
      const h = new ConvexPolyhedron({
        vertices,
        faces,
        axes
      });
      this.convexPolyhedronRepresentation = h;
      h.material = this.material;
    }
    /**
     * Calculate the inertia of the box.
     */


    calculateLocalInertia(mass, target) {
      if (target === void 0) {
        target = new Vec3();
      }

      Box.calculateInertia(this.halfExtents, mass, target);
      return target;
    }

    static calculateInertia(halfExtents, mass, target) {
      const e = halfExtents;
      target.x = 1.0 / 12.0 * mass * (2 * e.y * 2 * e.y + 2 * e.z * 2 * e.z);
      target.y = 1.0 / 12.0 * mass * (2 * e.x * 2 * e.x + 2 * e.z * 2 * e.z);
      target.z = 1.0 / 12.0 * mass * (2 * e.y * 2 * e.y + 2 * e.x * 2 * e.x);
    }
    /**
     * Get the box 6 side normals
     * @param sixTargetVectors An array of 6 vectors, to store the resulting side normals in.
     * @param quat Orientation to apply to the normal vectors. If not provided, the vectors will be in respect to the local frame.
     */


    getSideNormals(sixTargetVectors, quat) {
      const sides = sixTargetVectors;
      const ex = this.halfExtents;
      sides[0].set(ex.x, 0, 0);
      sides[1].set(0, ex.y, 0);
      sides[2].set(0, 0, ex.z);
      sides[3].set(-ex.x, 0, 0);
      sides[4].set(0, -ex.y, 0);
      sides[5].set(0, 0, -ex.z);

      if (quat !== undefined) {
        for (let i = 0; i !== sides.length; i++) {
          quat.vmult(sides[i], sides[i]);
        }
      }

      return sides;
    }
    /**
     * Returns the volume of the box.
     */


    volume() {
      return 8.0 * this.halfExtents.x * this.halfExtents.y * this.halfExtents.z;
    }
    /**
     * updateBoundingSphereRadius
     */


    updateBoundingSphereRadius() {
      this.boundingSphereRadius = this.halfExtents.length();
    }
    /**
     * forEachWorldCorner
     */


    forEachWorldCorner(pos, quat, callback) {
      const e = this.halfExtents;
      const corners = [[e.x, e.y, e.z], [-e.x, e.y, e.z], [-e.x, -e.y, e.z], [-e.x, -e.y, -e.z], [e.x, -e.y, -e.z], [e.x, e.y, -e.z], [-e.x, e.y, -e.z], [e.x, -e.y, e.z]];

      for (let i = 0; i < corners.length; i++) {
        worldCornerTempPos.set(corners[i][0], corners[i][1], corners[i][2]);
        quat.vmult(worldCornerTempPos, worldCornerTempPos);
        pos.vadd(worldCornerTempPos, worldCornerTempPos);
        callback(worldCornerTempPos.x, worldCornerTempPos.y, worldCornerTempPos.z);
      }
    }
    /**
     * calculateWorldAABB
     */


    calculateWorldAABB(pos, quat, min, max) {
      const e = this.halfExtents;
      worldCornersTemp[0].set(e.x, e.y, e.z);
      worldCornersTemp[1].set(-e.x, e.y, e.z);
      worldCornersTemp[2].set(-e.x, -e.y, e.z);
      worldCornersTemp[3].set(-e.x, -e.y, -e.z);
      worldCornersTemp[4].set(e.x, -e.y, -e.z);
      worldCornersTemp[5].set(e.x, e.y, -e.z);
      worldCornersTemp[6].set(-e.x, e.y, -e.z);
      worldCornersTemp[7].set(e.x, -e.y, e.z);
      const wc = worldCornersTemp[0];
      quat.vmult(wc, wc);
      pos.vadd(wc, wc);
      max.copy(wc);
      min.copy(wc);

      for (let i = 1; i < 8; i++) {
        const wc = worldCornersTemp[i];
        quat.vmult(wc, wc);
        pos.vadd(wc, wc);
        const x = wc.x;
        const y = wc.y;
        const z = wc.z;

        if (x > max.x) {
          max.x = x;
        }

        if (y > max.y) {
          max.y = y;
        }

        if (z > max.z) {
          max.z = z;
        }

        if (x < min.x) {
          min.x = x;
        }

        if (y < min.y) {
          min.y = y;
        }

        if (z < min.z) {
          min.z = z;
        }
      } // Get each axis max
      // min.set(Infinity,Infinity,Infinity);
      // max.set(-Infinity,-Infinity,-Infinity);
      // this.forEachWorldCorner(pos,quat,function(x,y,z){
      //     if(x > max.x){
      //         max.x = x;
      //     }
      //     if(y > max.y){
      //         max.y = y;
      //     }
      //     if(z > max.z){
      //         max.z = z;
      //     }
      //     if(x < min.x){
      //         min.x = x;
      //     }
      //     if(y < min.y){
      //         min.y = y;
      //     }
      //     if(z < min.z){
      //         min.z = z;
      //     }
      // });

    }

  }
  const worldCornerTempPos = new Vec3();
  const worldCornersTemp = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];

  /**
   * BODY_TYPES
   */
  const BODY_TYPES = {
    /** DYNAMIC */
    DYNAMIC: 1,

    /** STATIC */
    STATIC: 2,

    /** KINEMATIC */
    KINEMATIC: 4
  };
  /**
   * BodyType
   */

  /**
   * BODY_SLEEP_STATES
   */
  const BODY_SLEEP_STATES = {
    /** AWAKE */
    AWAKE: 0,

    /** SLEEPY */
    SLEEPY: 1,

    /** SLEEPING */
    SLEEPING: 2
  };
  /**
   * BodySleepState
   */

  /**
   * Base class for all body types.
   * @example
   *     const shape = new CANNON.Sphere(1)
   *     const body = new CANNON.Body({
   *       mass: 1,
   *       shape,
   *     })
   *     world.addBody(body)
   */
  class Body extends EventTarget {
    /**
     * Dispatched after two bodies collide. This event is dispatched on each
     * of the two bodies involved in the collision.
     * @event collide
     * @param body The body that was involved in the collision.
     * @param contact The details of the collision.
     */

    /**
     * A dynamic body is fully simulated. Can be moved manually by the user, but normally they move according to forces. A dynamic body can collide with all body types. A dynamic body always has finite, non-zero mass.
     */

    /**
     * A static body does not move during simulation and behaves as if it has infinite mass. Static bodies can be moved manually by setting the position of the body. The velocity of a static body is always zero. Static bodies do not collide with other static or kinematic bodies.
     */

    /**
     * A kinematic body moves under simulation according to its velocity. They do not respond to forces. They can be moved manually, but normally a kinematic body is moved by setting its velocity. A kinematic body behaves as if it has infinite mass. Kinematic bodies do not collide with other static or kinematic bodies.
     */

    /**
     * AWAKE
     */

    /**
     * SLEEPY
     */

    /**
     * SLEEPING
     */

    /**
     * Dispatched after a sleeping body has woken up.
     * @event wakeup
     */

    /**
     * Dispatched after a body has gone in to the sleepy state.
     * @event sleepy
     */

    /**
     * Dispatched after a body has fallen asleep.
     * @event sleep
     */
    constructor(options) {
      if (options === void 0) {
        options = {};
      }

      super();
      this.id = Body.idCounter++;
      this.index = -1;
      this.world = null;
      this.vlambda = new Vec3();
      this.collisionFilterGroup = typeof options.collisionFilterGroup === 'number' ? options.collisionFilterGroup : 1;
      this.collisionFilterMask = typeof options.collisionFilterMask === 'number' ? options.collisionFilterMask : -1;
      this.collisionResponse = typeof options.collisionResponse === 'boolean' ? options.collisionResponse : true;
      this.position = new Vec3();
      this.previousPosition = new Vec3();
      this.interpolatedPosition = new Vec3();
      this.initPosition = new Vec3();

      if (options.position) {
        this.position.copy(options.position);
        this.previousPosition.copy(options.position);
        this.interpolatedPosition.copy(options.position);
        this.initPosition.copy(options.position);
      }

      this.velocity = new Vec3();

      if (options.velocity) {
        this.velocity.copy(options.velocity);
      }

      this.initVelocity = new Vec3();
      this.force = new Vec3();
      const mass = typeof options.mass === 'number' ? options.mass : 0;
      this.mass = mass;
      this.invMass = mass > 0 ? 1.0 / mass : 0;
      this.material = options.material || null;
      this.linearDamping = typeof options.linearDamping === 'number' ? options.linearDamping : 0.01;
      this.type = mass <= 0.0 ? Body.STATIC : Body.DYNAMIC;

      if (typeof options.type === typeof Body.STATIC) {
        this.type = options.type;
      }

      this.allowSleep = typeof options.allowSleep !== 'undefined' ? options.allowSleep : true;
      this.sleepState = Body.AWAKE;
      this.sleepSpeedLimit = typeof options.sleepSpeedLimit !== 'undefined' ? options.sleepSpeedLimit : 0.1;
      this.sleepTimeLimit = typeof options.sleepTimeLimit !== 'undefined' ? options.sleepTimeLimit : 1;
      this.timeLastSleepy = 0;
      this.wakeUpAfterNarrowphase = false;
      this.torque = new Vec3();
      this.quaternion = new Quaternion();
      this.initQuaternion = new Quaternion();
      this.previousQuaternion = new Quaternion();
      this.interpolatedQuaternion = new Quaternion();

      if (options.quaternion) {
        this.quaternion.copy(options.quaternion);
        this.initQuaternion.copy(options.quaternion);
        this.previousQuaternion.copy(options.quaternion);
        this.interpolatedQuaternion.copy(options.quaternion);
      }

      this.angularVelocity = new Vec3();

      if (options.angularVelocity) {
        this.angularVelocity.copy(options.angularVelocity);
      }

      this.initAngularVelocity = new Vec3();
      this.shapes = [];
      this.shapeOffsets = [];
      this.shapeOrientations = [];
      this.inertia = new Vec3();
      this.invInertia = new Vec3();
      this.invInertiaWorld = new Mat3();
      this.invMassSolve = 0;
      this.invInertiaSolve = new Vec3();
      this.invInertiaWorldSolve = new Mat3();
      this.fixedRotation = typeof options.fixedRotation !== 'undefined' ? options.fixedRotation : false;
      this.angularDamping = typeof options.angularDamping !== 'undefined' ? options.angularDamping : 0.01;
      this.linearFactor = new Vec3(1, 1, 1);

      if (options.linearFactor) {
        this.linearFactor.copy(options.linearFactor);
      }

      this.angularFactor = new Vec3(1, 1, 1);

      if (options.angularFactor) {
        this.angularFactor.copy(options.angularFactor);
      }

      this.aabb = new AABB();
      this.aabbNeedsUpdate = true;
      this.boundingRadius = 0;
      this.wlambda = new Vec3();
      this.isTrigger = Boolean(options.isTrigger);

      if (options.shape) {
        this.addShape(options.shape);
      }

      this.updateMassProperties();
    }
    /**
     * Wake the body up.
     */


    wakeUp() {
      const prevState = this.sleepState;
      this.sleepState = Body.AWAKE;
      this.wakeUpAfterNarrowphase = false;

      if (prevState === Body.SLEEPING) {
        this.dispatchEvent(Body.wakeupEvent);
      }
    }
    /**
     * Force body sleep
     */


    sleep() {
      this.sleepState = Body.SLEEPING;
      this.velocity.set(0, 0, 0);
      this.angularVelocity.set(0, 0, 0);
      this.wakeUpAfterNarrowphase = false;
    }
    /**
     * Called every timestep to update internal sleep timer and change sleep state if needed.
     * @param time The world time in seconds
     */


    sleepTick(time) {
      if (this.allowSleep) {
        const sleepState = this.sleepState;
        const speedSquared = this.velocity.lengthSquared() + this.angularVelocity.lengthSquared();
        const speedLimitSquared = this.sleepSpeedLimit ** 2;

        if (sleepState === Body.AWAKE && speedSquared < speedLimitSquared) {
          this.sleepState = Body.SLEEPY; // Sleepy

          this.timeLastSleepy = time;
          this.dispatchEvent(Body.sleepyEvent);
        } else if (sleepState === Body.SLEEPY && speedSquared > speedLimitSquared) {
          this.wakeUp(); // Wake up
        } else if (sleepState === Body.SLEEPY && time - this.timeLastSleepy > this.sleepTimeLimit) {
          this.sleep(); // Sleeping

          this.dispatchEvent(Body.sleepEvent);
        }
      }
    }
    /**
     * If the body is sleeping, it should be immovable / have infinite mass during solve. We solve it by having a separate "solve mass".
     */


    updateSolveMassProperties() {
      if (this.sleepState === Body.SLEEPING || this.type === Body.KINEMATIC) {
        this.invMassSolve = 0;
        this.invInertiaSolve.setZero();
        this.invInertiaWorldSolve.setZero();
      } else {
        this.invMassSolve = this.invMass;
        this.invInertiaSolve.copy(this.invInertia);
        this.invInertiaWorldSolve.copy(this.invInertiaWorld);
      }
    }
    /**
     * Convert a world point to local body frame.
     */


    pointToLocalFrame(worldPoint, result) {
      if (result === void 0) {
        result = new Vec3();
      }

      worldPoint.vsub(this.position, result);
      this.quaternion.conjugate().vmult(result, result);
      return result;
    }
    /**
     * Convert a world vector to local body frame.
     */


    vectorToLocalFrame(worldVector, result) {
      if (result === void 0) {
        result = new Vec3();
      }

      this.quaternion.conjugate().vmult(worldVector, result);
      return result;
    }
    /**
     * Convert a local body point to world frame.
     */


    pointToWorldFrame(localPoint, result) {
      if (result === void 0) {
        result = new Vec3();
      }

      this.quaternion.vmult(localPoint, result);
      result.vadd(this.position, result);
      return result;
    }
    /**
     * Convert a local body point to world frame.
     */


    vectorToWorldFrame(localVector, result) {
      if (result === void 0) {
        result = new Vec3();
      }

      this.quaternion.vmult(localVector, result);
      return result;
    }
    /**
     * Add a shape to the body with a local offset and orientation.
     * @return The body object, for chainability.
     */


    addShape(shape, _offset, _orientation) {
      const offset = new Vec3();
      const orientation = new Quaternion();

      if (_offset) {
        offset.copy(_offset);
      }

      if (_orientation) {
        orientation.copy(_orientation);
      }

      this.shapes.push(shape);
      this.shapeOffsets.push(offset);
      this.shapeOrientations.push(orientation);
      this.updateMassProperties();
      this.updateBoundingRadius();
      this.aabbNeedsUpdate = true;
      shape.body = this;
      return this;
    }
    /**
     * Remove a shape from the body.
     * @return The body object, for chainability.
     */


    removeShape(shape) {
      const index = this.shapes.indexOf(shape);

      if (index === -1) {
        console.warn('Shape does not belong to the body');
        return this;
      }

      this.shapes.splice(index, 1);
      this.shapeOffsets.splice(index, 1);
      this.shapeOrientations.splice(index, 1);
      this.updateMassProperties();
      this.updateBoundingRadius();
      this.aabbNeedsUpdate = true;
      shape.body = null;
      return this;
    }
    /**
     * Update the bounding radius of the body. Should be done if any of the shapes are changed.
     */


    updateBoundingRadius() {
      const shapes = this.shapes;
      const shapeOffsets = this.shapeOffsets;
      const N = shapes.length;
      let radius = 0;

      for (let i = 0; i !== N; i++) {
        const shape = shapes[i];
        shape.updateBoundingSphereRadius();
        const offset = shapeOffsets[i].length();
        const r = shape.boundingSphereRadius;

        if (offset + r > radius) {
          radius = offset + r;
        }
      }

      this.boundingRadius = radius;
    }
    /**
     * Updates the .aabb
     */


    updateAABB() {
      const shapes = this.shapes;
      const shapeOffsets = this.shapeOffsets;
      const shapeOrientations = this.shapeOrientations;
      const N = shapes.length;
      const offset = tmpVec;
      const orientation = tmpQuat;
      const bodyQuat = this.quaternion;
      const aabb = this.aabb;
      const shapeAABB = updateAABB_shapeAABB;

      for (let i = 0; i !== N; i++) {
        const shape = shapes[i]; // Get shape world position

        bodyQuat.vmult(shapeOffsets[i], offset);
        offset.vadd(this.position, offset); // Get shape world quaternion

        bodyQuat.mult(shapeOrientations[i], orientation); // Get shape AABB

        shape.calculateWorldAABB(offset, orientation, shapeAABB.lowerBound, shapeAABB.upperBound);

        if (i === 0) {
          aabb.copy(shapeAABB);
        } else {
          aabb.extend(shapeAABB);
        }
      }

      this.aabbNeedsUpdate = false;
    }
    /**
     * Update `.inertiaWorld` and `.invInertiaWorld`
     */


    updateInertiaWorld(force) {
      const I = this.invInertia;

      if (I.x === I.y && I.y === I.z && !force) ; else {
        const m1 = uiw_m1;
        const m2 = uiw_m2;
        m1.setRotationFromQuaternion(this.quaternion);
        m1.transpose(m2);
        m1.scale(I, m1);
        m1.mmult(m2, this.invInertiaWorld);
      }
    }
    /**
     * Apply force to a point of the body. This could for example be a point on the Body surface.
     * Applying force this way will add to Body.force and Body.torque.
     * @param force The amount of force to add.
     * @param relativePoint A point relative to the center of mass to apply the force on.
     */


    applyForce(force, relativePoint) {
      if (relativePoint === void 0) {
        relativePoint = new Vec3();
      }

      // Needed?
      if (this.type !== Body.DYNAMIC) {
        return;
      }

      if (this.sleepState === Body.SLEEPING) {
        this.wakeUp();
      } // Compute produced rotational force


      const rotForce = Body_applyForce_rotForce;
      relativePoint.cross(force, rotForce); // Add linear force

      this.force.vadd(force, this.force); // Add rotational force

      this.torque.vadd(rotForce, this.torque);
    }
    /**
     * Apply force to a local point in the body.
     * @param force The force vector to apply, defined locally in the body frame.
     * @param localPoint A local point in the body to apply the force on.
     */


    applyLocalForce(localForce, localPoint) {
      if (localPoint === void 0) {
        localPoint = new Vec3();
      }

      if (this.type !== Body.DYNAMIC) {
        return;
      }

      const worldForce = Body_applyLocalForce_worldForce;
      const relativePointWorld = Body_applyLocalForce_relativePointWorld; // Transform the force vector to world space

      this.vectorToWorldFrame(localForce, worldForce);
      this.vectorToWorldFrame(localPoint, relativePointWorld);
      this.applyForce(worldForce, relativePointWorld);
    }
    /**
     * Apply torque to the body.
     * @param torque The amount of torque to add.
     */


    applyTorque(torque) {
      if (this.type !== Body.DYNAMIC) {
        return;
      }

      if (this.sleepState === Body.SLEEPING) {
        this.wakeUp();
      } // Add rotational force


      this.torque.vadd(torque, this.torque);
    }
    /**
     * Apply impulse to a point of the body. This could for example be a point on the Body surface.
     * An impulse is a force added to a body during a short period of time (impulse = force * time).
     * Impulses will be added to Body.velocity and Body.angularVelocity.
     * @param impulse The amount of impulse to add.
     * @param relativePoint A point relative to the center of mass to apply the force on.
     */


    applyImpulse(impulse, relativePoint) {
      if (relativePoint === void 0) {
        relativePoint = new Vec3();
      }

      if (this.type !== Body.DYNAMIC) {
        return;
      }

      if (this.sleepState === Body.SLEEPING) {
        this.wakeUp();
      } // Compute point position relative to the body center


      const r = relativePoint; // Compute produced central impulse velocity

      const velo = Body_applyImpulse_velo;
      velo.copy(impulse);
      velo.scale(this.invMass, velo); // Add linear impulse

      this.velocity.vadd(velo, this.velocity); // Compute produced rotational impulse velocity

      const rotVelo = Body_applyImpulse_rotVelo;
      r.cross(impulse, rotVelo);
      /*
       rotVelo.x *= this.invInertia.x;
       rotVelo.y *= this.invInertia.y;
       rotVelo.z *= this.invInertia.z;
       */

      this.invInertiaWorld.vmult(rotVelo, rotVelo); // Add rotational Impulse

      this.angularVelocity.vadd(rotVelo, this.angularVelocity);
    }
    /**
     * Apply locally-defined impulse to a local point in the body.
     * @param force The force vector to apply, defined locally in the body frame.
     * @param localPoint A local point in the body to apply the force on.
     */


    applyLocalImpulse(localImpulse, localPoint) {
      if (localPoint === void 0) {
        localPoint = new Vec3();
      }

      if (this.type !== Body.DYNAMIC) {
        return;
      }

      const worldImpulse = Body_applyLocalImpulse_worldImpulse;
      const relativePointWorld = Body_applyLocalImpulse_relativePoint; // Transform the force vector to world space

      this.vectorToWorldFrame(localImpulse, worldImpulse);
      this.vectorToWorldFrame(localPoint, relativePointWorld);
      this.applyImpulse(worldImpulse, relativePointWorld);
    }
    /**
     * Should be called whenever you change the body shape or mass.
     */


    updateMassProperties() {
      const halfExtents = Body_updateMassProperties_halfExtents;
      this.invMass = this.mass > 0 ? 1.0 / this.mass : 0;
      const I = this.inertia;
      const fixed = this.fixedRotation; // Approximate with AABB box

      this.updateAABB();
      halfExtents.set((this.aabb.upperBound.x - this.aabb.lowerBound.x) / 2, (this.aabb.upperBound.y - this.aabb.lowerBound.y) / 2, (this.aabb.upperBound.z - this.aabb.lowerBound.z) / 2);
      Box.calculateInertia(halfExtents, this.mass, I);
      this.invInertia.set(I.x > 0 && !fixed ? 1.0 / I.x : 0, I.y > 0 && !fixed ? 1.0 / I.y : 0, I.z > 0 && !fixed ? 1.0 / I.z : 0);
      this.updateInertiaWorld(true);
    }
    /**
     * Get world velocity of a point in the body.
     * @param worldPoint
     * @param result
     * @return The result vector.
     */


    getVelocityAtWorldPoint(worldPoint, result) {
      const r = new Vec3();
      worldPoint.vsub(this.position, r);
      this.angularVelocity.cross(r, result);
      this.velocity.vadd(result, result);
      return result;
    }
    /**
     * Move the body forward in time.
     * @param dt Time step
     * @param quatNormalize Set to true to normalize the body quaternion
     * @param quatNormalizeFast If the quaternion should be normalized using "fast" quaternion normalization
     */


    integrate(dt, quatNormalize, quatNormalizeFast) {
      // Save previous position
      this.previousPosition.copy(this.position);
      this.previousQuaternion.copy(this.quaternion);

      if (!(this.type === Body.DYNAMIC || this.type === Body.KINEMATIC) || this.sleepState === Body.SLEEPING) {
        // Only for dynamic
        return;
      }

      const velo = this.velocity;
      const angularVelo = this.angularVelocity;
      const pos = this.position;
      const force = this.force;
      const torque = this.torque;
      const quat = this.quaternion;
      const invMass = this.invMass;
      const invInertia = this.invInertiaWorld;
      const linearFactor = this.linearFactor;
      const iMdt = invMass * dt;
      velo.x += force.x * iMdt * linearFactor.x;
      velo.y += force.y * iMdt * linearFactor.y;
      velo.z += force.z * iMdt * linearFactor.z;
      const e = invInertia.elements;
      const angularFactor = this.angularFactor;
      const tx = torque.x * angularFactor.x;
      const ty = torque.y * angularFactor.y;
      const tz = torque.z * angularFactor.z;
      angularVelo.x += dt * (e[0] * tx + e[1] * ty + e[2] * tz);
      angularVelo.y += dt * (e[3] * tx + e[4] * ty + e[5] * tz);
      angularVelo.z += dt * (e[6] * tx + e[7] * ty + e[8] * tz); // Use new velocity  - leap frog

      pos.x += velo.x * dt;
      pos.y += velo.y * dt;
      pos.z += velo.z * dt;
      quat.integrate(this.angularVelocity, dt, this.angularFactor, quat);

      if (quatNormalize) {
        if (quatNormalizeFast) {
          quat.normalizeFast();
        } else {
          quat.normalize();
        }
      }

      this.aabbNeedsUpdate = true; // Update world inertia

      this.updateInertiaWorld();
    }

  }
  Body.idCounter = 0;
  Body.COLLIDE_EVENT_NAME = 'collide';
  Body.DYNAMIC = BODY_TYPES.DYNAMIC;
  Body.STATIC = BODY_TYPES.STATIC;
  Body.KINEMATIC = BODY_TYPES.KINEMATIC;
  Body.AWAKE = BODY_SLEEP_STATES.AWAKE;
  Body.SLEEPY = BODY_SLEEP_STATES.SLEEPY;
  Body.SLEEPING = BODY_SLEEP_STATES.SLEEPING;
  Body.wakeupEvent = {
    type: 'wakeup'
  };
  Body.sleepyEvent = {
    type: 'sleepy'
  };
  Body.sleepEvent = {
    type: 'sleep'
  };
  const tmpVec = new Vec3();
  const tmpQuat = new Quaternion();
  const updateAABB_shapeAABB = new AABB();
  const uiw_m1 = new Mat3();
  const uiw_m2 = new Mat3();
  new Mat3();
  const Body_applyForce_rotForce = new Vec3();
  const Body_applyLocalForce_worldForce = new Vec3();
  const Body_applyLocalForce_relativePointWorld = new Vec3();
  const Body_applyImpulse_velo = new Vec3();
  const Body_applyImpulse_rotVelo = new Vec3();
  const Body_applyLocalImpulse_worldImpulse = new Vec3();
  const Body_applyLocalImpulse_relativePoint = new Vec3();
  const Body_updateMassProperties_halfExtents = new Vec3();

  /**
   * Base class for broadphase implementations
   * @author schteppe
   */
  class Broadphase {
    /**
     * The world to search for collisions in.
     */

    /**
     * If set to true, the broadphase uses bounding boxes for intersection tests, else it uses bounding spheres.
     */

    /**
     * Set to true if the objects in the world moved.
     */
    constructor() {
      this.world = null;
      this.useBoundingBoxes = false;
      this.dirty = true;
    }
    /**
     * Get the collision pairs from the world
     * @param world The world to search in
     * @param p1 Empty array to be filled with body objects
     * @param p2 Empty array to be filled with body objects
     */


    collisionPairs(world, p1, p2) {
      throw new Error('collisionPairs not implemented for this BroadPhase class!');
    }
    /**
     * Check if a body pair needs to be intersection tested at all.
     */


    needBroadphaseCollision(bodyA, bodyB) {
      // Check collision filter masks
      if ((bodyA.collisionFilterGroup & bodyB.collisionFilterMask) === 0 || (bodyB.collisionFilterGroup & bodyA.collisionFilterMask) === 0) {
        return false;
      } // Check types


      if (((bodyA.type & Body.STATIC) !== 0 || bodyA.sleepState === Body.SLEEPING) && ((bodyB.type & Body.STATIC) !== 0 || bodyB.sleepState === Body.SLEEPING)) {
        // Both bodies are static or sleeping. Skip.
        return false;
      }

      return true;
    }
    /**
     * Check if the bounding volumes of two bodies intersect.
     */


    intersectionTest(bodyA, bodyB, pairs1, pairs2) {
      if (this.useBoundingBoxes) {
        this.doBoundingBoxBroadphase(bodyA, bodyB, pairs1, pairs2);
      } else {
        this.doBoundingSphereBroadphase(bodyA, bodyB, pairs1, pairs2);
      }
    }
    /**
     * Check if the bounding spheres of two bodies are intersecting.
     * @param pairs1 bodyA is appended to this array if intersection
     * @param pairs2 bodyB is appended to this array if intersection
     */


    doBoundingSphereBroadphase(bodyA, bodyB, pairs1, pairs2) {
      const r = Broadphase_collisionPairs_r;
      bodyB.position.vsub(bodyA.position, r);
      const boundingRadiusSum2 = (bodyA.boundingRadius + bodyB.boundingRadius) ** 2;
      const norm2 = r.lengthSquared();

      if (norm2 < boundingRadiusSum2) {
        pairs1.push(bodyA);
        pairs2.push(bodyB);
      }
    }
    /**
     * Check if the bounding boxes of two bodies are intersecting.
     */


    doBoundingBoxBroadphase(bodyA, bodyB, pairs1, pairs2) {
      if (bodyA.aabbNeedsUpdate) {
        bodyA.updateAABB();
      }

      if (bodyB.aabbNeedsUpdate) {
        bodyB.updateAABB();
      } // Check AABB / AABB


      if (bodyA.aabb.overlaps(bodyB.aabb)) {
        pairs1.push(bodyA);
        pairs2.push(bodyB);
      }
    }
    /**
     * Removes duplicate pairs from the pair arrays.
     */


    makePairsUnique(pairs1, pairs2) {
      const t = Broadphase_makePairsUnique_temp;
      const p1 = Broadphase_makePairsUnique_p1;
      const p2 = Broadphase_makePairsUnique_p2;
      const N = pairs1.length;

      for (let i = 0; i !== N; i++) {
        p1[i] = pairs1[i];
        p2[i] = pairs2[i];
      }

      pairs1.length = 0;
      pairs2.length = 0;

      for (let i = 0; i !== N; i++) {
        const id1 = p1[i].id;
        const id2 = p2[i].id;
        const key = id1 < id2 ? `${id1},${id2}` : `${id2},${id1}`;
        t[key] = i;
        t.keys.push(key);
      }

      for (let i = 0; i !== t.keys.length; i++) {
        const key = t.keys.pop();
        const pairIndex = t[key];
        pairs1.push(p1[pairIndex]);
        pairs2.push(p2[pairIndex]);
        delete t[key];
      }
    }
    /**
     * To be implemented by subcasses
     */


    setWorld(world) {}
    /**
     * Check if the bounding spheres of two bodies overlap.
     */


    static boundingSphereCheck(bodyA, bodyB) {
      const dist = new Vec3(); // bsc_dist;

      bodyA.position.vsub(bodyB.position, dist);
      const sa = bodyA.shapes[0];
      const sb = bodyB.shapes[0];
      return Math.pow(sa.boundingSphereRadius + sb.boundingSphereRadius, 2) > dist.lengthSquared();
    }
    /**
     * Returns all the bodies within the AABB.
     */


    aabbQuery(world, aabb, result) {
      console.warn('.aabbQuery is not implemented in this Broadphase subclass.');
      return [];
    }

  } // Temp objects

  const Broadphase_collisionPairs_r = new Vec3();
  new Vec3();
  new Quaternion();
  new Vec3();
  const Broadphase_makePairsUnique_temp = {
    keys: []
  };
  const Broadphase_makePairsUnique_p1 = [];
  const Broadphase_makePairsUnique_p2 = [];
  new Vec3();
  new Vec3();
  new Vec3();

  /**
   * Naive broadphase implementation, used in lack of better ones.
   *
   * The naive broadphase looks at all possible pairs without restriction, therefore it has complexity N^2 _(which is bad)_
   */
  class NaiveBroadphase extends Broadphase {
    /**
     * @todo Remove useless constructor
     */
    constructor() {
      super();
    }
    /**
     * Get all the collision pairs in the physics world
     */


    collisionPairs(world, pairs1, pairs2) {
      const bodies = world.bodies;
      const n = bodies.length;
      let bi;
      let bj; // Naive N^2 ftw!

      for (let i = 0; i !== n; i++) {
        for (let j = 0; j !== i; j++) {
          bi = bodies[i];
          bj = bodies[j];

          if (!this.needBroadphaseCollision(bi, bj)) {
            continue;
          }

          this.intersectionTest(bi, bj, pairs1, pairs2);
        }
      }
    }
    /**
     * Returns all the bodies within an AABB.
     * @param result An array to store resulting bodies in.
     */


    aabbQuery(world, aabb, result) {
      if (result === void 0) {
        result = [];
      }

      for (let i = 0; i < world.bodies.length; i++) {
        const b = world.bodies[i];

        if (b.aabbNeedsUpdate) {
          b.updateAABB();
        } // Ugly hack until Body gets aabb


        if (b.aabb.overlaps(aabb)) {
          result.push(b);
        }
      }

      return result;
    }

  }

  /**
   * Storage for Ray casting data
   */
  class RaycastResult {
    /**
     * rayFromWorld
     */

    /**
     * rayToWorld
     */

    /**
     * hitNormalWorld
     */

    /**
     * hitPointWorld
     */

    /**
     * hasHit
     */

    /**
     * shape
     */

    /**
     * body
     */

    /**
     * The index of the hit triangle, if the hit shape was a trimesh
     */

    /**
     * Distance to the hit. Will be set to -1 if there was no hit
     */

    /**
     * If the ray should stop traversing the bodies
     */
    constructor() {
      this.rayFromWorld = new Vec3();
      this.rayToWorld = new Vec3();
      this.hitNormalWorld = new Vec3();
      this.hitPointWorld = new Vec3();
      this.hasHit = false;
      this.shape = null;
      this.body = null;
      this.hitFaceIndex = -1;
      this.distance = -1;
      this.shouldStop = false;
    }
    /**
     * Reset all result data.
     */


    reset() {
      this.rayFromWorld.setZero();
      this.rayToWorld.setZero();
      this.hitNormalWorld.setZero();
      this.hitPointWorld.setZero();
      this.hasHit = false;
      this.shape = null;
      this.body = null;
      this.hitFaceIndex = -1;
      this.distance = -1;
      this.shouldStop = false;
    }
    /**
     * abort
     */


    abort() {
      this.shouldStop = true;
    }
    /**
     * Set result data.
     */


    set(rayFromWorld, rayToWorld, hitNormalWorld, hitPointWorld, shape, body, distance) {
      this.rayFromWorld.copy(rayFromWorld);
      this.rayToWorld.copy(rayToWorld);
      this.hitNormalWorld.copy(hitNormalWorld);
      this.hitPointWorld.copy(hitPointWorld);
      this.shape = shape;
      this.body = body;
      this.distance = distance;
    }

  }

  let _Shape$types$SPHERE, _Shape$types$PLANE, _Shape$types$BOX, _Shape$types$CYLINDER, _Shape$types$CONVEXPO, _Shape$types$HEIGHTFI, _Shape$types$TRIMESH;

  /**
   * RAY_MODES
   */
  const RAY_MODES = {
    /** CLOSEST */
    CLOSEST: 1,

    /** ANY */
    ANY: 2,

    /** ALL */
    ALL: 4
  };
  /**
   * RayMode
   */

  _Shape$types$SPHERE = Shape.types.SPHERE;
  _Shape$types$PLANE = Shape.types.PLANE;
  _Shape$types$BOX = Shape.types.BOX;
  _Shape$types$CYLINDER = Shape.types.CYLINDER;
  _Shape$types$CONVEXPO = Shape.types.CONVEXPOLYHEDRON;
  _Shape$types$HEIGHTFI = Shape.types.HEIGHTFIELD;
  _Shape$types$TRIMESH = Shape.types.TRIMESH;

  /**
   * A line in 3D space that intersects bodies and return points.
   */
  class Ray {
    /**
     * from
     */

    /**
     * to
     */

    /**
     * direction
     */

    /**
     * The precision of the ray. Used when checking parallelity etc.
     * @default 0.0001
     */

    /**
     * Set to `false` if you don't want the Ray to take `collisionResponse` flags into account on bodies and shapes.
     * @default true
     */

    /**
     * If set to `true`, the ray skips any hits with normal.dot(rayDirection) < 0.
     * @default false
     */

    /**
     * collisionFilterMask
     * @default -1
     */

    /**
     * collisionFilterGroup
     * @default -1
     */

    /**
     * The intersection mode. Should be Ray.ANY, Ray.ALL or Ray.CLOSEST.
     * @default RAY.ANY
     */

    /**
     * Current result object.
     */

    /**
     * Will be set to `true` during intersectWorld() if the ray hit anything.
     */

    /**
     * User-provided result callback. Will be used if mode is Ray.ALL.
     */

    /**
     * CLOSEST
     */

    /**
     * ANY
     */

    /**
     * ALL
     */
    get [_Shape$types$SPHERE]() {
      return this._intersectSphere;
    }

    get [_Shape$types$PLANE]() {
      return this._intersectPlane;
    }

    get [_Shape$types$BOX]() {
      return this._intersectBox;
    }

    get [_Shape$types$CYLINDER]() {
      return this._intersectConvex;
    }

    get [_Shape$types$CONVEXPO]() {
      return this._intersectConvex;
    }

    get [_Shape$types$HEIGHTFI]() {
      return this._intersectHeightfield;
    }

    get [_Shape$types$TRIMESH]() {
      return this._intersectTrimesh;
    }

    constructor(from, to) {
      if (from === void 0) {
        from = new Vec3();
      }

      if (to === void 0) {
        to = new Vec3();
      }

      this.from = from.clone();
      this.to = to.clone();
      this.direction = new Vec3();
      this.precision = 0.0001;
      this.checkCollisionResponse = true;
      this.skipBackfaces = false;
      this.collisionFilterMask = -1;
      this.collisionFilterGroup = -1;
      this.mode = Ray.ANY;
      this.result = new RaycastResult();
      this.hasHit = false;

      this.callback = result => {};
    }
    /**
     * Do itersection against all bodies in the given World.
     * @return True if the ray hit anything, otherwise false.
     */


    intersectWorld(world, options) {
      this.mode = options.mode || Ray.ANY;
      this.result = options.result || new RaycastResult();
      this.skipBackfaces = !!options.skipBackfaces;
      this.collisionFilterMask = typeof options.collisionFilterMask !== 'undefined' ? options.collisionFilterMask : -1;
      this.collisionFilterGroup = typeof options.collisionFilterGroup !== 'undefined' ? options.collisionFilterGroup : -1;
      this.checkCollisionResponse = typeof options.checkCollisionResponse !== 'undefined' ? options.checkCollisionResponse : true;

      if (options.from) {
        this.from.copy(options.from);
      }

      if (options.to) {
        this.to.copy(options.to);
      }

      this.callback = options.callback || (() => {});

      this.hasHit = false;
      this.result.reset();
      this.updateDirection();
      this.getAABB(tmpAABB$1);
      tmpArray.length = 0;
      world.broadphase.aabbQuery(world, tmpAABB$1, tmpArray);
      this.intersectBodies(tmpArray);
      return this.hasHit;
    }
    /**
     * Shoot a ray at a body, get back information about the hit.
     * @deprecated @param result set the result property of the Ray instead.
     */


    intersectBody(body, result) {
      if (result) {
        this.result = result;
        this.updateDirection();
      }

      const checkCollisionResponse = this.checkCollisionResponse;

      if (checkCollisionResponse && !body.collisionResponse) {
        return;
      }

      if ((this.collisionFilterGroup & body.collisionFilterMask) === 0 || (body.collisionFilterGroup & this.collisionFilterMask) === 0) {
        return;
      }

      const xi = intersectBody_xi;
      const qi = intersectBody_qi;

      for (let i = 0, N = body.shapes.length; i < N; i++) {
        const shape = body.shapes[i];

        if (checkCollisionResponse && !shape.collisionResponse) {
          continue; // Skip
        }

        body.quaternion.mult(body.shapeOrientations[i], qi);
        body.quaternion.vmult(body.shapeOffsets[i], xi);
        xi.vadd(body.position, xi);
        this.intersectShape(shape, qi, xi, body);

        if (this.result.shouldStop) {
          break;
        }
      }
    }
    /**
     * Shoot a ray at an array bodies, get back information about the hit.
     * @param bodies An array of Body objects.
     * @deprecated @param result set the result property of the Ray instead.
     *
     */


    intersectBodies(bodies, result) {
      if (result) {
        this.result = result;
        this.updateDirection();
      }

      for (let i = 0, l = bodies.length; !this.result.shouldStop && i < l; i++) {
        this.intersectBody(bodies[i]);
      }
    }
    /**
     * Updates the direction vector.
     */


    updateDirection() {
      this.to.vsub(this.from, this.direction);
      this.direction.normalize();
    }

    intersectShape(shape, quat, position, body) {
      const from = this.from; // Checking boundingSphere

      const distance = distanceFromIntersection(from, this.direction, position);

      if (distance > shape.boundingSphereRadius) {
        return;
      }

      const intersectMethod = this[shape.type];

      if (intersectMethod) {
        intersectMethod.call(this, shape, quat, position, body, shape);
      }
    }

    _intersectBox(box, quat, position, body, reportedShape) {
      return this._intersectConvex(box.convexPolyhedronRepresentation, quat, position, body, reportedShape);
    }

    _intersectPlane(shape, quat, position, body, reportedShape) {
      const from = this.from;
      const to = this.to;
      const direction = this.direction; // Get plane normal

      const worldNormal = new Vec3(0, 0, 1);
      quat.vmult(worldNormal, worldNormal);
      const len = new Vec3();
      from.vsub(position, len);
      const planeToFrom = len.dot(worldNormal);
      to.vsub(position, len);
      const planeToTo = len.dot(worldNormal);

      if (planeToFrom * planeToTo > 0) {
        // "from" and "to" are on the same side of the plane... bail out
        return;
      }

      if (from.distanceTo(to) < planeToFrom) {
        return;
      }

      const n_dot_dir = worldNormal.dot(direction);

      if (Math.abs(n_dot_dir) < this.precision) {
        // No intersection
        return;
      }

      const planePointToFrom = new Vec3();
      const dir_scaled_with_t = new Vec3();
      const hitPointWorld = new Vec3();
      from.vsub(position, planePointToFrom);
      const t = -worldNormal.dot(planePointToFrom) / n_dot_dir;
      direction.scale(t, dir_scaled_with_t);
      from.vadd(dir_scaled_with_t, hitPointWorld);
      this.reportIntersection(worldNormal, hitPointWorld, reportedShape, body, -1);
    }
    /**
     * Get the world AABB of the ray.
     */


    getAABB(aabb) {
      const {
        lowerBound,
        upperBound
      } = aabb;
      const to = this.to;
      const from = this.from;
      lowerBound.x = Math.min(to.x, from.x);
      lowerBound.y = Math.min(to.y, from.y);
      lowerBound.z = Math.min(to.z, from.z);
      upperBound.x = Math.max(to.x, from.x);
      upperBound.y = Math.max(to.y, from.y);
      upperBound.z = Math.max(to.z, from.z);
    }

    _intersectHeightfield(shape, quat, position, body, reportedShape) {
      shape.data;
      shape.elementSize; // Convert the ray to local heightfield coordinates

      const localRay = intersectHeightfield_localRay; //new Ray(this.from, this.to);

      localRay.from.copy(this.from);
      localRay.to.copy(this.to);
      Transform.pointToLocalFrame(position, quat, localRay.from, localRay.from);
      Transform.pointToLocalFrame(position, quat, localRay.to, localRay.to);
      localRay.updateDirection(); // Get the index of the data points to test against

      const index = intersectHeightfield_index;
      let iMinX;
      let iMinY;
      let iMaxX;
      let iMaxY; // Set to max

      iMinX = iMinY = 0;
      iMaxX = iMaxY = shape.data.length - 1;
      const aabb = new AABB();
      localRay.getAABB(aabb);
      shape.getIndexOfPosition(aabb.lowerBound.x, aabb.lowerBound.y, index, true);
      iMinX = Math.max(iMinX, index[0]);
      iMinY = Math.max(iMinY, index[1]);
      shape.getIndexOfPosition(aabb.upperBound.x, aabb.upperBound.y, index, true);
      iMaxX = Math.min(iMaxX, index[0] + 1);
      iMaxY = Math.min(iMaxY, index[1] + 1);

      for (let i = iMinX; i < iMaxX; i++) {
        for (let j = iMinY; j < iMaxY; j++) {
          if (this.result.shouldStop) {
            return;
          }

          shape.getAabbAtIndex(i, j, aabb);

          if (!aabb.overlapsRay(localRay)) {
            continue;
          } // Lower triangle


          shape.getConvexTrianglePillar(i, j, false);
          Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);

          this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);

          if (this.result.shouldStop) {
            return;
          } // Upper triangle


          shape.getConvexTrianglePillar(i, j, true);
          Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);

          this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);
        }
      }
    }

    _intersectSphere(sphere, quat, position, body, reportedShape) {
      const from = this.from;
      const to = this.to;
      const r = sphere.radius;
      const a = (to.x - from.x) ** 2 + (to.y - from.y) ** 2 + (to.z - from.z) ** 2;
      const b = 2 * ((to.x - from.x) * (from.x - position.x) + (to.y - from.y) * (from.y - position.y) + (to.z - from.z) * (from.z - position.z));
      const c = (from.x - position.x) ** 2 + (from.y - position.y) ** 2 + (from.z - position.z) ** 2 - r ** 2;
      const delta = b ** 2 - 4 * a * c;
      const intersectionPoint = Ray_intersectSphere_intersectionPoint;
      const normal = Ray_intersectSphere_normal;

      if (delta < 0) {
        // No intersection
        return;
      } else if (delta === 0) {
        // single intersection point
        from.lerp(to, delta, intersectionPoint);
        intersectionPoint.vsub(position, normal);
        normal.normalize();
        this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);
      } else {
        const d1 = (-b - Math.sqrt(delta)) / (2 * a);
        const d2 = (-b + Math.sqrt(delta)) / (2 * a);

        if (d1 >= 0 && d1 <= 1) {
          from.lerp(to, d1, intersectionPoint);
          intersectionPoint.vsub(position, normal);
          normal.normalize();
          this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);
        }

        if (this.result.shouldStop) {
          return;
        }

        if (d2 >= 0 && d2 <= 1) {
          from.lerp(to, d2, intersectionPoint);
          intersectionPoint.vsub(position, normal);
          normal.normalize();
          this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);
        }
      }
    }

    _intersectConvex(shape, quat, position, body, reportedShape, options) {
      const normal = intersectConvex_normal;
      const vector = intersectConvex_vector;
      const faceList = options && options.faceList || null; // Checking faces

      const faces = shape.faces;
      const vertices = shape.vertices;
      const normals = shape.faceNormals;
      const direction = this.direction;
      const from = this.from;
      const to = this.to;
      const fromToDistance = from.distanceTo(to);
      const Nfaces = faceList ? faceList.length : faces.length;
      const result = this.result;

      for (let j = 0; !result.shouldStop && j < Nfaces; j++) {
        const fi = faceList ? faceList[j] : j;
        const face = faces[fi];
        const faceNormal = normals[fi];
        const q = quat;
        const x = position; // determine if ray intersects the plane of the face
        // note: this works regardless of the direction of the face normal
        // Get plane point in world coordinates...

        vector.copy(vertices[face[0]]);
        q.vmult(vector, vector);
        vector.vadd(x, vector); // ...but make it relative to the ray from. We'll fix this later.

        vector.vsub(from, vector); // Get plane normal

        q.vmult(faceNormal, normal); // If this dot product is negative, we have something interesting

        const dot = direction.dot(normal); // Bail out if ray and plane are parallel

        if (Math.abs(dot) < this.precision) {
          continue;
        } // calc distance to plane


        const scalar = normal.dot(vector) / dot; // if negative distance, then plane is behind ray

        if (scalar < 0) {
          continue;
        } // if (dot < 0) {
        // Intersection point is from + direction * scalar


        direction.scale(scalar, intersectPoint);
        intersectPoint.vadd(from, intersectPoint); // a is the point we compare points b and c with.

        a.copy(vertices[face[0]]);
        q.vmult(a, a);
        x.vadd(a, a);

        for (let i = 1; !result.shouldStop && i < face.length - 1; i++) {
          // Transform 3 vertices to world coords
          b.copy(vertices[face[i]]);
          c.copy(vertices[face[i + 1]]);
          q.vmult(b, b);
          q.vmult(c, c);
          x.vadd(b, b);
          x.vadd(c, c);
          const distance = intersectPoint.distanceTo(from);

          if (!(Ray.pointInTriangle(intersectPoint, a, b, c) || Ray.pointInTriangle(intersectPoint, b, a, c)) || distance > fromToDistance) {
            continue;
          }

          this.reportIntersection(normal, intersectPoint, reportedShape, body, fi);
        } // }

      }
    }
    /**
     * @todo Optimize by transforming the world to local space first.
     * @todo Use Octree lookup
     */


    _intersectTrimesh(mesh, quat, position, body, reportedShape, options) {
      const normal = intersectTrimesh_normal;
      const triangles = intersectTrimesh_triangles;
      const treeTransform = intersectTrimesh_treeTransform;
      const vector = intersectConvex_vector;
      const localDirection = intersectTrimesh_localDirection;
      const localFrom = intersectTrimesh_localFrom;
      const localTo = intersectTrimesh_localTo;
      const worldIntersectPoint = intersectTrimesh_worldIntersectPoint;
      const worldNormal = intersectTrimesh_worldNormal; // Checking faces

      const indices = mesh.indices;
      mesh.vertices; // const normals = mesh.faceNormals

      const from = this.from;
      const to = this.to;
      const direction = this.direction;
      treeTransform.position.copy(position);
      treeTransform.quaternion.copy(quat); // Transform ray to local space!

      Transform.vectorToLocalFrame(position, quat, direction, localDirection);
      Transform.pointToLocalFrame(position, quat, from, localFrom);
      Transform.pointToLocalFrame(position, quat, to, localTo);
      localTo.x *= mesh.scale.x;
      localTo.y *= mesh.scale.y;
      localTo.z *= mesh.scale.z;
      localFrom.x *= mesh.scale.x;
      localFrom.y *= mesh.scale.y;
      localFrom.z *= mesh.scale.z;
      localTo.vsub(localFrom, localDirection);
      localDirection.normalize();
      const fromToDistanceSquared = localFrom.distanceSquared(localTo);
      mesh.tree.rayQuery(this, treeTransform, triangles);

      for (let i = 0, N = triangles.length; !this.result.shouldStop && i !== N; i++) {
        const trianglesIndex = triangles[i];
        mesh.getNormal(trianglesIndex, normal); // determine if ray intersects the plane of the face
        // note: this works regardless of the direction of the face normal
        // Get plane point in world coordinates...

        mesh.getVertex(indices[trianglesIndex * 3], a); // ...but make it relative to the ray from. We'll fix this later.

        a.vsub(localFrom, vector); // If this dot product is negative, we have something interesting

        const dot = localDirection.dot(normal); // Bail out if ray and plane are parallel
        // if (Math.abs( dot ) < this.precision){
        //     continue;
        // }
        // calc distance to plane

        const scalar = normal.dot(vector) / dot; // if negative distance, then plane is behind ray

        if (scalar < 0) {
          continue;
        } // Intersection point is from + direction * scalar


        localDirection.scale(scalar, intersectPoint);
        intersectPoint.vadd(localFrom, intersectPoint); // Get triangle vertices

        mesh.getVertex(indices[trianglesIndex * 3 + 1], b);
        mesh.getVertex(indices[trianglesIndex * 3 + 2], c);
        const squaredDistance = intersectPoint.distanceSquared(localFrom);

        if (!(Ray.pointInTriangle(intersectPoint, b, a, c) || Ray.pointInTriangle(intersectPoint, a, b, c)) || squaredDistance > fromToDistanceSquared) {
          continue;
        } // transform intersectpoint and normal to world


        Transform.vectorToWorldFrame(quat, normal, worldNormal);
        Transform.pointToWorldFrame(position, quat, intersectPoint, worldIntersectPoint);
        this.reportIntersection(worldNormal, worldIntersectPoint, reportedShape, body, trianglesIndex);
      }

      triangles.length = 0;
    }
    /**
     * @return True if the intersections should continue
     */


    reportIntersection(normal, hitPointWorld, shape, body, hitFaceIndex) {
      const from = this.from;
      const to = this.to;
      const distance = from.distanceTo(hitPointWorld);
      const result = this.result; // Skip back faces?

      if (this.skipBackfaces && normal.dot(this.direction) > 0) {
        return;
      }

      result.hitFaceIndex = typeof hitFaceIndex !== 'undefined' ? hitFaceIndex : -1;

      switch (this.mode) {
        case Ray.ALL:
          this.hasHit = true;
          result.set(from, to, normal, hitPointWorld, shape, body, distance);
          result.hasHit = true;
          this.callback(result);
          break;

        case Ray.CLOSEST:
          // Store if closer than current closest
          if (distance < result.distance || !result.hasHit) {
            this.hasHit = true;
            result.hasHit = true;
            result.set(from, to, normal, hitPointWorld, shape, body, distance);
          }

          break;

        case Ray.ANY:
          // Report and stop.
          this.hasHit = true;
          result.hasHit = true;
          result.set(from, to, normal, hitPointWorld, shape, body, distance);
          result.shouldStop = true;
          break;
      }
    }
    /**
     * As per "Barycentric Technique" as named
     * {@link https://www.blackpawn.com/texts/pointinpoly/default.html here} but without the division
     */


    static pointInTriangle(p, a, b, c) {
      c.vsub(a, v0);
      b.vsub(a, v1);
      p.vsub(a, v2);
      const dot00 = v0.dot(v0);
      const dot01 = v0.dot(v1);
      const dot02 = v0.dot(v2);
      const dot11 = v1.dot(v1);
      const dot12 = v1.dot(v2);
      let u;
      let v;
      return (u = dot11 * dot02 - dot01 * dot12) >= 0 && (v = dot00 * dot12 - dot01 * dot02) >= 0 && u + v < dot00 * dot11 - dot01 * dot01;
    }

  }
  Ray.CLOSEST = RAY_MODES.CLOSEST;
  Ray.ANY = RAY_MODES.ANY;
  Ray.ALL = RAY_MODES.ALL;
  const tmpAABB$1 = new AABB();
  const tmpArray = [];
  const v1 = new Vec3();
  const v2 = new Vec3();
  const intersectBody_xi = new Vec3();
  const intersectBody_qi = new Quaternion();
  const intersectPoint = new Vec3();
  const a = new Vec3();
  const b = new Vec3();
  const c = new Vec3();
  new Vec3();
  new RaycastResult();
  const intersectConvexOptions = {
    faceList: [0]
  };
  const worldPillarOffset = new Vec3();
  const intersectHeightfield_localRay = new Ray();
  const intersectHeightfield_index = [];
  const Ray_intersectSphere_intersectionPoint = new Vec3();
  const Ray_intersectSphere_normal = new Vec3();
  const intersectConvex_normal = new Vec3();
  new Vec3();
  new Vec3();
  const intersectConvex_vector = new Vec3();
  const intersectTrimesh_normal = new Vec3();
  const intersectTrimesh_localDirection = new Vec3();
  const intersectTrimesh_localFrom = new Vec3();
  const intersectTrimesh_localTo = new Vec3();
  const intersectTrimesh_worldNormal = new Vec3();
  const intersectTrimesh_worldIntersectPoint = new Vec3();
  new AABB();
  const intersectTrimesh_triangles = [];
  const intersectTrimesh_treeTransform = new Transform();
  const v0 = new Vec3();
  const intersect = new Vec3();

  function distanceFromIntersection(from, direction, position) {
    // v0 is vector from from to position
    position.vsub(from, v0);
    const dot = v0.dot(direction); // intersect = direction*dot + from

    direction.scale(dot, intersect);
    intersect.vadd(from, intersect);
    const distance = position.distanceTo(intersect);
    return distance;
  }

  /**
   * Sweep and prune broadphase along one axis.
   */
  class SAPBroadphase extends Broadphase {
    /**
     * List of bodies currently in the broadphase.
     */

    /**
     * The world to search in.
     */

    /**
     * Axis to sort the bodies along.
     * Set to 0 for x axis, and 1 for y axis.
     * For best performance, pick the axis where bodies are most distributed.
     */

    /**
     * Check if the bounds of two bodies overlap, along the given SAP axis.
     */
    static checkBounds(bi, bj, axisIndex) {
      let biPos;
      let bjPos;

      if (axisIndex === 0) {
        biPos = bi.position.x;
        bjPos = bj.position.x;
      } else if (axisIndex === 1) {
        biPos = bi.position.y;
        bjPos = bj.position.y;
      } else if (axisIndex === 2) {
        biPos = bi.position.z;
        bjPos = bj.position.z;
      }

      const ri = bi.boundingRadius,
            rj = bj.boundingRadius,
            boundA2 = biPos + ri,
            boundB1 = bjPos - rj;
      return boundB1 < boundA2;
    } // Note: these are identical, save for x/y/z lowerbound

    /**
     * insertionSortX
     */


    static insertionSortX(a) {
      for (let i = 1, l = a.length; i < l; i++) {
        const v = a[i];
        let j;

        for (j = i - 1; j >= 0; j--) {
          if (a[j].aabb.lowerBound.x <= v.aabb.lowerBound.x) {
            break;
          }

          a[j + 1] = a[j];
        }

        a[j + 1] = v;
      }

      return a;
    }
    /**
     * insertionSortY
     */


    static insertionSortY(a) {
      for (let i = 1, l = a.length; i < l; i++) {
        const v = a[i];
        let j;

        for (j = i - 1; j >= 0; j--) {
          if (a[j].aabb.lowerBound.y <= v.aabb.lowerBound.y) {
            break;
          }

          a[j + 1] = a[j];
        }

        a[j + 1] = v;
      }

      return a;
    }
    /**
     * insertionSortZ
     */


    static insertionSortZ(a) {
      for (let i = 1, l = a.length; i < l; i++) {
        const v = a[i];
        let j;

        for (j = i - 1; j >= 0; j--) {
          if (a[j].aabb.lowerBound.z <= v.aabb.lowerBound.z) {
            break;
          }

          a[j + 1] = a[j];
        }

        a[j + 1] = v;
      }

      return a;
    }

    constructor(world) {
      super();
      this.axisList = [];
      this.world = null;
      this.axisIndex = 0;
      const axisList = this.axisList;

      this._addBodyHandler = event => {
        axisList.push(event.body);
      };

      this._removeBodyHandler = event => {
        const idx = axisList.indexOf(event.body);

        if (idx !== -1) {
          axisList.splice(idx, 1);
        }
      };

      if (world) {
        this.setWorld(world);
      }
    }
    /**
     * Change the world
     */


    setWorld(world) {
      // Clear the old axis array
      this.axisList.length = 0; // Add all bodies from the new world

      for (let i = 0; i < world.bodies.length; i++) {
        this.axisList.push(world.bodies[i]);
      } // Remove old handlers, if any


      world.removeEventListener('addBody', this._addBodyHandler);
      world.removeEventListener('removeBody', this._removeBodyHandler); // Add handlers to update the list of bodies.

      world.addEventListener('addBody', this._addBodyHandler);
      world.addEventListener('removeBody', this._removeBodyHandler);
      this.world = world;
      this.dirty = true;
    }
    /**
     * Collect all collision pairs
     */


    collisionPairs(world, p1, p2) {
      const bodies = this.axisList;
      const N = bodies.length;
      const axisIndex = this.axisIndex;
      let i;
      let j;

      if (this.dirty) {
        this.sortList();
        this.dirty = false;
      } // Look through the list


      for (i = 0; i !== N; i++) {
        const bi = bodies[i];

        for (j = i + 1; j < N; j++) {
          const bj = bodies[j];

          if (!this.needBroadphaseCollision(bi, bj)) {
            continue;
          }

          if (!SAPBroadphase.checkBounds(bi, bj, axisIndex)) {
            break;
          }

          this.intersectionTest(bi, bj, p1, p2);
        }
      }
    }

    sortList() {
      const axisList = this.axisList;
      const axisIndex = this.axisIndex;
      const N = axisList.length; // Update AABBs

      for (let i = 0; i !== N; i++) {
        const bi = axisList[i];

        if (bi.aabbNeedsUpdate) {
          bi.updateAABB();
        }
      } // Sort the list


      if (axisIndex === 0) {
        SAPBroadphase.insertionSortX(axisList);
      } else if (axisIndex === 1) {
        SAPBroadphase.insertionSortY(axisList);
      } else if (axisIndex === 2) {
        SAPBroadphase.insertionSortZ(axisList);
      }
    }
    /**
     * Computes the variance of the body positions and estimates the best axis to use.
     * Will automatically set property `axisIndex`.
     */


    autoDetectAxis() {
      let sumX = 0;
      let sumX2 = 0;
      let sumY = 0;
      let sumY2 = 0;
      let sumZ = 0;
      let sumZ2 = 0;
      const bodies = this.axisList;
      const N = bodies.length;
      const invN = 1 / N;

      for (let i = 0; i !== N; i++) {
        const b = bodies[i];
        const centerX = b.position.x;
        sumX += centerX;
        sumX2 += centerX * centerX;
        const centerY = b.position.y;
        sumY += centerY;
        sumY2 += centerY * centerY;
        const centerZ = b.position.z;
        sumZ += centerZ;
        sumZ2 += centerZ * centerZ;
      }

      const varianceX = sumX2 - sumX * sumX * invN;
      const varianceY = sumY2 - sumY * sumY * invN;
      const varianceZ = sumZ2 - sumZ * sumZ * invN;

      if (varianceX > varianceY) {
        if (varianceX > varianceZ) {
          this.axisIndex = 0;
        } else {
          this.axisIndex = 2;
        }
      } else if (varianceY > varianceZ) {
        this.axisIndex = 1;
      } else {
        this.axisIndex = 2;
      }
    }
    /**
     * Returns all the bodies within an AABB.
     * @param result An array to store resulting bodies in.
     */


    aabbQuery(world, aabb, result) {
      if (result === void 0) {
        result = [];
      }

      if (this.dirty) {
        this.sortList();
        this.dirty = false;
      }

      const axisIndex = this.axisIndex;
      let axis = 'x';

      if (axisIndex === 1) {
        axis = 'y';
      }

      if (axisIndex === 2) {
        axis = 'z';
      }

      const axisList = this.axisList;
      aabb.lowerBound[axis];
      aabb.upperBound[axis];

      for (let i = 0; i < axisList.length; i++) {
        const b = axisList[i];

        if (b.aabbNeedsUpdate) {
          b.updateAABB();
        }

        if (b.aabb.overlaps(aabb)) {
          result.push(b);
        }
      }

      return result;
    }

  }

  class Utils {
    /**
     * Extend an options object with default values.
     * @param options The options object. May be falsy: in this case, a new object is created and returned.
     * @param defaults An object containing default values.
     * @return The modified options object.
     */
    static defaults(options, defaults) {
      if (options === void 0) {
        options = {};
      }

      for (let key in defaults) {
        if (!(key in options)) {
          options[key] = defaults[key];
        }
      }

      return options;
    }

  }

  /**
   * Constraint base class
   */
  class Constraint {
    /**
     * Equations to be solved in this constraint.
     */

    /**
     * Body A.
     */

    /**
     * Body B.
     */

    /**
     * Set to false if you don't want the bodies to collide when they are connected.
     */
    constructor(bodyA, bodyB, options) {
      if (options === void 0) {
        options = {};
      }

      options = Utils.defaults(options, {
        collideConnected: true,
        wakeUpBodies: true
      });
      this.equations = [];
      this.bodyA = bodyA;
      this.bodyB = bodyB;
      this.id = Constraint.idCounter++;
      this.collideConnected = options.collideConnected;

      if (options.wakeUpBodies) {
        if (bodyA) {
          bodyA.wakeUp();
        }

        if (bodyB) {
          bodyB.wakeUp();
        }
      }
    }
    /**
     * Update all the equations with data.
     */


    update() {
      throw new Error('method update() not implmemented in this Constraint subclass!');
    }
    /**
     * Enables all equations in the constraint.
     */


    enable() {
      const eqs = this.equations;

      for (let i = 0; i < eqs.length; i++) {
        eqs[i].enabled = true;
      }
    }
    /**
     * Disables all equations in the constraint.
     */


    disable() {
      const eqs = this.equations;

      for (let i = 0; i < eqs.length; i++) {
        eqs[i].enabled = false;
      }
    }

  }
  Constraint.idCounter = 0;

  /**
   * An element containing 6 entries, 3 spatial and 3 rotational degrees of freedom.
   */

  class JacobianElement {
    /**
     * spatial
     */

    /**
     * rotational
     */
    constructor() {
      this.spatial = new Vec3();
      this.rotational = new Vec3();
    }
    /**
     * Multiply with other JacobianElement
     */


    multiplyElement(element) {
      return element.spatial.dot(this.spatial) + element.rotational.dot(this.rotational);
    }
    /**
     * Multiply with two vectors
     */


    multiplyVectors(spatial, rotational) {
      return spatial.dot(this.spatial) + rotational.dot(this.rotational);
    }

  }

  /**
   * Equation base class.
   *
   * `a`, `b` and `eps` are {@link https://www8.cs.umu.se/kurser/5DV058/VT15/lectures/SPOOKlabnotes.pdf SPOOK} parameters that default to `0.0`. See {@link https://github.com/schteppe/cannon.js/issues/238#issuecomment-147172327 this exchange} for more details on Cannon's physics implementation.
   */
  class Equation {
    /**
     * Minimum (read: negative max) force to be applied by the constraint.
     */

    /**
     * Maximum (read: positive max) force to be applied by the constraint.
     */

    /**
     * SPOOK parameter
     */

    /**
     * SPOOK parameter
     */

    /**
     * SPOOK parameter
     */

    /**
     * A number, proportional to the force added to the bodies.
     */
    constructor(bi, bj, minForce, maxForce) {
      if (minForce === void 0) {
        minForce = -1e6;
      }

      if (maxForce === void 0) {
        maxForce = 1e6;
      }

      this.id = Equation.idCounter++;
      this.minForce = minForce;
      this.maxForce = maxForce;
      this.bi = bi;
      this.bj = bj;
      this.a = 0.0; // SPOOK parameter

      this.b = 0.0; // SPOOK parameter

      this.eps = 0.0; // SPOOK parameter

      this.jacobianElementA = new JacobianElement();
      this.jacobianElementB = new JacobianElement();
      this.enabled = true;
      this.multiplier = 0;
      this.setSpookParams(1e7, 4, 1 / 60); // Set typical spook params
    }
    /**
     * Recalculates a, b, and eps.
     *
     * The Equation constructor sets typical SPOOK parameters as such:
     * * `stiffness` = 1e7
     * * `relaxation` = 4
     * * `timeStep`= 1 / 60, _note the hardcoded refresh rate._
     */


    setSpookParams(stiffness, relaxation, timeStep) {
      const d = relaxation;
      const k = stiffness;
      const h = timeStep;
      this.a = 4.0 / (h * (1 + 4 * d));
      this.b = 4.0 * d / (1 + 4 * d);
      this.eps = 4.0 / (h * h * k * (1 + 4 * d));
    }
    /**
     * Computes the right hand side of the SPOOK equation
     */


    computeB(a, b, h) {
      const GW = this.computeGW();
      const Gq = this.computeGq();
      const GiMf = this.computeGiMf();
      return -Gq * a - GW * b - GiMf * h;
    }
    /**
     * Computes G*q, where q are the generalized body coordinates
     */


    computeGq() {
      const GA = this.jacobianElementA;
      const GB = this.jacobianElementB;
      const bi = this.bi;
      const bj = this.bj;
      const xi = bi.position;
      const xj = bj.position;
      return GA.spatial.dot(xi) + GB.spatial.dot(xj);
    }
    /**
     * Computes G*W, where W are the body velocities
     */


    computeGW() {
      const GA = this.jacobianElementA;
      const GB = this.jacobianElementB;
      const bi = this.bi;
      const bj = this.bj;
      const vi = bi.velocity;
      const vj = bj.velocity;
      const wi = bi.angularVelocity;
      const wj = bj.angularVelocity;
      return GA.multiplyVectors(vi, wi) + GB.multiplyVectors(vj, wj);
    }
    /**
     * Computes G*Wlambda, where W are the body velocities
     */


    computeGWlambda() {
      const GA = this.jacobianElementA;
      const GB = this.jacobianElementB;
      const bi = this.bi;
      const bj = this.bj;
      const vi = bi.vlambda;
      const vj = bj.vlambda;
      const wi = bi.wlambda;
      const wj = bj.wlambda;
      return GA.multiplyVectors(vi, wi) + GB.multiplyVectors(vj, wj);
    }
    /**
     * Computes G*inv(M)*f, where M is the mass matrix with diagonal blocks for each body, and f are the forces on the bodies.
     */


    computeGiMf() {
      const GA = this.jacobianElementA;
      const GB = this.jacobianElementB;
      const bi = this.bi;
      const bj = this.bj;
      const fi = bi.force;
      const ti = bi.torque;
      const fj = bj.force;
      const tj = bj.torque;
      const invMassi = bi.invMassSolve;
      const invMassj = bj.invMassSolve;
      fi.scale(invMassi, iMfi);
      fj.scale(invMassj, iMfj);
      bi.invInertiaWorldSolve.vmult(ti, invIi_vmult_taui);
      bj.invInertiaWorldSolve.vmult(tj, invIj_vmult_tauj);
      return GA.multiplyVectors(iMfi, invIi_vmult_taui) + GB.multiplyVectors(iMfj, invIj_vmult_tauj);
    }
    /**
     * Computes G*inv(M)*G'
     */


    computeGiMGt() {
      const GA = this.jacobianElementA;
      const GB = this.jacobianElementB;
      const bi = this.bi;
      const bj = this.bj;
      const invMassi = bi.invMassSolve;
      const invMassj = bj.invMassSolve;
      const invIi = bi.invInertiaWorldSolve;
      const invIj = bj.invInertiaWorldSolve;
      let result = invMassi + invMassj;
      invIi.vmult(GA.rotational, tmp);
      result += tmp.dot(GA.rotational);
      invIj.vmult(GB.rotational, tmp);
      result += tmp.dot(GB.rotational);
      return result;
    }
    /**
     * Add constraint velocity to the bodies.
     */


    addToWlambda(deltalambda) {
      const GA = this.jacobianElementA;
      const GB = this.jacobianElementB;
      const bi = this.bi;
      const bj = this.bj;
      const temp = addToWlambda_temp; // Add to linear velocity
      // v_lambda += inv(M) * delta_lamba * G

      bi.vlambda.addScaledVector(bi.invMassSolve * deltalambda, GA.spatial, bi.vlambda);
      bj.vlambda.addScaledVector(bj.invMassSolve * deltalambda, GB.spatial, bj.vlambda); // Add to angular velocity

      bi.invInertiaWorldSolve.vmult(GA.rotational, temp);
      bi.wlambda.addScaledVector(deltalambda, temp, bi.wlambda);
      bj.invInertiaWorldSolve.vmult(GB.rotational, temp);
      bj.wlambda.addScaledVector(deltalambda, temp, bj.wlambda);
    }
    /**
     * Compute the denominator part of the SPOOK equation: C = G*inv(M)*G' + eps
     */


    computeC() {
      return this.computeGiMGt() + this.eps;
    }

  }
  Equation.idCounter = 0;
  const iMfi = new Vec3();
  const iMfj = new Vec3();
  const invIi_vmult_taui = new Vec3();
  const invIj_vmult_tauj = new Vec3();
  const tmp = new Vec3();
  const addToWlambda_temp = new Vec3();

  /**
   * Contact/non-penetration constraint equation
   */
  class ContactEquation extends Equation {
    /**
     * "bounciness": u1 = -e*u0
     */

    /**
     * World-oriented vector that goes from the center of bi to the contact point.
     */

    /**
     * World-oriented vector that starts in body j position and goes to the contact point.
     */

    /**
     * Contact normal, pointing out of body i.
     */
    constructor(bodyA, bodyB, maxForce) {
      if (maxForce === void 0) {
        maxForce = 1e6;
      }

      super(bodyA, bodyB, 0, maxForce);
      this.restitution = 0.0;
      this.ri = new Vec3();
      this.rj = new Vec3();
      this.ni = new Vec3();
    }

    computeB(h) {
      const a = this.a;
      const b = this.b;
      const bi = this.bi;
      const bj = this.bj;
      const ri = this.ri;
      const rj = this.rj;
      const rixn = ContactEquation_computeB_temp1;
      const rjxn = ContactEquation_computeB_temp2;
      const vi = bi.velocity;
      const wi = bi.angularVelocity;
      bi.force;
      bi.torque;
      const vj = bj.velocity;
      const wj = bj.angularVelocity;
      bj.force;
      bj.torque;
      const penetrationVec = ContactEquation_computeB_temp3;
      const GA = this.jacobianElementA;
      const GB = this.jacobianElementB;
      const n = this.ni; // Caluclate cross products

      ri.cross(n, rixn);
      rj.cross(n, rjxn); // g = xj+rj -(xi+ri)
      // G = [ -ni  -rixn  ni  rjxn ]

      n.negate(GA.spatial);
      rixn.negate(GA.rotational);
      GB.spatial.copy(n);
      GB.rotational.copy(rjxn); // Calculate the penetration vector

      penetrationVec.copy(bj.position);
      penetrationVec.vadd(rj, penetrationVec);
      penetrationVec.vsub(bi.position, penetrationVec);
      penetrationVec.vsub(ri, penetrationVec);
      const g = n.dot(penetrationVec); // Compute iteration

      const ePlusOne = this.restitution + 1;
      const GW = ePlusOne * vj.dot(n) - ePlusOne * vi.dot(n) + wj.dot(rjxn) - wi.dot(rixn);
      const GiMf = this.computeGiMf();
      const B = -g * a - GW * b - h * GiMf;
      return B;
    }
    /**
     * Get the current relative velocity in the contact point.
     */


    getImpactVelocityAlongNormal() {
      const vi = ContactEquation_getImpactVelocityAlongNormal_vi;
      const vj = ContactEquation_getImpactVelocityAlongNormal_vj;
      const xi = ContactEquation_getImpactVelocityAlongNormal_xi;
      const xj = ContactEquation_getImpactVelocityAlongNormal_xj;
      const relVel = ContactEquation_getImpactVelocityAlongNormal_relVel;
      this.bi.position.vadd(this.ri, xi);
      this.bj.position.vadd(this.rj, xj);
      this.bi.getVelocityAtWorldPoint(xi, vi);
      this.bj.getVelocityAtWorldPoint(xj, vj);
      vi.vsub(vj, relVel);
      return this.ni.dot(relVel);
    }

  }
  const ContactEquation_computeB_temp1 = new Vec3(); // Temp vectors

  const ContactEquation_computeB_temp2 = new Vec3();
  const ContactEquation_computeB_temp3 = new Vec3();
  const ContactEquation_getImpactVelocityAlongNormal_vi = new Vec3();
  const ContactEquation_getImpactVelocityAlongNormal_vj = new Vec3();
  const ContactEquation_getImpactVelocityAlongNormal_xi = new Vec3();
  const ContactEquation_getImpactVelocityAlongNormal_xj = new Vec3();
  const ContactEquation_getImpactVelocityAlongNormal_relVel = new Vec3();

  /**
   * Connects two bodies at given offset points.
   * @example
   *     const bodyA = new Body({ mass: 1 })
   *     const bodyB = new Body({ mass: 1 })
   *     bodyA.position.set(-1, 0, 0)
   *     bodyB.position.set(1, 0, 0)
   *     bodyA.addShape(shapeA)
   *     bodyB.addShape(shapeB)
   *     world.addBody(bodyA)
   *     world.addBody(bodyB)
   *     const localPivotA = new Vec3(1, 0, 0)
   *     const localPivotB = new Vec3(-1, 0, 0)
   *     const constraint = new PointToPointConstraint(bodyA, localPivotA, bodyB, localPivotB)
   *     world.addConstraint(constraint)
   */
  class PointToPointConstraint extends Constraint {
    /**
     * Pivot, defined locally in bodyA.
     */

    /**
     * Pivot, defined locally in bodyB.
     */

    /**
     * @param pivotA The point relative to the center of mass of bodyA which bodyA is constrained to.
     * @param bodyB Body that will be constrained in a similar way to the same point as bodyA. We will therefore get a link between bodyA and bodyB. If not specified, bodyA will be constrained to a static point.
     * @param pivotB The point relative to the center of mass of bodyB which bodyB is constrained to.
     * @param maxForce The maximum force that should be applied to constrain the bodies.
     */
    constructor(bodyA, pivotA, bodyB, pivotB, maxForce) {
      if (pivotA === void 0) {
        pivotA = new Vec3();
      }

      if (pivotB === void 0) {
        pivotB = new Vec3();
      }

      if (maxForce === void 0) {
        maxForce = 1e6;
      }

      super(bodyA, bodyB);
      this.pivotA = pivotA.clone();
      this.pivotB = pivotB.clone();
      const x = this.equationX = new ContactEquation(bodyA, bodyB);
      const y = this.equationY = new ContactEquation(bodyA, bodyB);
      const z = this.equationZ = new ContactEquation(bodyA, bodyB); // Equations to be fed to the solver

      this.equations.push(x, y, z); // Make the equations bidirectional

      x.minForce = y.minForce = z.minForce = -maxForce;
      x.maxForce = y.maxForce = z.maxForce = maxForce;
      x.ni.set(1, 0, 0);
      y.ni.set(0, 1, 0);
      z.ni.set(0, 0, 1);
    }

    update() {
      const bodyA = this.bodyA;
      const bodyB = this.bodyB;
      const x = this.equationX;
      const y = this.equationY;
      const z = this.equationZ; // Rotate the pivots to world space

      bodyA.quaternion.vmult(this.pivotA, x.ri);
      bodyB.quaternion.vmult(this.pivotB, x.rj);
      y.ri.copy(x.ri);
      y.rj.copy(x.rj);
      z.ri.copy(x.ri);
      z.rj.copy(x.rj);
    }

  }

  /**
   * Cone equation. Works to keep the given body world vectors aligned, or tilted within a given angle from each other.
   */
  class ConeEquation extends Equation {
    /**
     * Local axis in A
     */

    /**
     * Local axis in B
     */

    /**
     * The "cone angle" to keep
     */
    constructor(bodyA, bodyB, options) {
      if (options === void 0) {
        options = {};
      }

      const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;
      super(bodyA, bodyB, -maxForce, maxForce);
      this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);
      this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);
      this.angle = typeof options.angle !== 'undefined' ? options.angle : 0;
    }

    computeB(h) {
      const a = this.a;
      const b = this.b;
      const ni = this.axisA;
      const nj = this.axisB;
      const nixnj = tmpVec1$2;
      const njxni = tmpVec2$2;
      const GA = this.jacobianElementA;
      const GB = this.jacobianElementB; // Caluclate cross products

      ni.cross(nj, nixnj);
      nj.cross(ni, njxni); // The angle between two vector is:
      // cos(theta) = a * b / (length(a) * length(b) = { len(a) = len(b) = 1 } = a * b
      // g = a * b
      // gdot = (b x a) * wi + (a x b) * wj
      // G = [0 bxa 0 axb]
      // W = [vi wi vj wj]

      GA.rotational.copy(njxni);
      GB.rotational.copy(nixnj);
      const g = Math.cos(this.angle) - ni.dot(nj);
      const GW = this.computeGW();
      const GiMf = this.computeGiMf();
      const B = -g * a - GW * b - h * GiMf;
      return B;
    }

  }
  const tmpVec1$2 = new Vec3();
  const tmpVec2$2 = new Vec3();

  /**
   * Rotational constraint. Works to keep the local vectors orthogonal to each other in world space.
   */
  class RotationalEquation extends Equation {
    /**
     * World oriented rotational axis.
     */

    /**
     * World oriented rotational axis.
     */

    /**
     * maxAngle
     */
    constructor(bodyA, bodyB, options) {
      if (options === void 0) {
        options = {};
      }

      const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;
      super(bodyA, bodyB, -maxForce, maxForce);
      this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);
      this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);
      this.maxAngle = Math.PI / 2;
    }

    computeB(h) {
      const a = this.a;
      const b = this.b;
      const ni = this.axisA;
      const nj = this.axisB;
      const nixnj = tmpVec1$1;
      const njxni = tmpVec2$1;
      const GA = this.jacobianElementA;
      const GB = this.jacobianElementB; // Caluclate cross products

      ni.cross(nj, nixnj);
      nj.cross(ni, njxni); // g = ni * nj
      // gdot = (nj x ni) * wi + (ni x nj) * wj
      // G = [0 njxni 0 nixnj]
      // W = [vi wi vj wj]

      GA.rotational.copy(njxni);
      GB.rotational.copy(nixnj);
      const g = Math.cos(this.maxAngle) - ni.dot(nj);
      const GW = this.computeGW();
      const GiMf = this.computeGiMf();
      const B = -g * a - GW * b - h * GiMf;
      return B;
    }

  }
  const tmpVec1$1 = new Vec3();
  const tmpVec2$1 = new Vec3();

  /**
   * A Cone Twist constraint, useful for ragdolls.
   */
  class ConeTwistConstraint extends PointToPointConstraint {
    /**
     * The axis direction for the constraint of the body A.
     */

    /**
     * The axis direction for the constraint of the body B.
     */

    /**
     * The aperture angle of the cone.
     */

    /**
     * The twist angle of the joint.
     */
    constructor(bodyA, bodyB, options) {
      if (options === void 0) {
        options = {};
      }

      const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6; // Set pivot point in between

      const pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();
      const pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();
      super(bodyA, pivotA, bodyB, pivotB, maxForce);
      this.axisA = options.axisA ? options.axisA.clone() : new Vec3();
      this.axisB = options.axisB ? options.axisB.clone() : new Vec3();
      this.collideConnected = !!options.collideConnected;
      this.angle = typeof options.angle !== 'undefined' ? options.angle : 0;
      const c = this.coneEquation = new ConeEquation(bodyA, bodyB, options);
      const t = this.twistEquation = new RotationalEquation(bodyA, bodyB, options);
      this.twistAngle = typeof options.twistAngle !== 'undefined' ? options.twistAngle : 0; // Make the cone equation push the bodies toward the cone axis, not outward

      c.maxForce = 0;
      c.minForce = -maxForce; // Make the twist equation add torque toward the initial position

      t.maxForce = 0;
      t.minForce = -maxForce;
      this.equations.push(c, t);
    }

    update() {
      const bodyA = this.bodyA;
      const bodyB = this.bodyB;
      const cone = this.coneEquation;
      const twist = this.twistEquation;
      super.update(); // Update the axes to the cone constraint

      bodyA.vectorToWorldFrame(this.axisA, cone.axisA);
      bodyB.vectorToWorldFrame(this.axisB, cone.axisB); // Update the world axes in the twist constraint

      this.axisA.tangents(twist.axisA, twist.axisA);
      bodyA.vectorToWorldFrame(twist.axisA, twist.axisA);
      this.axisB.tangents(twist.axisB, twist.axisB);
      bodyB.vectorToWorldFrame(twist.axisB, twist.axisB);
      cone.angle = this.angle;
      twist.maxAngle = this.twistAngle;
    }

  }
  new Vec3();
  new Vec3();

  /**
   * Constrains two bodies to be at a constant distance from each others center of mass.
   */
  class DistanceConstraint extends Constraint {
    /**
     * The distance to keep. If undefined, it will be set to the current distance between bodyA and bodyB
     */

    /**
     * @param distance The distance to keep. If undefined, it will be set to the current distance between bodyA and bodyB.
     * @param maxForce The maximum force that should be applied to constrain the bodies.
     */
    constructor(bodyA, bodyB, distance, maxForce) {
      if (maxForce === void 0) {
        maxForce = 1e6;
      }

      super(bodyA, bodyB);

      if (typeof distance === 'undefined') {
        distance = bodyA.position.distanceTo(bodyB.position);
      }

      this.distance = distance;
      const eq = this.distanceEquation = new ContactEquation(bodyA, bodyB);
      this.equations.push(eq); // Make it bidirectional

      eq.minForce = -maxForce;
      eq.maxForce = maxForce;
    }
    /**
     * update
     */


    update() {
      const bodyA = this.bodyA;
      const bodyB = this.bodyB;
      const eq = this.distanceEquation;
      const halfDist = this.distance * 0.5;
      const normal = eq.ni;
      bodyB.position.vsub(bodyA.position, normal);
      normal.normalize();
      normal.scale(halfDist, eq.ri);
      normal.scale(-halfDist, eq.rj);
    }

  }

  /**
   * Lock constraint. Will remove all degrees of freedom between the bodies.
   */
  class LockConstraint extends PointToPointConstraint {
    constructor(bodyA, bodyB, options) {
      if (options === void 0) {
        options = {};
      }

      const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6; // Set pivot point in between

      const pivotA = new Vec3();
      const pivotB = new Vec3();
      const halfWay = new Vec3();
      bodyA.position.vadd(bodyB.position, halfWay);
      halfWay.scale(0.5, halfWay);
      bodyB.pointToLocalFrame(halfWay, pivotB);
      bodyA.pointToLocalFrame(halfWay, pivotA); // The point-to-point constraint will keep a point shared between the bodies

      super(bodyA, pivotA, bodyB, pivotB, maxForce); // Store initial rotation of the bodies as unit vectors in the local body spaces

      this.xA = bodyA.vectorToLocalFrame(Vec3.UNIT_X);
      this.xB = bodyB.vectorToLocalFrame(Vec3.UNIT_X);
      this.yA = bodyA.vectorToLocalFrame(Vec3.UNIT_Y);
      this.yB = bodyB.vectorToLocalFrame(Vec3.UNIT_Y);
      this.zA = bodyA.vectorToLocalFrame(Vec3.UNIT_Z);
      this.zB = bodyB.vectorToLocalFrame(Vec3.UNIT_Z); // ...and the following rotational equations will keep all rotational DOF's in place

      const r1 = this.rotationalEquation1 = new RotationalEquation(bodyA, bodyB, options);
      const r2 = this.rotationalEquation2 = new RotationalEquation(bodyA, bodyB, options);
      const r3 = this.rotationalEquation3 = new RotationalEquation(bodyA, bodyB, options);
      this.equations.push(r1, r2, r3);
    }
    /**
     * update
     */


    update() {
      const bodyA = this.bodyA;
      const bodyB = this.bodyB;
      this.motorEquation;
      const r1 = this.rotationalEquation1;
      const r2 = this.rotationalEquation2;
      const r3 = this.rotationalEquation3;
      super.update(); // These vector pairs must be orthogonal

      bodyA.vectorToWorldFrame(this.xA, r1.axisA);
      bodyB.vectorToWorldFrame(this.yB, r1.axisB);
      bodyA.vectorToWorldFrame(this.yA, r2.axisA);
      bodyB.vectorToWorldFrame(this.zB, r2.axisB);
      bodyA.vectorToWorldFrame(this.zA, r3.axisA);
      bodyB.vectorToWorldFrame(this.xB, r3.axisB);
    }

  }
  new Vec3();
  new Vec3();

  /**
   * Rotational motor constraint. Tries to keep the relative angular velocity of the bodies to a given value.
   */
  class RotationalMotorEquation extends Equation {
    /**
     * World oriented rotational axis.
     */

    /**
     * World oriented rotational axis.
     */

    /**
     * Motor velocity.
     */
    constructor(bodyA, bodyB, maxForce) {
      if (maxForce === void 0) {
        maxForce = 1e6;
      }

      super(bodyA, bodyB, -maxForce, maxForce);
      this.axisA = new Vec3();
      this.axisB = new Vec3();
      this.targetVelocity = 0;
    }

    computeB(h) {
      this.a;
      const b = this.b;
      this.bi;
      this.bj;
      const axisA = this.axisA;
      const axisB = this.axisB;
      const GA = this.jacobianElementA;
      const GB = this.jacobianElementB; // g = 0
      // gdot = axisA * wi - axisB * wj
      // gdot = G * W = G * [vi wi vj wj]
      // =>
      // G = [0 axisA 0 -axisB]

      GA.rotational.copy(axisA);
      axisB.negate(GB.rotational);
      const GW = this.computeGW() - this.targetVelocity;
      const GiMf = this.computeGiMf();
      const B = -GW * b - h * GiMf;
      return B;
    }

  }

  /**
   * Hinge constraint. Think of it as a door hinge. It tries to keep the door in the correct place and with the correct orientation.
   */
  class HingeConstraint extends PointToPointConstraint {
    /**
     * Rotation axis, defined locally in bodyA.
     */

    /**
     * Rotation axis, defined locally in bodyB.
     */
    constructor(bodyA, bodyB, options) {
      if (options === void 0) {
        options = {};
      }

      const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;
      const pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();
      const pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();
      super(bodyA, pivotA, bodyB, pivotB, maxForce);
      const axisA = this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);
      axisA.normalize();
      const axisB = this.axisB = options.axisB ? options.axisB.clone() : new Vec3(1, 0, 0);
      axisB.normalize();
      this.collideConnected = !!options.collideConnected;
      const rotational1 = this.rotationalEquation1 = new RotationalEquation(bodyA, bodyB, options);
      const rotational2 = this.rotationalEquation2 = new RotationalEquation(bodyA, bodyB, options);
      const motor = this.motorEquation = new RotationalMotorEquation(bodyA, bodyB, maxForce);
      motor.enabled = false; // Not enabled by default
      // Equations to be fed to the solver

      this.equations.push(rotational1, rotational2, motor);
    }
    /**
     * enableMotor
     */


    enableMotor() {
      this.motorEquation.enabled = true;
    }
    /**
     * disableMotor
     */


    disableMotor() {
      this.motorEquation.enabled = false;
    }
    /**
     * setMotorSpeed
     */


    setMotorSpeed(speed) {
      this.motorEquation.targetVelocity = speed;
    }
    /**
     * setMotorMaxForce
     */


    setMotorMaxForce(maxForce) {
      this.motorEquation.maxForce = maxForce;
      this.motorEquation.minForce = -maxForce;
    }
    /**
     * update
     */


    update() {
      const bodyA = this.bodyA;
      const bodyB = this.bodyB;
      const motor = this.motorEquation;
      const r1 = this.rotationalEquation1;
      const r2 = this.rotationalEquation2;
      const worldAxisA = HingeConstraint_update_tmpVec1;
      const worldAxisB = HingeConstraint_update_tmpVec2;
      const axisA = this.axisA;
      const axisB = this.axisB;
      super.update(); // Get world axes

      bodyA.quaternion.vmult(axisA, worldAxisA);
      bodyB.quaternion.vmult(axisB, worldAxisB);
      worldAxisA.tangents(r1.axisA, r2.axisA);
      r1.axisB.copy(worldAxisB);
      r2.axisB.copy(worldAxisB);

      if (this.motorEquation.enabled) {
        bodyA.quaternion.vmult(this.axisA, motor.axisA);
        bodyB.quaternion.vmult(this.axisB, motor.axisB);
      }
    }

  }
  const HingeConstraint_update_tmpVec1 = new Vec3();
  const HingeConstraint_update_tmpVec2 = new Vec3();

  /**
   * Constrains the slipping in a contact along a tangent
   */
  class FrictionEquation extends Equation {
    // Tangent

    /**
     * @param slipForce should be +-F_friction = +-mu * F_normal = +-mu * m * g
     */
    constructor(bodyA, bodyB, slipForce) {
      super(bodyA, bodyB, -slipForce, slipForce);
      this.ri = new Vec3();
      this.rj = new Vec3();
      this.t = new Vec3();
    }

    computeB(h) {
      this.a;
      const b = this.b;
      this.bi;
      this.bj;
      const ri = this.ri;
      const rj = this.rj;
      const rixt = FrictionEquation_computeB_temp1;
      const rjxt = FrictionEquation_computeB_temp2;
      const t = this.t; // Caluclate cross products

      ri.cross(t, rixt);
      rj.cross(t, rjxt); // G = [-t -rixt t rjxt]
      // And remember, this is a pure velocity constraint, g is always zero!

      const GA = this.jacobianElementA;
      const GB = this.jacobianElementB;
      t.negate(GA.spatial);
      rixt.negate(GA.rotational);
      GB.spatial.copy(t);
      GB.rotational.copy(rjxt);
      const GW = this.computeGW();
      const GiMf = this.computeGiMf();
      const B = -GW * b - h * GiMf;
      return B;
    }

  }
  const FrictionEquation_computeB_temp1 = new Vec3();
  const FrictionEquation_computeB_temp2 = new Vec3();

  /**
   * Defines what happens when two materials meet.
   * @todo Refactor materials to materialA and materialB
   */
  class ContactMaterial {
    /**
     * Identifier of this material.
     */

    /**
     * Participating materials.
     */

    /**
     * Friction coefficient.
     * @default 0.3
     */

    /**
     * Restitution coefficient.
     * @default 0.3
     */

    /**
     * Stiffness of the produced contact equations.
     * @default 1e7
     */

    /**
     * Relaxation time of the produced contact equations.
     * @default 3
     */

    /**
     * Stiffness of the produced friction equations.
     * @default 1e7
     */

    /**
     * Relaxation time of the produced friction equations
     * @default 3
     */
    constructor(m1, m2, options) {
      options = Utils.defaults(options, {
        friction: 0.3,
        restitution: 0.3,
        contactEquationStiffness: 1e7,
        contactEquationRelaxation: 3,
        frictionEquationStiffness: 1e7,
        frictionEquationRelaxation: 3
      });
      this.id = ContactMaterial.idCounter++;
      this.materials = [m1, m2];
      this.friction = options.friction;
      this.restitution = options.restitution;
      this.contactEquationStiffness = options.contactEquationStiffness;
      this.contactEquationRelaxation = options.contactEquationRelaxation;
      this.frictionEquationStiffness = options.frictionEquationStiffness;
      this.frictionEquationRelaxation = options.frictionEquationRelaxation;
    }

  }
  ContactMaterial.idCounter = 0;

  /**
   * Defines a physics material.
   */
  class Material {
    /**
     * Material name.
     * If options is a string, name will be set to that string.
     * @todo Deprecate this
     */

    /** Material id. */

    /**
     * Friction for this material.
     * If non-negative, it will be used instead of the friction given by ContactMaterials. If there's no matching ContactMaterial, the value from `defaultContactMaterial` in the World will be used.
     */

    /**
     * Restitution for this material.
     * If non-negative, it will be used instead of the restitution given by ContactMaterials. If there's no matching ContactMaterial, the value from `defaultContactMaterial` in the World will be used.
     */
    constructor(options) {
      if (options === void 0) {
        options = {};
      }

      let name = ''; // Backwards compatibility fix

      if (typeof options === 'string') {
        //console.warn(`Passing a string to MaterialOptions is deprecated, and has no effect`)
        name = options;
        options = {};
      }

      this.name = name;
      this.id = Material.idCounter++;
      this.friction = typeof options.friction !== 'undefined' ? options.friction : -1;
      this.restitution = typeof options.restitution !== 'undefined' ? options.restitution : -1;
    }

  }
  Material.idCounter = 0;

  /**
   * A spring, connecting two bodies.
   * @example
   *     const spring = new Spring(boxBody, sphereBody, {
   *       restLength: 0,
   *       stiffness: 50,
   *       damping: 1,
   *     })
   *
   *     // Compute the force after each step
   *     world.addEventListener('postStep', (event) => {
   *       spring.applyForce()
   *     })
   */
  class Spring {
    /**
     * Rest length of the spring. A number > 0.
     * @default 1
     */

    /**
     * Stiffness of the spring. A number >= 0.
     * @default 100
     */

    /**
     * Damping of the spring. A number >= 0.
     * @default 1
     */

    /**
     * First connected body.
     */

    /**
     * Second connected body.
     */

    /**
     * Anchor for bodyA in local bodyA coordinates.
     * Where to hook the spring to body A, in local body coordinates.
     * @default new Vec3()
     */

    /**
     * Anchor for bodyB in local bodyB coordinates.
     * Where to hook the spring to body B, in local body coordinates.
     * @default new Vec3()
     */
    constructor(bodyA, bodyB, options) {
      if (options === void 0) {
        options = {};
      }

      this.restLength = typeof options.restLength === 'number' ? options.restLength : 1;
      this.stiffness = options.stiffness || 100;
      this.damping = options.damping || 1;
      this.bodyA = bodyA;
      this.bodyB = bodyB;
      this.localAnchorA = new Vec3();
      this.localAnchorB = new Vec3();

      if (options.localAnchorA) {
        this.localAnchorA.copy(options.localAnchorA);
      }

      if (options.localAnchorB) {
        this.localAnchorB.copy(options.localAnchorB);
      }

      if (options.worldAnchorA) {
        this.setWorldAnchorA(options.worldAnchorA);
      }

      if (options.worldAnchorB) {
        this.setWorldAnchorB(options.worldAnchorB);
      }
    }
    /**
     * Set the anchor point on body A, using world coordinates.
     */


    setWorldAnchorA(worldAnchorA) {
      this.bodyA.pointToLocalFrame(worldAnchorA, this.localAnchorA);
    }
    /**
     * Set the anchor point on body B, using world coordinates.
     */


    setWorldAnchorB(worldAnchorB) {
      this.bodyB.pointToLocalFrame(worldAnchorB, this.localAnchorB);
    }
    /**
     * Get the anchor point on body A, in world coordinates.
     * @param result The vector to store the result in.
     */


    getWorldAnchorA(result) {
      this.bodyA.pointToWorldFrame(this.localAnchorA, result);
    }
    /**
     * Get the anchor point on body B, in world coordinates.
     * @param result The vector to store the result in.
     */


    getWorldAnchorB(result) {
      this.bodyB.pointToWorldFrame(this.localAnchorB, result);
    }
    /**
     * Apply the spring force to the connected bodies.
     */


    applyForce() {
      const k = this.stiffness;
      const d = this.damping;
      const l = this.restLength;
      const bodyA = this.bodyA;
      const bodyB = this.bodyB;
      const r = applyForce_r;
      const r_unit = applyForce_r_unit;
      const u = applyForce_u;
      const f = applyForce_f;
      const tmp = applyForce_tmp;
      const worldAnchorA = applyForce_worldAnchorA;
      const worldAnchorB = applyForce_worldAnchorB;
      const ri = applyForce_ri;
      const rj = applyForce_rj;
      const ri_x_f = applyForce_ri_x_f;
      const rj_x_f = applyForce_rj_x_f; // Get world anchors

      this.getWorldAnchorA(worldAnchorA);
      this.getWorldAnchorB(worldAnchorB); // Get offset points

      worldAnchorA.vsub(bodyA.position, ri);
      worldAnchorB.vsub(bodyB.position, rj); // Compute distance vector between world anchor points

      worldAnchorB.vsub(worldAnchorA, r);
      const rlen = r.length();
      r_unit.copy(r);
      r_unit.normalize(); // Compute relative velocity of the anchor points, u

      bodyB.velocity.vsub(bodyA.velocity, u); // Add rotational velocity

      bodyB.angularVelocity.cross(rj, tmp);
      u.vadd(tmp, u);
      bodyA.angularVelocity.cross(ri, tmp);
      u.vsub(tmp, u); // F = - k * ( x - L ) - D * ( u )

      r_unit.scale(-k * (rlen - l) - d * u.dot(r_unit), f); // Add forces to bodies

      bodyA.force.vsub(f, bodyA.force);
      bodyB.force.vadd(f, bodyB.force); // Angular force

      ri.cross(f, ri_x_f);
      rj.cross(f, rj_x_f);
      bodyA.torque.vsub(ri_x_f, bodyA.torque);
      bodyB.torque.vadd(rj_x_f, bodyB.torque);
    }

  }
  const applyForce_r = new Vec3();
  const applyForce_r_unit = new Vec3();
  const applyForce_u = new Vec3();
  const applyForce_f = new Vec3();
  const applyForce_worldAnchorA = new Vec3();
  const applyForce_worldAnchorB = new Vec3();
  const applyForce_ri = new Vec3();
  const applyForce_rj = new Vec3();
  const applyForce_ri_x_f = new Vec3();
  const applyForce_rj_x_f = new Vec3();
  const applyForce_tmp = new Vec3();

  /**
   * WheelInfo
   */
  class WheelInfo {
    /**
     * Max travel distance of the suspension, in meters.
     * @default 1
     */

    /**
     * Speed to apply to the wheel rotation when the wheel is sliding.
     * @default -0.1
     */

    /**
     * If the customSlidingRotationalSpeed should be used.
     * @default false
     */

    /**
     * sliding
     */

    /**
     * Connection point, defined locally in the chassis body frame.
     */

    /**
     * chassisConnectionPointWorld
     */

    /**
     * directionLocal
     */

    /**
     * directionWorld
     */

    /**
     * axleLocal
     */

    /**
     * axleWorld
     */

    /**
     * suspensionRestLength
     * @default 1
     */

    /**
     * suspensionMaxLength
     * @default 2
     */

    /**
     * radius
     * @default 1
     */

    /**
     * suspensionStiffness
     * @default 100
     */

    /**
     * dampingCompression
     * @default 10
     */

    /**
     * dampingRelaxation
     * @default 10
     */

    /**
     * frictionSlip
     * @default 10.5
     */

    /** forwardAcceleration */

    /** sideAcceleration */

    /**
     * steering
     * @default 0
     */

    /**
     * Rotation value, in radians.
     * @default 0
     */

    /**
     * deltaRotation
     * @default 0
     */

    /**
     * rollInfluence
     * @default 0.01
     */

    /**
     * maxSuspensionForce
     */

    /**
     * engineForce
     */

    /**
     * brake
     */

    /**
     * isFrontWheel
     * @default true
     */

    /**
     * clippedInvContactDotSuspension
     * @default 1
     */

    /**
     * suspensionRelativeVelocity
     * @default 0
     */

    /**
     * suspensionForce
     * @default 0
     */

    /**
     * slipInfo
     */

    /**
     * skidInfo
     * @default 0
     */

    /**
     * suspensionLength
     * @default 0
     */

    /**
     * sideImpulse
     */

    /**
     * forwardImpulse
     */

    /**
     * The result from raycasting.
     */

    /**
     * Wheel world transform.
     */

    /**
     * isInContact
     */
    constructor(options) {
      if (options === void 0) {
        options = {};
      }

      options = Utils.defaults(options, {
        chassisConnectionPointLocal: new Vec3(),
        chassisConnectionPointWorld: new Vec3(),
        directionLocal: new Vec3(),
        directionWorld: new Vec3(),
        axleLocal: new Vec3(),
        axleWorld: new Vec3(),
        suspensionRestLength: 1,
        suspensionMaxLength: 2,
        radius: 1,
        suspensionStiffness: 100,
        dampingCompression: 10,
        dampingRelaxation: 10,
        frictionSlip: 10.5,
        forwardAcceleration: 1,
        sideAcceleration: 1,
        steering: 0,
        rotation: 0,
        deltaRotation: 0,
        rollInfluence: 0.01,
        maxSuspensionForce: Number.MAX_VALUE,
        isFrontWheel: true,
        clippedInvContactDotSuspension: 1,
        suspensionRelativeVelocity: 0,
        suspensionForce: 0,
        slipInfo: 0,
        skidInfo: 0,
        suspensionLength: 0,
        maxSuspensionTravel: 1,
        useCustomSlidingRotationalSpeed: false,
        customSlidingRotationalSpeed: -0.1
      });
      this.maxSuspensionTravel = options.maxSuspensionTravel;
      this.customSlidingRotationalSpeed = options.customSlidingRotationalSpeed;
      this.useCustomSlidingRotationalSpeed = options.useCustomSlidingRotationalSpeed;
      this.sliding = false;
      this.chassisConnectionPointLocal = options.chassisConnectionPointLocal.clone();
      this.chassisConnectionPointWorld = options.chassisConnectionPointWorld.clone();
      this.directionLocal = options.directionLocal.clone();
      this.directionWorld = options.directionWorld.clone();
      this.axleLocal = options.axleLocal.clone();
      this.axleWorld = options.axleWorld.clone();
      this.suspensionRestLength = options.suspensionRestLength;
      this.suspensionMaxLength = options.suspensionMaxLength;
      this.radius = options.radius;
      this.suspensionStiffness = options.suspensionStiffness;
      this.dampingCompression = options.dampingCompression;
      this.dampingRelaxation = options.dampingRelaxation;
      this.frictionSlip = options.frictionSlip;
      this.forwardAcceleration = options.forwardAcceleration;
      this.sideAcceleration = options.sideAcceleration;
      this.steering = 0;
      this.rotation = 0;
      this.deltaRotation = 0;
      this.rollInfluence = options.rollInfluence;
      this.maxSuspensionForce = options.maxSuspensionForce;
      this.engineForce = 0;
      this.brake = 0;
      this.isFrontWheel = options.isFrontWheel;
      this.clippedInvContactDotSuspension = 1;
      this.suspensionRelativeVelocity = 0;
      this.suspensionForce = 0;
      this.slipInfo = 0;
      this.skidInfo = 0;
      this.suspensionLength = 0;
      this.sideImpulse = 0;
      this.forwardImpulse = 0;
      this.raycastResult = new RaycastResult();
      this.worldTransform = new Transform();
      this.isInContact = false;
    }

    updateWheel(chassis) {
      const raycastResult = this.raycastResult;

      if (this.isInContact) {
        const project = raycastResult.hitNormalWorld.dot(raycastResult.directionWorld);
        raycastResult.hitPointWorld.vsub(chassis.position, relpos);
        chassis.getVelocityAtWorldPoint(relpos, chassis_velocity_at_contactPoint);
        const projVel = raycastResult.hitNormalWorld.dot(chassis_velocity_at_contactPoint);

        if (project >= -0.1) {
          this.suspensionRelativeVelocity = 0.0;
          this.clippedInvContactDotSuspension = 1.0 / 0.1;
        } else {
          const inv = -1 / project;
          this.suspensionRelativeVelocity = projVel * inv;
          this.clippedInvContactDotSuspension = inv;
        }
      } else {
        // Not in contact : position wheel in a nice (rest length) position
        raycastResult.suspensionLength = this.suspensionRestLength;
        this.suspensionRelativeVelocity = 0.0;
        raycastResult.directionWorld.scale(-1, raycastResult.hitNormalWorld);
        this.clippedInvContactDotSuspension = 1.0;
      }
    }

  }
  const chassis_velocity_at_contactPoint = new Vec3();
  const relpos = new Vec3();

  /**
   * Vehicle helper class that casts rays from the wheel positions towards the ground and applies forces.
   */
  class RaycastVehicle {
    /** The car chassis body. */

    /** The wheels. */

    /** Will be set to true if the car is sliding. */

    /** Index of the right axis. x=0, y=1, z=2 */

    /** Index of the forward axis. x=0, y=1, z=2 */

    /** Index of the up axis. x=0, y=1, z=2 */

    /** The constraints. */

    /** Optional pre-step callback. */

    /** Number of wheels on the ground. */
    constructor(options) {
      this.chassisBody = options.chassisBody;
      this.wheelInfos = [];
      this.sliding = false;
      this.world = null;
      this.indexRightAxis = typeof options.indexRightAxis !== 'undefined' ? options.indexRightAxis : 2;
      this.indexForwardAxis = typeof options.indexForwardAxis !== 'undefined' ? options.indexForwardAxis : 0;
      this.indexUpAxis = typeof options.indexUpAxis !== 'undefined' ? options.indexUpAxis : 1;
      this.constraints = [];

      this.preStepCallback = () => {};

      this.currentVehicleSpeedKmHour = 0;
      this.numWheelsOnGround = 0;
    }
    /**
     * Add a wheel. For information about the options, see `WheelInfo`.
     */


    addWheel(options) {
      if (options === void 0) {
        options = {};
      }

      const info = new WheelInfo(options);
      const index = this.wheelInfos.length;
      this.wheelInfos.push(info);
      return index;
    }
    /**
     * Set the steering value of a wheel.
     */


    setSteeringValue(value, wheelIndex) {
      const wheel = this.wheelInfos[wheelIndex];
      wheel.steering = value;
    }
    /**
     * Set the wheel force to apply on one of the wheels each time step
     */


    applyEngineForce(value, wheelIndex) {
      this.wheelInfos[wheelIndex].engineForce = value;
    }
    /**
     * Set the braking force of a wheel
     */


    setBrake(brake, wheelIndex) {
      this.wheelInfos[wheelIndex].brake = brake;
    }
    /**
     * Add the vehicle including its constraints to the world.
     */


    addToWorld(world) {
      world.addBody(this.chassisBody);
      const that = this;

      this.preStepCallback = () => {
        that.updateVehicle(world.dt);
      };

      world.addEventListener('preStep', this.preStepCallback);
      this.world = world;
    }
    /**
     * Get one of the wheel axles, world-oriented.
     */


    getVehicleAxisWorld(axisIndex, result) {
      result.set(axisIndex === 0 ? 1 : 0, axisIndex === 1 ? 1 : 0, axisIndex === 2 ? 1 : 0);
      this.chassisBody.vectorToWorldFrame(result, result);
    }

    updateVehicle(timeStep) {
      const wheelInfos = this.wheelInfos;
      const numWheels = wheelInfos.length;
      const chassisBody = this.chassisBody;

      for (let i = 0; i < numWheels; i++) {
        this.updateWheelTransform(i);
      }

      this.currentVehicleSpeedKmHour = 3.6 * chassisBody.velocity.length();
      const forwardWorld = new Vec3();
      this.getVehicleAxisWorld(this.indexForwardAxis, forwardWorld);

      if (forwardWorld.dot(chassisBody.velocity) < 0) {
        this.currentVehicleSpeedKmHour *= -1;
      } // simulate suspension


      for (let i = 0; i < numWheels; i++) {
        this.castRay(wheelInfos[i]);
      }

      this.updateSuspension(timeStep);
      const impulse = new Vec3();
      const relpos = new Vec3();

      for (let i = 0; i < numWheels; i++) {
        //apply suspension force
        const wheel = wheelInfos[i];
        let suspensionForce = wheel.suspensionForce;

        if (suspensionForce > wheel.maxSuspensionForce) {
          suspensionForce = wheel.maxSuspensionForce;
        }

        wheel.raycastResult.hitNormalWorld.scale(suspensionForce * timeStep, impulse);
        wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, relpos);
        chassisBody.applyImpulse(impulse, relpos);
      }

      this.updateFriction(timeStep);
      const hitNormalWorldScaledWithProj = new Vec3();
      const fwd = new Vec3();
      const vel = new Vec3();

      for (let i = 0; i < numWheels; i++) {
        const wheel = wheelInfos[i]; //const relpos = new Vec3();
        //wheel.chassisConnectionPointWorld.vsub(chassisBody.position, relpos);

        chassisBody.getVelocityAtWorldPoint(wheel.chassisConnectionPointWorld, vel); // Hack to get the rotation in the correct direction

        let m = 1;

        switch (this.indexUpAxis) {
          case 1:
            m = -1;
            break;
        }

        if (wheel.isInContact) {
          this.getVehicleAxisWorld(this.indexForwardAxis, fwd);
          const proj = fwd.dot(wheel.raycastResult.hitNormalWorld);
          wheel.raycastResult.hitNormalWorld.scale(proj, hitNormalWorldScaledWithProj);
          fwd.vsub(hitNormalWorldScaledWithProj, fwd);
          const proj2 = fwd.dot(vel);
          wheel.deltaRotation = m * proj2 * timeStep / wheel.radius;
        }

        if ((wheel.sliding || !wheel.isInContact) && wheel.engineForce !== 0 && wheel.useCustomSlidingRotationalSpeed) {
          // Apply custom rotation when accelerating and sliding
          wheel.deltaRotation = (wheel.engineForce > 0 ? 1 : -1) * wheel.customSlidingRotationalSpeed * timeStep;
        } // Lock wheels


        if (Math.abs(wheel.brake) > Math.abs(wheel.engineForce)) {
          wheel.deltaRotation = 0;
        }

        wheel.rotation += wheel.deltaRotation; // Use the old value

        wheel.deltaRotation *= 0.99; // damping of rotation when not in contact
      }
    }

    updateSuspension(deltaTime) {
      const chassisBody = this.chassisBody;
      const chassisMass = chassisBody.mass;
      const wheelInfos = this.wheelInfos;
      const numWheels = wheelInfos.length;

      for (let w_it = 0; w_it < numWheels; w_it++) {
        const wheel = wheelInfos[w_it];

        if (wheel.isInContact) {
          let force; // Spring

          const susp_length = wheel.suspensionRestLength;
          const current_length = wheel.suspensionLength;
          const length_diff = susp_length - current_length;
          force = wheel.suspensionStiffness * length_diff * wheel.clippedInvContactDotSuspension; // Damper

          const projected_rel_vel = wheel.suspensionRelativeVelocity;
          let susp_damping;

          if (projected_rel_vel < 0) {
            susp_damping = wheel.dampingCompression;
          } else {
            susp_damping = wheel.dampingRelaxation;
          }

          force -= susp_damping * projected_rel_vel;
          wheel.suspensionForce = force * chassisMass;

          if (wheel.suspensionForce < 0) {
            wheel.suspensionForce = 0;
          }
        } else {
          wheel.suspensionForce = 0;
        }
      }
    }
    /**
     * Remove the vehicle including its constraints from the world.
     */


    removeFromWorld(world) {
      this.constraints;
      world.removeBody(this.chassisBody);
      world.removeEventListener('preStep', this.preStepCallback);
      this.world = null;
    }

    castRay(wheel) {
      const rayvector = castRay_rayvector;
      const target = castRay_target;
      this.updateWheelTransformWorld(wheel);
      const chassisBody = this.chassisBody;
      let depth = -1;
      const raylen = wheel.suspensionRestLength + wheel.radius;
      wheel.directionWorld.scale(raylen, rayvector);
      const source = wheel.chassisConnectionPointWorld;
      source.vadd(rayvector, target);
      const raycastResult = wheel.raycastResult;
      raycastResult.reset(); // Turn off ray collision with the chassis temporarily

      const oldState = chassisBody.collisionResponse;
      chassisBody.collisionResponse = false; // Cast ray against world

      this.world.rayTest(source, target, raycastResult);
      chassisBody.collisionResponse = oldState;
      const object = raycastResult.body;
      wheel.raycastResult.groundObject = 0;

      if (object) {
        depth = raycastResult.distance;
        wheel.raycastResult.hitNormalWorld = raycastResult.hitNormalWorld;
        wheel.isInContact = true;
        const hitDistance = raycastResult.distance;
        wheel.suspensionLength = hitDistance - wheel.radius; // clamp on max suspension travel

        const minSuspensionLength = wheel.suspensionRestLength - wheel.maxSuspensionTravel;
        const maxSuspensionLength = wheel.suspensionRestLength + wheel.maxSuspensionTravel;

        if (wheel.suspensionLength < minSuspensionLength) {
          wheel.suspensionLength = minSuspensionLength;
        }

        if (wheel.suspensionLength > maxSuspensionLength) {
          wheel.suspensionLength = maxSuspensionLength;
          wheel.raycastResult.reset();
        }

        const denominator = wheel.raycastResult.hitNormalWorld.dot(wheel.directionWorld);
        const chassis_velocity_at_contactPoint = new Vec3();
        chassisBody.getVelocityAtWorldPoint(wheel.raycastResult.hitPointWorld, chassis_velocity_at_contactPoint);
        const projVel = wheel.raycastResult.hitNormalWorld.dot(chassis_velocity_at_contactPoint);

        if (denominator >= -0.1) {
          wheel.suspensionRelativeVelocity = 0;
          wheel.clippedInvContactDotSuspension = 1 / 0.1;
        } else {
          const inv = -1 / denominator;
          wheel.suspensionRelativeVelocity = projVel * inv;
          wheel.clippedInvContactDotSuspension = inv;
        }
      } else {
        //put wheel info as in rest position
        wheel.suspensionLength = wheel.suspensionRestLength + 0 * wheel.maxSuspensionTravel;
        wheel.suspensionRelativeVelocity = 0.0;
        wheel.directionWorld.scale(-1, wheel.raycastResult.hitNormalWorld);
        wheel.clippedInvContactDotSuspension = 1.0;
      }

      return depth;
    }

    updateWheelTransformWorld(wheel) {
      wheel.isInContact = false;
      const chassisBody = this.chassisBody;
      chassisBody.pointToWorldFrame(wheel.chassisConnectionPointLocal, wheel.chassisConnectionPointWorld);
      chassisBody.vectorToWorldFrame(wheel.directionLocal, wheel.directionWorld);
      chassisBody.vectorToWorldFrame(wheel.axleLocal, wheel.axleWorld);
    }
    /**
     * Update one of the wheel transform.
     * Note when rendering wheels: during each step, wheel transforms are updated BEFORE the chassis; ie. their position becomes invalid after the step. Thus when you render wheels, you must update wheel transforms before rendering them. See raycastVehicle demo for an example.
     * @param wheelIndex The wheel index to update.
     */


    updateWheelTransform(wheelIndex) {
      const up = tmpVec4;
      const right = tmpVec5;
      const fwd = tmpVec6;
      const wheel = this.wheelInfos[wheelIndex];
      this.updateWheelTransformWorld(wheel);
      wheel.directionLocal.scale(-1, up);
      right.copy(wheel.axleLocal);
      up.cross(right, fwd);
      fwd.normalize();
      right.normalize(); // Rotate around steering over the wheelAxle

      const steering = wheel.steering;
      const steeringOrn = new Quaternion();
      steeringOrn.setFromAxisAngle(up, steering);
      const rotatingOrn = new Quaternion();
      rotatingOrn.setFromAxisAngle(right, wheel.rotation); // World rotation of the wheel

      const q = wheel.worldTransform.quaternion;
      this.chassisBody.quaternion.mult(steeringOrn, q);
      q.mult(rotatingOrn, q);
      q.normalize(); // world position of the wheel

      const p = wheel.worldTransform.position;
      p.copy(wheel.directionWorld);
      p.scale(wheel.suspensionLength, p);
      p.vadd(wheel.chassisConnectionPointWorld, p);
    }
    /**
     * Get the world transform of one of the wheels
     */


    getWheelTransformWorld(wheelIndex) {
      return this.wheelInfos[wheelIndex].worldTransform;
    }

    updateFriction(timeStep) {
      const surfNormalWS_scaled_proj = updateFriction_surfNormalWS_scaled_proj; //calculate the impulse, so that the wheels don't move sidewards

      const wheelInfos = this.wheelInfos;
      const numWheels = wheelInfos.length;
      const chassisBody = this.chassisBody;
      const forwardWS = updateFriction_forwardWS;
      const axle = updateFriction_axle;
      this.numWheelsOnGround = 0;

      for (let i = 0; i < numWheels; i++) {
        const wheel = wheelInfos[i];
        const groundObject = wheel.raycastResult.body;

        if (groundObject) {
          this.numWheelsOnGround++;
        }

        wheel.sideImpulse = 0;
        wheel.forwardImpulse = 0;

        if (!forwardWS[i]) {
          forwardWS[i] = new Vec3();
        }

        if (!axle[i]) {
          axle[i] = new Vec3();
        }
      }

      for (let i = 0; i < numWheels; i++) {
        const wheel = wheelInfos[i];
        const groundObject = wheel.raycastResult.body;

        if (groundObject) {
          const axlei = axle[i];
          const wheelTrans = this.getWheelTransformWorld(i); // Get world axle

          wheelTrans.vectorToWorldFrame(directions[this.indexRightAxis], axlei);
          const surfNormalWS = wheel.raycastResult.hitNormalWorld;
          const proj = axlei.dot(surfNormalWS);
          surfNormalWS.scale(proj, surfNormalWS_scaled_proj);
          axlei.vsub(surfNormalWS_scaled_proj, axlei);
          axlei.normalize();
          surfNormalWS.cross(axlei, forwardWS[i]);
          forwardWS[i].normalize();
          wheel.sideImpulse = resolveSingleBilateral(chassisBody, wheel.raycastResult.hitPointWorld, groundObject, wheel.raycastResult.hitPointWorld, axlei);
          wheel.sideImpulse *= sideFrictionStiffness2;
        }
      }

      const sideFactor = 1;
      const fwdFactor = 0.5;
      this.sliding = false;

      for (let i = 0; i < numWheels; i++) {
        const wheel = wheelInfos[i];
        const groundObject = wheel.raycastResult.body;
        let rollingFriction = 0;
        wheel.slipInfo = 1;

        if (groundObject) {
          const defaultRollingFrictionImpulse = 0;
          const maxImpulse = wheel.brake ? wheel.brake : defaultRollingFrictionImpulse; // btWheelContactPoint contactPt(chassisBody,groundObject,wheelInfraycastInfo.hitPointWorld,forwardWS[wheel],maxImpulse);
          // rollingFriction = calcRollingFriction(contactPt);

          rollingFriction = calcRollingFriction(chassisBody, groundObject, wheel.raycastResult.hitPointWorld, forwardWS[i], maxImpulse);
          rollingFriction += wheel.engineForce * timeStep; // rollingFriction = 0;

          const factor = maxImpulse / rollingFriction;
          wheel.slipInfo *= factor;
        } //switch between active rolling (throttle), braking and non-active rolling friction (nthrottle/break)


        wheel.forwardImpulse = 0;
        wheel.skidInfo = 1;

        if (groundObject) {
          wheel.skidInfo = 1;
          const maximp = wheel.suspensionForce * timeStep * wheel.frictionSlip;
          const maximpSide = maximp;
          const maximpSquared = maximp * maximpSide;
          wheel.forwardImpulse = rollingFriction; //wheelInfo.engineForce* timeStep;

          const x = wheel.forwardImpulse * fwdFactor / wheel.forwardAcceleration;
          const y = wheel.sideImpulse * sideFactor / wheel.sideAcceleration;
          const impulseSquared = x * x + y * y;
          wheel.sliding = false;

          if (impulseSquared > maximpSquared) {
            this.sliding = true;
            wheel.sliding = true;
            const factor = maximp / Math.sqrt(impulseSquared);
            wheel.skidInfo *= factor;
          }
        }
      }

      if (this.sliding) {
        for (let i = 0; i < numWheels; i++) {
          const wheel = wheelInfos[i];

          if (wheel.sideImpulse !== 0) {
            if (wheel.skidInfo < 1) {
              wheel.forwardImpulse *= wheel.skidInfo;
              wheel.sideImpulse *= wheel.skidInfo;
            }
          }
        }
      } // apply the impulses


      for (let i = 0; i < numWheels; i++) {
        const wheel = wheelInfos[i];
        const rel_pos = new Vec3();
        wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, rel_pos); // cannons applyimpulse is using world coord for the position
        //rel_pos.copy(wheel.raycastResult.hitPointWorld);

        if (wheel.forwardImpulse !== 0) {
          const impulse = new Vec3();
          forwardWS[i].scale(wheel.forwardImpulse, impulse);
          chassisBody.applyImpulse(impulse, rel_pos);
        }

        if (wheel.sideImpulse !== 0) {
          const groundObject = wheel.raycastResult.body;
          const rel_pos2 = new Vec3();
          wheel.raycastResult.hitPointWorld.vsub(groundObject.position, rel_pos2); //rel_pos2.copy(wheel.raycastResult.hitPointWorld);

          const sideImp = new Vec3();
          axle[i].scale(wheel.sideImpulse, sideImp); // Scale the relative position in the up direction with rollInfluence.
          // If rollInfluence is 1, the impulse will be applied on the hitPoint (easy to roll over), if it is zero it will be applied in the same plane as the center of mass (not easy to roll over).

          chassisBody.vectorToLocalFrame(rel_pos, rel_pos);
          rel_pos['xyz'[this.indexUpAxis]] *= wheel.rollInfluence;
          chassisBody.vectorToWorldFrame(rel_pos, rel_pos);
          chassisBody.applyImpulse(sideImp, rel_pos); //apply friction impulse on the ground

          sideImp.scale(-1, sideImp);
          groundObject.applyImpulse(sideImp, rel_pos2);
        }
      }
    }

  }
  new Vec3();
  new Vec3();
  new Vec3();
  const tmpVec4 = new Vec3();
  const tmpVec5 = new Vec3();
  const tmpVec6 = new Vec3();
  new Ray();
  new Vec3();
  const castRay_rayvector = new Vec3();
  const castRay_target = new Vec3();
  const directions = [new Vec3(1, 0, 0), new Vec3(0, 1, 0), new Vec3(0, 0, 1)];
  const updateFriction_surfNormalWS_scaled_proj = new Vec3();
  const updateFriction_axle = [];
  const updateFriction_forwardWS = [];
  const sideFrictionStiffness2 = 1;
  const calcRollingFriction_vel1 = new Vec3();
  const calcRollingFriction_vel2 = new Vec3();
  const calcRollingFriction_vel = new Vec3();

  function calcRollingFriction(body0, body1, frictionPosWorld, frictionDirectionWorld, maxImpulse) {
    let j1 = 0;
    const contactPosWorld = frictionPosWorld; // const rel_pos1 = new Vec3();
    // const rel_pos2 = new Vec3();

    const vel1 = calcRollingFriction_vel1;
    const vel2 = calcRollingFriction_vel2;
    const vel = calcRollingFriction_vel; // contactPosWorld.vsub(body0.position, rel_pos1);
    // contactPosWorld.vsub(body1.position, rel_pos2);

    body0.getVelocityAtWorldPoint(contactPosWorld, vel1);
    body1.getVelocityAtWorldPoint(contactPosWorld, vel2);
    vel1.vsub(vel2, vel);
    const vrel = frictionDirectionWorld.dot(vel);
    const denom0 = computeImpulseDenominator(body0, frictionPosWorld, frictionDirectionWorld);
    const denom1 = computeImpulseDenominator(body1, frictionPosWorld, frictionDirectionWorld);
    const relaxation = 1;
    const jacDiagABInv = relaxation / (denom0 + denom1); // calculate j that moves us to zero relative velocity

    j1 = -vrel * jacDiagABInv;

    if (maxImpulse < j1) {
      j1 = maxImpulse;
    }

    if (j1 < -maxImpulse) {
      j1 = -maxImpulse;
    }

    return j1;
  }

  const computeImpulseDenominator_r0 = new Vec3();
  const computeImpulseDenominator_c0 = new Vec3();
  const computeImpulseDenominator_vec = new Vec3();
  const computeImpulseDenominator_m = new Vec3();

  function computeImpulseDenominator(body, pos, normal) {
    const r0 = computeImpulseDenominator_r0;
    const c0 = computeImpulseDenominator_c0;
    const vec = computeImpulseDenominator_vec;
    const m = computeImpulseDenominator_m;
    pos.vsub(body.position, r0);
    r0.cross(normal, c0);
    body.invInertiaWorld.vmult(c0, m);
    m.cross(r0, vec);
    return body.invMass + normal.dot(vec);
  }

  const resolveSingleBilateral_vel1 = new Vec3();
  const resolveSingleBilateral_vel2 = new Vec3();
  const resolveSingleBilateral_vel = new Vec3(); // bilateral constraint between two dynamic objects

  function resolveSingleBilateral(body1, pos1, body2, pos2, normal) {
    const normalLenSqr = normal.lengthSquared();

    if (normalLenSqr > 1.1) {
      return 0; // no impulse
    } // const rel_pos1 = new Vec3();
    // const rel_pos2 = new Vec3();
    // pos1.vsub(body1.position, rel_pos1);
    // pos2.vsub(body2.position, rel_pos2);


    const vel1 = resolveSingleBilateral_vel1;
    const vel2 = resolveSingleBilateral_vel2;
    const vel = resolveSingleBilateral_vel;
    body1.getVelocityAtWorldPoint(pos1, vel1);
    body2.getVelocityAtWorldPoint(pos2, vel2);
    vel1.vsub(vel2, vel);
    const rel_vel = normal.dot(vel);
    const contactDamping = 0.2;
    const massTerm = 1 / (body1.invMass + body2.invMass);
    const impulse = -contactDamping * rel_vel * massTerm;
    return impulse;
  }

  /**
   * Spherical shape
   * @example
   *     const radius = 1
   *     const sphereShape = new CANNON.Sphere(radius)
   *     const sphereBody = new CANNON.Body({ mass: 1, shape: sphereShape })
   *     world.addBody(sphereBody)
   */
  class Sphere extends Shape {
    /**
     * The radius of the sphere.
     */

    /**
     *
     * @param radius The radius of the sphere, a non-negative number.
     */
    constructor(radius) {
      super({
        type: Shape.types.SPHERE
      });
      this.radius = radius !== undefined ? radius : 1.0;

      if (this.radius < 0) {
        throw new Error('The sphere radius cannot be negative.');
      }

      this.updateBoundingSphereRadius();
    }
    /** calculateLocalInertia */


    calculateLocalInertia(mass, target) {
      if (target === void 0) {
        target = new Vec3();
      }

      const I = 2.0 * mass * this.radius * this.radius / 5.0;
      target.x = I;
      target.y = I;
      target.z = I;
      return target;
    }
    /** volume */


    volume() {
      return 4.0 * Math.PI * Math.pow(this.radius, 3) / 3.0;
    }

    updateBoundingSphereRadius() {
      this.boundingSphereRadius = this.radius;
    }

    calculateWorldAABB(pos, quat, min, max) {
      const r = this.radius;
      const axes = ['x', 'y', 'z'];

      for (let i = 0; i < axes.length; i++) {
        const ax = axes[i];
        min[ax] = pos[ax] - r;
        max[ax] = pos[ax] + r;
      }
    }

  }
  new Vec3();
  new Vec3();
  new Vec3(); // Temp vectors for calculation

  new Vec3(); // Relative velocity

  new Vec3();
  new Vec3();
  new Vec3();
  new Vec3();
  new Vec3();

  /**
   * Cylinder class.
   * @example
   *     const radiusTop = 0.5
   *     const radiusBottom = 0.5
   *     const height = 2
   *     const numSegments = 12
   *     const cylinderShape = new CANNON.Cylinder(radiusTop, radiusBottom, height, numSegments)
   *     const cylinderBody = new CANNON.Body({ mass: 1, shape: cylinderShape })
   *     world.addBody(cylinderBody)
   */

  class Cylinder extends ConvexPolyhedron {
    /** The radius of the top of the Cylinder. */

    /** The radius of the bottom of the Cylinder. */

    /** The height of the Cylinder. */

    /** The number of segments to build the cylinder out of. */

    /**
     * @param radiusTop The radius of the top of the Cylinder.
     * @param radiusBottom The radius of the bottom of the Cylinder.
     * @param height The height of the Cylinder.
     * @param numSegments The number of segments to build the cylinder out of.
     */
    constructor(radiusTop, radiusBottom, height, numSegments) {
      if (radiusTop === void 0) {
        radiusTop = 1;
      }

      if (radiusBottom === void 0) {
        radiusBottom = 1;
      }

      if (height === void 0) {
        height = 1;
      }

      if (numSegments === void 0) {
        numSegments = 8;
      }

      if (radiusTop < 0) {
        throw new Error('The cylinder radiusTop cannot be negative.');
      }

      if (radiusBottom < 0) {
        throw new Error('The cylinder radiusBottom cannot be negative.');
      }

      const N = numSegments;
      const vertices = [];
      const axes = [];
      const faces = [];
      const bottomface = [];
      const topface = [];
      const cos = Math.cos;
      const sin = Math.sin; // First bottom point

      vertices.push(new Vec3(-radiusBottom * sin(0), -height * 0.5, radiusBottom * cos(0)));
      bottomface.push(0); // First top point

      vertices.push(new Vec3(-radiusTop * sin(0), height * 0.5, radiusTop * cos(0)));
      topface.push(1);

      for (let i = 0; i < N; i++) {
        const theta = 2 * Math.PI / N * (i + 1);
        const thetaN = 2 * Math.PI / N * (i + 0.5);

        if (i < N - 1) {
          // Bottom
          vertices.push(new Vec3(-radiusBottom * sin(theta), -height * 0.5, radiusBottom * cos(theta)));
          bottomface.push(2 * i + 2); // Top

          vertices.push(new Vec3(-radiusTop * sin(theta), height * 0.5, radiusTop * cos(theta)));
          topface.push(2 * i + 3); // Face

          faces.push([2 * i, 2 * i + 1, 2 * i + 3, 2 * i + 2]);
        } else {
          faces.push([2 * i, 2 * i + 1, 1, 0]); // Connect
        } // Axis: we can cut off half of them if we have even number of segments


        if (N % 2 === 1 || i < N / 2) {
          axes.push(new Vec3(-sin(thetaN), 0, cos(thetaN)));
        }
      }

      faces.push(bottomface);
      axes.push(new Vec3(0, 1, 0)); // Reorder top face

      const temp = [];

      for (let i = 0; i < topface.length; i++) {
        temp.push(topface[topface.length - i - 1]);
      }

      faces.push(temp);
      super({
        vertices,
        faces,
        axes
      });
      this.type = Shape.types.CYLINDER;
      this.radiusTop = radiusTop;
      this.radiusBottom = radiusBottom;
      this.height = height;
      this.numSegments = numSegments;
    }

  }

  /**
   * Particle shape.
   * @example
   *     const particleShape = new CANNON.Particle()
   *     const particleBody = new CANNON.Body({ mass: 1, shape: particleShape })
   *     world.addBody(particleBody)
   */
  class Particle extends Shape {
    constructor() {
      super({
        type: Shape.types.PARTICLE
      });
    }
    /**
     * calculateLocalInertia
     */


    calculateLocalInertia(mass, target) {
      if (target === void 0) {
        target = new Vec3();
      }

      target.set(0, 0, 0);
      return target;
    }

    volume() {
      return 0;
    }

    updateBoundingSphereRadius() {
      this.boundingSphereRadius = 0;
    }

    calculateWorldAABB(pos, quat, min, max) {
      // Get each axis max
      min.copy(pos);
      max.copy(pos);
    }

  }

  /**
   * A plane, facing in the Z direction. The plane has its surface at z=0 and everything below z=0 is assumed to be solid plane. To make the plane face in some other direction than z, you must put it inside a Body and rotate that body. See the demos.
   * @example
   *     const planeShape = new CANNON.Plane()
   *     const planeBody = new CANNON.Body({ mass: 0, shape:  planeShape })
   *     planeBody.quaternion.setFromEuler(-Math.PI / 2, 0, 0) // make it face up
   *     world.addBody(planeBody)
   */
  class Plane extends Shape {
    /** worldNormal */

    /** worldNormalNeedsUpdate */
    constructor() {
      super({
        type: Shape.types.PLANE
      }); // World oriented normal

      this.worldNormal = new Vec3();
      this.worldNormalNeedsUpdate = true;
      this.boundingSphereRadius = Number.MAX_VALUE;
    }
    /** computeWorldNormal */


    computeWorldNormal(quat) {
      const n = this.worldNormal;
      n.set(0, 0, 1);
      quat.vmult(n, n);
      this.worldNormalNeedsUpdate = false;
    }

    calculateLocalInertia(mass, target) {
      if (target === void 0) {
        target = new Vec3();
      }

      return target;
    }

    volume() {
      return (// The plane is infinite...
        Number.MAX_VALUE
      );
    }

    calculateWorldAABB(pos, quat, min, max) {
      // The plane AABB is infinite, except if the normal is pointing along any axis
      tempNormal.set(0, 0, 1); // Default plane normal is z

      quat.vmult(tempNormal, tempNormal);
      const maxVal = Number.MAX_VALUE;
      min.set(-maxVal, -maxVal, -maxVal);
      max.set(maxVal, maxVal, maxVal);

      if (tempNormal.x === 1) {
        max.x = pos.x;
      } else if (tempNormal.x === -1) {
        min.x = pos.x;
      }

      if (tempNormal.y === 1) {
        max.y = pos.y;
      } else if (tempNormal.y === -1) {
        min.y = pos.y;
      }

      if (tempNormal.z === 1) {
        max.z = pos.z;
      } else if (tempNormal.z === -1) {
        min.z = pos.z;
      }
    }

    updateBoundingSphereRadius() {
      this.boundingSphereRadius = Number.MAX_VALUE;
    }

  }
  const tempNormal = new Vec3();

  /**
   * Heightfield shape class. Height data is given as an array. These data points are spread out evenly with a given distance.
   * @todo Should be possible to use along all axes, not just y
   * @todo should be possible to scale along all axes
   * @todo Refactor elementSize to elementSizeX and elementSizeY
   *
   * @example
   *     // Generate some height data (y-values).
   *     const data = []
   *     for (let i = 0; i < 1000; i++) {
   *         const y = 0.5 * Math.cos(0.2 * i)
   *         data.push(y)
   *     }
   *
   *     // Create the heightfield shape
   *     const heightfieldShape = new CANNON.Heightfield(data, {
   *         elementSize: 1 // Distance between the data points in X and Y directions
   *     })
   *     const heightfieldBody = new CANNON.Body({ shape: heightfieldShape })
   *     world.addBody(heightfieldBody)
   */
  class Heightfield extends Shape {
    /**
     * An array of numbers, or height values, that are spread out along the x axis.
     */

    /**
     * Max value of the data points in the data array.
     */

    /**
     * Minimum value of the data points in the data array.
     */

    /**
     * World spacing between the data points in X and Y direction.
     * @todo elementSizeX and Y
     * @default 1
     */

    /**
     * @default true
     */

    /**
     * @param data An array of numbers, or height values, that are spread out along the x axis.
     */
    constructor(data, options) {
      if (options === void 0) {
        options = {};
      }

      options = Utils.defaults(options, {
        maxValue: null,
        minValue: null,
        elementSize: 1
      });
      super({
        type: Shape.types.HEIGHTFIELD
      });
      this.data = data;
      this.maxValue = options.maxValue;
      this.minValue = options.minValue;
      this.elementSize = options.elementSize;

      if (options.minValue === null) {
        this.updateMinValue();
      }

      if (options.maxValue === null) {
        this.updateMaxValue();
      }

      this.cacheEnabled = true;
      this.pillarConvex = new ConvexPolyhedron();
      this.pillarOffset = new Vec3();
      this.updateBoundingSphereRadius(); // "i_j_isUpper" => { convex: ..., offset: ... }
      // for example:
      // _cachedPillars["0_2_1"]

      this._cachedPillars = {};
    }
    /**
     * Call whenever you change the data array.
     */


    update() {
      this._cachedPillars = {};
    }
    /**
     * Update the `minValue` property
     */


    updateMinValue() {
      const data = this.data;
      let minValue = data[0][0];

      for (let i = 0; i !== data.length; i++) {
        for (let j = 0; j !== data[i].length; j++) {
          const v = data[i][j];

          if (v < minValue) {
            minValue = v;
          }
        }
      }

      this.minValue = minValue;
    }
    /**
     * Update the `maxValue` property
     */


    updateMaxValue() {
      const data = this.data;
      let maxValue = data[0][0];

      for (let i = 0; i !== data.length; i++) {
        for (let j = 0; j !== data[i].length; j++) {
          const v = data[i][j];

          if (v > maxValue) {
            maxValue = v;
          }
        }
      }

      this.maxValue = maxValue;
    }
    /**
     * Set the height value at an index. Don't forget to update maxValue and minValue after you're done.
     */


    setHeightValueAtIndex(xi, yi, value) {
      const data = this.data;
      data[xi][yi] = value; // Invalidate cache

      this.clearCachedConvexTrianglePillar(xi, yi, false);

      if (xi > 0) {
        this.clearCachedConvexTrianglePillar(xi - 1, yi, true);
        this.clearCachedConvexTrianglePillar(xi - 1, yi, false);
      }

      if (yi > 0) {
        this.clearCachedConvexTrianglePillar(xi, yi - 1, true);
        this.clearCachedConvexTrianglePillar(xi, yi - 1, false);
      }

      if (yi > 0 && xi > 0) {
        this.clearCachedConvexTrianglePillar(xi - 1, yi - 1, true);
      }
    }
    /**
     * Get max/min in a rectangle in the matrix data
     * @param result An array to store the results in.
     * @return The result array, if it was passed in. Minimum will be at position 0 and max at 1.
     */


    getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, result) {
      if (result === void 0) {
        result = [];
      }

      // Get max and min of the data
      const data = this.data; // Set first value

      let max = this.minValue;

      for (let i = iMinX; i <= iMaxX; i++) {
        for (let j = iMinY; j <= iMaxY; j++) {
          const height = data[i][j];

          if (height > max) {
            max = height;
          }
        }
      }

      result[0] = this.minValue;
      result[1] = max;
    }
    /**
     * Get the index of a local position on the heightfield. The indexes indicate the rectangles, so if your terrain is made of N x N height data points, you will have rectangle indexes ranging from 0 to N-1.
     * @param result Two-element array
     * @param clamp If the position should be clamped to the heightfield edge.
     */


    getIndexOfPosition(x, y, result, clamp) {
      // Get the index of the data points to test against
      const w = this.elementSize;
      const data = this.data;
      let xi = Math.floor(x / w);
      let yi = Math.floor(y / w);
      result[0] = xi;
      result[1] = yi;

      if (clamp) {
        // Clamp index to edges
        if (xi < 0) {
          xi = 0;
        }

        if (yi < 0) {
          yi = 0;
        }

        if (xi >= data.length - 1) {
          xi = data.length - 1;
        }

        if (yi >= data[0].length - 1) {
          yi = data[0].length - 1;
        }
      } // Bail out if we are out of the terrain


      if (xi < 0 || yi < 0 || xi >= data.length - 1 || yi >= data[0].length - 1) {
        return false;
      }

      return true;
    }

    getTriangleAt(x, y, edgeClamp, a, b, c) {
      const idx = getHeightAt_idx;
      this.getIndexOfPosition(x, y, idx, edgeClamp);
      let xi = idx[0];
      let yi = idx[1];
      const data = this.data;

      if (edgeClamp) {
        xi = Math.min(data.length - 2, Math.max(0, xi));
        yi = Math.min(data[0].length - 2, Math.max(0, yi));
      }

      const elementSize = this.elementSize;
      const lowerDist2 = (x / elementSize - xi) ** 2 + (y / elementSize - yi) ** 2;
      const upperDist2 = (x / elementSize - (xi + 1)) ** 2 + (y / elementSize - (yi + 1)) ** 2;
      const upper = lowerDist2 > upperDist2;
      this.getTriangle(xi, yi, upper, a, b, c);
      return upper;
    }

    getNormalAt(x, y, edgeClamp, result) {
      const a = getNormalAt_a;
      const b = getNormalAt_b;
      const c = getNormalAt_c;
      const e0 = getNormalAt_e0;
      const e1 = getNormalAt_e1;
      this.getTriangleAt(x, y, edgeClamp, a, b, c);
      b.vsub(a, e0);
      c.vsub(a, e1);
      e0.cross(e1, result);
      result.normalize();
    }
    /**
     * Get an AABB of a square in the heightfield
     * @param xi
     * @param yi
     * @param result
     */


    getAabbAtIndex(xi, yi, _ref) {
      let {
        lowerBound,
        upperBound
      } = _ref;
      const data = this.data;
      const elementSize = this.elementSize;
      lowerBound.set(xi * elementSize, yi * elementSize, data[xi][yi]);
      upperBound.set((xi + 1) * elementSize, (yi + 1) * elementSize, data[xi + 1][yi + 1]);
    }
    /**
     * Get the height in the heightfield at a given position
     */


    getHeightAt(x, y, edgeClamp) {
      const data = this.data;
      const a = getHeightAt_a;
      const b = getHeightAt_b;
      const c = getHeightAt_c;
      const idx = getHeightAt_idx;
      this.getIndexOfPosition(x, y, idx, edgeClamp);
      let xi = idx[0];
      let yi = idx[1];

      if (edgeClamp) {
        xi = Math.min(data.length - 2, Math.max(0, xi));
        yi = Math.min(data[0].length - 2, Math.max(0, yi));
      }

      const upper = this.getTriangleAt(x, y, edgeClamp, a, b, c);
      barycentricWeights(x, y, a.x, a.y, b.x, b.y, c.x, c.y, getHeightAt_weights);
      const w = getHeightAt_weights;

      if (upper) {
        // Top triangle verts
        return data[xi + 1][yi + 1] * w.x + data[xi][yi + 1] * w.y + data[xi + 1][yi] * w.z;
      } else {
        // Top triangle verts
        return data[xi][yi] * w.x + data[xi + 1][yi] * w.y + data[xi][yi + 1] * w.z;
      }
    }

    getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle) {
      return `${xi}_${yi}_${getUpperTriangle ? 1 : 0}`;
    }

    getCachedConvexTrianglePillar(xi, yi, getUpperTriangle) {
      return this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];
    }

    setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, convex, offset) {
      this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)] = {
        convex,
        offset
      };
    }

    clearCachedConvexTrianglePillar(xi, yi, getUpperTriangle) {
      delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];
    }
    /**
     * Get a triangle from the heightfield
     */


    getTriangle(xi, yi, upper, a, b, c) {
      const data = this.data;
      const elementSize = this.elementSize;

      if (upper) {
        // Top triangle verts
        a.set((xi + 1) * elementSize, (yi + 1) * elementSize, data[xi + 1][yi + 1]);
        b.set(xi * elementSize, (yi + 1) * elementSize, data[xi][yi + 1]);
        c.set((xi + 1) * elementSize, yi * elementSize, data[xi + 1][yi]);
      } else {
        // Top triangle verts
        a.set(xi * elementSize, yi * elementSize, data[xi][yi]);
        b.set((xi + 1) * elementSize, yi * elementSize, data[xi + 1][yi]);
        c.set(xi * elementSize, (yi + 1) * elementSize, data[xi][yi + 1]);
      }
    }
    /**
     * Get a triangle in the terrain in the form of a triangular convex shape.
     */


    getConvexTrianglePillar(xi, yi, getUpperTriangle) {
      let result = this.pillarConvex;
      let offsetResult = this.pillarOffset;

      if (this.cacheEnabled) {
        const data = this.getCachedConvexTrianglePillar(xi, yi, getUpperTriangle);

        if (data) {
          this.pillarConvex = data.convex;
          this.pillarOffset = data.offset;
          return;
        }

        result = new ConvexPolyhedron();
        offsetResult = new Vec3();
        this.pillarConvex = result;
        this.pillarOffset = offsetResult;
      }

      const data = this.data;
      const elementSize = this.elementSize;
      const faces = result.faces; // Reuse verts if possible

      result.vertices.length = 6;

      for (let i = 0; i < 6; i++) {
        if (!result.vertices[i]) {
          result.vertices[i] = new Vec3();
        }
      } // Reuse faces if possible


      faces.length = 5;

      for (let i = 0; i < 5; i++) {
        if (!faces[i]) {
          faces[i] = [];
        }
      }

      const verts = result.vertices;
      const h = (Math.min(data[xi][yi], data[xi + 1][yi], data[xi][yi + 1], data[xi + 1][yi + 1]) - this.minValue) / 2 + this.minValue;

      if (!getUpperTriangle) {
        // Center of the triangle pillar - all polygons are given relative to this one
        offsetResult.set((xi + 0.25) * elementSize, // sort of center of a triangle
        (yi + 0.25) * elementSize, h // vertical center
        ); // Top triangle verts

        verts[0].set(-0.25 * elementSize, -0.25 * elementSize, data[xi][yi] - h);
        verts[1].set(0.75 * elementSize, -0.25 * elementSize, data[xi + 1][yi] - h);
        verts[2].set(-0.25 * elementSize, 0.75 * elementSize, data[xi][yi + 1] - h); // bottom triangle verts

        verts[3].set(-0.25 * elementSize, -0.25 * elementSize, -Math.abs(h) - 1);
        verts[4].set(0.75 * elementSize, -0.25 * elementSize, -Math.abs(h) - 1);
        verts[5].set(-0.25 * elementSize, 0.75 * elementSize, -Math.abs(h) - 1); // top triangle

        faces[0][0] = 0;
        faces[0][1] = 1;
        faces[0][2] = 2; // bottom triangle

        faces[1][0] = 5;
        faces[1][1] = 4;
        faces[1][2] = 3; // -x facing quad

        faces[2][0] = 0;
        faces[2][1] = 2;
        faces[2][2] = 5;
        faces[2][3] = 3; // -y facing quad

        faces[3][0] = 1;
        faces[3][1] = 0;
        faces[3][2] = 3;
        faces[3][3] = 4; // +xy facing quad

        faces[4][0] = 4;
        faces[4][1] = 5;
        faces[4][2] = 2;
        faces[4][3] = 1;
      } else {
        // Center of the triangle pillar - all polygons are given relative to this one
        offsetResult.set((xi + 0.75) * elementSize, // sort of center of a triangle
        (yi + 0.75) * elementSize, h // vertical center
        ); // Top triangle verts

        verts[0].set(0.25 * elementSize, 0.25 * elementSize, data[xi + 1][yi + 1] - h);
        verts[1].set(-0.75 * elementSize, 0.25 * elementSize, data[xi][yi + 1] - h);
        verts[2].set(0.25 * elementSize, -0.75 * elementSize, data[xi + 1][yi] - h); // bottom triangle verts

        verts[3].set(0.25 * elementSize, 0.25 * elementSize, -Math.abs(h) - 1);
        verts[4].set(-0.75 * elementSize, 0.25 * elementSize, -Math.abs(h) - 1);
        verts[5].set(0.25 * elementSize, -0.75 * elementSize, -Math.abs(h) - 1); // Top triangle

        faces[0][0] = 0;
        faces[0][1] = 1;
        faces[0][2] = 2; // bottom triangle

        faces[1][0] = 5;
        faces[1][1] = 4;
        faces[1][2] = 3; // +x facing quad

        faces[2][0] = 2;
        faces[2][1] = 5;
        faces[2][2] = 3;
        faces[2][3] = 0; // +y facing quad

        faces[3][0] = 3;
        faces[3][1] = 4;
        faces[3][2] = 1;
        faces[3][3] = 0; // -xy facing quad

        faces[4][0] = 1;
        faces[4][1] = 4;
        faces[4][2] = 5;
        faces[4][3] = 2;
      }

      result.computeNormals();
      result.computeEdges();
      result.updateBoundingSphereRadius();
      this.setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, result, offsetResult);
    }

    calculateLocalInertia(mass, target) {
      if (target === void 0) {
        target = new Vec3();
      }

      target.set(0, 0, 0);
      return target;
    }

    volume() {
      return (// The terrain is infinite
        Number.MAX_VALUE
      );
    }

    calculateWorldAABB(pos, quat, min, max) {
      /** @TODO do it properly */
      min.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);
      max.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
    }

    updateBoundingSphereRadius() {
      // Use the bounding box of the min/max values
      const data = this.data;
      const s = this.elementSize;
      this.boundingSphereRadius = new Vec3(data.length * s, data[0].length * s, Math.max(Math.abs(this.maxValue), Math.abs(this.minValue))).length();
    }
    /**
     * Sets the height values from an image. Currently only supported in browser.
     */


    setHeightsFromImage(image, scale) {
      const {
        x,
        z,
        y
      } = scale;
      const canvas = document.createElement('canvas');
      canvas.width = image.width;
      canvas.height = image.height;
      const context = canvas.getContext('2d');
      context.drawImage(image, 0, 0);
      const imageData = context.getImageData(0, 0, image.width, image.height);
      const matrix = this.data;
      matrix.length = 0;
      this.elementSize = Math.abs(x) / imageData.width;

      for (let i = 0; i < imageData.height; i++) {
        const row = [];

        for (let j = 0; j < imageData.width; j++) {
          const a = imageData.data[(i * imageData.height + j) * 4];
          const b = imageData.data[(i * imageData.height + j) * 4 + 1];
          const c = imageData.data[(i * imageData.height + j) * 4 + 2];
          const height = (a + b + c) / 4 / 255 * z;

          if (x < 0) {
            row.push(height);
          } else {
            row.unshift(height);
          }
        }

        if (y < 0) {
          matrix.unshift(row);
        } else {
          matrix.push(row);
        }
      }

      this.updateMaxValue();
      this.updateMinValue();
      this.update();
    }

  }
  const getHeightAt_idx = [];
  const getHeightAt_weights = new Vec3();
  const getHeightAt_a = new Vec3();
  const getHeightAt_b = new Vec3();
  const getHeightAt_c = new Vec3();
  const getNormalAt_a = new Vec3();
  const getNormalAt_b = new Vec3();
  const getNormalAt_c = new Vec3();
  const getNormalAt_e0 = new Vec3();
  const getNormalAt_e1 = new Vec3(); // from https://en.wikipedia.org/wiki/Barycentric_coordinate_system

  function barycentricWeights(x, y, ax, ay, bx, by, cx, cy, result) {
    result.x = ((by - cy) * (x - cx) + (cx - bx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));
    result.y = ((cy - ay) * (x - cx) + (ax - cx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));
    result.z = 1 - result.x - result.y;
  }

  /**
   * OctreeNode
   */
  class OctreeNode {
    /** The root node */

    /** Boundary of this node */

    /** Contained data at the current node level */

    /** Children to this node */
    constructor(options) {
      if (options === void 0) {
        options = {};
      }

      this.root = options.root || null;
      this.aabb = options.aabb ? options.aabb.clone() : new AABB();
      this.data = [];
      this.children = [];
    }
    /**
     * reset
     */


    reset() {
      this.children.length = this.data.length = 0;
    }
    /**
     * Insert data into this node
     * @return True if successful, otherwise false
     */


    insert(aabb, elementData, level) {
      if (level === void 0) {
        level = 0;
      }

      const nodeData = this.data; // Ignore objects that do not belong in this node

      if (!this.aabb.contains(aabb)) {
        return false; // object cannot be added
      }

      const children = this.children;
      const maxDepth = this.maxDepth || this.root.maxDepth;

      if (level < maxDepth) {
        // Subdivide if there are no children yet
        let subdivided = false;

        if (!children.length) {
          this.subdivide();
          subdivided = true;
        } // add to whichever node will accept it


        for (let i = 0; i !== 8; i++) {
          if (children[i].insert(aabb, elementData, level + 1)) {
            return true;
          }
        }

        if (subdivided) {
          // No children accepted! Might as well just remove em since they contain none
          children.length = 0;
        }
      } // Too deep, or children didnt want it. add it in current node


      nodeData.push(elementData);
      return true;
    }
    /**
     * Create 8 equally sized children nodes and put them in the `children` array.
     */


    subdivide() {
      const aabb = this.aabb;
      const l = aabb.lowerBound;
      const u = aabb.upperBound;
      const children = this.children;
      children.push(new OctreeNode({
        aabb: new AABB({
          lowerBound: new Vec3(0, 0, 0)
        })
      }), new OctreeNode({
        aabb: new AABB({
          lowerBound: new Vec3(1, 0, 0)
        })
      }), new OctreeNode({
        aabb: new AABB({
          lowerBound: new Vec3(1, 1, 0)
        })
      }), new OctreeNode({
        aabb: new AABB({
          lowerBound: new Vec3(1, 1, 1)
        })
      }), new OctreeNode({
        aabb: new AABB({
          lowerBound: new Vec3(0, 1, 1)
        })
      }), new OctreeNode({
        aabb: new AABB({
          lowerBound: new Vec3(0, 0, 1)
        })
      }), new OctreeNode({
        aabb: new AABB({
          lowerBound: new Vec3(1, 0, 1)
        })
      }), new OctreeNode({
        aabb: new AABB({
          lowerBound: new Vec3(0, 1, 0)
        })
      }));
      u.vsub(l, halfDiagonal);
      halfDiagonal.scale(0.5, halfDiagonal);
      const root = this.root || this;

      for (let i = 0; i !== 8; i++) {
        const child = children[i]; // Set current node as root

        child.root = root; // Compute bounds

        const lowerBound = child.aabb.lowerBound;
        lowerBound.x *= halfDiagonal.x;
        lowerBound.y *= halfDiagonal.y;
        lowerBound.z *= halfDiagonal.z;
        lowerBound.vadd(l, lowerBound); // Upper bound is always lower bound + halfDiagonal

        lowerBound.vadd(halfDiagonal, child.aabb.upperBound);
      }
    }
    /**
     * Get all data, potentially within an AABB
     * @return The "result" object
     */


    aabbQuery(aabb, result) {
      this.data; // abort if the range does not intersect this node
      // if (!this.aabb.overlaps(aabb)){
      //     return result;
      // }
      // Add objects at this level
      // Array.prototype.push.apply(result, nodeData);
      // Add child data
      // @todo unwrap recursion into a queue / loop, that's faster in JS

      this.children; // for (let i = 0, N = this.children.length; i !== N; i++) {
      //     children[i].aabbQuery(aabb, result);
      // }

      const queue = [this];

      while (queue.length) {
        const node = queue.pop();

        if (node.aabb.overlaps(aabb)) {
          Array.prototype.push.apply(result, node.data);
        }

        Array.prototype.push.apply(queue, node.children);
      }

      return result;
    }
    /**
     * Get all data, potentially intersected by a ray.
     * @return The "result" object
     */


    rayQuery(ray, treeTransform, result) {
      // Use aabb query for now.

      /** @todo implement real ray query which needs less lookups */
      ray.getAABB(tmpAABB);
      tmpAABB.toLocalFrame(treeTransform, tmpAABB);
      this.aabbQuery(tmpAABB, result);
      return result;
    }
    /**
     * removeEmptyNodes
     */


    removeEmptyNodes() {
      for (let i = this.children.length - 1; i >= 0; i--) {
        this.children[i].removeEmptyNodes();

        if (!this.children[i].children.length && !this.children[i].data.length) {
          this.children.splice(i, 1);
        }
      }
    }

  }
  /**
   * Octree
   */


  class Octree extends OctreeNode {
    /**
     * Maximum subdivision depth
     * @default 8
     */

    /**
     * @param aabb The total AABB of the tree
     */
    constructor(aabb, options) {
      if (options === void 0) {
        options = {};
      }

      super({
        root: null,
        aabb
      });
      this.maxDepth = typeof options.maxDepth !== 'undefined' ? options.maxDepth : 8;
    }

  }
  const halfDiagonal = new Vec3();
  const tmpAABB = new AABB();

  /**
   * Trimesh.
   * @example
   *     // How to make a mesh with a single triangle
   *     const vertices = [
   *         0, 0, 0, // vertex 0
   *         1, 0, 0, // vertex 1
   *         0, 1, 0  // vertex 2
   *     ]
   *     const indices = [
   *         0, 1, 2  // triangle 0
   *     ]
   *     const trimeshShape = new CANNON.Trimesh(vertices, indices)
   */
  class Trimesh extends Shape {
    /**
     * vertices
     */

    /**
     * Array of integers, indicating which vertices each triangle consists of. The length of this array is thus 3 times the number of triangles.
     */

    /**
     * The normals data.
     */

    /**
     * The local AABB of the mesh.
     */

    /**
     * References to vertex pairs, making up all unique edges in the trimesh.
     */

    /**
     * Local scaling of the mesh. Use .setScale() to set it.
     */

    /**
     * The indexed triangles. Use .updateTree() to update it.
     */
    constructor(vertices, indices) {
      super({
        type: Shape.types.TRIMESH
      });
      this.vertices = new Float32Array(vertices);
      this.indices = new Int16Array(indices);
      this.normals = new Float32Array(indices.length);
      this.aabb = new AABB();
      this.edges = null;
      this.scale = new Vec3(1, 1, 1);
      this.tree = new Octree();
      this.updateEdges();
      this.updateNormals();
      this.updateAABB();
      this.updateBoundingSphereRadius();
      this.updateTree();
    }
    /**
     * updateTree
     */


    updateTree() {
      const tree = this.tree;
      tree.reset();
      tree.aabb.copy(this.aabb);
      const scale = this.scale; // The local mesh AABB is scaled, but the octree AABB should be unscaled

      tree.aabb.lowerBound.x *= 1 / scale.x;
      tree.aabb.lowerBound.y *= 1 / scale.y;
      tree.aabb.lowerBound.z *= 1 / scale.z;
      tree.aabb.upperBound.x *= 1 / scale.x;
      tree.aabb.upperBound.y *= 1 / scale.y;
      tree.aabb.upperBound.z *= 1 / scale.z; // Insert all triangles

      const triangleAABB = new AABB();
      const a = new Vec3();
      const b = new Vec3();
      const c = new Vec3();
      const points = [a, b, c];

      for (let i = 0; i < this.indices.length / 3; i++) {
        //this.getTriangleVertices(i, a, b, c);
        // Get unscaled triangle verts
        const i3 = i * 3;

        this._getUnscaledVertex(this.indices[i3], a);

        this._getUnscaledVertex(this.indices[i3 + 1], b);

        this._getUnscaledVertex(this.indices[i3 + 2], c);

        triangleAABB.setFromPoints(points);
        tree.insert(triangleAABB, i);
      }

      tree.removeEmptyNodes();
    }
    /**
     * Get triangles in a local AABB from the trimesh.
     * @param result An array of integers, referencing the queried triangles.
     */


    getTrianglesInAABB(aabb, result) {
      unscaledAABB.copy(aabb); // Scale it to local

      const scale = this.scale;
      const isx = scale.x;
      const isy = scale.y;
      const isz = scale.z;
      const l = unscaledAABB.lowerBound;
      const u = unscaledAABB.upperBound;
      l.x /= isx;
      l.y /= isy;
      l.z /= isz;
      u.x /= isx;
      u.y /= isy;
      u.z /= isz;
      return this.tree.aabbQuery(unscaledAABB, result);
    }
    /**
     * setScale
     */


    setScale(scale) {
      const wasUniform = this.scale.x === this.scale.y && this.scale.y === this.scale.z;
      const isUniform = scale.x === scale.y && scale.y === scale.z;

      if (!(wasUniform && isUniform)) {
        // Non-uniform scaling. Need to update normals.
        this.updateNormals();
      }

      this.scale.copy(scale);
      this.updateAABB();
      this.updateBoundingSphereRadius();
    }
    /**
     * Compute the normals of the faces. Will save in the `.normals` array.
     */


    updateNormals() {
      const n = computeNormals_n; // Generate normals

      const normals = this.normals;

      for (let i = 0; i < this.indices.length / 3; i++) {
        const i3 = i * 3;
        const a = this.indices[i3];
        const b = this.indices[i3 + 1];
        const c = this.indices[i3 + 2];
        this.getVertex(a, va);
        this.getVertex(b, vb);
        this.getVertex(c, vc);
        Trimesh.computeNormal(vb, va, vc, n);
        normals[i3] = n.x;
        normals[i3 + 1] = n.y;
        normals[i3 + 2] = n.z;
      }
    }
    /**
     * Update the `.edges` property
     */


    updateEdges() {
      const edges = {};

      const add = (a, b) => {
        const key = a < b ? `${a}_${b}` : `${b}_${a}`;
        edges[key] = true;
      };

      for (let i = 0; i < this.indices.length / 3; i++) {
        const i3 = i * 3;
        const a = this.indices[i3];
        const b = this.indices[i3 + 1];
        const c = this.indices[i3 + 2];
        add(a, b);
        add(b, c);
        add(c, a);
      }

      const keys = Object.keys(edges);
      this.edges = new Int16Array(keys.length * 2);

      for (let i = 0; i < keys.length; i++) {
        const indices = keys[i].split('_');
        this.edges[2 * i] = parseInt(indices[0], 10);
        this.edges[2 * i + 1] = parseInt(indices[1], 10);
      }
    }
    /**
     * Get an edge vertex
     * @param firstOrSecond 0 or 1, depending on which one of the vertices you need.
     * @param vertexStore Where to store the result
     */


    getEdgeVertex(edgeIndex, firstOrSecond, vertexStore) {
      const vertexIndex = this.edges[edgeIndex * 2 + (firstOrSecond ? 1 : 0)];
      this.getVertex(vertexIndex, vertexStore);
    }
    /**
     * Get a vector along an edge.
     */


    getEdgeVector(edgeIndex, vectorStore) {
      const va = getEdgeVector_va;
      const vb = getEdgeVector_vb;
      this.getEdgeVertex(edgeIndex, 0, va);
      this.getEdgeVertex(edgeIndex, 1, vb);
      vb.vsub(va, vectorStore);
    }
    /**
     * Get face normal given 3 vertices
     */


    static computeNormal(va, vb, vc, target) {
      vb.vsub(va, ab);
      vc.vsub(vb, cb);
      cb.cross(ab, target);

      if (!target.isZero()) {
        target.normalize();
      }
    }
    /**
     * Get vertex i.
     * @return The "out" vector object
     */


    getVertex(i, out) {
      const scale = this.scale;

      this._getUnscaledVertex(i, out);

      out.x *= scale.x;
      out.y *= scale.y;
      out.z *= scale.z;
      return out;
    }
    /**
     * Get raw vertex i
     * @return The "out" vector object
     */


    _getUnscaledVertex(i, out) {
      const i3 = i * 3;
      const vertices = this.vertices;
      return out.set(vertices[i3], vertices[i3 + 1], vertices[i3 + 2]);
    }
    /**
     * Get a vertex from the trimesh,transformed by the given position and quaternion.
     * @return The "out" vector object
     */


    getWorldVertex(i, pos, quat, out) {
      this.getVertex(i, out);
      Transform.pointToWorldFrame(pos, quat, out, out);
      return out;
    }
    /**
     * Get the three vertices for triangle i.
     */


    getTriangleVertices(i, a, b, c) {
      const i3 = i * 3;
      this.getVertex(this.indices[i3], a);
      this.getVertex(this.indices[i3 + 1], b);
      this.getVertex(this.indices[i3 + 2], c);
    }
    /**
     * Compute the normal of triangle i.
     * @return The "target" vector object
     */


    getNormal(i, target) {
      const i3 = i * 3;
      return target.set(this.normals[i3], this.normals[i3 + 1], this.normals[i3 + 2]);
    }
    /**
     * @return The "target" vector object
     */


    calculateLocalInertia(mass, target) {
      // Approximate with box inertia
      // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it
      this.computeLocalAABB(cli_aabb);
      const x = cli_aabb.upperBound.x - cli_aabb.lowerBound.x;
      const y = cli_aabb.upperBound.y - cli_aabb.lowerBound.y;
      const z = cli_aabb.upperBound.z - cli_aabb.lowerBound.z;
      return target.set(1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * z * 2 * z), 1.0 / 12.0 * mass * (2 * x * 2 * x + 2 * z * 2 * z), 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * x * 2 * x));
    }
    /**
     * Compute the local AABB for the trimesh
     */


    computeLocalAABB(aabb) {
      const l = aabb.lowerBound;
      const u = aabb.upperBound;
      const n = this.vertices.length;
      this.vertices;
      const v = computeLocalAABB_worldVert;
      this.getVertex(0, v);
      l.copy(v);
      u.copy(v);

      for (let i = 0; i !== n; i++) {
        this.getVertex(i, v);

        if (v.x < l.x) {
          l.x = v.x;
        } else if (v.x > u.x) {
          u.x = v.x;
        }

        if (v.y < l.y) {
          l.y = v.y;
        } else if (v.y > u.y) {
          u.y = v.y;
        }

        if (v.z < l.z) {
          l.z = v.z;
        } else if (v.z > u.z) {
          u.z = v.z;
        }
      }
    }
    /**
     * Update the `.aabb` property
     */


    updateAABB() {
      this.computeLocalAABB(this.aabb);
    }
    /**
     * Will update the `.boundingSphereRadius` property
     */


    updateBoundingSphereRadius() {
      // Assume points are distributed with local (0,0,0) as center
      let max2 = 0;
      const vertices = this.vertices;
      const v = new Vec3();

      for (let i = 0, N = vertices.length / 3; i !== N; i++) {
        this.getVertex(i, v);
        const norm2 = v.lengthSquared();

        if (norm2 > max2) {
          max2 = norm2;
        }
      }

      this.boundingSphereRadius = Math.sqrt(max2);
    }
    /**
     * calculateWorldAABB
     */


    calculateWorldAABB(pos, quat, min, max) {
      /*
          const n = this.vertices.length / 3,
              verts = this.vertices;
          const minx,miny,minz,maxx,maxy,maxz;
           const v = tempWorldVertex;
          for(let i=0; i<n; i++){
              this.getVertex(i, v);
              quat.vmult(v, v);
              pos.vadd(v, v);
              if (v.x < minx || minx===undefined){
                  minx = v.x;
              } else if(v.x > maxx || maxx===undefined){
                  maxx = v.x;
              }
               if (v.y < miny || miny===undefined){
                  miny = v.y;
              } else if(v.y > maxy || maxy===undefined){
                  maxy = v.y;
              }
               if (v.z < minz || minz===undefined){
                  minz = v.z;
              } else if(v.z > maxz || maxz===undefined){
                  maxz = v.z;
              }
          }
          min.set(minx,miny,minz);
          max.set(maxx,maxy,maxz);
          */
      // Faster approximation using local AABB
      const frame = calculateWorldAABB_frame;
      const result = calculateWorldAABB_aabb;
      frame.position = pos;
      frame.quaternion = quat;
      this.aabb.toWorldFrame(frame, result);
      min.copy(result.lowerBound);
      max.copy(result.upperBound);
    }
    /**
     * Get approximate volume
     */


    volume() {
      return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;
    }
    /**
     * Create a Trimesh instance, shaped as a torus.
     */


    static createTorus(radius, tube, radialSegments, tubularSegments, arc) {
      if (radius === void 0) {
        radius = 1;
      }

      if (tube === void 0) {
        tube = 0.5;
      }

      if (radialSegments === void 0) {
        radialSegments = 8;
      }

      if (tubularSegments === void 0) {
        tubularSegments = 6;
      }

      if (arc === void 0) {
        arc = Math.PI * 2;
      }

      const vertices = [];
      const indices = [];

      for (let j = 0; j <= radialSegments; j++) {
        for (let i = 0; i <= tubularSegments; i++) {
          const u = i / tubularSegments * arc;
          const v = j / radialSegments * Math.PI * 2;
          const x = (radius + tube * Math.cos(v)) * Math.cos(u);
          const y = (radius + tube * Math.cos(v)) * Math.sin(u);
          const z = tube * Math.sin(v);
          vertices.push(x, y, z);
        }
      }

      for (let j = 1; j <= radialSegments; j++) {
        for (let i = 1; i <= tubularSegments; i++) {
          const a = (tubularSegments + 1) * j + i - 1;
          const b = (tubularSegments + 1) * (j - 1) + i - 1;
          const c = (tubularSegments + 1) * (j - 1) + i;
          const d = (tubularSegments + 1) * j + i;
          indices.push(a, b, d);
          indices.push(b, c, d);
        }
      }

      return new Trimesh(vertices, indices);
    }

  }
  const computeNormals_n = new Vec3();
  const unscaledAABB = new AABB();
  const getEdgeVector_va = new Vec3();
  const getEdgeVector_vb = new Vec3();
  const cb = new Vec3();
  const ab = new Vec3();
  const va = new Vec3();
  const vb = new Vec3();
  const vc = new Vec3();
  const cli_aabb = new AABB();
  const computeLocalAABB_worldVert = new Vec3();
  const calculateWorldAABB_frame = new Transform();
  const calculateWorldAABB_aabb = new AABB();

  /**
   * Constraint equation solver base class.
   */
  class Solver {
    /**
     * All equations to be solved
     */

    /**
     * @todo remove useless constructor
     */
    constructor() {
      this.equations = [];
    }
    /**
     * Should be implemented in subclasses!
     * @todo use abstract
     * @return number of iterations performed
     */


    solve(dt, world) {
      return (// Should return the number of iterations done!
        0
      );
    }
    /**
     * Add an equation
     */


    addEquation(eq) {
      if (eq.enabled && !eq.bi.isTrigger && !eq.bj.isTrigger) {
        this.equations.push(eq);
      }
    }
    /**
     * Remove an equation
     */


    removeEquation(eq) {
      const eqs = this.equations;
      const i = eqs.indexOf(eq);

      if (i !== -1) {
        eqs.splice(i, 1);
      }
    }
    /**
     * Add all equations
     */


    removeAllEquations() {
      this.equations.length = 0;
    }

  }

  /**
   * Constraint equation Gauss-Seidel solver.
   * @todo The spook parameters should be specified for each constraint, not globally.
   * @see https://www8.cs.umu.se/kurser/5DV058/VT09/lectures/spooknotes.pdf
   */
  class GSSolver extends Solver {
    /**
     * The number of solver iterations determines quality of the constraints in the world.
     * The more iterations, the more correct simulation. More iterations need more computations though. If you have a large gravity force in your world, you will need more iterations.
     */

    /**
     * When tolerance is reached, the system is assumed to be converged.
     */

    /**
     * @todo remove useless constructor
     */
    constructor() {
      super();
      this.iterations = 10;
      this.tolerance = 1e-7;
    }
    /**
     * Solve
     * @return number of iterations performed
     */


    solve(dt, world) {
      let iter = 0;
      const maxIter = this.iterations;
      const tolSquared = this.tolerance * this.tolerance;
      const equations = this.equations;
      const Neq = equations.length;
      const bodies = world.bodies;
      const Nbodies = bodies.length;
      const h = dt;
      let B;
      let invC;
      let deltalambda;
      let deltalambdaTot;
      let GWlambda;
      let lambdaj; // Update solve mass

      if (Neq !== 0) {
        for (let i = 0; i !== Nbodies; i++) {
          bodies[i].updateSolveMassProperties();
        }
      } // Things that do not change during iteration can be computed once


      const invCs = GSSolver_solve_invCs;
      const Bs = GSSolver_solve_Bs;
      const lambda = GSSolver_solve_lambda;
      invCs.length = Neq;
      Bs.length = Neq;
      lambda.length = Neq;

      for (let i = 0; i !== Neq; i++) {
        const c = equations[i];
        lambda[i] = 0.0;
        Bs[i] = c.computeB(h);
        invCs[i] = 1.0 / c.computeC();
      }

      if (Neq !== 0) {
        // Reset vlambda
        for (let i = 0; i !== Nbodies; i++) {
          const b = bodies[i];
          const vlambda = b.vlambda;
          const wlambda = b.wlambda;
          vlambda.set(0, 0, 0);
          wlambda.set(0, 0, 0);
        } // Iterate over equations


        for (iter = 0; iter !== maxIter; iter++) {
          // Accumulate the total error for each iteration.
          deltalambdaTot = 0.0;

          for (let j = 0; j !== Neq; j++) {
            const c = equations[j]; // Compute iteration

            B = Bs[j];
            invC = invCs[j];
            lambdaj = lambda[j];
            GWlambda = c.computeGWlambda();
            deltalambda = invC * (B - GWlambda - c.eps * lambdaj); // Clamp if we are not within the min/max interval

            if (lambdaj + deltalambda < c.minForce) {
              deltalambda = c.minForce - lambdaj;
            } else if (lambdaj + deltalambda > c.maxForce) {
              deltalambda = c.maxForce - lambdaj;
            }

            lambda[j] += deltalambda;
            deltalambdaTot += deltalambda > 0.0 ? deltalambda : -deltalambda; // abs(deltalambda)

            c.addToWlambda(deltalambda);
          } // If the total error is small enough - stop iterate


          if (deltalambdaTot * deltalambdaTot < tolSquared) {
            break;
          }
        } // Add result to velocity


        for (let i = 0; i !== Nbodies; i++) {
          const b = bodies[i];
          const v = b.velocity;
          const w = b.angularVelocity;
          b.vlambda.vmul(b.linearFactor, b.vlambda);
          v.vadd(b.vlambda, v);
          b.wlambda.vmul(b.angularFactor, b.wlambda);
          w.vadd(b.wlambda, w);
        } // Set the `.multiplier` property of each equation


        let l = equations.length;
        const invDt = 1 / h;

        while (l--) {
          equations[l].multiplier = lambda[l] * invDt;
        }
      }

      return iter;
    }

  } // Just temporary number holders that we want to reuse each iteration.

  const GSSolver_solve_lambda = [];
  const GSSolver_solve_invCs = [];
  const GSSolver_solve_Bs = [];

  /**
   * Splits the equations into islands and solves them independently. Can improve performance.
   */
  class SplitSolver extends Solver {
    /**
     * The number of solver iterations determines quality of the constraints in the world. The more iterations, the more correct simulation. More iterations need more computations though. If you have a large gravity force in your world, you will need more iterations.
     */

    /**
     * When tolerance is reached, the system is assumed to be converged.
     */

    /** subsolver */
    constructor(subsolver) {
      super();
      this.iterations = 10;
      this.tolerance = 1e-7;
      this.subsolver = subsolver;
      this.nodes = [];
      this.nodePool = []; // Create needed nodes, reuse if possible

      while (this.nodePool.length < 128) {
        this.nodePool.push(this.createNode());
      }
    }
    /**
     * createNode
     */


    createNode() {
      return {
        body: null,
        children: [],
        eqs: [],
        visited: false
      };
    }
    /**
     * Solve the subsystems
     * @return number of iterations performed
     */


    solve(dt, world) {
      const nodes = SplitSolver_solve_nodes;
      const nodePool = this.nodePool;
      const bodies = world.bodies;
      const equations = this.equations;
      const Neq = equations.length;
      const Nbodies = bodies.length;
      const subsolver = this.subsolver; // Create needed nodes, reuse if possible

      while (nodePool.length < Nbodies) {
        nodePool.push(this.createNode());
      }

      nodes.length = Nbodies;

      for (let i = 0; i < Nbodies; i++) {
        nodes[i] = nodePool[i];
      } // Reset node values


      for (let i = 0; i !== Nbodies; i++) {
        const node = nodes[i];
        node.body = bodies[i];
        node.children.length = 0;
        node.eqs.length = 0;
        node.visited = false;
      }

      for (let k = 0; k !== Neq; k++) {
        const eq = equations[k];
        const i = bodies.indexOf(eq.bi);
        const j = bodies.indexOf(eq.bj);
        const ni = nodes[i];
        const nj = nodes[j];
        ni.children.push(nj);
        ni.eqs.push(eq);
        nj.children.push(ni);
        nj.eqs.push(eq);
      }

      let child;
      let n = 0;
      let eqs = SplitSolver_solve_eqs;
      subsolver.tolerance = this.tolerance;
      subsolver.iterations = this.iterations;
      const dummyWorld = SplitSolver_solve_dummyWorld;

      while (child = getUnvisitedNode(nodes)) {
        eqs.length = 0;
        dummyWorld.bodies.length = 0;
        bfs(child, visitFunc, dummyWorld.bodies, eqs);
        const Neqs = eqs.length;
        eqs = eqs.sort(sortById);

        for (let i = 0; i !== Neqs; i++) {
          subsolver.addEquation(eqs[i]);
        }

        subsolver.solve(dt, dummyWorld);
        subsolver.removeAllEquations();
        n++;
      }

      return n;
    }

  } // Returns the number of subsystems

  const SplitSolver_solve_nodes = []; // All allocated node objects

  const SplitSolver_solve_eqs = []; // Temp array

  const SplitSolver_solve_dummyWorld = {
    bodies: []
  }; // Temp object

  const STATIC = Body.STATIC;

  function getUnvisitedNode(nodes) {
    const Nnodes = nodes.length;

    for (let i = 0; i !== Nnodes; i++) {
      const node = nodes[i];

      if (!node.visited && !(node.body.type & STATIC)) {
        return node;
      }
    }

    return false;
  }

  const queue = [];

  function bfs(root, visitFunc, bds, eqs) {
    queue.push(root);
    root.visited = true;
    visitFunc(root, bds, eqs);

    while (queue.length) {
      const node = queue.pop(); // Loop over unvisited child nodes

      let child;

      while (child = getUnvisitedNode(node.children)) {
        child.visited = true;
        visitFunc(child, bds, eqs);
        queue.push(child);
      }
    }
  }

  function visitFunc(node, bds, eqs) {
    bds.push(node.body);
    const Neqs = node.eqs.length;

    for (let i = 0; i !== Neqs; i++) {
      const eq = node.eqs[i];

      if (!eqs.includes(eq)) {
        eqs.push(eq);
      }
    }
  }

  function sortById(a, b) {
    return b.id - a.id;
  }

  /**
   * For pooling objects that can be reused.
   */
  class Pool {
    constructor() {
      this.objects = [];
      this.type = Object;
    }

    /**
     * Release an object after use
     */
    release() {
      const Nargs = arguments.length;

      for (let i = 0; i !== Nargs; i++) {
        this.objects.push(i < 0 || arguments.length <= i ? undefined : arguments[i]);
      }

      return this;
    }
    /**
     * Get an object
     */


    get() {
      if (this.objects.length === 0) {
        return this.constructObject();
      } else {
        return this.objects.pop();
      }
    }
    /**
     * Construct an object. Should be implemented in each subclass.
     */


    constructObject() {
      throw new Error('constructObject() not implemented in this Pool subclass yet!');
    }
    /**
     * @return Self, for chaining
     */


    resize(size) {
      const objects = this.objects;

      while (objects.length > size) {
        objects.pop();
      }

      while (objects.length < size) {
        objects.push(this.constructObject());
      }

      return this;
    }

  }

  /**
   * Vec3Pool
   */

  class Vec3Pool extends Pool {
    constructor() {
      super(...arguments);
      this.type = Vec3;
    }

    /**
     * Construct a vector
     */
    constructObject() {
      return new Vec3();
    }

  }

  // Naming rule: based of the order in SHAPE_TYPES,
  // the first part of the method is formed by the
  // shape type that comes before, in the second part
  // there is the shape type that comes after in the SHAPE_TYPES list
  const COLLISION_TYPES = {
    sphereSphere: Shape.types.SPHERE,
    spherePlane: Shape.types.SPHERE | Shape.types.PLANE,
    boxBox: Shape.types.BOX | Shape.types.BOX,
    sphereBox: Shape.types.SPHERE | Shape.types.BOX,
    planeBox: Shape.types.PLANE | Shape.types.BOX,
    convexConvex: Shape.types.CONVEXPOLYHEDRON,
    sphereConvex: Shape.types.SPHERE | Shape.types.CONVEXPOLYHEDRON,
    planeConvex: Shape.types.PLANE | Shape.types.CONVEXPOLYHEDRON,
    boxConvex: Shape.types.BOX | Shape.types.CONVEXPOLYHEDRON,
    sphereHeightfield: Shape.types.SPHERE | Shape.types.HEIGHTFIELD,
    boxHeightfield: Shape.types.BOX | Shape.types.HEIGHTFIELD,
    convexHeightfield: Shape.types.CONVEXPOLYHEDRON | Shape.types.HEIGHTFIELD,
    sphereParticle: Shape.types.PARTICLE | Shape.types.SPHERE,
    planeParticle: Shape.types.PLANE | Shape.types.PARTICLE,
    boxParticle: Shape.types.BOX | Shape.types.PARTICLE,
    convexParticle: Shape.types.PARTICLE | Shape.types.CONVEXPOLYHEDRON,
    cylinderCylinder: Shape.types.CYLINDER,
    sphereCylinder: Shape.types.SPHERE | Shape.types.CYLINDER,
    planeCylinder: Shape.types.PLANE | Shape.types.CYLINDER,
    boxCylinder: Shape.types.BOX | Shape.types.CYLINDER,
    convexCylinder: Shape.types.CONVEXPOLYHEDRON | Shape.types.CYLINDER,
    heightfieldCylinder: Shape.types.HEIGHTFIELD | Shape.types.CYLINDER,
    particleCylinder: Shape.types.PARTICLE | Shape.types.CYLINDER,
    sphereTrimesh: Shape.types.SPHERE | Shape.types.TRIMESH,
    planeTrimesh: Shape.types.PLANE | Shape.types.TRIMESH
  };

  /**
   * Helper class for the World. Generates ContactEquations.
   * @todo Sphere-ConvexPolyhedron contacts
   * @todo Contact reduction
   * @todo should move methods to prototype
   */
  class Narrowphase {
    /**
     * Internal storage of pooled contact points.
     */

    /**
     * Pooled vectors.
     */
    get [COLLISION_TYPES.sphereSphere]() {
      return this.sphereSphere;
    }

    get [COLLISION_TYPES.spherePlane]() {
      return this.spherePlane;
    }

    get [COLLISION_TYPES.boxBox]() {
      return this.boxBox;
    }

    get [COLLISION_TYPES.sphereBox]() {
      return this.sphereBox;
    }

    get [COLLISION_TYPES.planeBox]() {
      return this.planeBox;
    }

    get [COLLISION_TYPES.convexConvex]() {
      return this.convexConvex;
    }

    get [COLLISION_TYPES.sphereConvex]() {
      return this.sphereConvex;
    }

    get [COLLISION_TYPES.planeConvex]() {
      return this.planeConvex;
    }

    get [COLLISION_TYPES.boxConvex]() {
      return this.boxConvex;
    }

    get [COLLISION_TYPES.sphereHeightfield]() {
      return this.sphereHeightfield;
    }

    get [COLLISION_TYPES.boxHeightfield]() {
      return this.boxHeightfield;
    }

    get [COLLISION_TYPES.convexHeightfield]() {
      return this.convexHeightfield;
    }

    get [COLLISION_TYPES.sphereParticle]() {
      return this.sphereParticle;
    }

    get [COLLISION_TYPES.planeParticle]() {
      return this.planeParticle;
    }

    get [COLLISION_TYPES.boxParticle]() {
      return this.boxParticle;
    }

    get [COLLISION_TYPES.convexParticle]() {
      return this.convexParticle;
    }

    get [COLLISION_TYPES.cylinderCylinder]() {
      return this.convexConvex;
    }

    get [COLLISION_TYPES.sphereCylinder]() {
      return this.sphereConvex;
    }

    get [COLLISION_TYPES.planeCylinder]() {
      return this.planeConvex;
    }

    get [COLLISION_TYPES.boxCylinder]() {
      return this.boxConvex;
    }

    get [COLLISION_TYPES.convexCylinder]() {
      return this.convexConvex;
    }

    get [COLLISION_TYPES.heightfieldCylinder]() {
      return this.heightfieldCylinder;
    }

    get [COLLISION_TYPES.particleCylinder]() {
      return this.particleCylinder;
    }

    get [COLLISION_TYPES.sphereTrimesh]() {
      return this.sphereTrimesh;
    }

    get [COLLISION_TYPES.planeTrimesh]() {
      return this.planeTrimesh;
    } // get [COLLISION_TYPES.convexTrimesh]() {
    //   return this.convexTrimesh
    // }


    constructor(world) {
      this.contactPointPool = [];
      this.frictionEquationPool = [];
      this.result = [];
      this.frictionResult = [];
      this.v3pool = new Vec3Pool();
      this.world = world;
      this.currentContactMaterial = world.defaultContactMaterial;
      this.enableFrictionReduction = false;
    }
    /**
     * Make a contact object, by using the internal pool or creating a new one.
     */


    createContactEquation(bi, bj, si, sj, overrideShapeA, overrideShapeB) {
      let c;

      if (this.contactPointPool.length) {
        c = this.contactPointPool.pop();
        c.bi = bi;
        c.bj = bj;
      } else {
        c = new ContactEquation(bi, bj);
      }

      c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;
      const cm = this.currentContactMaterial;
      c.restitution = cm.restitution;
      c.setSpookParams(cm.contactEquationStiffness, cm.contactEquationRelaxation, this.world.dt);
      const matA = si.material || bi.material;
      const matB = sj.material || bj.material;

      if (matA && matB && matA.restitution >= 0 && matB.restitution >= 0) {
        c.restitution = matA.restitution * matB.restitution;
      }

      c.si = overrideShapeA || si;
      c.sj = overrideShapeB || sj;
      return c;
    }

    createFrictionEquationsFromContact(contactEquation, outArray) {
      const bodyA = contactEquation.bi;
      const bodyB = contactEquation.bj;
      const shapeA = contactEquation.si;
      const shapeB = contactEquation.sj;
      const world = this.world;
      const cm = this.currentContactMaterial; // If friction or restitution were specified in the material, use them

      let friction = cm.friction;
      const matA = shapeA.material || bodyA.material;
      const matB = shapeB.material || bodyB.material;

      if (matA && matB && matA.friction >= 0 && matB.friction >= 0) {
        friction = matA.friction * matB.friction;
      }

      if (friction > 0) {
        // Create 2 tangent equations
        // Users may provide a force different from global gravity to use when computing contact friction.
        const mug = friction * (world.frictionGravity || world.gravity).length();
        let reducedMass = bodyA.invMass + bodyB.invMass;

        if (reducedMass > 0) {
          reducedMass = 1 / reducedMass;
        }

        const pool = this.frictionEquationPool;
        const c1 = pool.length ? pool.pop() : new FrictionEquation(bodyA, bodyB, mug * reducedMass);
        const c2 = pool.length ? pool.pop() : new FrictionEquation(bodyA, bodyB, mug * reducedMass);
        c1.bi = c2.bi = bodyA;
        c1.bj = c2.bj = bodyB;
        c1.minForce = c2.minForce = -mug * reducedMass;
        c1.maxForce = c2.maxForce = mug * reducedMass; // Copy over the relative vectors

        c1.ri.copy(contactEquation.ri);
        c1.rj.copy(contactEquation.rj);
        c2.ri.copy(contactEquation.ri);
        c2.rj.copy(contactEquation.rj); // Construct tangents

        contactEquation.ni.tangents(c1.t, c2.t); // Set spook params

        c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);
        c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);
        c1.enabled = c2.enabled = contactEquation.enabled;
        outArray.push(c1, c2);
        return true;
      }

      return false;
    }
    /**
     * Take the average N latest contact point on the plane.
     */


    createFrictionFromAverage(numContacts) {
      // The last contactEquation
      let c = this.result[this.result.length - 1]; // Create the result: two "average" friction equations

      if (!this.createFrictionEquationsFromContact(c, this.frictionResult) || numContacts === 1) {
        return;
      }

      const f1 = this.frictionResult[this.frictionResult.length - 2];
      const f2 = this.frictionResult[this.frictionResult.length - 1];
      averageNormal.setZero();
      averageContactPointA.setZero();
      averageContactPointB.setZero();
      const bodyA = c.bi;
      c.bj;

      for (let i = 0; i !== numContacts; i++) {
        c = this.result[this.result.length - 1 - i];

        if (c.bi !== bodyA) {
          averageNormal.vadd(c.ni, averageNormal);
          averageContactPointA.vadd(c.ri, averageContactPointA);
          averageContactPointB.vadd(c.rj, averageContactPointB);
        } else {
          averageNormal.vsub(c.ni, averageNormal);
          averageContactPointA.vadd(c.rj, averageContactPointA);
          averageContactPointB.vadd(c.ri, averageContactPointB);
        }
      }

      const invNumContacts = 1 / numContacts;
      averageContactPointA.scale(invNumContacts, f1.ri);
      averageContactPointB.scale(invNumContacts, f1.rj);
      f2.ri.copy(f1.ri); // Should be the same

      f2.rj.copy(f1.rj);
      averageNormal.normalize();
      averageNormal.tangents(f1.t, f2.t); // return eq;
    }
    /**
     * Generate all contacts between a list of body pairs
     * @param p1 Array of body indices
     * @param p2 Array of body indices
     * @param result Array to store generated contacts
     * @param oldcontacts Optional. Array of reusable contact objects
     */


    getContacts(p1, p2, world, result, oldcontacts, frictionResult, frictionPool) {
      // Save old contact objects
      this.contactPointPool = oldcontacts;
      this.frictionEquationPool = frictionPool;
      this.result = result;
      this.frictionResult = frictionResult;
      const qi = tmpQuat1;
      const qj = tmpQuat2;
      const xi = tmpVec1;
      const xj = tmpVec2;

      for (let k = 0, N = p1.length; k !== N; k++) {
        // Get current collision bodies
        const bi = p1[k];
        const bj = p2[k]; // Get contact material

        let bodyContactMaterial = null;

        if (bi.material && bj.material) {
          bodyContactMaterial = world.getContactMaterial(bi.material, bj.material) || null;
        }

        const justTest = bi.type & Body.KINEMATIC && bj.type & Body.STATIC || bi.type & Body.STATIC && bj.type & Body.KINEMATIC || bi.type & Body.KINEMATIC && bj.type & Body.KINEMATIC;

        for (let i = 0; i < bi.shapes.length; i++) {
          bi.quaternion.mult(bi.shapeOrientations[i], qi);
          bi.quaternion.vmult(bi.shapeOffsets[i], xi);
          xi.vadd(bi.position, xi);
          const si = bi.shapes[i];

          for (let j = 0; j < bj.shapes.length; j++) {
            // Compute world transform of shapes
            bj.quaternion.mult(bj.shapeOrientations[j], qj);
            bj.quaternion.vmult(bj.shapeOffsets[j], xj);
            xj.vadd(bj.position, xj);
            const sj = bj.shapes[j];

            if (!(si.collisionFilterMask & sj.collisionFilterGroup && sj.collisionFilterMask & si.collisionFilterGroup)) {
              continue;
            }

            if (xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius) {
              continue;
            } // Get collision material


            let shapeContactMaterial = null;

            if (si.material && sj.material) {
              shapeContactMaterial = world.getContactMaterial(si.material, sj.material) || null;
            }

            this.currentContactMaterial = shapeContactMaterial || bodyContactMaterial || world.defaultContactMaterial; // Get contacts

            const resolverIndex = si.type | sj.type;
            const resolver = this[resolverIndex];

            if (resolver) {
              let retval = false; // TO DO: investigate why sphereParticle and convexParticle
              // resolvers expect si and sj shapes to be in reverse order
              // (i.e. larger integer value type first instead of smaller first)

              if (si.type < sj.type) {
                retval = resolver.call(this, si, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);
              } else {
                retval = resolver.call(this, sj, si, xj, xi, qj, qi, bj, bi, si, sj, justTest);
              }

              if (retval && justTest) {
                // Register overlap
                world.shapeOverlapKeeper.set(si.id, sj.id);
                world.bodyOverlapKeeper.set(bi.id, bj.id);
              }
            }
          }
        }
      }
    }

    sphereSphere(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {
      if (justTest) {
        return xi.distanceSquared(xj) < (si.radius + sj.radius) ** 2;
      } // We will have only one contact in this case


      const contactEq = this.createContactEquation(bi, bj, si, sj, rsi, rsj); // Contact normal

      xj.vsub(xi, contactEq.ni);
      contactEq.ni.normalize(); // Contact point locations

      contactEq.ri.copy(contactEq.ni);
      contactEq.rj.copy(contactEq.ni);
      contactEq.ri.scale(si.radius, contactEq.ri);
      contactEq.rj.scale(-sj.radius, contactEq.rj);
      contactEq.ri.vadd(xi, contactEq.ri);
      contactEq.ri.vsub(bi.position, contactEq.ri);
      contactEq.rj.vadd(xj, contactEq.rj);
      contactEq.rj.vsub(bj.position, contactEq.rj);
      this.result.push(contactEq);
      this.createFrictionEquationsFromContact(contactEq, this.frictionResult);
    }

    spherePlane(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {
      // We will have one contact in this case
      const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj); // Contact normal

      r.ni.set(0, 0, 1);
      qj.vmult(r.ni, r.ni);
      r.ni.negate(r.ni); // body i is the sphere, flip normal

      r.ni.normalize(); // Needed?
      // Vector from sphere center to contact point

      r.ni.scale(si.radius, r.ri); // Project down sphere on plane

      xi.vsub(xj, point_on_plane_to_sphere);
      r.ni.scale(r.ni.dot(point_on_plane_to_sphere), plane_to_sphere_ortho);
      point_on_plane_to_sphere.vsub(plane_to_sphere_ortho, r.rj); // The sphere position projected to plane

      if (-point_on_plane_to_sphere.dot(r.ni) <= si.radius) {
        if (justTest) {
          return true;
        } // Make it relative to the body


        const ri = r.ri;
        const rj = r.rj;
        ri.vadd(xi, ri);
        ri.vsub(bi.position, ri);
        rj.vadd(xj, rj);
        rj.vsub(bj.position, rj);
        this.result.push(r);
        this.createFrictionEquationsFromContact(r, this.frictionResult);
      }
    }

    boxBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {
      si.convexPolyhedronRepresentation.material = si.material;
      sj.convexPolyhedronRepresentation.material = sj.material;
      si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;
      sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;
      return this.convexConvex(si.convexPolyhedronRepresentation, sj.convexPolyhedronRepresentation, xi, xj, qi, qj, bi, bj, si, sj, justTest);
    }

    sphereBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {
      const v3pool = this.v3pool; // we refer to the box as body j

      const sides = sphereBox_sides;
      xi.vsub(xj, box_to_sphere);
      sj.getSideNormals(sides, qj);
      const R = si.radius;

      let found = false; // Store the resulting side penetration info

      const side_ns = sphereBox_side_ns;
      const side_ns1 = sphereBox_side_ns1;
      const side_ns2 = sphereBox_side_ns2;
      let side_h = null;
      let side_penetrations = 0;
      let side_dot1 = 0;
      let side_dot2 = 0;
      let side_distance = null;

      for (let idx = 0, nsides = sides.length; idx !== nsides && found === false; idx++) {
        // Get the plane side normal (ns)
        const ns = sphereBox_ns;
        ns.copy(sides[idx]);
        const h = ns.length();
        ns.normalize(); // The normal/distance dot product tells which side of the plane we are

        const dot = box_to_sphere.dot(ns);

        if (dot < h + R && dot > 0) {
          // Intersects plane. Now check the other two dimensions
          const ns1 = sphereBox_ns1;
          const ns2 = sphereBox_ns2;
          ns1.copy(sides[(idx + 1) % 3]);
          ns2.copy(sides[(idx + 2) % 3]);
          const h1 = ns1.length();
          const h2 = ns2.length();
          ns1.normalize();
          ns2.normalize();
          const dot1 = box_to_sphere.dot(ns1);
          const dot2 = box_to_sphere.dot(ns2);

          if (dot1 < h1 && dot1 > -h1 && dot2 < h2 && dot2 > -h2) {
            const dist = Math.abs(dot - h - R);

            if (side_distance === null || dist < side_distance) {
              side_distance = dist;
              side_dot1 = dot1;
              side_dot2 = dot2;
              side_h = h;
              side_ns.copy(ns);
              side_ns1.copy(ns1);
              side_ns2.copy(ns2);
              side_penetrations++;

              if (justTest) {
                return true;
              }
            }
          }
        }
      }

      if (side_penetrations) {
        found = true;
        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
        side_ns.scale(-R, r.ri); // Sphere r

        r.ni.copy(side_ns);
        r.ni.negate(r.ni); // Normal should be out of sphere

        side_ns.scale(side_h, side_ns);
        side_ns1.scale(side_dot1, side_ns1);
        side_ns.vadd(side_ns1, side_ns);
        side_ns2.scale(side_dot2, side_ns2);
        side_ns.vadd(side_ns2, r.rj); // Make relative to bodies

        r.ri.vadd(xi, r.ri);
        r.ri.vsub(bi.position, r.ri);
        r.rj.vadd(xj, r.rj);
        r.rj.vsub(bj.position, r.rj);
        this.result.push(r);
        this.createFrictionEquationsFromContact(r, this.frictionResult);
      } // Check corners


      let rj = v3pool.get();
      const sphere_to_corner = sphereBox_sphere_to_corner;

      for (let j = 0; j !== 2 && !found; j++) {
        for (let k = 0; k !== 2 && !found; k++) {
          for (let l = 0; l !== 2 && !found; l++) {
            rj.set(0, 0, 0);

            if (j) {
              rj.vadd(sides[0], rj);
            } else {
              rj.vsub(sides[0], rj);
            }

            if (k) {
              rj.vadd(sides[1], rj);
            } else {
              rj.vsub(sides[1], rj);
            }

            if (l) {
              rj.vadd(sides[2], rj);
            } else {
              rj.vsub(sides[2], rj);
            } // World position of corner


            xj.vadd(rj, sphere_to_corner);
            sphere_to_corner.vsub(xi, sphere_to_corner);

            if (sphere_to_corner.lengthSquared() < R * R) {
              if (justTest) {
                return true;
              }

              found = true;
              const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
              r.ri.copy(sphere_to_corner);
              r.ri.normalize();
              r.ni.copy(r.ri);
              r.ri.scale(R, r.ri);
              r.rj.copy(rj); // Make relative to bodies

              r.ri.vadd(xi, r.ri);
              r.ri.vsub(bi.position, r.ri);
              r.rj.vadd(xj, r.rj);
              r.rj.vsub(bj.position, r.rj);
              this.result.push(r);
              this.createFrictionEquationsFromContact(r, this.frictionResult);
            }
          }
        }
      }

      v3pool.release(rj);
      rj = null; // Check edges

      const edgeTangent = v3pool.get();
      const edgeCenter = v3pool.get();
      const r = v3pool.get(); // r = edge center to sphere center

      const orthogonal = v3pool.get();
      const dist = v3pool.get();
      const Nsides = sides.length;

      for (let j = 0; j !== Nsides && !found; j++) {
        for (let k = 0; k !== Nsides && !found; k++) {
          if (j % 3 !== k % 3) {
            // Get edge tangent
            sides[k].cross(sides[j], edgeTangent);
            edgeTangent.normalize();
            sides[j].vadd(sides[k], edgeCenter);
            r.copy(xi);
            r.vsub(edgeCenter, r);
            r.vsub(xj, r);
            const orthonorm = r.dot(edgeTangent); // distance from edge center to sphere center in the tangent direction

            edgeTangent.scale(orthonorm, orthogonal); // Vector from edge center to sphere center in the tangent direction
            // Find the third side orthogonal to this one

            let l = 0;

            while (l === j % 3 || l === k % 3) {
              l++;
            } // vec from edge center to sphere projected to the plane orthogonal to the edge tangent


            dist.copy(xi);
            dist.vsub(orthogonal, dist);
            dist.vsub(edgeCenter, dist);
            dist.vsub(xj, dist); // Distances in tangent direction and distance in the plane orthogonal to it

            const tdist = Math.abs(orthonorm);
            const ndist = dist.length();

            if (tdist < sides[l].length() && ndist < R) {
              if (justTest) {
                return true;
              }

              found = true;
              const res = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
              edgeCenter.vadd(orthogonal, res.rj); // box rj

              res.rj.copy(res.rj);
              dist.negate(res.ni);
              res.ni.normalize();
              res.ri.copy(res.rj);
              res.ri.vadd(xj, res.ri);
              res.ri.vsub(xi, res.ri);
              res.ri.normalize();
              res.ri.scale(R, res.ri); // Make relative to bodies

              res.ri.vadd(xi, res.ri);
              res.ri.vsub(bi.position, res.ri);
              res.rj.vadd(xj, res.rj);
              res.rj.vsub(bj.position, res.rj);
              this.result.push(res);
              this.createFrictionEquationsFromContact(res, this.frictionResult);
            }
          }
        }
      }

      v3pool.release(edgeTangent, edgeCenter, r, orthogonal, dist);
    }

    planeBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {
      sj.convexPolyhedronRepresentation.material = sj.material;
      sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;
      sj.convexPolyhedronRepresentation.id = sj.id;
      return this.planeConvex(si, sj.convexPolyhedronRepresentation, xi, xj, qi, qj, bi, bj, si, sj, justTest);
    }

    convexConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest, faceListA, faceListB) {
      const sepAxis = convexConvex_sepAxis;

      if (xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius) {
        return;
      }

      if (si.findSeparatingAxis(sj, xi, qi, xj, qj, sepAxis, faceListA, faceListB)) {
        const res = [];
        const q = convexConvex_q;
        si.clipAgainstHull(xi, qi, sj, xj, qj, sepAxis, -100, 100, res);
        let numContacts = 0;

        for (let j = 0; j !== res.length; j++) {
          if (justTest) {
            return true;
          }

          const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
          const ri = r.ri;
          const rj = r.rj;
          sepAxis.negate(r.ni);
          res[j].normal.negate(q);
          q.scale(res[j].depth, q);
          res[j].point.vadd(q, ri);
          rj.copy(res[j].point); // Contact points are in world coordinates. Transform back to relative

          ri.vsub(xi, ri);
          rj.vsub(xj, rj); // Make relative to bodies

          ri.vadd(xi, ri);
          ri.vsub(bi.position, ri);
          rj.vadd(xj, rj);
          rj.vsub(bj.position, rj);
          this.result.push(r);
          numContacts++;

          if (!this.enableFrictionReduction) {
            this.createFrictionEquationsFromContact(r, this.frictionResult);
          }
        }

        if (this.enableFrictionReduction && numContacts) {
          this.createFrictionFromAverage(numContacts);
        }
      }
    }

    sphereConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {
      const v3pool = this.v3pool;
      xi.vsub(xj, convex_to_sphere);
      const normals = sj.faceNormals;
      const faces = sj.faces;
      const verts = sj.vertices;
      const R = si.radius;
      //     return;
      // }

      let found = false; // Check corners

      for (let i = 0; i !== verts.length; i++) {
        const v = verts[i]; // World position of corner

        const worldCorner = sphereConvex_worldCorner;
        qj.vmult(v, worldCorner);
        xj.vadd(worldCorner, worldCorner);
        const sphere_to_corner = sphereConvex_sphereToCorner;
        worldCorner.vsub(xi, sphere_to_corner);

        if (sphere_to_corner.lengthSquared() < R * R) {
          if (justTest) {
            return true;
          }

          found = true;
          const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
          r.ri.copy(sphere_to_corner);
          r.ri.normalize();
          r.ni.copy(r.ri);
          r.ri.scale(R, r.ri);
          worldCorner.vsub(xj, r.rj); // Should be relative to the body.

          r.ri.vadd(xi, r.ri);
          r.ri.vsub(bi.position, r.ri); // Should be relative to the body.

          r.rj.vadd(xj, r.rj);
          r.rj.vsub(bj.position, r.rj);
          this.result.push(r);
          this.createFrictionEquationsFromContact(r, this.frictionResult);
          return;
        }
      } // Check side (plane) intersections


      for (let i = 0, nfaces = faces.length; i !== nfaces && found === false; i++) {
        const normal = normals[i];
        const face = faces[i]; // Get world-transformed normal of the face

        const worldNormal = sphereConvex_worldNormal;
        qj.vmult(normal, worldNormal); // Get a world vertex from the face

        const worldPoint = sphereConvex_worldPoint;
        qj.vmult(verts[face[0]], worldPoint);
        worldPoint.vadd(xj, worldPoint); // Get a point on the sphere, closest to the face normal

        const worldSpherePointClosestToPlane = sphereConvex_worldSpherePointClosestToPlane;
        worldNormal.scale(-R, worldSpherePointClosestToPlane);
        xi.vadd(worldSpherePointClosestToPlane, worldSpherePointClosestToPlane); // Vector from a face point to the closest point on the sphere

        const penetrationVec = sphereConvex_penetrationVec;
        worldSpherePointClosestToPlane.vsub(worldPoint, penetrationVec); // The penetration. Negative value means overlap.

        const penetration = penetrationVec.dot(worldNormal);
        const worldPointToSphere = sphereConvex_sphereToWorldPoint;
        xi.vsub(worldPoint, worldPointToSphere);

        if (penetration < 0 && worldPointToSphere.dot(worldNormal) > 0) {
          // Intersects plane. Now check if the sphere is inside the face polygon
          const faceVerts = []; // Face vertices, in world coords

          for (let j = 0, Nverts = face.length; j !== Nverts; j++) {
            const worldVertex = v3pool.get();
            qj.vmult(verts[face[j]], worldVertex);
            xj.vadd(worldVertex, worldVertex);
            faceVerts.push(worldVertex);
          }

          if (pointInPolygon(faceVerts, worldNormal, xi)) {
            // Is the sphere center in the face polygon?
            if (justTest) {
              return true;
            }

            found = true;
            const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
            worldNormal.scale(-R, r.ri); // Contact offset, from sphere center to contact

            worldNormal.negate(r.ni); // Normal pointing out of sphere

            const penetrationVec2 = v3pool.get();
            worldNormal.scale(-penetration, penetrationVec2);
            const penetrationSpherePoint = v3pool.get();
            worldNormal.scale(-R, penetrationSpherePoint); //xi.vsub(xj).vadd(penetrationSpherePoint).vadd(penetrationVec2 , r.rj);

            xi.vsub(xj, r.rj);
            r.rj.vadd(penetrationSpherePoint, r.rj);
            r.rj.vadd(penetrationVec2, r.rj); // Should be relative to the body.

            r.rj.vadd(xj, r.rj);
            r.rj.vsub(bj.position, r.rj); // Should be relative to the body.

            r.ri.vadd(xi, r.ri);
            r.ri.vsub(bi.position, r.ri);
            v3pool.release(penetrationVec2);
            v3pool.release(penetrationSpherePoint);
            this.result.push(r);
            this.createFrictionEquationsFromContact(r, this.frictionResult); // Release world vertices

            for (let j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {
              v3pool.release(faceVerts[j]);
            }

            return; // We only expect *one* face contact
          } else {
            // Edge?
            for (let j = 0; j !== face.length; j++) {
              // Get two world transformed vertices
              const v1 = v3pool.get();
              const v2 = v3pool.get();
              qj.vmult(verts[face[(j + 1) % face.length]], v1);
              qj.vmult(verts[face[(j + 2) % face.length]], v2);
              xj.vadd(v1, v1);
              xj.vadd(v2, v2); // Construct edge vector

              const edge = sphereConvex_edge;
              v2.vsub(v1, edge); // Construct the same vector, but normalized

              const edgeUnit = sphereConvex_edgeUnit;
              edge.unit(edgeUnit); // p is xi projected onto the edge

              const p = v3pool.get();
              const v1_to_xi = v3pool.get();
              xi.vsub(v1, v1_to_xi);
              const dot = v1_to_xi.dot(edgeUnit);
              edgeUnit.scale(dot, p);
              p.vadd(v1, p); // Compute a vector from p to the center of the sphere

              const xi_to_p = v3pool.get();
              p.vsub(xi, xi_to_p); // Collision if the edge-sphere distance is less than the radius
              // AND if p is in between v1 and v2

              if (dot > 0 && dot * dot < edge.lengthSquared() && xi_to_p.lengthSquared() < R * R) {
                // Collision if the edge-sphere distance is less than the radius
                // Edge contact!
                if (justTest) {
                  return true;
                }

                const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
                p.vsub(xj, r.rj);
                p.vsub(xi, r.ni);
                r.ni.normalize();
                r.ni.scale(R, r.ri); // Should be relative to the body.

                r.rj.vadd(xj, r.rj);
                r.rj.vsub(bj.position, r.rj); // Should be relative to the body.

                r.ri.vadd(xi, r.ri);
                r.ri.vsub(bi.position, r.ri);
                this.result.push(r);
                this.createFrictionEquationsFromContact(r, this.frictionResult); // Release world vertices

                for (let j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {
                  v3pool.release(faceVerts[j]);
                }

                v3pool.release(v1);
                v3pool.release(v2);
                v3pool.release(p);
                v3pool.release(xi_to_p);
                v3pool.release(v1_to_xi);
                return;
              }

              v3pool.release(v1);
              v3pool.release(v2);
              v3pool.release(p);
              v3pool.release(xi_to_p);
              v3pool.release(v1_to_xi);
            }
          } // Release world vertices


          for (let j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {
            v3pool.release(faceVerts[j]);
          }
        }
      }
    }

    planeConvex(planeShape, convexShape, planePosition, convexPosition, planeQuat, convexQuat, planeBody, convexBody, si, sj, justTest) {
      // Simply return the points behind the plane.
      const worldVertex = planeConvex_v;
      const worldNormal = planeConvex_normal;
      worldNormal.set(0, 0, 1);
      planeQuat.vmult(worldNormal, worldNormal); // Turn normal according to plane orientation

      let numContacts = 0;
      const relpos = planeConvex_relpos;

      for (let i = 0; i !== convexShape.vertices.length; i++) {
        // Get world convex vertex
        worldVertex.copy(convexShape.vertices[i]);
        convexQuat.vmult(worldVertex, worldVertex);
        convexPosition.vadd(worldVertex, worldVertex);
        worldVertex.vsub(planePosition, relpos);
        const dot = worldNormal.dot(relpos);

        if (dot <= 0.0) {
          if (justTest) {
            return true;
          }

          const r = this.createContactEquation(planeBody, convexBody, planeShape, convexShape, si, sj); // Get vertex position projected on plane

          const projected = planeConvex_projected;
          worldNormal.scale(worldNormal.dot(relpos), projected);
          worldVertex.vsub(projected, projected);
          projected.vsub(planePosition, r.ri); // From plane to vertex projected on plane

          r.ni.copy(worldNormal); // Contact normal is the plane normal out from plane
          // rj is now just the vector from the convex center to the vertex

          worldVertex.vsub(convexPosition, r.rj); // Make it relative to the body

          r.ri.vadd(planePosition, r.ri);
          r.ri.vsub(planeBody.position, r.ri);
          r.rj.vadd(convexPosition, r.rj);
          r.rj.vsub(convexBody.position, r.rj);
          this.result.push(r);
          numContacts++;

          if (!this.enableFrictionReduction) {
            this.createFrictionEquationsFromContact(r, this.frictionResult);
          }
        }
      }

      if (this.enableFrictionReduction && numContacts) {
        this.createFrictionFromAverage(numContacts);
      }
    }

    boxConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {
      si.convexPolyhedronRepresentation.material = si.material;
      si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;
      return this.convexConvex(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);
    }

    sphereHeightfield(sphereShape, hfShape, spherePos, hfPos, sphereQuat, hfQuat, sphereBody, hfBody, rsi, rsj, justTest) {
      const data = hfShape.data;
      const radius = sphereShape.radius;
      const w = hfShape.elementSize;
      const worldPillarOffset = sphereHeightfield_tmp2; // Get sphere position to heightfield local!

      const localSpherePos = sphereHeightfield_tmp1;
      Transform.pointToLocalFrame(hfPos, hfQuat, spherePos, localSpherePos); // Get the index of the data points to test against

      let iMinX = Math.floor((localSpherePos.x - radius) / w) - 1;
      let iMaxX = Math.ceil((localSpherePos.x + radius) / w) + 1;
      let iMinY = Math.floor((localSpherePos.y - radius) / w) - 1;
      let iMaxY = Math.ceil((localSpherePos.y + radius) / w) + 1; // Bail out if we are out of the terrain

      if (iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMinY > data[0].length) {
        return;
      } // Clamp index to edges


      if (iMinX < 0) {
        iMinX = 0;
      }

      if (iMaxX < 0) {
        iMaxX = 0;
      }

      if (iMinY < 0) {
        iMinY = 0;
      }

      if (iMaxY < 0) {
        iMaxY = 0;
      }

      if (iMinX >= data.length) {
        iMinX = data.length - 1;
      }

      if (iMaxX >= data.length) {
        iMaxX = data.length - 1;
      }

      if (iMaxY >= data[0].length) {
        iMaxY = data[0].length - 1;
      }

      if (iMinY >= data[0].length) {
        iMinY = data[0].length - 1;
      }

      const minMax = [];
      hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);
      const min = minMax[0];
      const max = minMax[1]; // Bail out if we can't touch the bounding height box

      if (localSpherePos.z - radius > max || localSpherePos.z + radius < min) {
        return;
      }

      const result = this.result;

      for (let i = iMinX; i < iMaxX; i++) {
        for (let j = iMinY; j < iMaxY; j++) {
          const numContactsBefore = result.length;
          let intersecting = false; // Lower triangle

          hfShape.getConvexTrianglePillar(i, j, false);
          Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);

          if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {
            intersecting = this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody, sphereShape, hfShape, justTest);
          }

          if (justTest && intersecting) {
            return true;
          } // Upper triangle


          hfShape.getConvexTrianglePillar(i, j, true);
          Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);

          if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {
            intersecting = this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody, sphereShape, hfShape, justTest);
          }

          if (justTest && intersecting) {
            return true;
          }

          const numContacts = result.length - numContactsBefore;

          if (numContacts > 2) {
            return;
          }
          /*
            // Skip all but 1
            for (let k = 0; k < numContacts - 1; k++) {
                result.pop();
            }
          */

        }
      }
    }

    boxHeightfield(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {
      si.convexPolyhedronRepresentation.material = si.material;
      si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;
      return this.convexHeightfield(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);
    }

    convexHeightfield(convexShape, hfShape, convexPos, hfPos, convexQuat, hfQuat, convexBody, hfBody, rsi, rsj, justTest) {
      const data = hfShape.data;
      const w = hfShape.elementSize;
      const radius = convexShape.boundingSphereRadius;
      const worldPillarOffset = convexHeightfield_tmp2;
      const faceList = convexHeightfield_faceList; // Get sphere position to heightfield local!

      const localConvexPos = convexHeightfield_tmp1;
      Transform.pointToLocalFrame(hfPos, hfQuat, convexPos, localConvexPos); // Get the index of the data points to test against

      let iMinX = Math.floor((localConvexPos.x - radius) / w) - 1;
      let iMaxX = Math.ceil((localConvexPos.x + radius) / w) + 1;
      let iMinY = Math.floor((localConvexPos.y - radius) / w) - 1;
      let iMaxY = Math.ceil((localConvexPos.y + radius) / w) + 1; // Bail out if we are out of the terrain

      if (iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMinY > data[0].length) {
        return;
      } // Clamp index to edges


      if (iMinX < 0) {
        iMinX = 0;
      }

      if (iMaxX < 0) {
        iMaxX = 0;
      }

      if (iMinY < 0) {
        iMinY = 0;
      }

      if (iMaxY < 0) {
        iMaxY = 0;
      }

      if (iMinX >= data.length) {
        iMinX = data.length - 1;
      }

      if (iMaxX >= data.length) {
        iMaxX = data.length - 1;
      }

      if (iMaxY >= data[0].length) {
        iMaxY = data[0].length - 1;
      }

      if (iMinY >= data[0].length) {
        iMinY = data[0].length - 1;
      }

      const minMax = [];
      hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);
      const min = minMax[0];
      const max = minMax[1]; // Bail out if we're cant touch the bounding height box

      if (localConvexPos.z - radius > max || localConvexPos.z + radius < min) {
        return;
      }

      for (let i = iMinX; i < iMaxX; i++) {
        for (let j = iMinY; j < iMaxY; j++) {
          let intersecting = false; // Lower triangle

          hfShape.getConvexTrianglePillar(i, j, false);
          Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);

          if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {
            intersecting = this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, justTest, faceList, null);
          }

          if (justTest && intersecting) {
            return true;
          } // Upper triangle


          hfShape.getConvexTrianglePillar(i, j, true);
          Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);

          if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {
            intersecting = this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, justTest, faceList, null);
          }

          if (justTest && intersecting) {
            return true;
          }
        }
      }
    }

    sphereParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {
      // The normal is the unit vector from sphere center to particle center
      const normal = particleSphere_normal;
      normal.set(0, 0, 1);
      xi.vsub(xj, normal);
      const lengthSquared = normal.lengthSquared();

      if (lengthSquared <= sj.radius * sj.radius) {
        if (justTest) {
          return true;
        }

        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
        normal.normalize();
        r.rj.copy(normal);
        r.rj.scale(sj.radius, r.rj);
        r.ni.copy(normal); // Contact normal

        r.ni.negate(r.ni);
        r.ri.set(0, 0, 0); // Center of particle

        this.result.push(r);
        this.createFrictionEquationsFromContact(r, this.frictionResult);
      }
    }

    planeParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {
      const normal = particlePlane_normal;
      normal.set(0, 0, 1);
      bj.quaternion.vmult(normal, normal); // Turn normal according to plane orientation

      const relpos = particlePlane_relpos;
      xi.vsub(bj.position, relpos);
      const dot = normal.dot(relpos);

      if (dot <= 0.0) {
        if (justTest) {
          return true;
        }

        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
        r.ni.copy(normal); // Contact normal is the plane normal

        r.ni.negate(r.ni);
        r.ri.set(0, 0, 0); // Center of particle
        // Get particle position projected on plane

        const projected = particlePlane_projected;
        normal.scale(normal.dot(xi), projected);
        xi.vsub(projected, projected); //projected.vadd(bj.position,projected);
        // rj is now the projected world position minus plane position

        r.rj.copy(projected);
        this.result.push(r);
        this.createFrictionEquationsFromContact(r, this.frictionResult);
      }
    }

    boxParticle(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {
      si.convexPolyhedronRepresentation.material = si.material;
      si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;
      return this.convexParticle(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);
    }

    convexParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {
      let penetratedFaceIndex = -1;
      const penetratedFaceNormal = convexParticle_penetratedFaceNormal;
      const worldPenetrationVec = convexParticle_worldPenetrationVec;
      let minPenetration = null;

      const local = convexParticle_local;
      local.copy(xi);
      local.vsub(xj, local); // Convert position to relative the convex origin

      qj.conjugate(cqj);
      cqj.vmult(local, local);

      if (sj.pointIsInside(local)) {
        if (sj.worldVerticesNeedsUpdate) {
          sj.computeWorldVertices(xj, qj);
        }

        if (sj.worldFaceNormalsNeedsUpdate) {
          sj.computeWorldFaceNormals(qj);
        } // For each world polygon in the polyhedra


        for (let i = 0, nfaces = sj.faces.length; i !== nfaces; i++) {
          // Construct world face vertices
          const verts = [sj.worldVertices[sj.faces[i][0]]];
          const normal = sj.worldFaceNormals[i]; // Check how much the particle penetrates the polygon plane.

          xi.vsub(verts[0], convexParticle_vertexToParticle);
          const penetration = -normal.dot(convexParticle_vertexToParticle);

          if (minPenetration === null || Math.abs(penetration) < Math.abs(minPenetration)) {
            if (justTest) {
              return true;
            }

            minPenetration = penetration;
            penetratedFaceIndex = i;
            penetratedFaceNormal.copy(normal);
          }
        }

        if (penetratedFaceIndex !== -1) {
          // Setup contact
          const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);
          penetratedFaceNormal.scale(minPenetration, worldPenetrationVec); // rj is the particle position projected to the face

          worldPenetrationVec.vadd(xi, worldPenetrationVec);
          worldPenetrationVec.vsub(xj, worldPenetrationVec);
          r.rj.copy(worldPenetrationVec); //const projectedToFace = xi.vsub(xj).vadd(worldPenetrationVec);
          //projectedToFace.copy(r.rj);
          //qj.vmult(r.rj,r.rj);

          penetratedFaceNormal.negate(r.ni); // Contact normal

          r.ri.set(0, 0, 0); // Center of particle

          const ri = r.ri;
          const rj = r.rj; // Make relative to bodies

          ri.vadd(xi, ri);
          ri.vsub(bi.position, ri);
          rj.vadd(xj, rj);
          rj.vsub(bj.position, rj);
          this.result.push(r);
          this.createFrictionEquationsFromContact(r, this.frictionResult);
        } else {
          console.warn('Point found inside convex, but did not find penetrating face!');
        }
      }
    }

    heightfieldCylinder(hfShape, convexShape, hfPos, convexPos, hfQuat, convexQuat, hfBody, convexBody, rsi, rsj, justTest) {
      return this.convexHeightfield(convexShape, hfShape, convexPos, hfPos, convexQuat, hfQuat, convexBody, hfBody, rsi, rsj, justTest);
    }

    particleCylinder(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {
      return this.convexParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest);
    }

    sphereTrimesh(sphereShape, trimeshShape, spherePos, trimeshPos, sphereQuat, trimeshQuat, sphereBody, trimeshBody, rsi, rsj, justTest) {
      const edgeVertexA = sphereTrimesh_edgeVertexA;
      const edgeVertexB = sphereTrimesh_edgeVertexB;
      const edgeVector = sphereTrimesh_edgeVector;
      const edgeVectorUnit = sphereTrimesh_edgeVectorUnit;
      const localSpherePos = sphereTrimesh_localSpherePos;
      const tmp = sphereTrimesh_tmp;
      const localSphereAABB = sphereTrimesh_localSphereAABB;
      const v2 = sphereTrimesh_v2;
      const relpos = sphereTrimesh_relpos;
      const triangles = sphereTrimesh_triangles; // Convert sphere position to local in the trimesh

      Transform.pointToLocalFrame(trimeshPos, trimeshQuat, spherePos, localSpherePos); // Get the aabb of the sphere locally in the trimesh

      const sphereRadius = sphereShape.radius;
      localSphereAABB.lowerBound.set(localSpherePos.x - sphereRadius, localSpherePos.y - sphereRadius, localSpherePos.z - sphereRadius);
      localSphereAABB.upperBound.set(localSpherePos.x + sphereRadius, localSpherePos.y + sphereRadius, localSpherePos.z + sphereRadius);
      trimeshShape.getTrianglesInAABB(localSphereAABB, triangles); //for (let i = 0; i < trimeshShape.indices.length / 3; i++) triangles.push(i); // All
      // Vertices

      const v = sphereTrimesh_v;
      const radiusSquared = sphereShape.radius * sphereShape.radius;

      for (let i = 0; i < triangles.length; i++) {
        for (let j = 0; j < 3; j++) {
          trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], v); // Check vertex overlap in sphere

          v.vsub(localSpherePos, relpos);

          if (relpos.lengthSquared() <= radiusSquared) {
            // Safe up
            v2.copy(v);
            Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v);
            v.vsub(spherePos, relpos);

            if (justTest) {
              return true;
            }

            let r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);
            r.ni.copy(relpos);
            r.ni.normalize(); // ri is the vector from sphere center to the sphere surface

            r.ri.copy(r.ni);
            r.ri.scale(sphereShape.radius, r.ri);
            r.ri.vadd(spherePos, r.ri);
            r.ri.vsub(sphereBody.position, r.ri);
            r.rj.copy(v);
            r.rj.vsub(trimeshBody.position, r.rj); // Store result

            this.result.push(r);
            this.createFrictionEquationsFromContact(r, this.frictionResult);
          }
        }
      } // Check all edges


      for (let i = 0; i < triangles.length; i++) {
        for (let j = 0; j < 3; j++) {
          trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], edgeVertexA);
          trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + (j + 1) % 3], edgeVertexB);
          edgeVertexB.vsub(edgeVertexA, edgeVector); // Project sphere position to the edge

          localSpherePos.vsub(edgeVertexB, tmp);
          const positionAlongEdgeB = tmp.dot(edgeVector);
          localSpherePos.vsub(edgeVertexA, tmp);
          let positionAlongEdgeA = tmp.dot(edgeVector);

          if (positionAlongEdgeA > 0 && positionAlongEdgeB < 0) {
            // Now check the orthogonal distance from edge to sphere center
            localSpherePos.vsub(edgeVertexA, tmp);
            edgeVectorUnit.copy(edgeVector);
            edgeVectorUnit.normalize();
            positionAlongEdgeA = tmp.dot(edgeVectorUnit);
            edgeVectorUnit.scale(positionAlongEdgeA, tmp);
            tmp.vadd(edgeVertexA, tmp); // tmp is now the sphere center position projected to the edge, defined locally in the trimesh frame

            const dist = tmp.distanceTo(localSpherePos);

            if (dist < sphereShape.radius) {
              if (justTest) {
                return true;
              }

              const r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);
              tmp.vsub(localSpherePos, r.ni);
              r.ni.normalize();
              r.ni.scale(sphereShape.radius, r.ri);
              r.ri.vadd(spherePos, r.ri);
              r.ri.vsub(sphereBody.position, r.ri);
              Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);
              tmp.vsub(trimeshBody.position, r.rj);
              Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);
              Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);
              this.result.push(r);
              this.createFrictionEquationsFromContact(r, this.frictionResult);
            }
          }
        }
      } // Triangle faces


      const va = sphereTrimesh_va;
      const vb = sphereTrimesh_vb;
      const vc = sphereTrimesh_vc;
      const normal = sphereTrimesh_normal;

      for (let i = 0, N = triangles.length; i !== N; i++) {
        trimeshShape.getTriangleVertices(triangles[i], va, vb, vc);
        trimeshShape.getNormal(triangles[i], normal);
        localSpherePos.vsub(va, tmp);
        let dist = tmp.dot(normal);
        normal.scale(dist, tmp);
        localSpherePos.vsub(tmp, tmp); // tmp is now the sphere position projected to the triangle plane

        dist = tmp.distanceTo(localSpherePos);

        if (Ray.pointInTriangle(tmp, va, vb, vc) && dist < sphereShape.radius) {
          if (justTest) {
            return true;
          }

          let r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);
          tmp.vsub(localSpherePos, r.ni);
          r.ni.normalize();
          r.ni.scale(sphereShape.radius, r.ri);
          r.ri.vadd(spherePos, r.ri);
          r.ri.vsub(sphereBody.position, r.ri);
          Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);
          tmp.vsub(trimeshBody.position, r.rj);
          Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);
          Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);
          this.result.push(r);
          this.createFrictionEquationsFromContact(r, this.frictionResult);
        }
      }

      triangles.length = 0;
    }

    planeTrimesh(planeShape, trimeshShape, planePos, trimeshPos, planeQuat, trimeshQuat, planeBody, trimeshBody, rsi, rsj, justTest) {
      // Make contacts!
      const v = new Vec3();
      const normal = planeTrimesh_normal;
      normal.set(0, 0, 1);
      planeQuat.vmult(normal, normal); // Turn normal according to plane

      for (let i = 0; i < trimeshShape.vertices.length / 3; i++) {
        // Get world vertex from trimesh
        trimeshShape.getVertex(i, v); // Safe up

        const v2 = new Vec3();
        v2.copy(v);
        Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v); // Check plane side

        const relpos = planeTrimesh_relpos;
        v.vsub(planePos, relpos);
        const dot = normal.dot(relpos);

        if (dot <= 0.0) {
          if (justTest) {
            return true;
          }

          const r = this.createContactEquation(planeBody, trimeshBody, planeShape, trimeshShape, rsi, rsj);
          r.ni.copy(normal); // Contact normal is the plane normal
          // Get vertex position projected on plane

          const projected = planeTrimesh_projected;
          normal.scale(relpos.dot(normal), projected);
          v.vsub(projected, projected); // ri is the projected world position minus plane position

          r.ri.copy(projected);
          r.ri.vsub(planeBody.position, r.ri);
          r.rj.copy(v);
          r.rj.vsub(trimeshBody.position, r.rj); // Store result

          this.result.push(r);
          this.createFrictionEquationsFromContact(r, this.frictionResult);
        }
      }
    } // convexTrimesh(
    //   si: ConvexPolyhedron, sj: Trimesh, xi: Vec3, xj: Vec3, qi: Quaternion, qj: Quaternion,
    //   bi: Body, bj: Body, rsi?: Shape | null, rsj?: Shape | null,
    //   faceListA?: number[] | null, faceListB?: number[] | null,
    // ) {
    //   const sepAxis = convexConvex_sepAxis;
    //   if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){
    //       return;
    //   }
    //   // Construct a temp hull for each triangle
    //   const hullB = new ConvexPolyhedron();
    //   hullB.faces = [[0,1,2]];
    //   const va = new Vec3();
    //   const vb = new Vec3();
    //   const vc = new Vec3();
    //   hullB.vertices = [
    //       va,
    //       vb,
    //       vc
    //   ];
    //   for (let i = 0; i < sj.indices.length / 3; i++) {
    //       const triangleNormal = new Vec3();
    //       sj.getNormal(i, triangleNormal);
    //       hullB.faceNormals = [triangleNormal];
    //       sj.getTriangleVertices(i, va, vb, vc);
    //       let d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);
    //       if(!d){
    //           triangleNormal.scale(-1, triangleNormal);
    //           d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);
    //           if(!d){
    //               continue;
    //           }
    //       }
    //       const res: ConvexPolyhedronContactPoint[] = [];
    //       const q = convexConvex_q;
    //       si.clipAgainstHull(xi,qi,hullB,xj,qj,triangleNormal,-100,100,res);
    //       for(let j = 0; j !== res.length; j++){
    //           const r = this.createContactEquation(bi,bj,si,sj,rsi,rsj),
    //               ri = r.ri,
    //               rj = r.rj;
    //           r.ni.copy(triangleNormal);
    //           r.ni.negate(r.ni);
    //           res[j].normal.negate(q);
    //           q.mult(res[j].depth, q);
    //           res[j].point.vadd(q, ri);
    //           rj.copy(res[j].point);
    //           // Contact points are in world coordinates. Transform back to relative
    //           ri.vsub(xi,ri);
    //           rj.vsub(xj,rj);
    //           // Make relative to bodies
    //           ri.vadd(xi, ri);
    //           ri.vsub(bi.position, ri);
    //           rj.vadd(xj, rj);
    //           rj.vsub(bj.position, rj);
    //           result.push(r);
    //       }
    //   }
    // }


  }
  const averageNormal = new Vec3();
  const averageContactPointA = new Vec3();
  const averageContactPointB = new Vec3();
  const tmpVec1 = new Vec3();
  const tmpVec2 = new Vec3();
  const tmpQuat1 = new Quaternion();
  const tmpQuat2 = new Quaternion();

  const planeTrimesh_normal = new Vec3();
  const planeTrimesh_relpos = new Vec3();
  const planeTrimesh_projected = new Vec3();
  const sphereTrimesh_normal = new Vec3();
  const sphereTrimesh_relpos = new Vec3();
  new Vec3();
  const sphereTrimesh_v = new Vec3();
  const sphereTrimesh_v2 = new Vec3();
  const sphereTrimesh_edgeVertexA = new Vec3();
  const sphereTrimesh_edgeVertexB = new Vec3();
  const sphereTrimesh_edgeVector = new Vec3();
  const sphereTrimesh_edgeVectorUnit = new Vec3();
  const sphereTrimesh_localSpherePos = new Vec3();
  const sphereTrimesh_tmp = new Vec3();
  const sphereTrimesh_va = new Vec3();
  const sphereTrimesh_vb = new Vec3();
  const sphereTrimesh_vc = new Vec3();
  const sphereTrimesh_localSphereAABB = new AABB();
  const sphereTrimesh_triangles = [];
  const point_on_plane_to_sphere = new Vec3();
  const plane_to_sphere_ortho = new Vec3(); // See http://bulletphysics.com/Bullet/BulletFull/SphereTriangleDetector_8cpp_source.html

  const pointInPolygon_edge = new Vec3();
  const pointInPolygon_edge_x_normal = new Vec3();
  const pointInPolygon_vtp = new Vec3();

  function pointInPolygon(verts, normal, p) {
    let positiveResult = null;
    const N = verts.length;

    for (let i = 0; i !== N; i++) {
      const v = verts[i]; // Get edge to the next vertex

      const edge = pointInPolygon_edge;
      verts[(i + 1) % N].vsub(v, edge); // Get cross product between polygon normal and the edge

      const edge_x_normal = pointInPolygon_edge_x_normal; //const edge_x_normal = new Vec3();

      edge.cross(normal, edge_x_normal); // Get vector between point and current vertex

      const vertex_to_p = pointInPolygon_vtp;
      p.vsub(v, vertex_to_p); // This dot product determines which side of the edge the point is

      const r = edge_x_normal.dot(vertex_to_p); // If all such dot products have same sign, we are inside the polygon.

      if (positiveResult === null || r > 0 && positiveResult === true || r <= 0 && positiveResult === false) {
        if (positiveResult === null) {
          positiveResult = r > 0;
        }

        continue;
      } else {
        return false; // Encountered some other sign. Exit.
      }
    } // If we got here, all dot products were of the same sign.


    return true;
  }

  const box_to_sphere = new Vec3();
  const sphereBox_ns = new Vec3();
  const sphereBox_ns1 = new Vec3();
  const sphereBox_ns2 = new Vec3();
  const sphereBox_sides = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];
  const sphereBox_sphere_to_corner = new Vec3();
  const sphereBox_side_ns = new Vec3();
  const sphereBox_side_ns1 = new Vec3();
  const sphereBox_side_ns2 = new Vec3();
  const convex_to_sphere = new Vec3();
  const sphereConvex_edge = new Vec3();
  const sphereConvex_edgeUnit = new Vec3();
  const sphereConvex_sphereToCorner = new Vec3();
  const sphereConvex_worldCorner = new Vec3();
  const sphereConvex_worldNormal = new Vec3();
  const sphereConvex_worldPoint = new Vec3();
  const sphereConvex_worldSpherePointClosestToPlane = new Vec3();
  const sphereConvex_penetrationVec = new Vec3();
  const sphereConvex_sphereToWorldPoint = new Vec3();
  new Vec3();
  new Vec3();
  const planeConvex_v = new Vec3();
  const planeConvex_normal = new Vec3();
  const planeConvex_relpos = new Vec3();
  const planeConvex_projected = new Vec3();
  const convexConvex_sepAxis = new Vec3();
  const convexConvex_q = new Vec3();
  const particlePlane_normal = new Vec3();
  const particlePlane_relpos = new Vec3();
  const particlePlane_projected = new Vec3();
  const particleSphere_normal = new Vec3(); // WIP

  const cqj = new Quaternion();
  const convexParticle_local = new Vec3();
  new Vec3();
  const convexParticle_penetratedFaceNormal = new Vec3();
  const convexParticle_vertexToParticle = new Vec3();
  const convexParticle_worldPenetrationVec = new Vec3();
  const convexHeightfield_tmp1 = new Vec3();
  const convexHeightfield_tmp2 = new Vec3();
  const convexHeightfield_faceList = [0];
  const sphereHeightfield_tmp1 = new Vec3();
  const sphereHeightfield_tmp2 = new Vec3();

  class OverlapKeeper {
    /**
     * @todo Remove useless constructor
     */
    constructor() {
      this.current = [];
      this.previous = [];
    }
    /**
     * getKey
     */


    getKey(i, j) {
      if (j < i) {
        const temp = j;
        j = i;
        i = temp;
      }

      return i << 16 | j;
    }
    /**
     * set
     */


    set(i, j) {
      // Insertion sort. This way the diff will have linear complexity.
      const key = this.getKey(i, j);
      const current = this.current;
      let index = 0;

      while (key > current[index]) {
        index++;
      }

      if (key === current[index]) {
        return; // Pair was already added
      }

      for (let j = current.length - 1; j >= index; j--) {
        current[j + 1] = current[j];
      }

      current[index] = key;
    }
    /**
     * tick
     */


    tick() {
      const tmp = this.current;
      this.current = this.previous;
      this.previous = tmp;
      this.current.length = 0;
    }
    /**
     * getDiff
     */


    getDiff(additions, removals) {
      const a = this.current;
      const b = this.previous;
      const al = a.length;
      const bl = b.length;
      let j = 0;

      for (let i = 0; i < al; i++) {
        let found = false;
        const keyA = a[i];

        while (keyA > b[j]) {
          j++;
        }

        found = keyA === b[j];

        if (!found) {
          unpackAndPush(additions, keyA);
        }
      }

      j = 0;

      for (let i = 0; i < bl; i++) {
        let found = false;
        const keyB = b[i];

        while (keyB > a[j]) {
          j++;
        }

        found = a[j] === keyB;

        if (!found) {
          unpackAndPush(removals, keyB);
        }
      }
    }

  }

  function unpackAndPush(array, key) {
    array.push((key & 0xffff0000) >> 16, key & 0x0000ffff);
  }

  const getKey = (i, j) => i < j ? `${i}-${j}` : `${j}-${i}`;
  /**
   * TupleDictionary
   */


  class TupleDictionary {
    constructor() {
      this.data = {
        keys: []
      };
    }

    /** get */
    get(i, j) {
      const key = getKey(i, j);
      return this.data[key];
    }
    /** set */


    set(i, j, value) {
      const key = getKey(i, j); // Check if key already exists

      if (!this.get(i, j)) {
        this.data.keys.push(key);
      }

      this.data[key] = value;
    }
    /** delete */


    delete(i, j) {
      const key = getKey(i, j);
      const index = this.data.keys.indexOf(key);

      if (index !== -1) {
        this.data.keys.splice(index, 1);
      }

      delete this.data[key];
    }
    /** reset */


    reset() {
      const data = this.data;
      const keys = data.keys;

      while (keys.length > 0) {
        const key = keys.pop();
        delete data[key];
      }
    }

  }

  /**
   * The physics world
   */
  class World extends EventTarget {
    /**
     * Currently / last used timestep. Is set to -1 if not available. This value is updated before each internal step, which means that it is "fresh" inside event callbacks.
     */

    /**
     * Makes bodies go to sleep when they've been inactive.
     * @default false
     */

    /**
     * All the current contacts (instances of ContactEquation) in the world.
     */

    /**
     * How often to normalize quaternions. Set to 0 for every step, 1 for every second etc.. A larger value increases performance. If bodies tend to explode, set to a smaller value (zero to be sure nothing can go wrong).
     * @default 0
     */

    /**
     * Set to true to use fast quaternion normalization. It is often enough accurate to use.
     * If bodies tend to explode, set to false.
     * @default false
     */

    /**
     * The wall-clock time since simulation start.
     */

    /**
     * Number of timesteps taken since start.
     */

    /**
     * Default and last timestep sizes.
     */

    /**
     * The gravity of the world.
     */

    /**
     * Gravity to use when approximating the friction max force (mu*mass*gravity).
     * If undefined, global gravity will be used.
     * Use to enable friction in a World with a null gravity vector (no gravity).
     */

    /**
     * The broadphase algorithm to use.
     * @default NaiveBroadphase
     */

    /**
     * All bodies in this world
     */

    /**
     * True if any bodies are not sleeping, false if every body is sleeping.
     */

    /**
     * The solver algorithm to use.
     * @default GSSolver
     */

    /**
     * collisionMatrix
     */

    /**
     * CollisionMatrix from the previous step.
     */

    /**
     * All added contactmaterials.
     */

    /**
     * Used to look up a ContactMaterial given two instances of Material.
     */

    /**
     * The default material of the bodies.
     */

    /**
     * This contact material is used if no suitable contactmaterial is found for a contact.
     */

    /**
     * Time accumulator for interpolation.
     * @see https://gafferongames.com/game-physics/fix-your-timestep/
     */

    /**
     * Dispatched after a body has been added to the world.
     */

    /**
     * Dispatched after a body has been removed from the world.
     */
    constructor(options) {
      if (options === void 0) {
        options = {};
      }

      super();
      this.dt = -1;
      this.allowSleep = !!options.allowSleep;
      this.contacts = [];
      this.frictionEquations = [];
      this.quatNormalizeSkip = options.quatNormalizeSkip !== undefined ? options.quatNormalizeSkip : 0;
      this.quatNormalizeFast = options.quatNormalizeFast !== undefined ? options.quatNormalizeFast : false;
      this.time = 0.0;
      this.stepnumber = 0;
      this.default_dt = 1 / 60;
      this.nextId = 0;
      this.gravity = new Vec3();

      if (options.gravity) {
        this.gravity.copy(options.gravity);
      }

      if (options.frictionGravity) {
        this.frictionGravity = new Vec3();
        this.frictionGravity.copy(options.frictionGravity);
      }

      this.broadphase = options.broadphase !== undefined ? options.broadphase : new NaiveBroadphase();
      this.bodies = [];
      this.hasActiveBodies = false;
      this.solver = options.solver !== undefined ? options.solver : new GSSolver();
      this.constraints = [];
      this.narrowphase = new Narrowphase(this);
      this.collisionMatrix = new ArrayCollisionMatrix();
      this.collisionMatrixPrevious = new ArrayCollisionMatrix();
      this.bodyOverlapKeeper = new OverlapKeeper();
      this.shapeOverlapKeeper = new OverlapKeeper();
      this.contactmaterials = [];
      this.contactMaterialTable = new TupleDictionary();
      this.defaultMaterial = new Material('default');
      this.defaultContactMaterial = new ContactMaterial(this.defaultMaterial, this.defaultMaterial, {
        friction: 0.3,
        restitution: 0.0
      });
      this.doProfiling = false;
      this.profile = {
        solve: 0,
        makeContactConstraints: 0,
        broadphase: 0,
        integrate: 0,
        narrowphase: 0
      };
      this.accumulator = 0;
      this.subsystems = [];
      this.addBodyEvent = {
        type: 'addBody',
        body: null
      };
      this.removeBodyEvent = {
        type: 'removeBody',
        body: null
      };
      this.idToBodyMap = {};
      this.broadphase.setWorld(this);
    }
    /**
     * Get the contact material between materials m1 and m2
     * @return The contact material if it was found.
     */


    getContactMaterial(m1, m2) {
      return this.contactMaterialTable.get(m1.id, m2.id);
    }
    /**
     * Store old collision state info
     */


    collisionMatrixTick() {
      const temp = this.collisionMatrixPrevious;
      this.collisionMatrixPrevious = this.collisionMatrix;
      this.collisionMatrix = temp;
      this.collisionMatrix.reset();
      this.bodyOverlapKeeper.tick();
      this.shapeOverlapKeeper.tick();
    }
    /**
     * Add a constraint to the simulation.
     */


    addConstraint(c) {
      this.constraints.push(c);
    }
    /**
     * Removes a constraint
     */


    removeConstraint(c) {
      const idx = this.constraints.indexOf(c);

      if (idx !== -1) {
        this.constraints.splice(idx, 1);
      }
    }
    /**
     * Raycast test
     * @deprecated Use .raycastAll, .raycastClosest or .raycastAny instead.
     */


    rayTest(from, to, result) {
      if (result instanceof RaycastResult) {
        // Do raycastClosest
        this.raycastClosest(from, to, {
          skipBackfaces: true
        }, result);
      } else {
        // Do raycastAll
        this.raycastAll(from, to, {
          skipBackfaces: true
        }, result);
      }
    }
    /**
     * Ray cast against all bodies. The provided callback will be executed for each hit with a RaycastResult as single argument.
     * @return True if any body was hit.
     */


    raycastAll(from, to, options, callback) {
      if (options === void 0) {
        options = {};
      }

      options.mode = Ray.ALL;
      options.from = from;
      options.to = to;
      options.callback = callback;
      return tmpRay.intersectWorld(this, options);
    }
    /**
     * Ray cast, and stop at the first result. Note that the order is random - but the method is fast.
     * @return True if any body was hit.
     */


    raycastAny(from, to, options, result) {
      if (options === void 0) {
        options = {};
      }

      options.mode = Ray.ANY;
      options.from = from;
      options.to = to;
      options.result = result;
      return tmpRay.intersectWorld(this, options);
    }
    /**
     * Ray cast, and return information of the closest hit.
     * @return True if any body was hit.
     */


    raycastClosest(from, to, options, result) {
      if (options === void 0) {
        options = {};
      }

      options.mode = Ray.CLOSEST;
      options.from = from;
      options.to = to;
      options.result = result;
      return tmpRay.intersectWorld(this, options);
    }
    /**
     * Add a rigid body to the simulation.
     * @todo If the simulation has not yet started, why recrete and copy arrays for each body? Accumulate in dynamic arrays in this case.
     * @todo Adding an array of bodies should be possible. This would save some loops too
     */


    addBody(body) {
      if (this.bodies.includes(body)) {
        return;
      }

      body.index = this.bodies.length;
      this.bodies.push(body);
      body.world = this;
      body.initPosition.copy(body.position);
      body.initVelocity.copy(body.velocity);
      body.timeLastSleepy = this.time;

      if (body instanceof Body) {
        body.initAngularVelocity.copy(body.angularVelocity);
        body.initQuaternion.copy(body.quaternion);
      }

      this.collisionMatrix.setNumObjects(this.bodies.length);
      this.addBodyEvent.body = body;
      this.idToBodyMap[body.id] = body;
      this.dispatchEvent(this.addBodyEvent);
    }
    /**
     * Remove a rigid body from the simulation.
     */


    removeBody(body) {
      body.world = null;
      const n = this.bodies.length - 1;
      const bodies = this.bodies;
      const idx = bodies.indexOf(body);

      if (idx !== -1) {
        bodies.splice(idx, 1); // Todo: should use a garbage free method
        // Recompute index

        for (let i = 0; i !== bodies.length; i++) {
          bodies[i].index = i;
        }

        this.collisionMatrix.setNumObjects(n);
        this.removeBodyEvent.body = body;
        delete this.idToBodyMap[body.id];
        this.dispatchEvent(this.removeBodyEvent);
      }
    }

    getBodyById(id) {
      return this.idToBodyMap[id];
    }
    /**
     * @todo Make a faster map
     */


    getShapeById(id) {
      const bodies = this.bodies;

      for (let i = 0; i < bodies.length; i++) {
        const shapes = bodies[i].shapes;

        for (let j = 0; j < shapes.length; j++) {
          const shape = shapes[j];

          if (shape.id === id) {
            return shape;
          }
        }
      }

      return null;
    }
    /**
     * Adds a contact material to the World
     */


    addContactMaterial(cmat) {
      // Add contact material
      this.contactmaterials.push(cmat); // Add current contact material to the material table

      this.contactMaterialTable.set(cmat.materials[0].id, cmat.materials[1].id, cmat);
    }
    /**
     * Removes a contact material from the World.
     */


    removeContactMaterial(cmat) {
      const idx = this.contactmaterials.indexOf(cmat);

      if (idx === -1) {
        return;
      }

      this.contactmaterials.splice(idx, 1);
      this.contactMaterialTable.delete(cmat.materials[0].id, cmat.materials[1].id);
    }
    /**
     * Step the simulation forward keeping track of last called time
     * to be able to step the world at a fixed rate, independently of framerate.
     *
     * @param dt The fixed time step size to use (default: 1 / 60).
     * @param maxSubSteps Maximum number of fixed steps to take per function call (default: 10).
     * @see https://gafferongames.com/post/fix_your_timestep/
     * @example
     *     // Run the simulation independently of framerate every 1 / 60 ms
     *     world.fixedStep()
     */


    fixedStep(dt, maxSubSteps) {
      if (dt === void 0) {
        dt = 1 / 60;
      }

      if (maxSubSteps === void 0) {
        maxSubSteps = 10;
      }

      const time = performance.now() / 1000; // seconds

      if (!this.lastCallTime) {
        this.step(dt, undefined, maxSubSteps);
      } else {
        const timeSinceLastCalled = time - this.lastCallTime;
        this.step(dt, timeSinceLastCalled, maxSubSteps);
      }

      this.lastCallTime = time;
    }
    /**
     * Step the physics world forward in time.
     *
     * There are two modes. The simple mode is fixed timestepping without interpolation. In this case you only use the first argument. The second case uses interpolation. In that you also provide the time since the function was last used, as well as the maximum fixed timesteps to take.
     *
     * @param dt The fixed time step size to use.
     * @param timeSinceLastCalled The time elapsed since the function was last called.
     * @param maxSubSteps Maximum number of fixed steps to take per function call (default: 10).
     * @see https://web.archive.org/web/20180426154531/http://bulletphysics.org/mediawiki-1.5.8/index.php/Stepping_The_World#What_do_the_parameters_to_btDynamicsWorld::stepSimulation_mean.3F
     * @example
     *     // fixed timestepping without interpolation
     *     world.step(1 / 60)
     */


    step(dt, timeSinceLastCalled, maxSubSteps) {
      if (maxSubSteps === void 0) {
        maxSubSteps = 10;
      }

      if (timeSinceLastCalled === undefined) {
        // Fixed, simple stepping
        this.internalStep(dt); // Increment time

        this.time += dt;
      } else {
        this.accumulator += timeSinceLastCalled;
        const t0 = performance.now();
        let substeps = 0;

        while (this.accumulator >= dt && substeps < maxSubSteps) {
          // Do fixed steps to catch up
          this.internalStep(dt);
          this.accumulator -= dt;
          substeps++;

          if (performance.now() - t0 > dt * 1000) {
            // The framerate is not interactive anymore.
            // We are below the target framerate.
            // Better bail out.
            break;
          }
        } // Remove the excess accumulator, since we may not
        // have had enough substeps available to catch up


        this.accumulator = this.accumulator % dt;
        const t = this.accumulator / dt;

        for (let j = 0; j !== this.bodies.length; j++) {
          const b = this.bodies[j];
          b.previousPosition.lerp(b.position, t, b.interpolatedPosition);
          b.previousQuaternion.slerp(b.quaternion, t, b.interpolatedQuaternion);
          b.previousQuaternion.normalize();
        }

        this.time += timeSinceLastCalled;
      }
    }

    internalStep(dt) {
      this.dt = dt;
      const contacts = this.contacts;
      const p1 = World_step_p1;
      const p2 = World_step_p2;
      const N = this.bodies.length;
      const bodies = this.bodies;
      const solver = this.solver;
      const gravity = this.gravity;
      const doProfiling = this.doProfiling;
      const profile = this.profile;
      const DYNAMIC = Body.DYNAMIC;
      let profilingStart = -Infinity;
      const constraints = this.constraints;
      const frictionEquationPool = World_step_frictionEquationPool;
      gravity.length();
      const gx = gravity.x;
      const gy = gravity.y;
      const gz = gravity.z;
      let i = 0;

      if (doProfiling) {
        profilingStart = performance.now();
      } // Add gravity to all objects


      for (i = 0; i !== N; i++) {
        const bi = bodies[i];

        if (bi.type === DYNAMIC) {
          // Only for dynamic bodies
          const f = bi.force;
          const m = bi.mass;
          f.x += m * gx;
          f.y += m * gy;
          f.z += m * gz;
        }
      } // Update subsystems


      for (let i = 0, Nsubsystems = this.subsystems.length; i !== Nsubsystems; i++) {
        this.subsystems[i].update();
      } // Collision detection


      if (doProfiling) {
        profilingStart = performance.now();
      }

      p1.length = 0; // Clean up pair arrays from last step

      p2.length = 0;
      this.broadphase.collisionPairs(this, p1, p2);

      if (doProfiling) {
        profile.broadphase = performance.now() - profilingStart;
      } // Remove constrained pairs with collideConnected == false


      let Nconstraints = constraints.length;

      for (i = 0; i !== Nconstraints; i++) {
        const c = constraints[i];

        if (!c.collideConnected) {
          for (let j = p1.length - 1; j >= 0; j -= 1) {
            if (c.bodyA === p1[j] && c.bodyB === p2[j] || c.bodyB === p1[j] && c.bodyA === p2[j]) {
              p1.splice(j, 1);
              p2.splice(j, 1);
            }
          }
        }
      }

      this.collisionMatrixTick(); // Generate contacts

      if (doProfiling) {
        profilingStart = performance.now();
      }

      const oldcontacts = World_step_oldContacts;
      const NoldContacts = contacts.length;

      for (i = 0; i !== NoldContacts; i++) {
        oldcontacts.push(contacts[i]);
      }

      contacts.length = 0; // Transfer FrictionEquation from current list to the pool for reuse

      const NoldFrictionEquations = this.frictionEquations.length;

      for (i = 0; i !== NoldFrictionEquations; i++) {
        frictionEquationPool.push(this.frictionEquations[i]);
      }

      this.frictionEquations.length = 0;
      this.narrowphase.getContacts(p1, p2, this, contacts, oldcontacts, // To be reused
      this.frictionEquations, frictionEquationPool);

      if (doProfiling) {
        profile.narrowphase = performance.now() - profilingStart;
      } // Loop over all collisions


      if (doProfiling) {
        profilingStart = performance.now();
      } // Add all friction eqs


      for (i = 0; i < this.frictionEquations.length; i++) {
        solver.addEquation(this.frictionEquations[i]);
      }

      const ncontacts = contacts.length;

      for (let k = 0; k !== ncontacts; k++) {
        // Current contact
        const c = contacts[k]; // Get current collision indeces

        const bi = c.bi;
        const bj = c.bj;
        const si = c.si;
        const sj = c.sj; // Get collision properties

        let cm;

        if (bi.material && bj.material) {
          cm = this.getContactMaterial(bi.material, bj.material) || this.defaultContactMaterial;
        } else {
          cm = this.defaultContactMaterial;
        } // c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;


        cm.friction; // c.restitution = cm.restitution;
        // If friction or restitution were specified in the material, use them

        if (bi.material && bj.material) {
          if (bi.material.friction >= 0 && bj.material.friction >= 0) {
            bi.material.friction * bj.material.friction;
          }

          if (bi.material.restitution >= 0 && bj.material.restitution >= 0) {
            c.restitution = bi.material.restitution * bj.material.restitution;
          }
        } // c.setSpookParams(
        //           cm.contactEquationStiffness,
        //           cm.contactEquationRelaxation,
        //           dt
        //       );


        solver.addEquation(c); // // Add friction constraint equation
        // if(mu > 0){
        // 	// Create 2 tangent equations
        // 	const mug = mu * gnorm;
        // 	const reducedMass = (bi.invMass + bj.invMass);
        // 	if(reducedMass > 0){
        // 		reducedMass = 1/reducedMass;
        // 	}
        // 	const pool = frictionEquationPool;
        // 	const c1 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);
        // 	const c2 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);
        // 	this.frictionEquations.push(c1, c2);
        // 	c1.bi = c2.bi = bi;
        // 	c1.bj = c2.bj = bj;
        // 	c1.minForce = c2.minForce = -mug*reducedMass;
        // 	c1.maxForce = c2.maxForce = mug*reducedMass;
        // 	// Copy over the relative vectors
        // 	c1.ri.copy(c.ri);
        // 	c1.rj.copy(c.rj);
        // 	c2.ri.copy(c.ri);
        // 	c2.rj.copy(c.rj);
        // 	// Construct tangents
        // 	c.ni.tangents(c1.t, c2.t);
        //           // Set spook params
        //           c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);
        //           c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);
        //           c1.enabled = c2.enabled = c.enabled;
        // 	// Add equations to solver
        // 	solver.addEquation(c1);
        // 	solver.addEquation(c2);
        // }

        if (bi.allowSleep && bi.type === Body.DYNAMIC && bi.sleepState === Body.SLEEPING && bj.sleepState === Body.AWAKE && bj.type !== Body.STATIC) {
          const speedSquaredB = bj.velocity.lengthSquared() + bj.angularVelocity.lengthSquared();
          const speedLimitSquaredB = bj.sleepSpeedLimit ** 2;

          if (speedSquaredB >= speedLimitSquaredB * 2) {
            bi.wakeUpAfterNarrowphase = true;
          }
        }

        if (bj.allowSleep && bj.type === Body.DYNAMIC && bj.sleepState === Body.SLEEPING && bi.sleepState === Body.AWAKE && bi.type !== Body.STATIC) {
          const speedSquaredA = bi.velocity.lengthSquared() + bi.angularVelocity.lengthSquared();
          const speedLimitSquaredA = bi.sleepSpeedLimit ** 2;

          if (speedSquaredA >= speedLimitSquaredA * 2) {
            bj.wakeUpAfterNarrowphase = true;
          }
        } // Now we know that i and j are in contact. Set collision matrix state


        this.collisionMatrix.set(bi, bj, true);

        if (!this.collisionMatrixPrevious.get(bi, bj)) {
          // First contact!
          // We reuse the collideEvent object, otherwise we will end up creating new objects for each new contact, even if there's no event listener attached.
          World_step_collideEvent.body = bj;
          World_step_collideEvent.contact = c;
          bi.dispatchEvent(World_step_collideEvent);
          World_step_collideEvent.body = bi;
          bj.dispatchEvent(World_step_collideEvent);
        }

        this.bodyOverlapKeeper.set(bi.id, bj.id);
        this.shapeOverlapKeeper.set(si.id, sj.id);
      }

      this.emitContactEvents();

      if (doProfiling) {
        profile.makeContactConstraints = performance.now() - profilingStart;
        profilingStart = performance.now();
      } // Wake up bodies


      for (i = 0; i !== N; i++) {
        const bi = bodies[i];

        if (bi.wakeUpAfterNarrowphase) {
          bi.wakeUp();
          bi.wakeUpAfterNarrowphase = false;
        }
      } // Add user-added constraints


      Nconstraints = constraints.length;

      for (i = 0; i !== Nconstraints; i++) {
        const c = constraints[i];
        c.update();

        for (let j = 0, Neq = c.equations.length; j !== Neq; j++) {
          const eq = c.equations[j];
          solver.addEquation(eq);
        }
      } // Solve the constrained system


      solver.solve(dt, this);

      if (doProfiling) {
        profile.solve = performance.now() - profilingStart;
      } // Remove all contacts from solver


      solver.removeAllEquations(); // Apply damping, see http://code.google.com/p/bullet/issues/detail?id=74 for details

      const pow = Math.pow;

      for (i = 0; i !== N; i++) {
        const bi = bodies[i];

        if (bi.type & DYNAMIC) {
          // Only for dynamic bodies
          const ld = pow(1.0 - bi.linearDamping, dt);
          const v = bi.velocity;
          v.scale(ld, v);
          const av = bi.angularVelocity;

          if (av) {
            const ad = pow(1.0 - bi.angularDamping, dt);
            av.scale(ad, av);
          }
        }
      }

      this.dispatchEvent(World_step_preStepEvent); // Leap frog
      // vnew = v + h*f/m
      // xnew = x + h*vnew

      if (doProfiling) {
        profilingStart = performance.now();
      }

      const stepnumber = this.stepnumber;
      const quatNormalize = stepnumber % (this.quatNormalizeSkip + 1) === 0;
      const quatNormalizeFast = this.quatNormalizeFast;

      for (i = 0; i !== N; i++) {
        bodies[i].integrate(dt, quatNormalize, quatNormalizeFast);
      }

      this.clearForces();
      this.broadphase.dirty = true;

      if (doProfiling) {
        profile.integrate = performance.now() - profilingStart;
      } // Update step number


      this.stepnumber += 1;
      this.dispatchEvent(World_step_postStepEvent); // Sleeping update

      let hasActiveBodies = true;

      if (this.allowSleep) {
        hasActiveBodies = false;

        for (i = 0; i !== N; i++) {
          const bi = bodies[i];
          bi.sleepTick(this.time);

          if (bi.sleepState !== Body.SLEEPING) {
            hasActiveBodies = true;
          }
        }
      }

      this.hasActiveBodies = hasActiveBodies;
    }

    emitContactEvents() {
      const hasBeginContact = this.hasAnyEventListener('beginContact');
      const hasEndContact = this.hasAnyEventListener('endContact');

      if (hasBeginContact || hasEndContact) {
        this.bodyOverlapKeeper.getDiff(additions, removals);
      }

      if (hasBeginContact) {
        for (let i = 0, l = additions.length; i < l; i += 2) {
          beginContactEvent.bodyA = this.getBodyById(additions[i]);
          beginContactEvent.bodyB = this.getBodyById(additions[i + 1]);
          this.dispatchEvent(beginContactEvent);
        }

        beginContactEvent.bodyA = beginContactEvent.bodyB = null;
      }

      if (hasEndContact) {
        for (let i = 0, l = removals.length; i < l; i += 2) {
          endContactEvent.bodyA = this.getBodyById(removals[i]);
          endContactEvent.bodyB = this.getBodyById(removals[i + 1]);
          this.dispatchEvent(endContactEvent);
        }

        endContactEvent.bodyA = endContactEvent.bodyB = null;
      }

      additions.length = removals.length = 0;
      const hasBeginShapeContact = this.hasAnyEventListener('beginShapeContact');
      const hasEndShapeContact = this.hasAnyEventListener('endShapeContact');

      if (hasBeginShapeContact || hasEndShapeContact) {
        this.shapeOverlapKeeper.getDiff(additions, removals);
      }

      if (hasBeginShapeContact) {
        for (let i = 0, l = additions.length; i < l; i += 2) {
          const shapeA = this.getShapeById(additions[i]);
          const shapeB = this.getShapeById(additions[i + 1]);
          beginShapeContactEvent.shapeA = shapeA;
          beginShapeContactEvent.shapeB = shapeB;
          if (shapeA) beginShapeContactEvent.bodyA = shapeA.body;
          if (shapeB) beginShapeContactEvent.bodyB = shapeB.body;
          this.dispatchEvent(beginShapeContactEvent);
        }

        beginShapeContactEvent.bodyA = beginShapeContactEvent.bodyB = beginShapeContactEvent.shapeA = beginShapeContactEvent.shapeB = null;
      }

      if (hasEndShapeContact) {
        for (let i = 0, l = removals.length; i < l; i += 2) {
          const shapeA = this.getShapeById(removals[i]);
          const shapeB = this.getShapeById(removals[i + 1]);
          endShapeContactEvent.shapeA = shapeA;
          endShapeContactEvent.shapeB = shapeB;
          if (shapeA) endShapeContactEvent.bodyA = shapeA.body;
          if (shapeB) endShapeContactEvent.bodyB = shapeB.body;
          this.dispatchEvent(endShapeContactEvent);
        }

        endShapeContactEvent.bodyA = endShapeContactEvent.bodyB = endShapeContactEvent.shapeA = endShapeContactEvent.shapeB = null;
      }
    }
    /**
     * Sets all body forces in the world to zero.
     */


    clearForces() {
      const bodies = this.bodies;
      const N = bodies.length;

      for (let i = 0; i !== N; i++) {
        const b = bodies[i];
        b.force;
        b.torque;
        b.force.set(0, 0, 0);
        b.torque.set(0, 0, 0);
      }
    }

  } // Temp stuff

  new AABB();
  const tmpRay = new Ray(); // performance.now() fallback on Date.now()

  const performance = globalThis.performance || {};

  if (!performance.now) {
    let nowOffset = Date.now();

    if (performance.timing && performance.timing.navigationStart) {
      nowOffset = performance.timing.navigationStart;
    }

    performance.now = () => Date.now() - nowOffset;
  }

  new Vec3(); // Dispatched after the world has stepped forward in time.
  // Reusable event objects to save memory.

  const World_step_postStepEvent = {
    type: 'postStep'
  }; // Dispatched before the world steps forward in time.

  const World_step_preStepEvent = {
    type: 'preStep'
  };
  const World_step_collideEvent = {
    type: Body.COLLIDE_EVENT_NAME,
    body: null,
    contact: null
  }; // Pools for unused objects

  const World_step_oldContacts = [];
  const World_step_frictionEquationPool = []; // Reusable arrays for collision pairs

  const World_step_p1 = [];
  const World_step_p2 = []; // Stuff for emitContactEvents

  const additions = [];
  const removals = [];
  const beginContactEvent = {
    type: 'beginContact',
    bodyA: null,
    bodyB: null
  };
  const endContactEvent = {
    type: 'endContact',
    bodyA: null,
    bodyB: null
  };
  const beginShapeContactEvent = {
    type: 'beginShapeContact',
    bodyA: null,
    bodyB: null,
    shapeA: null,
    shapeB: null
  };
  const endShapeContactEvent = {
    type: 'endShapeContact',
    bodyA: null,
    bodyB: null,
    shapeA: null,
    shapeB: null
  };

  const addContactMaterial = (world, createMaterial, _ref, uuid) => {
    let [materialA, materialB, options] = _ref;
    const matA = createMaterial(materialA);
    const matB = createMaterial(materialB);
    const contactMaterial = new ContactMaterial(matA, matB, options);
    contactMaterial.uuid = uuid;
    world.addContactMaterial(contactMaterial);
  };
  const removeContactMaterial = (world, cmUUID) => {
    const index = world.contactmaterials.findIndex(_ref2 => {
      let {
        uuid
      } = _ref2;
      return uuid === cmUUID;
    });
    const [{
      id: i
    }, {
      id: j
    }] = world.contactmaterials[index].materials;
    world.contactmaterials.splice(index, 1);
    delete world.contactMaterialTable.data[i < j ? `${i}-${j}` : `${j}-${i}`];
  };

  let materialId = 0;
  const createMaterialFactory = materials => function (nameOrOptions) {
    if (nameOrOptions === void 0) {
      nameOrOptions = {};
    }
    const materialOptions = typeof nameOrOptions === 'string' ? {
      name: nameOrOptions
    } : {
      name: Symbol.for(`Material${materialId++}`),
      ...nameOrOptions
    };
    const {
      name
    } = materialOptions;
    materials[name] = materials[name] || new Material(materialOptions);
    return materials[name];
  };

  /**
   * @typedef { import('cannon-es').MaterialOptions } MaterialOptions
   */

  const makeVec3 = _ref => {
    let [x, y, z] = _ref;
    return new Vec3(x, y, z);
  };
  const prepareSphere = args => Array.isArray(args) ? args : [args];
  const prepareConvexPolyhedron = _ref2 => {
    let [v, faces, n, a, boundingSphereRadius] = _ref2;
    return [{
      axes: a ? a.map(makeVec3) : undefined,
      boundingSphereRadius,
      faces,
      normals: n ? n.map(makeVec3) : undefined,
      vertices: v ? v.map(makeVec3) : undefined
    }];
  };
  function createShape(type, args) {
    switch (type) {
      case 'Box':
        return new Box(new Vec3(...args.map(v => v / 2)));
      // extents => halfExtents
      case 'ConvexPolyhedron':
        return new ConvexPolyhedron(...prepareConvexPolyhedron(args));
      case 'Cylinder':
        return new Cylinder(...args);
      // [ radiusTop, radiusBottom, height, numSegments ] = args
      case 'Heightfield':
        return new Heightfield(...args);
      // [ Array data, options: {minValue, maxValue, elementSize}  ] = args
      case 'Particle':
        return new Particle();
      // no args
      case 'Plane':
        return new Plane();
      // no args, infinite x and y
      case 'Sphere':
        return new Sphere(...prepareSphere(args));
      // radius = args
      case 'Trimesh':
        return new Trimesh(...args);
      // [vertices, indices] = args
    }
  }

  /**
   * @function
   * @param {Object} options
   * @param {string} options.uuid
   * @param {BodyProps} options.props
   * @param {BodyShapeType} options.type
   * @param {(materialOptions: MaterialOptions) => Material =} options.createMaterial
   * @returns {Body}
   */
  const propsToBody = options => {
    const {
      uuid,
      props,
      type,
      createMaterial = materialOptions => new Material(materialOptions)
    } = options;
    const {
      angularFactor = [1, 1, 1],
      angularVelocity = [0, 0, 0],
      args = [],
      collisionResponse,
      linearFactor = [1, 1, 1],
      mass,
      material,
      onCollide,
      position = [0, 0, 0],
      rotation = [0, 0, 0],
      shapes,
      type: bodyType,
      velocity = [0, 0, 0],
      ...extra
    } = props;
    const body = new Body({
      ...extra,
      mass: bodyType === 'Static' ? 0 : mass,
      material: material ? createMaterial(material) : undefined,
      type: bodyType ? Body[bodyType.toUpperCase()] : undefined
    });
    body.uuid = uuid;
    if (collisionResponse !== undefined) {
      body.collisionResponse = collisionResponse;
    }
    if (type === 'Compound') {
      shapes.forEach(_ref3 => {
        let {
          type,
          args,
          position,
          rotation,
          material,
          ...extra
        } = _ref3;
        const shapeBody = body.addShape(createShape(type, args), position ? new Vec3(...position) : undefined, rotation ? new Quaternion().setFromEuler(...rotation) : undefined);
        if (material) shapeBody.material = createMaterial(material);
        Object.assign(shapeBody, extra);
      });
    } else {
      body.addShape(createShape(type, args));
    }
    body.position.set(position[0], position[1], position[2]);
    body.quaternion.setFromEuler(rotation[0], rotation[1], rotation[2]);
    body.velocity.set(velocity[0], velocity[1], velocity[2]);
    body.angularVelocity.set(angularVelocity[0], angularVelocity[1], angularVelocity[2]);
    body.linearFactor.set(linearFactor[0], linearFactor[1], linearFactor[2]);
    body.angularFactor.set(angularFactor[0], angularFactor[1], angularFactor[2]);
    return body;
  };

  const addBodies = (state, createMaterial, _ref) => {
    let {
      props,
      type,
      uuid
    } = _ref;
    for (let i = 0; i < uuid.length; i++) {
      const body = propsToBody({
        createMaterial,
        props: props[i],
        type,
        uuid: uuid[i]
      });
      state.world.addBody(body);
      if (props[i].onCollide) body.addEventListener('collide', _ref2 => {
        let {
          type,
          body,
          target,
          contact
        } = _ref2;
        if (!body.uuid || !target.uuid) return;
        const {
          ni,
          ri,
          rj,
          bi,
          bj,
          id
        } = contact;
        const contactPoint = bi.position.vadd(ri);
        const contactNormal = bi === body ? ni : ni.scale(-1);
        self.postMessage({
          body: body.uuid,
          collisionFilters: {
            bodyFilterGroup: body.collisionFilterGroup,
            bodyFilterMask: body.collisionFilterMask,
            targetFilterGroup: target.collisionFilterGroup,
            targetFilterMask: target.collisionFilterMask
          },
          contact: {
            // @ts-expect-error TODO: use id instead of uuid
            bi: bi.uuid,
            // @ts-expect-error TODO: use id instead of uuid
            bj: bj.uuid,
            // Normal of the contact, relative to the colliding body
            contactNormal: contactNormal.toArray(),
            // World position of the contact
            contactPoint: contactPoint.toArray(),
            id,
            impactVelocity: contact.getImpactVelocityAlongNormal(),
            ni: ni.toArray(),
            ri: ri.toArray(),
            rj: rj.toArray()
          },
          op: 'event',
          target: target.uuid,
          type
        });
      });
    }
  };

  const tripletToVec3 = t => t ? new Vec3(...t) : undefined;

  const addConstraint = (state, _ref) => {
    let {
      props: [bodyA, bodyB, {
        angle,
        axisA,
        axisB,
        collideConnected,
        distance,
        maxForce,
        maxMultiplier,
        pivotA,
        pivotB,
        twistAngle,
        wakeUpBodies
      }],
      type,
      uuid
    } = _ref;
    let constraint;
    switch (type) {
      case 'PointToPoint':
        constraint = new PointToPointConstraint(state.bodies[bodyA], tripletToVec3(pivotA), state.bodies[bodyB], tripletToVec3(pivotB), maxForce);
        break;
      case 'ConeTwist':
        constraint = new ConeTwistConstraint(state.bodies[bodyA], state.bodies[bodyB], {
          angle,
          axisA: tripletToVec3(axisA),
          axisB: tripletToVec3(axisB),
          collideConnected,
          maxForce,
          pivotA: tripletToVec3(pivotA),
          pivotB: tripletToVec3(pivotB),
          twistAngle
        });
        break;
      case 'Hinge':
        constraint = new HingeConstraint(state.bodies[bodyA], state.bodies[bodyB], {
          axisA: tripletToVec3(axisA),
          axisB: tripletToVec3(axisB),
          collideConnected,
          maxForce,
          pivotA: tripletToVec3(pivotA),
          pivotB: tripletToVec3(pivotB)
        });
        break;
      case 'Distance':
        constraint = new DistanceConstraint(state.bodies[bodyA], state.bodies[bodyB], distance, maxForce);
        break;
      case 'Lock':
        constraint = new LockConstraint(state.bodies[bodyA], state.bodies[bodyB], {
          maxForce
        });
        break;
      default:
        constraint = new Constraint(state.bodies[bodyA], state.bodies[bodyB], {
          collideConnected,
          wakeUpBodies
        });
        break;
    }
    constraint.uuid = uuid;
    state.world.addConstraint(constraint);
    if (maxMultiplier !== undefined) {
      const postStepConstraint = () => {
        // The multiplier is proportional to how much force is added to the bodies by the constraint.
        // If this exceeds a limit the constraint is disabled.
        const multiplier = Math.abs(constraint.equations[0].multiplier);
        if (multiplier > maxMultiplier) {
          constraint.disable();
        }
      };
      state.constraints[uuid] = postStepConstraint;
      state.world.addEventListener('postStep', state.constraints[uuid]);
    }
  };

  function toUppercase(str) {
    return str.toUpperCase();
  }
  const addRay = (state, _ref) => {
    let {
      props: {
        from,
        mode,
        to,
        ...rayOptions
      },
      uuid
    } = _ref;
    const ray = new Ray(tripletToVec3(from), tripletToVec3(to));
    const options = {
      mode: RAY_MODES[toUppercase(mode)],
      result: new RaycastResult(),
      ...rayOptions
    };
    state.rays[uuid] = () => {
      ray.intersectWorld(state.world, options);
      if (!options.result || !options.result.body) return;
      const {
        body,
        shape,
        rayFromWorld,
        rayToWorld,
        hitNormalWorld,
        hitPointWorld,
        ...rest
      } = options.result;
      const bodyUUID = body.uuid;
      if (!bodyUUID) return;
      self.postMessage({
        body: bodyUUID,
        hitNormalWorld: hitNormalWorld.toArray(),
        hitPointWorld: hitPointWorld.toArray(),
        op: 'event',
        ray: {
          collisionFilterGroup: ray.collisionFilterGroup,
          collisionFilterMask: ray.collisionFilterMask,
          direction: ray.direction.toArray(),
          from,
          to,
          uuid
        },
        rayFromWorld: rayFromWorld.toArray(),
        rayToWorld: rayToWorld.toArray(),
        shape: shape ? {
          ...shape,
          body: bodyUUID
        } : null,
        type: 'rayhit',
        ...rest
      });
    };
    state.world.addEventListener('preStep', state.rays[uuid]);
  };

  const addRaycastVehicle = (state, data) => {
    const [chassisBody, wheels, wheelInfos, indexForwardAxis, indexRightAxis, indexUpAxis] = data.props;
    const vehicle = new RaycastVehicle({
      chassisBody: state.bodies[chassisBody],
      indexForwardAxis,
      indexRightAxis,
      indexUpAxis
    });
    vehicle.world = state.world;
    for (let i = 0; i < wheelInfos.length; i++) {
      const {
        axleLocal,
        chassisConnectionPointLocal,
        directionLocal,
        ...rest
      } = wheelInfos[i];
      vehicle.addWheel({
        axleLocal: tripletToVec3(axleLocal),
        chassisConnectionPointLocal: tripletToVec3(chassisConnectionPointLocal),
        directionLocal: tripletToVec3(directionLocal),
        ...rest
      });
    }
    const preStep = () => {
      vehicle.updateVehicle(state.world.dt);
    };
    const postStep = () => {
      for (let i = 0; i < vehicle.wheelInfos.length; i++) {
        vehicle.updateWheelTransform(i);
        const t = vehicle.wheelInfos[i].worldTransform;
        const wheelBody = state.bodies[wheels[i]];
        wheelBody.position.copy(t.position);
        wheelBody.quaternion.copy(t.quaternion);
      }
    };
    state.vehicles[data.uuid] = {
      postStep,
      preStep,
      vehicle
    };
    state.world.addEventListener('preStep', preStep);
    state.world.addEventListener('postStep', postStep);
  };

  const addSpring = (state, _ref) => {
    let {
      props: [bodyA, bodyB, {
        damping,
        localAnchorA,
        localAnchorB,
        restLength,
        stiffness,
        worldAnchorA,
        worldAnchorB
      }],
      uuid
    } = _ref;
    const spring = new Spring(state.bodies[bodyA], state.bodies[bodyB], {
      damping,
      localAnchorA: tripletToVec3(localAnchorA),
      localAnchorB: tripletToVec3(localAnchorB),
      restLength,
      stiffness,
      worldAnchorA: tripletToVec3(worldAnchorA),
      worldAnchorB: tripletToVec3(worldAnchorB)
    });
    spring.uuid = uuid;
    const postStepSpring = () => spring.applyForce();
    state.springs[uuid] = postStepSpring;
    state.springInstances[uuid] = spring;

    // Compute the force after each step
    state.world.addEventListener('postStep', state.springs[uuid]);
  };

  function emitBeginContact(_ref) {
    let {
      bodyA,
      bodyB
    } = _ref;
    if (!(bodyA != null && bodyA.uuid) || !(bodyB != null && bodyB.uuid)) return;
    self.postMessage({
      bodyA: bodyA.uuid,
      bodyB: bodyB.uuid,
      op: 'event',
      type: 'collideBegin'
    });
  }
  function emitEndContact(_ref2) {
    let {
      bodyA,
      bodyB
    } = _ref2;
    if (!(bodyA != null && bodyA.uuid) || !(bodyB != null && bodyB.uuid)) return;
    self.postMessage({
      bodyA: bodyA.uuid,
      bodyB: bodyB.uuid,
      op: 'event',
      type: 'collideEnd'
    });
  }
  const init = (world, _ref3) => {
    let {
      allowSleep,
      axisIndex = 0,
      broadphase,
      defaultContactMaterial,
      frictionGravity,
      gravity,
      iterations,
      quatNormalizeFast,
      quatNormalizeSkip,
      solver,
      tolerance
    } = _ref3;
    world.allowSleep = allowSleep;
    world.gravity.set(...gravity);
    world.frictionGravity = frictionGravity ? new Vec3(...frictionGravity) : undefined;
    world.quatNormalizeFast = quatNormalizeFast;
    world.quatNormalizeSkip = quatNormalizeSkip;
    if (solver === 'Split') {
      world.solver = new SplitSolver(new GSSolver());
    }
    if (world.solver instanceof GSSolver) {
      world.solver.tolerance = tolerance;
      world.solver.iterations = iterations;
    }
    world.broadphase = broadphase === 'SAP' ? new SAPBroadphase(world) : new NaiveBroadphase();
    if (world.broadphase instanceof SAPBroadphase) {
      world.broadphase.axisIndex = axisIndex;
    }
    world.addEventListener('beginContact', emitBeginContact);
    world.addEventListener('endContact', emitEndContact);
    Object.assign(world.defaultContactMaterial, defaultContactMaterial);
  };

  const isQorV = v => v instanceof Quaternion || v instanceof Vec3;
  const step = (state, _ref) => {
    let {
      positions,
      props: {
        maxSubSteps,
        stepSize,
        timeSinceLastCalled
      },
      quaternions
    } = _ref;
    state.world.step(stepSize, timeSinceLastCalled, maxSubSteps);
    for (let i = 0; i < state.world.bodies.length; i += 1) {
      const p = state.world.bodies[i].position;
      const q = state.world.bodies[i].quaternion;
      positions[3 * i + 0] = p.x;
      positions[3 * i + 1] = p.y;
      positions[3 * i + 2] = p.z;
      quaternions[4 * i + 0] = q.x;
      quaternions[4 * i + 1] = q.y;
      quaternions[4 * i + 2] = q.z;
      quaternions[4 * i + 3] = q.w;
    }
    const observations = [];
    for (const id of Object.keys(state.subscriptions)) {
      const [uuid, type, target = 'bodies'] = state.subscriptions[id];
      const {
        bodies,
        vehicles
      } = state;
      const value = target === 'vehicles' ?
      // @ts-expect-error TODO: Differentiate these "types"
      vehicles[uuid].vehicle[type] :
      // @ts-expect-error TODO: Differentiate these "types"
      bodies[uuid][type];
      const serializableValue = isQorV(value) ? value.toArray() : value;
      observations.push([Number(id), serializableValue,
      // @ts-expect-error TODO: Differentiate these "types"
      type]);
    }
    const message = {
      active: state.world.hasActiveBodies,
      observations,
      op: 'frame',
      positions,
      quaternions
    };
    if (state.bodiesNeedSyncing) {
      message.bodies = state.world.bodies.reduce((bodies, body) => {
        if (body.uuid) bodies.push(body.uuid);
        return bodies;
      }, []);
      state.bodiesNeedSyncing = false;
    }
    self.postMessage(message, [positions.buffer, quaternions.buffer]);
  };

  const state = {
    bodies: {},
    bodiesNeedSyncing: false,
    constraints: {},
    materials: {},
    rays: {},
    springInstances: {},
    springs: {},
    subscriptions: {},
    vehicles: {},
    world: new World()
  };

  /// <reference no-default-lib="true"/>
  const isHingeConstraint = c => c instanceof HingeConstraint;
  function syncBodies() {
    state.bodiesNeedSyncing = true;
    state.bodies = state.world.bodies.reduce((bodies, body) => body.uuid ? {
      ...bodies,
      [body.uuid]: body
    } : bodies, {});
  }
  const broadphases = {
    NaiveBroadphase,
    SAPBroadphase
  };
  const createMaterial = createMaterialFactory(state.materials);
  self.onmessage = _ref => {
    let {
      data
    } = _ref;
    switch (data.op) {
      case 'init':
        {
          init(state.world, data.props);
          break;
        }
      case 'step':
        {
          step(state, data);
          break;
        }
      case 'addBodies':
        {
          addBodies(state, createMaterial, data);
          syncBodies();
          break;
        }
      case 'removeBodies':
        {
          for (let i = 0; i < data.uuid.length; i++) {
            state.world.removeBody(state.bodies[data.uuid[i]]);
            const key = Object.keys(state.subscriptions).find(k => state.subscriptions[k][0] === data.uuid[i]);
            if (key) {
              delete state.subscriptions[key];
            }
          }
          syncBodies();
          break;
        }
      case 'subscribe':
        {
          const {
            id,
            target,
            type
          } = data.props;
          state.subscriptions[id] = [data.uuid, type, target];
          break;
        }
      case 'unsubscribe':
        {
          delete state.subscriptions[data.props];
          break;
        }
      case 'setPosition':
        state.bodies[data.uuid].position.set(data.props[0], data.props[1], data.props[2]);
        break;
      case 'setQuaternion':
        state.bodies[data.uuid].quaternion.set(data.props[0], data.props[1], data.props[2], data.props[3]);
        break;
      case 'setRotation':
        state.bodies[data.uuid].quaternion.setFromEuler(data.props[0], data.props[1], data.props[2]);
        break;
      case 'setVelocity':
        state.bodies[data.uuid].velocity.set(data.props[0], data.props[1], data.props[2]);
        break;
      case 'setAngularVelocity':
        state.bodies[data.uuid].angularVelocity.set(data.props[0], data.props[1], data.props[2]);
        break;
      case 'setLinearFactor':
        state.bodies[data.uuid].linearFactor.set(data.props[0], data.props[1], data.props[2]);
        break;
      case 'setAngularFactor':
        state.bodies[data.uuid].angularFactor.set(data.props[0], data.props[1], data.props[2]);
        break;
      case 'setMass':
        state.bodies[data.uuid].mass = data.props;
        state.bodies[data.uuid].updateMassProperties();
        break;
      case 'setMaterial':
        state.bodies[data.uuid].material = data.props ? createMaterial(data.props) : null;
        break;
      case 'setLinearDamping':
        state.bodies[data.uuid].linearDamping = data.props;
        break;
      case 'setAngularDamping':
        state.bodies[data.uuid].angularDamping = data.props;
        break;
      case 'setAllowSleep':
        state.bodies[data.uuid].allowSleep = data.props;
        break;
      case 'setSleepSpeedLimit':
        state.bodies[data.uuid].sleepSpeedLimit = data.props;
        break;
      case 'setSleepTimeLimit':
        state.bodies[data.uuid].sleepTimeLimit = data.props;
        break;
      case 'setCollisionFilterGroup':
        state.bodies[data.uuid].collisionFilterGroup = data.props;
        break;
      case 'setCollisionFilterMask':
        state.bodies[data.uuid].collisionFilterMask = data.props;
        break;
      case 'setCollisionResponse':
        state.bodies[data.uuid].collisionResponse = data.props;
        break;
      case 'setFixedRotation':
        state.bodies[data.uuid].fixedRotation = data.props;
        break;
      case 'setFrictionGravity':
        state.world.frictionGravity = data.props ? new Vec3(...data.props) : undefined;
        break;
      case 'setIsTrigger':
        state.bodies[data.uuid].isTrigger = data.props;
        break;
      case 'setGravity':
        state.world.gravity.set(data.props[0], data.props[1], data.props[2]);
        break;
      case 'setTolerance':
        if (state.world.solver instanceof GSSolver) {
          state.world.solver.tolerance = data.props;
        }
        break;
      case 'setIterations':
        if (state.world.solver instanceof GSSolver) {
          state.world.solver.iterations = data.props;
        }
        break;
      case 'setBroadphase':
        state.world.broadphase = new (broadphases[`${data.props}Broadphase`] || NaiveBroadphase)(state.world);
        break;
      case 'setAxisIndex':
        if (state.world.broadphase instanceof SAPBroadphase) {
          state.world.broadphase.axisIndex = data.props === undefined || data.props === null ? 0 : data.props;
        }
        break;
      case 'applyForce':
        state.bodies[data.uuid].applyForce(new Vec3(...data.props[0]), new Vec3(...data.props[1]));
        break;
      case 'applyImpulse':
        state.bodies[data.uuid].applyImpulse(new Vec3(...data.props[0]), new Vec3(...data.props[1]));
        break;
      case 'applyLocalForce':
        state.bodies[data.uuid].applyLocalForce(new Vec3(...data.props[0]), new Vec3(...data.props[1]));
        break;
      case 'applyLocalImpulse':
        state.bodies[data.uuid].applyLocalImpulse(new Vec3(...data.props[0]), new Vec3(...data.props[1]));
        break;
      case 'applyTorque':
        state.bodies[data.uuid].applyTorque(new Vec3(...data.props[0]));
        break;
      case 'addConstraint':
        {
          addConstraint(state, data);
          break;
        }
      case 'removeConstraint':
        state.world.constraints.filter(_ref2 => {
          let {
            uuid
          } = _ref2;
          return uuid === data.uuid;
        }).map(c => state.world.removeConstraint(c));
        if (state.constraints[data.uuid]) {
          state.world.removeEventListener('postStep', state.constraints[data.uuid]);
          delete state.constraints[data.uuid];
        }
        break;
      case 'enableConstraint':
        state.world.constraints.filter(c => c.uuid === data.uuid).map(c => c.enable());
        break;
      case 'disableConstraint':
        state.world.constraints.filter(c => c.uuid === data.uuid).map(c => c.disable());
        break;
      case 'enableConstraintMotor':
        state.world.constraints.filter(c => c.uuid === data.uuid).filter(isHingeConstraint).map(c => c.enableMotor());
        break;
      case 'disableConstraintMotor':
        state.world.constraints.filter(c => c.uuid === data.uuid).filter(isHingeConstraint).map(c => c.disableMotor());
        break;
      case 'setConstraintMotorSpeed':
        state.world.constraints.filter(c => c.uuid === data.uuid).filter(isHingeConstraint).map(c => c.setMotorSpeed(data.props));
        break;
      case 'setConstraintMotorMaxForce':
        state.world.constraints.filter(c => c.uuid === data.uuid).filter(isHingeConstraint).map(c => c.setMotorMaxForce(data.props));
        break;
      case 'addSpring':
        {
          addSpring(state, data);
          break;
        }
      case 'setSpringStiffness':
        {
          state.springInstances[data.uuid].stiffness = data.props;
          break;
        }
      case 'setSpringRestLength':
        {
          state.springInstances[data.uuid].restLength = data.props;
          break;
        }
      case 'setSpringDamping':
        {
          state.springInstances[data.uuid].damping = data.props;
          break;
        }
      case 'removeSpring':
        {
          state.world.removeEventListener('postStep', state.springs[data.uuid]);
          break;
        }
      case 'addRay':
        {
          addRay(state, data);
          break;
        }
      case 'removeRay':
        {
          state.world.removeEventListener('preStep', state.rays[data.uuid]);
          delete state.rays[data.uuid];
          break;
        }
      case 'addRaycastVehicle':
        {
          addRaycastVehicle(state, data);
          break;
        }
      case 'removeRaycastVehicle':
        {
          state.world.removeEventListener('preStep', state.vehicles[data.uuid].preStep);
          state.world.removeEventListener('postStep', state.vehicles[data.uuid].postStep);
          state.vehicles[data.uuid].vehicle.world = null;
          delete state.vehicles[data.uuid];
          const key = Object.keys(state.subscriptions).find(k => state.subscriptions[k][0] === data.uuid);
          if (key) {
            delete state.subscriptions[key];
          }
          break;
        }
      case 'setRaycastVehicleSteeringValue':
        {
          const [value, wheelIndex] = data.props;
          state.vehicles[data.uuid].vehicle.setSteeringValue(value, wheelIndex);
          break;
        }
      case 'applyRaycastVehicleEngineForce':
        {
          const [value, wheelIndex] = data.props;
          state.vehicles[data.uuid].vehicle.applyEngineForce(value, wheelIndex);
          break;
        }
      case 'setRaycastVehicleBrake':
        {
          const [brake, wheelIndex] = data.props;
          state.vehicles[data.uuid].vehicle.setBrake(brake, wheelIndex);
          break;
        }
      case 'addContactMaterial':
        {
          addContactMaterial(state.world, createMaterial, data.props, data.uuid);
          break;
        }
      case 'removeContactMaterial':
        {
          removeContactMaterial(state.world, data.uuid);
          break;
        }
      case 'wakeUp':
        {
          state.bodies[data.uuid].wakeUp();
          break;
        }
      case 'sleep':
        {
          state.bodies[data.uuid].sleep();
          break;
        }
    }
  };

})();

', 'data:application/json;charset=utf-8;base64,{"version":3,"file":"index.js","sources":["../../node_modules/cannon-es/dist/cannon-es.js","src/worker/contact-material.ts","src/worker/material.ts","src/props-to-body.js","src/worker/operations/add-bodies.ts","src/worker/triplet-to-vec3.ts","src/worker/operations/add-constraint.ts","src/worker/operations/add-ray.ts","src/worker/operations/add-raycast-vehicle.ts","src/worker/operations/add-spring.ts","src/worker/operations/init.ts","src/worker/operations/step.ts","src/worker/state.ts","src/worker/index.ts"],"sourcesContent":["/**\n * Records what objects are colliding with each other\n */\nclass ObjectCollisionMatrix {\n  /**\n   * The matrix storage.\n   */\n\n  /**\n   * @todo Remove useless constructor\n   */\n  constructor() {\n    this.matrix = {};\n  }\n  /**\n   * get\n   */\n\n\n  get(bi, bj) {\n    let {\n      id: i\n    } = bi;\n    let {\n      id: j\n    } = bj;\n\n    if (j > i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    return `${i}-${j}` in this.matrix;\n  }\n  /**\n   * set\n   */\n\n\n  set(bi, bj, value) {\n    let {\n      id: i\n    } = bi;\n    let {\n      id: j\n    } = bj;\n\n    if (j > i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    if (value) {\n      this.matrix[`${i}-${j}`] = true;\n    } else {\n      delete this.matrix[`${i}-${j}`];\n    }\n  }\n  /**\n   * Empty the matrix\n   */\n\n\n  reset() {\n    this.matrix = {};\n  }\n  /**\n   * Set max number of objects\n   */\n\n\n  setNumObjects(n) {}\n\n}\n\n/**\n * A 3x3 matrix.\n * Authored by {@link http://github.com/schteppe/ schteppe}\n */\nclass Mat3 {\n  /**\n   * A vector of length 9, containing all matrix elements.\n   */\n\n  /**\n   * @param elements A vector of length 9, containing all matrix elements.\n   */\n  constructor(elements) {\n    if (elements === void 0) {\n      elements = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    }\n\n    this.elements = elements;\n  }\n  /**\n   * Sets the matrix to identity\n   * @todo Should perhaps be renamed to `setIdentity()` to be more clear.\n   * @todo Create another function that immediately creates an identity matrix eg. `eye()`\n   */\n\n\n  identity() {\n    const e = this.elements;\n    e[0] = 1;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n    e[4] = 1;\n    e[5] = 0;\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 1;\n  }\n  /**\n   * Set all elements to zero\n   */\n\n\n  setZero() {\n    const e = this.elements;\n    e[0] = 0;\n    e[1] = 0;\n    e[2] = 0;\n    e[3] = 0;\n    e[4] = 0;\n    e[5] = 0;\n    e[6] = 0;\n    e[7] = 0;\n    e[8] = 0;\n  }\n  /**\n   * Sets the matrix diagonal elements from a Vec3\n   */\n\n\n  setTrace(vector) {\n    const e = this.elements;\n    e[0] = vector.x;\n    e[4] = vector.y;\n    e[8] = vector.z;\n  }\n  /**\n   * Gets the matrix diagonal elements\n   */\n\n\n  getTrace(target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const e = this.elements;\n    target.x = e[0];\n    target.y = e[4];\n    target.z = e[8];\n    return target;\n  }\n  /**\n   * Matrix-Vector multiplication\n   * @param v The vector to multiply with\n   * @param target Optional, target to save the result in.\n   */\n\n\n  vmult(v, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const e = this.elements;\n    const x = v.x;\n    const y = v.y;\n    const z = v.z;\n    target.x = e[0] * x + e[1] * y + e[2] * z;\n    target.y = e[3] * x + e[4] * y + e[5] * z;\n    target.z = e[6] * x + e[7] * y + e[8] * z;\n    return target;\n  }\n  /**\n   * Matrix-scalar multiplication\n   */\n\n\n  smult(s) {\n    for (let i = 0; i < this.elements.length; i++) {\n      this.elements[i] *= s;\n    }\n  }\n  /**\n   * Matrix multiplication\n   * @param matrix Matrix to multiply with from left side.\n   */\n\n\n  mmult(matrix, target) {\n    if (target === void 0) {\n      target = new Mat3();\n    }\n\n    const A = this.elements;\n    const B = matrix.elements;\n    const T = target.elements;\n    const a11 = A[0],\n          a12 = A[1],\n          a13 = A[2],\n          a21 = A[3],\n          a22 = A[4],\n          a23 = A[5],\n          a31 = A[6],\n          a32 = A[7],\n          a33 = A[8];\n    const b11 = B[0],\n          b12 = B[1],\n          b13 = B[2],\n          b21 = B[3],\n          b22 = B[4],\n          b23 = B[5],\n          b31 = B[6],\n          b32 = B[7],\n          b33 = B[8];\n    T[0] = a11 * b11 + a12 * b21 + a13 * b31;\n    T[1] = a11 * b12 + a12 * b22 + a13 * b32;\n    T[2] = a11 * b13 + a12 * b23 + a13 * b33;\n    T[3] = a21 * b11 + a22 * b21 + a23 * b31;\n    T[4] = a21 * b12 + a22 * b22 + a23 * b32;\n    T[5] = a21 * b13 + a22 * b23 + a23 * b33;\n    T[6] = a31 * b11 + a32 * b21 + a33 * b31;\n    T[7] = a31 * b12 + a32 * b22 + a33 * b32;\n    T[8] = a31 * b13 + a32 * b23 + a33 * b33;\n    return target;\n  }\n  /**\n   * Scale each column of the matrix\n   */\n\n\n  scale(vector, target) {\n    if (target === void 0) {\n      target = new Mat3();\n    }\n\n    const e = this.elements;\n    const t = target.elements;\n\n    for (let i = 0; i !== 3; i++) {\n      t[3 * i + 0] = vector.x * e[3 * i + 0];\n      t[3 * i + 1] = vector.y * e[3 * i + 1];\n      t[3 * i + 2] = vector.z * e[3 * i + 2];\n    }\n\n    return target;\n  }\n  /**\n   * Solve Ax=b\n   * @param b The right hand side\n   * @param target Optional. Target vector to save in.\n   * @return The solution x\n   * @todo should reuse arrays\n   */\n\n\n  solve(b, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    // Construct equations\n    const nr = 3; // num rows\n\n    const nc = 4; // num cols\n\n    const eqns = [];\n    let i;\n    let j;\n\n    for (i = 0; i < nr * nc; i++) {\n      eqns.push(0);\n    }\n\n    for (i = 0; i < 3; i++) {\n      for (j = 0; j < 3; j++) {\n        eqns[i + nc * j] = this.elements[i + 3 * j];\n      }\n    }\n\n    eqns[3 + 4 * 0] = b.x;\n    eqns[3 + 4 * 1] = b.y;\n    eqns[3 + 4 * 2] = b.z; // Compute right upper triangular version of the matrix - Gauss elimination\n\n    let n = 3;\n    const k = n;\n    let np;\n    const kp = 4; // num rows\n\n    let p;\n\n    do {\n      i = k - n;\n\n      if (eqns[i + nc * i] === 0) {\n        // the pivot is null, swap lines\n        for (j = i + 1; j < k; j++) {\n          if (eqns[i + nc * j] !== 0) {\n            np = kp;\n\n            do {\n              // do ligne( i ) = ligne( i ) + ligne( k )\n              p = kp - np;\n              eqns[p + nc * i] += eqns[p + nc * j];\n            } while (--np);\n\n            break;\n          }\n        }\n      }\n\n      if (eqns[i + nc * i] !== 0) {\n        for (j = i + 1; j < k; j++) {\n          const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n          np = kp;\n\n          do {\n            // do ligne( k ) = ligne( k ) - multiplier * ligne( i )\n            p = kp - np;\n            eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n          } while (--np);\n        }\n      }\n    } while (--n); // Get the solution\n\n\n    target.z = eqns[2 * nc + 3] / eqns[2 * nc + 2];\n    target.y = (eqns[1 * nc + 3] - eqns[1 * nc + 2] * target.z) / eqns[1 * nc + 1];\n    target.x = (eqns[0 * nc + 3] - eqns[0 * nc + 2] * target.z - eqns[0 * nc + 1] * target.y) / eqns[0 * nc + 0];\n\n    if (isNaN(target.x) || isNaN(target.y) || isNaN(target.z) || target.x === Infinity || target.y === Infinity || target.z === Infinity) {\n      throw `Could not solve equation! Got x=[${target.toString()}], b=[${b.toString()}], A=[${this.toString()}]`;\n    }\n\n    return target;\n  }\n  /**\n   * Get an element in the matrix by index. Index starts at 0, not 1!!!\n   * @param value If provided, the matrix element will be set to this value.\n   */\n\n\n  e(row, column, value) {\n    if (value === undefined) {\n      return this.elements[column + 3 * row];\n    } else {\n      // Set value\n      this.elements[column + 3 * row] = value;\n    }\n  }\n  /**\n   * Copy another matrix into this matrix object.\n   */\n\n\n  copy(matrix) {\n    for (let i = 0; i < matrix.elements.length; i++) {\n      this.elements[i] = matrix.elements[i];\n    }\n\n    return this;\n  }\n  /**\n   * Returns a string representation of the matrix.\n   */\n\n\n  toString() {\n    let r = '';\n    const sep = ',';\n\n    for (let i = 0; i < 9; i++) {\n      r += this.elements[i] + sep;\n    }\n\n    return r;\n  }\n  /**\n   * reverse the matrix\n   * @param target Target matrix to save in.\n   * @return The solution x\n   */\n\n\n  reverse(target) {\n    if (target === void 0) {\n      target = new Mat3();\n    }\n\n    // Construct equations\n    const nr = 3; // num rows\n\n    const nc = 6; // num cols\n\n    const eqns = reverse_eqns;\n    let i;\n    let j;\n\n    for (i = 0; i < 3; i++) {\n      for (j = 0; j < 3; j++) {\n        eqns[i + nc * j] = this.elements[i + 3 * j];\n      }\n    }\n\n    eqns[3 + 6 * 0] = 1;\n    eqns[3 + 6 * 1] = 0;\n    eqns[3 + 6 * 2] = 0;\n    eqns[4 + 6 * 0] = 0;\n    eqns[4 + 6 * 1] = 1;\n    eqns[4 + 6 * 2] = 0;\n    eqns[5 + 6 * 0] = 0;\n    eqns[5 + 6 * 1] = 0;\n    eqns[5 + 6 * 2] = 1; // Compute right upper triangular version of the matrix - Gauss elimination\n\n    let n = 3;\n    const k = n;\n    let np;\n    const kp = nc; // num rows\n\n    let p;\n\n    do {\n      i = k - n;\n\n      if (eqns[i + nc * i] === 0) {\n        // the pivot is null, swap lines\n        for (j = i + 1; j < k; j++) {\n          if (eqns[i + nc * j] !== 0) {\n            np = kp;\n\n            do {\n              // do line( i ) = line( i ) + line( k )\n              p = kp - np;\n              eqns[p + nc * i] += eqns[p + nc * j];\n            } while (--np);\n\n            break;\n          }\n        }\n      }\n\n      if (eqns[i + nc * i] !== 0) {\n        for (j = i + 1; j < k; j++) {\n          const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n          np = kp;\n\n          do {\n            // do line( k ) = line( k ) - multiplier * line( i )\n            p = kp - np;\n            eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n          } while (--np);\n        }\n      }\n    } while (--n); // eliminate the upper left triangle of the matrix\n\n\n    i = 2;\n\n    do {\n      j = i - 1;\n\n      do {\n        const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n        np = nc;\n\n        do {\n          p = nc - np;\n          eqns[p + nc * j] = eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n        } while (--np);\n      } while (j--);\n    } while (--i); // operations on the diagonal\n\n\n    i = 2;\n\n    do {\n      const multiplier = 1 / eqns[i + nc * i];\n      np = nc;\n\n      do {\n        p = nc - np;\n        eqns[p + nc * i] = eqns[p + nc * i] * multiplier;\n      } while (--np);\n    } while (i--);\n\n    i = 2;\n\n    do {\n      j = 2;\n\n      do {\n        p = eqns[nr + j + nc * i];\n\n        if (isNaN(p) || p === Infinity) {\n          throw `Could not reverse! A=[${this.toString()}]`;\n        }\n\n        target.e(i, j, p);\n      } while (j--);\n    } while (i--);\n\n    return target;\n  }\n  /**\n   * Set the matrix from a quaterion\n   */\n\n\n  setRotationFromQuaternion(q) {\n    const x = q.x;\n    const y = q.y;\n    const z = q.z;\n    const w = q.w;\n    const x2 = x + x;\n    const y2 = y + y;\n    const z2 = z + z;\n    const xx = x * x2;\n    const xy = x * y2;\n    const xz = x * z2;\n    const yy = y * y2;\n    const yz = y * z2;\n    const zz = z * z2;\n    const wx = w * x2;\n    const wy = w * y2;\n    const wz = w * z2;\n    const e = this.elements;\n    e[3 * 0 + 0] = 1 - (yy + zz);\n    e[3 * 0 + 1] = xy - wz;\n    e[3 * 0 + 2] = xz + wy;\n    e[3 * 1 + 0] = xy + wz;\n    e[3 * 1 + 1] = 1 - (xx + zz);\n    e[3 * 1 + 2] = yz - wx;\n    e[3 * 2 + 0] = xz - wy;\n    e[3 * 2 + 1] = yz + wx;\n    e[3 * 2 + 2] = 1 - (xx + yy);\n    return this;\n  }\n  /**\n   * Transpose the matrix\n   * @param target Optional. Where to store the result.\n   * @return The target Mat3, or a new Mat3 if target was omitted.\n   */\n\n\n  transpose(target) {\n    if (target === void 0) {\n      target = new Mat3();\n    }\n\n    const M = this.elements;\n    const T = target.elements;\n    let tmp; //Set diagonals\n\n    T[0] = M[0];\n    T[4] = M[4];\n    T[8] = M[8];\n    tmp = M[1];\n    T[1] = M[3];\n    T[3] = tmp;\n    tmp = M[2];\n    T[2] = M[6];\n    T[6] = tmp;\n    tmp = M[5];\n    T[5] = M[7];\n    T[7] = tmp;\n    return target;\n  }\n\n}\nconst reverse_eqns = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n/**\n * 3-dimensional vector\n * @example\n *     const v = new Vec3(1, 2, 3)\n *     console.log('x=' + v.x) // x=1\n */\n\nclass Vec3 {\n  constructor(x, y, z) {\n    if (x === void 0) {\n      x = 0.0;\n    }\n\n    if (y === void 0) {\n      y = 0.0;\n    }\n\n    if (z === void 0) {\n      z = 0.0;\n    }\n\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n  /**\n   * Vector cross product\n   * @param target Optional target to save in.\n   */\n\n\n  cross(vector, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const vx = vector.x;\n    const vy = vector.y;\n    const vz = vector.z;\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    target.x = y * vz - z * vy;\n    target.y = z * vx - x * vz;\n    target.z = x * vy - y * vx;\n    return target;\n  }\n  /**\n   * Set the vectors' 3 elements\n   */\n\n\n  set(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n  }\n  /**\n   * Set all components of the vector to zero.\n   */\n\n\n  setZero() {\n    this.x = this.y = this.z = 0;\n  }\n  /**\n   * Vector addition\n   */\n\n\n  vadd(vector, target) {\n    if (target) {\n      target.x = vector.x + this.x;\n      target.y = vector.y + this.y;\n      target.z = vector.z + this.z;\n    } else {\n      return new Vec3(this.x + vector.x, this.y + vector.y, this.z + vector.z);\n    }\n  }\n  /**\n   * Vector subtraction\n   * @param target Optional target to save in.\n   */\n\n\n  vsub(vector, target) {\n    if (target) {\n      target.x = this.x - vector.x;\n      target.y = this.y - vector.y;\n      target.z = this.z - vector.z;\n    } else {\n      return new Vec3(this.x - vector.x, this.y - vector.y, this.z - vector.z);\n    }\n  }\n  /**\n   * Get the cross product matrix a_cross from a vector, such that a x b = a_cross * b = c\n   *\n   * See {@link https://www8.cs.umu.se/kurser/TDBD24/VT06/lectures/Lecture6.pdf Umeå University Lecture}\n   */\n\n\n  crossmat() {\n    return new Mat3([0, -this.z, this.y, this.z, 0, -this.x, -this.y, this.x, 0]);\n  }\n  /**\n   * Normalize the vector. Note that this changes the values in the vector.\n    * @return Returns the norm of the vector\n   */\n\n\n  normalize() {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const n = Math.sqrt(x * x + y * y + z * z);\n\n    if (n > 0.0) {\n      const invN = 1 / n;\n      this.x *= invN;\n      this.y *= invN;\n      this.z *= invN;\n    } else {\n      // Make something up\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n    }\n\n    return n;\n  }\n  /**\n   * Get the version of this vector that is of length 1.\n   * @param target Optional target to save in\n   * @return Returns the unit vector\n   */\n\n\n  unit(target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    let ninv = Math.sqrt(x * x + y * y + z * z);\n\n    if (ninv > 0.0) {\n      ninv = 1.0 / ninv;\n      target.x = x * ninv;\n      target.y = y * ninv;\n      target.z = z * ninv;\n    } else {\n      target.x = 1;\n      target.y = 0;\n      target.z = 0;\n    }\n\n    return target;\n  }\n  /**\n   * Get the length of the vector\n   */\n\n\n  length() {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n  /**\n   * Get the squared length of the vector.\n   */\n\n\n  lengthSquared() {\n    return this.dot(this);\n  }\n  /**\n   * Get distance from this point to another point\n   */\n\n\n  distanceTo(p) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const px = p.x;\n    const py = p.y;\n    const pz = p.z;\n    return Math.sqrt((px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z));\n  }\n  /**\n   * Get squared distance from this point to another point\n   */\n\n\n  distanceSquared(p) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const px = p.x;\n    const py = p.y;\n    const pz = p.z;\n    return (px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z);\n  }\n  /**\n   * Multiply all the components of the vector with a scalar.\n   * @param target The vector to save the result in.\n   */\n\n\n  scale(scalar, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    target.x = scalar * x;\n    target.y = scalar * y;\n    target.z = scalar * z;\n    return target;\n  }\n  /**\n   * Multiply the vector with an other vector, component-wise.\n   * @param target The vector to save the result in.\n   */\n\n\n  vmul(vector, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    target.x = vector.x * this.x;\n    target.y = vector.y * this.y;\n    target.z = vector.z * this.z;\n    return target;\n  }\n  /**\n   * Scale a vector and add it to this vector. Save the result in \"target\". (target = this + vector * scalar)\n   * @param target The vector to save the result in.\n   */\n\n\n  addScaledVector(scalar, vector, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    target.x = this.x + scalar * vector.x;\n    target.y = this.y + scalar * vector.y;\n    target.z = this.z + scalar * vector.z;\n    return target;\n  }\n  /**\n   * Calculate dot product\n   * @param vector\n   */\n\n\n  dot(vector) {\n    return this.x * vector.x + this.y * vector.y + this.z * vector.z;\n  }\n\n  isZero() {\n    return this.x === 0 && this.y === 0 && this.z === 0;\n  }\n  /**\n   * Make the vector point in the opposite direction.\n   * @param target Optional target to save in\n   */\n\n\n  negate(target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    return target;\n  }\n  /**\n   * Compute two artificial tangents to the vector\n   * @param t1 Vector object to save the first tangent in\n   * @param t2 Vector object to save the second tangent in\n   */\n\n\n  tangents(t1, t2) {\n    const norm = this.length();\n\n    if (norm > 0.0) {\n      const n = Vec3_tangents_n;\n      const inorm = 1 / norm;\n      n.set(this.x * inorm, this.y * inorm, this.z * inorm);\n      const randVec = Vec3_tangents_randVec;\n\n      if (Math.abs(n.x) < 0.9) {\n        randVec.set(1, 0, 0);\n        n.cross(randVec, t1);\n      } else {\n        randVec.set(0, 1, 0);\n        n.cross(randVec, t1);\n      }\n\n      n.cross(t1, t2);\n    } else {\n      // The normal length is zero, make something up\n      t1.set(1, 0, 0);\n      t2.set(0, 1, 0);\n    }\n  }\n  /**\n   * Converts to a more readable format\n   */\n\n\n  toString() {\n    return `${this.x},${this.y},${this.z}`;\n  }\n  /**\n   * Converts to an array\n   */\n\n\n  toArray() {\n    return [this.x, this.y, this.z];\n  }\n  /**\n   * Copies value of source to this vector.\n   */\n\n\n  copy(vector) {\n    this.x = vector.x;\n    this.y = vector.y;\n    this.z = vector.z;\n    return this;\n  }\n  /**\n   * Do a linear interpolation between two vectors\n   * @param t A number between 0 and 1. 0 will make this function return u, and 1 will make it return v. Numbers in between will generate a vector in between them.\n   */\n\n\n  lerp(vector, t, target) {\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    target.x = x + (vector.x - x) * t;\n    target.y = y + (vector.y - y) * t;\n    target.z = z + (vector.z - z) * t;\n  }\n  /**\n   * Check if a vector equals is almost equal to another one.\n   */\n\n\n  almostEquals(vector, precision) {\n    if (precision === void 0) {\n      precision = 1e-6;\n    }\n\n    if (Math.abs(this.x - vector.x) > precision || Math.abs(this.y - vector.y) > precision || Math.abs(this.z - vector.z) > precision) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Check if a vector is almost zero\n   */\n\n\n  almostZero(precision) {\n    if (precision === void 0) {\n      precision = 1e-6;\n    }\n\n    if (Math.abs(this.x) > precision || Math.abs(this.y) > precision || Math.abs(this.z) > precision) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Check if the vector is anti-parallel to another vector.\n   * @param precision Set to zero for exact comparisons\n   */\n\n\n  isAntiparallelTo(vector, precision) {\n    this.negate(antip_neg);\n    return antip_neg.almostEquals(vector, precision);\n  }\n  /**\n   * Clone the vector\n   */\n\n\n  clone() {\n    return new Vec3(this.x, this.y, this.z);\n  }\n\n}\nVec3.ZERO = new Vec3(0, 0, 0);\nVec3.UNIT_X = new Vec3(1, 0, 0);\nVec3.UNIT_Y = new Vec3(0, 1, 0);\nVec3.UNIT_Z = new Vec3(0, 0, 1);\nconst Vec3_tangents_n = new Vec3();\nconst Vec3_tangents_randVec = new Vec3();\nconst antip_neg = new Vec3();\n\n/**\n * Axis aligned bounding box class.\n */\nclass AABB {\n  /**\n   * The lower bound of the bounding box\n   */\n\n  /**\n   * The upper bound of the bounding box\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.lowerBound = new Vec3();\n    this.upperBound = new Vec3();\n\n    if (options.lowerBound) {\n      this.lowerBound.copy(options.lowerBound);\n    }\n\n    if (options.upperBound) {\n      this.upperBound.copy(options.upperBound);\n    }\n  }\n  /**\n   * Set the AABB bounds from a set of points.\n   * @param points An array of Vec3's.\n   * @return The self object\n   */\n\n\n  setFromPoints(points, position, quaternion, skinSize) {\n    const l = this.lowerBound;\n    const u = this.upperBound;\n    const q = quaternion; // Set to the first point\n\n    l.copy(points[0]);\n\n    if (q) {\n      q.vmult(l, l);\n    }\n\n    u.copy(l);\n\n    for (let i = 1; i < points.length; i++) {\n      let p = points[i];\n\n      if (q) {\n        q.vmult(p, tmp$1);\n        p = tmp$1;\n      }\n\n      if (p.x > u.x) {\n        u.x = p.x;\n      }\n\n      if (p.x < l.x) {\n        l.x = p.x;\n      }\n\n      if (p.y > u.y) {\n        u.y = p.y;\n      }\n\n      if (p.y < l.y) {\n        l.y = p.y;\n      }\n\n      if (p.z > u.z) {\n        u.z = p.z;\n      }\n\n      if (p.z < l.z) {\n        l.z = p.z;\n      }\n    } // Add offset\n\n\n    if (position) {\n      position.vadd(l, l);\n      position.vadd(u, u);\n    }\n\n    if (skinSize) {\n      l.x -= skinSize;\n      l.y -= skinSize;\n      l.z -= skinSize;\n      u.x += skinSize;\n      u.y += skinSize;\n      u.z += skinSize;\n    }\n\n    return this;\n  }\n  /**\n   * Copy bounds from an AABB to this AABB\n   * @param aabb Source to copy from\n   * @return The this object, for chainability\n   */\n\n\n  copy(aabb) {\n    this.lowerBound.copy(aabb.lowerBound);\n    this.upperBound.copy(aabb.upperBound);\n    return this;\n  }\n  /**\n   * Clone an AABB\n   */\n\n\n  clone() {\n    return new AABB().copy(this);\n  }\n  /**\n   * Extend this AABB so that it covers the given AABB too.\n   */\n\n\n  extend(aabb) {\n    this.lowerBound.x = Math.min(this.lowerBound.x, aabb.lowerBound.x);\n    this.upperBound.x = Math.max(this.upperBound.x, aabb.upperBound.x);\n    this.lowerBound.y = Math.min(this.lowerBound.y, aabb.lowerBound.y);\n    this.upperBound.y = Math.max(this.upperBound.y, aabb.upperBound.y);\n    this.lowerBound.z = Math.min(this.lowerBound.z, aabb.lowerBound.z);\n    this.upperBound.z = Math.max(this.upperBound.z, aabb.upperBound.z);\n  }\n  /**\n   * Returns true if the given AABB overlaps this AABB.\n   */\n\n\n  overlaps(aabb) {\n    const l1 = this.lowerBound;\n    const u1 = this.upperBound;\n    const l2 = aabb.lowerBound;\n    const u2 = aabb.upperBound; //      l2        u2\n    //      |---------|\n    // |--------|\n    // l1       u1\n\n    const overlapsX = l2.x <= u1.x && u1.x <= u2.x || l1.x <= u2.x && u2.x <= u1.x;\n    const overlapsY = l2.y <= u1.y && u1.y <= u2.y || l1.y <= u2.y && u2.y <= u1.y;\n    const overlapsZ = l2.z <= u1.z && u1.z <= u2.z || l1.z <= u2.z && u2.z <= u1.z;\n    return overlapsX && overlapsY && overlapsZ;\n  } // Mostly for debugging\n\n\n  volume() {\n    const l = this.lowerBound;\n    const u = this.upperBound;\n    return (u.x - l.x) * (u.y - l.y) * (u.z - l.z);\n  }\n  /**\n   * Returns true if the given AABB is fully contained in this AABB.\n   */\n\n\n  contains(aabb) {\n    const l1 = this.lowerBound;\n    const u1 = this.upperBound;\n    const l2 = aabb.lowerBound;\n    const u2 = aabb.upperBound; //      l2        u2\n    //      |---------|\n    // |---------------|\n    // l1              u1\n\n    return l1.x <= l2.x && u1.x >= u2.x && l1.y <= l2.y && u1.y >= u2.y && l1.z <= l2.z && u1.z >= u2.z;\n  }\n\n  getCorners(a, b, c, d, e, f, g, h) {\n    const l = this.lowerBound;\n    const u = this.upperBound;\n    a.copy(l);\n    b.set(u.x, l.y, l.z);\n    c.set(u.x, u.y, l.z);\n    d.set(l.x, u.y, u.z);\n    e.set(u.x, l.y, u.z);\n    f.set(l.x, u.y, l.z);\n    g.set(l.x, l.y, u.z);\n    h.copy(u);\n  }\n  /**\n   * Get the representation of an AABB in another frame.\n   * @return The \"target\" AABB object.\n   */\n\n\n  toLocalFrame(frame, target) {\n    const corners = transformIntoFrame_corners;\n    const a = corners[0];\n    const b = corners[1];\n    const c = corners[2];\n    const d = corners[3];\n    const e = corners[4];\n    const f = corners[5];\n    const g = corners[6];\n    const h = corners[7]; // Get corners in current frame\n\n    this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame\n\n    for (let i = 0; i !== 8; i++) {\n      const corner = corners[i];\n      frame.pointToLocal(corner, corner);\n    }\n\n    return target.setFromPoints(corners);\n  }\n  /**\n   * Get the representation of an AABB in the global frame.\n   * @return The \"target\" AABB object.\n   */\n\n\n  toWorldFrame(frame, target) {\n    const corners = transformIntoFrame_corners;\n    const a = corners[0];\n    const b = corners[1];\n    const c = corners[2];\n    const d = corners[3];\n    const e = corners[4];\n    const f = corners[5];\n    const g = corners[6];\n    const h = corners[7]; // Get corners in current frame\n\n    this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame\n\n    for (let i = 0; i !== 8; i++) {\n      const corner = corners[i];\n      frame.pointToWorld(corner, corner);\n    }\n\n    return target.setFromPoints(corners);\n  }\n  /**\n   * Check if the AABB is hit by a ray.\n   */\n\n\n  overlapsRay(ray) {\n    const {\n      direction,\n      from\n    } = ray; // const t = 0\n    // ray.direction is unit direction vector of ray\n\n    const dirFracX = 1 / direction.x;\n    const dirFracY = 1 / direction.y;\n    const dirFracZ = 1 / direction.z; // this.lowerBound is the corner of AABB with minimal coordinates - left bottom, rt is maximal corner\n\n    const t1 = (this.lowerBound.x - from.x) * dirFracX;\n    const t2 = (this.upperBound.x - from.x) * dirFracX;\n    const t3 = (this.lowerBound.y - from.y) * dirFracY;\n    const t4 = (this.upperBound.y - from.y) * dirFracY;\n    const t5 = (this.lowerBound.z - from.z) * dirFracZ;\n    const t6 = (this.upperBound.z - from.z) * dirFracZ; // const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)));\n    // const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)));\n\n    const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)), Math.min(t5, t6));\n    const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)), Math.max(t5, t6)); // if tmax < 0, ray (line) is intersecting AABB, but whole AABB is behing us\n\n    if (tmax < 0) {\n      //t = tmax;\n      return false;\n    } // if tmin > tmax, ray doesn't intersect AABB\n\n\n    if (tmin > tmax) {\n      //t = tmax;\n      return false;\n    }\n\n    return true;\n  }\n\n}\nconst tmp$1 = new Vec3();\nconst transformIntoFrame_corners = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\n\n/**\n * Collision \"matrix\".\n * It's actually a triangular-shaped array of whether two bodies are touching this step, for reference next step\n */\nclass ArrayCollisionMatrix {\n  /**\n   * The matrix storage.\n   */\n  constructor() {\n    this.matrix = [];\n  }\n  /**\n   * Get an element\n   */\n\n\n  get(bi, bj) {\n    let {\n      index: i\n    } = bi;\n    let {\n      index: j\n    } = bj;\n\n    if (j > i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    return this.matrix[(i * (i + 1) >> 1) + j - 1];\n  }\n  /**\n   * Set an element\n   */\n\n\n  set(bi, bj, value) {\n    let {\n      index: i\n    } = bi;\n    let {\n      index: j\n    } = bj;\n\n    if (j > i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    this.matrix[(i * (i + 1) >> 1) + j - 1] = value ? 1 : 0;\n  }\n  /**\n   * Sets all elements to zero\n   */\n\n\n  reset() {\n    for (let i = 0, l = this.matrix.length; i !== l; i++) {\n      this.matrix[i] = 0;\n    }\n  }\n  /**\n   * Sets the max number of objects\n   */\n\n\n  setNumObjects(n) {\n    this.matrix.length = n * (n - 1) >> 1;\n  }\n\n}\n\n/**\n * Base class for objects that dispatches events.\n */\nclass EventTarget {\n  /**\n   * Add an event listener\n   * @return The self object, for chainability.\n   */\n  addEventListener(type, listener) {\n    if (this._listeners === undefined) {\n      this._listeners = {};\n    }\n\n    const listeners = this._listeners;\n\n    if (listeners[type] === undefined) {\n      listeners[type] = [];\n    }\n\n    if (!listeners[type].includes(listener)) {\n      listeners[type].push(listener);\n    }\n\n    return this;\n  }\n  /**\n   * Check if an event listener is added\n   */\n\n\n  hasEventListener(type, listener) {\n    if (this._listeners === undefined) {\n      return false;\n    }\n\n    const listeners = this._listeners;\n\n    if (listeners[type] !== undefined && listeners[type].includes(listener)) {\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Check if any event listener of the given type is added\n   */\n\n\n  hasAnyEventListener(type) {\n    if (this._listeners === undefined) {\n      return false;\n    }\n\n    const listeners = this._listeners;\n    return listeners[type] !== undefined;\n  }\n  /**\n   * Remove an event listener\n   * @return The self object, for chainability.\n   */\n\n\n  removeEventListener(type, listener) {\n    if (this._listeners === undefined) {\n      return this;\n    }\n\n    const listeners = this._listeners;\n\n    if (listeners[type] === undefined) {\n      return this;\n    }\n\n    const index = listeners[type].indexOf(listener);\n\n    if (index !== -1) {\n      listeners[type].splice(index, 1);\n    }\n\n    return this;\n  }\n  /**\n   * Emit an event.\n   * @return The self object, for chainability.\n   */\n\n\n  dispatchEvent(event) {\n    if (this._listeners === undefined) {\n      return this;\n    }\n\n    const listeners = this._listeners;\n    const listenerArray = listeners[event.type];\n\n    if (listenerArray !== undefined) {\n      event.target = this;\n\n      for (let i = 0, l = listenerArray.length; i < l; i++) {\n        listenerArray[i].call(this, event);\n      }\n    }\n\n    return this;\n  }\n\n}\n\n/**\n * A Quaternion describes a rotation in 3D space. The Quaternion is mathematically defined as Q = x*i + y*j + z*k + w, where (i,j,k) are imaginary basis vectors. (x,y,z) can be seen as a vector related to the axis of rotation, while the real multiplier, w, is related to the amount of rotation.\n * @param x Multiplier of the imaginary basis vector i.\n * @param y Multiplier of the imaginary basis vector j.\n * @param z Multiplier of the imaginary basis vector k.\n * @param w Multiplier of the real part.\n * @see http://en.wikipedia.org/wiki/Quaternion\n */\n\nclass Quaternion {\n  constructor(x, y, z, w) {\n    if (x === void 0) {\n      x = 0;\n    }\n\n    if (y === void 0) {\n      y = 0;\n    }\n\n    if (z === void 0) {\n      z = 0;\n    }\n\n    if (w === void 0) {\n      w = 1;\n    }\n\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n  }\n  /**\n   * Set the value of the quaternion.\n   */\n\n\n  set(x, y, z, w) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n    return this;\n  }\n  /**\n   * Convert to a readable format\n   * @return \"x,y,z,w\"\n   */\n\n\n  toString() {\n    return `${this.x},${this.y},${this.z},${this.w}`;\n  }\n  /**\n   * Convert to an Array\n   * @return [x, y, z, w]\n   */\n\n\n  toArray() {\n    return [this.x, this.y, this.z, this.w];\n  }\n  /**\n   * Set the quaternion components given an axis and an angle in radians.\n   */\n\n\n  setFromAxisAngle(vector, angle) {\n    const s = Math.sin(angle * 0.5);\n    this.x = vector.x * s;\n    this.y = vector.y * s;\n    this.z = vector.z * s;\n    this.w = Math.cos(angle * 0.5);\n    return this;\n  }\n  /**\n   * Converts the quaternion to [ axis, angle ] representation.\n   * @param targetAxis A vector object to reuse for storing the axis.\n   * @return An array, first element is the axis and the second is the angle in radians.\n   */\n\n\n  toAxisAngle(targetAxis) {\n    if (targetAxis === void 0) {\n      targetAxis = new Vec3();\n    }\n\n    this.normalize(); // if w>1 acos and sqrt will produce errors, this cant happen if quaternion is normalised\n\n    const angle = 2 * Math.acos(this.w);\n    const s = Math.sqrt(1 - this.w * this.w); // assuming quaternion normalised then w is less than 1, so term always positive.\n\n    if (s < 0.001) {\n      // test to avoid divide by zero, s is always positive due to sqrt\n      // if s close to zero then direction of axis not important\n      targetAxis.x = this.x; // if it is important that axis is normalised then replace with x=1; y=z=0;\n\n      targetAxis.y = this.y;\n      targetAxis.z = this.z;\n    } else {\n      targetAxis.x = this.x / s; // normalise axis\n\n      targetAxis.y = this.y / s;\n      targetAxis.z = this.z / s;\n    }\n\n    return [targetAxis, angle];\n  }\n  /**\n   * Set the quaternion value given two vectors. The resulting rotation will be the needed rotation to rotate u to v.\n   */\n\n\n  setFromVectors(u, v) {\n    if (u.isAntiparallelTo(v)) {\n      const t1 = sfv_t1;\n      const t2 = sfv_t2;\n      u.tangents(t1, t2);\n      this.setFromAxisAngle(t1, Math.PI);\n    } else {\n      const a = u.cross(v);\n      this.x = a.x;\n      this.y = a.y;\n      this.z = a.z;\n      this.w = Math.sqrt(u.length() ** 2 * v.length() ** 2) + u.dot(v);\n      this.normalize();\n    }\n\n    return this;\n  }\n  /**\n   * Multiply the quaternion with an other quaternion.\n   */\n\n\n  mult(quat, target) {\n    if (target === void 0) {\n      target = new Quaternion();\n    }\n\n    const ax = this.x;\n    const ay = this.y;\n    const az = this.z;\n    const aw = this.w;\n    const bx = quat.x;\n    const by = quat.y;\n    const bz = quat.z;\n    const bw = quat.w;\n    target.x = ax * bw + aw * bx + ay * bz - az * by;\n    target.y = ay * bw + aw * by + az * bx - ax * bz;\n    target.z = az * bw + aw * bz + ax * by - ay * bx;\n    target.w = aw * bw - ax * bx - ay * by - az * bz;\n    return target;\n  }\n  /**\n   * Get the inverse quaternion rotation.\n   */\n\n\n  inverse(target) {\n    if (target === void 0) {\n      target = new Quaternion();\n    }\n\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const w = this.w;\n    this.conjugate(target);\n    const inorm2 = 1 / (x * x + y * y + z * z + w * w);\n    target.x *= inorm2;\n    target.y *= inorm2;\n    target.z *= inorm2;\n    target.w *= inorm2;\n    return target;\n  }\n  /**\n   * Get the quaternion conjugate\n   */\n\n\n  conjugate(target) {\n    if (target === void 0) {\n      target = new Quaternion();\n    }\n\n    target.x = -this.x;\n    target.y = -this.y;\n    target.z = -this.z;\n    target.w = this.w;\n    return target;\n  }\n  /**\n   * Normalize the quaternion. Note that this changes the values of the quaternion.\n   */\n\n\n  normalize() {\n    let l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n\n    if (l === 0) {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n      this.w = 0;\n    } else {\n      l = 1 / l;\n      this.x *= l;\n      this.y *= l;\n      this.z *= l;\n      this.w *= l;\n    }\n\n    return this;\n  }\n  /**\n   * Approximation of quaternion normalization. Works best when quat is already almost-normalized.\n   * @author unphased, https://github.com/unphased\n   */\n\n\n  normalizeFast() {\n    const f = (3.0 - (this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)) / 2.0;\n\n    if (f === 0) {\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n      this.w = 0;\n    } else {\n      this.x *= f;\n      this.y *= f;\n      this.z *= f;\n      this.w *= f;\n    }\n\n    return this;\n  }\n  /**\n   * Multiply the quaternion by a vector\n   */\n\n\n  vmult(v, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const x = v.x;\n    const y = v.y;\n    const z = v.z;\n    const qx = this.x;\n    const qy = this.y;\n    const qz = this.z;\n    const qw = this.w; // q*v\n\n    const ix = qw * x + qy * z - qz * y;\n    const iy = qw * y + qz * x - qx * z;\n    const iz = qw * z + qx * y - qy * x;\n    const iw = -qx * x - qy * y - qz * z;\n    target.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    target.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    target.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return target;\n  }\n  /**\n   * Copies value of source to this quaternion.\n   * @return this\n   */\n\n\n  copy(quat) {\n    this.x = quat.x;\n    this.y = quat.y;\n    this.z = quat.z;\n    this.w = quat.w;\n    return this;\n  }\n  /**\n   * Convert the quaternion to euler angle representation. Order: YZX, as this page describes: https://www.euclideanspace.com/maths/standards/index.htm\n   * @param order Three-character string, defaults to \"YZX\"\n   */\n\n\n  toEuler(target, order) {\n    if (order === void 0) {\n      order = 'YZX';\n    }\n\n    let heading;\n    let attitude;\n    let bank;\n    const x = this.x;\n    const y = this.y;\n    const z = this.z;\n    const w = this.w;\n\n    switch (order) {\n      case 'YZX':\n        const test = x * y + z * w;\n\n        if (test > 0.499) {\n          // singularity at north pole\n          heading = 2 * Math.atan2(x, w);\n          attitude = Math.PI / 2;\n          bank = 0;\n        }\n\n        if (test < -0.499) {\n          // singularity at south pole\n          heading = -2 * Math.atan2(x, w);\n          attitude = -Math.PI / 2;\n          bank = 0;\n        }\n\n        if (heading === undefined) {\n          const sqx = x * x;\n          const sqy = y * y;\n          const sqz = z * z;\n          heading = Math.atan2(2 * y * w - 2 * x * z, 1 - 2 * sqy - 2 * sqz); // Heading\n\n          attitude = Math.asin(2 * test); // attitude\n\n          bank = Math.atan2(2 * x * w - 2 * y * z, 1 - 2 * sqx - 2 * sqz); // bank\n        }\n\n        break;\n\n      default:\n        throw new Error(`Euler order ${order} not supported yet.`);\n    }\n\n    target.y = heading;\n    target.z = attitude;\n    target.x = bank;\n  }\n  /**\n   * Set the quaternion components given Euler angle representation.\n   *\n   * @param order The order to apply angles: 'XYZ' or 'YXZ' or any other combination.\n   *\n   * See {@link https://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors MathWorks} reference\n   */\n\n\n  setFromEuler(x, y, z, order) {\n    if (order === void 0) {\n      order = 'XYZ';\n    }\n\n    const c1 = Math.cos(x / 2);\n    const c2 = Math.cos(y / 2);\n    const c3 = Math.cos(z / 2);\n    const s1 = Math.sin(x / 2);\n    const s2 = Math.sin(y / 2);\n    const s3 = Math.sin(z / 2);\n\n    if (order === 'XYZ') {\n      this.x = s1 * c2 * c3 + c1 * s2 * s3;\n      this.y = c1 * s2 * c3 - s1 * c2 * s3;\n      this.z = c1 * c2 * s3 + s1 * s2 * c3;\n      this.w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'YXZ') {\n      this.x = s1 * c2 * c3 + c1 * s2 * s3;\n      this.y = c1 * s2 * c3 - s1 * c2 * s3;\n      this.z = c1 * c2 * s3 - s1 * s2 * c3;\n      this.w = c1 * c2 * c3 + s1 * s2 * s3;\n    } else if (order === 'ZXY') {\n      this.x = s1 * c2 * c3 - c1 * s2 * s3;\n      this.y = c1 * s2 * c3 + s1 * c2 * s3;\n      this.z = c1 * c2 * s3 + s1 * s2 * c3;\n      this.w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'ZYX') {\n      this.x = s1 * c2 * c3 - c1 * s2 * s3;\n      this.y = c1 * s2 * c3 + s1 * c2 * s3;\n      this.z = c1 * c2 * s3 - s1 * s2 * c3;\n      this.w = c1 * c2 * c3 + s1 * s2 * s3;\n    } else if (order === 'YZX') {\n      this.x = s1 * c2 * c3 + c1 * s2 * s3;\n      this.y = c1 * s2 * c3 + s1 * c2 * s3;\n      this.z = c1 * c2 * s3 - s1 * s2 * c3;\n      this.w = c1 * c2 * c3 - s1 * s2 * s3;\n    } else if (order === 'XZY') {\n      this.x = s1 * c2 * c3 - c1 * s2 * s3;\n      this.y = c1 * s2 * c3 - s1 * c2 * s3;\n      this.z = c1 * c2 * s3 + s1 * s2 * c3;\n      this.w = c1 * c2 * c3 + s1 * s2 * s3;\n    }\n\n    return this;\n  }\n\n  clone() {\n    return new Quaternion(this.x, this.y, this.z, this.w);\n  }\n  /**\n   * Performs a spherical linear interpolation between two quat\n   *\n   * @param toQuat second operand\n   * @param t interpolation amount between the self quaternion and toQuat\n   * @param target A quaternion to store the result in. If not provided, a new one will be created.\n   * @returns {Quaternion} The \"target\" object\n   */\n\n\n  slerp(toQuat, t, target) {\n    if (target === void 0) {\n      target = new Quaternion();\n    }\n\n    const ax = this.x;\n    const ay = this.y;\n    const az = this.z;\n    const aw = this.w;\n    let bx = toQuat.x;\n    let by = toQuat.y;\n    let bz = toQuat.z;\n    let bw = toQuat.w;\n    let omega;\n    let cosom;\n    let sinom;\n    let scale0;\n    let scale1; // calc cosine\n\n    cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n    if (cosom < 0.0) {\n      cosom = -cosom;\n      bx = -bx;\n      by = -by;\n      bz = -bz;\n      bw = -bw;\n    } // calculate coefficients\n\n\n    if (1.0 - cosom > 0.000001) {\n      // standard case (slerp)\n      omega = Math.acos(cosom);\n      sinom = Math.sin(omega);\n      scale0 = Math.sin((1.0 - t) * omega) / sinom;\n      scale1 = Math.sin(t * omega) / sinom;\n    } else {\n      // \"from\" and \"to\" quaternions are very close\n      //  ... so we can do a linear interpolation\n      scale0 = 1.0 - t;\n      scale1 = t;\n    } // calculate final values\n\n\n    target.x = scale0 * ax + scale1 * bx;\n    target.y = scale0 * ay + scale1 * by;\n    target.z = scale0 * az + scale1 * bz;\n    target.w = scale0 * aw + scale1 * bw;\n    return target;\n  }\n  /**\n   * Rotate an absolute orientation quaternion given an angular velocity and a time step.\n   */\n\n\n  integrate(angularVelocity, dt, angularFactor, target) {\n    if (target === void 0) {\n      target = new Quaternion();\n    }\n\n    const ax = angularVelocity.x * angularFactor.x,\n          ay = angularVelocity.y * angularFactor.y,\n          az = angularVelocity.z * angularFactor.z,\n          bx = this.x,\n          by = this.y,\n          bz = this.z,\n          bw = this.w;\n    const half_dt = dt * 0.5;\n    target.x += half_dt * (ax * bw + ay * bz - az * by);\n    target.y += half_dt * (ay * bw + az * bx - ax * bz);\n    target.z += half_dt * (az * bw + ax * by - ay * bx);\n    target.w += half_dt * (-ax * bx - ay * by - az * bz);\n    return target;\n  }\n\n}\nconst sfv_t1 = new Vec3();\nconst sfv_t2 = new Vec3();\n\n/**\n * The available shape types.\n */\nconst SHAPE_TYPES = {\n  /** SPHERE */\n  SPHERE: 1,\n\n  /** PLANE */\n  PLANE: 2,\n\n  /** BOX */\n  BOX: 4,\n\n  /** COMPOUND */\n  COMPOUND: 8,\n\n  /** CONVEXPOLYHEDRON */\n  CONVEXPOLYHEDRON: 16,\n\n  /** HEIGHTFIELD */\n  HEIGHTFIELD: 32,\n\n  /** PARTICLE */\n  PARTICLE: 64,\n\n  /** CYLINDER */\n  CYLINDER: 128,\n\n  /** TRIMESH */\n  TRIMESH: 256\n};\n/**\n * ShapeType\n */\n\n/**\n * Base class for shapes\n */\nclass Shape {\n  /**\n   * Identifier of the Shape.\n   */\n\n  /**\n   * The type of this shape. Must be set to an int > 0 by subclasses.\n   */\n\n  /**\n   * The local bounding sphere radius of this shape.\n   */\n\n  /**\n   * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.\n   * @default true\n   */\n\n  /**\n   * @default 1\n   */\n\n  /**\n   * @default -1\n   */\n\n  /**\n   * Optional material of the shape that regulates contact properties.\n   */\n\n  /**\n   * The body to which the shape is added to.\n   */\n\n  /**\n   * All the Shape types.\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.id = Shape.idCounter++;\n    this.type = options.type || 0;\n    this.boundingSphereRadius = 0;\n    this.collisionResponse = options.collisionResponse ? options.collisionResponse : true;\n    this.collisionFilterGroup = options.collisionFilterGroup !== undefined ? options.collisionFilterGroup : 1;\n    this.collisionFilterMask = options.collisionFilterMask !== undefined ? options.collisionFilterMask : -1;\n    this.material = options.material ? options.material : null;\n    this.body = null;\n  }\n  /**\n   * Computes the bounding sphere radius.\n   * The result is stored in the property `.boundingSphereRadius`\n   */\n\n\n  updateBoundingSphereRadius() {\n    throw `computeBoundingSphereRadius() not implemented for shape type ${this.type}`;\n  }\n  /**\n   * Get the volume of this shape\n   */\n\n\n  volume() {\n    throw `volume() not implemented for shape type ${this.type}`;\n  }\n  /**\n   * Calculates the inertia in the local frame for this shape.\n   * @see http://en.wikipedia.org/wiki/List_of_moments_of_inertia\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    throw `calculateLocalInertia() not implemented for shape type ${this.type}`;\n  }\n  /**\n   * @todo use abstract for these kind of methods\n   */\n\n\n  calculateWorldAABB(pos, quat, min, max) {\n    throw `calculateWorldAABB() not implemented for shape type ${this.type}`;\n  }\n\n}\nShape.idCounter = 0;\nShape.types = SHAPE_TYPES;\n\n/**\n * Transformation utilities.\n */\nclass Transform {\n  /**\n   * position\n   */\n\n  /**\n   * quaternion\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.position = new Vec3();\n    this.quaternion = new Quaternion();\n\n    if (options.position) {\n      this.position.copy(options.position);\n    }\n\n    if (options.quaternion) {\n      this.quaternion.copy(options.quaternion);\n    }\n  }\n  /**\n   * Get a global point in local transform coordinates.\n   */\n\n\n  pointToLocal(worldPoint, result) {\n    return Transform.pointToLocalFrame(this.position, this.quaternion, worldPoint, result);\n  }\n  /**\n   * Get a local point in global transform coordinates.\n   */\n\n\n  pointToWorld(localPoint, result) {\n    return Transform.pointToWorldFrame(this.position, this.quaternion, localPoint, result);\n  }\n  /**\n   * vectorToWorldFrame\n   */\n\n\n  vectorToWorldFrame(localVector, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    this.quaternion.vmult(localVector, result);\n    return result;\n  }\n  /**\n   * pointToLocalFrame\n   */\n\n\n  static pointToLocalFrame(position, quaternion, worldPoint, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    worldPoint.vsub(position, result);\n    quaternion.conjugate(tmpQuat$1);\n    tmpQuat$1.vmult(result, result);\n    return result;\n  }\n  /**\n   * pointToWorldFrame\n   */\n\n\n  static pointToWorldFrame(position, quaternion, localPoint, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    quaternion.vmult(localPoint, result);\n    result.vadd(position, result);\n    return result;\n  }\n  /**\n   * vectorToWorldFrame\n   */\n\n\n  static vectorToWorldFrame(quaternion, localVector, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    quaternion.vmult(localVector, result);\n    return result;\n  }\n  /**\n   * vectorToLocalFrame\n   */\n\n\n  static vectorToLocalFrame(position, quaternion, worldVector, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    quaternion.w *= -1;\n    quaternion.vmult(worldVector, result);\n    quaternion.w *= -1;\n    return result;\n  }\n\n}\nconst tmpQuat$1 = new Quaternion();\n\n/**\n * A set of polygons describing a convex shape.\n *\n * The shape MUST be convex for the code to work properly. No polygons may be coplanar (contained\n * in the same 3D plane), instead these should be merged into one polygon.\n *\n * @author qiao / https://github.com/qiao (original author, see https://github.com/qiao/three.js/commit/85026f0c769e4000148a67d45a9e9b9c5108836f)\n * @author schteppe / https://github.com/schteppe\n * @see https://www.altdevblogaday.com/2011/05/13/contact-generation-between-3d-convex-meshes/\n *\n * @todo Move the clipping functions to ContactGenerator?\n * @todo Automatically merge coplanar polygons in constructor.\n * @example\n *     const convexShape = new CANNON.ConvexPolyhedron({ vertices, faces })\n *     const convexBody = new CANNON.Body({ mass: 1, shape: convexShape })\n *     world.addBody(convexBody)\n */\nclass ConvexPolyhedron extends Shape {\n  /** vertices */\n\n  /**\n   * Array of integer arrays, indicating which vertices each face consists of\n   */\n\n  /** faceNormals */\n\n  /** worldVertices */\n\n  /** worldVerticesNeedsUpdate */\n\n  /** worldFaceNormals */\n\n  /** worldFaceNormalsNeedsUpdate */\n\n  /**\n   * If given, these locally defined, normalized axes are the only ones being checked when doing separating axis check.\n   */\n\n  /** uniqueEdges */\n\n  /**\n   * @param vertices An array of Vec3's\n   * @param faces Array of integer arrays, describing which vertices that is included in each face.\n   */\n  constructor(props) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    const {\n      vertices = [],\n      faces = [],\n      normals = [],\n      axes,\n      boundingSphereRadius\n    } = props;\n    super({\n      type: Shape.types.CONVEXPOLYHEDRON\n    });\n    this.vertices = vertices;\n    this.faces = faces;\n    this.faceNormals = normals;\n\n    if (this.faceNormals.length === 0) {\n      this.computeNormals();\n    }\n\n    if (!boundingSphereRadius) {\n      this.updateBoundingSphereRadius();\n    } else {\n      this.boundingSphereRadius = boundingSphereRadius;\n    }\n\n    this.worldVertices = []; // World transformed version of .vertices\n\n    this.worldVerticesNeedsUpdate = true;\n    this.worldFaceNormals = []; // World transformed version of .faceNormals\n\n    this.worldFaceNormalsNeedsUpdate = true;\n    this.uniqueAxes = axes ? axes.slice() : null;\n    this.uniqueEdges = [];\n    this.computeEdges();\n  }\n  /**\n   * Computes uniqueEdges\n   */\n\n\n  computeEdges() {\n    const faces = this.faces;\n    const vertices = this.vertices;\n    const edges = this.uniqueEdges;\n    edges.length = 0;\n    const edge = new Vec3();\n\n    for (let i = 0; i !== faces.length; i++) {\n      const face = faces[i];\n      const numVertices = face.length;\n\n      for (let j = 0; j !== numVertices; j++) {\n        const k = (j + 1) % numVertices;\n        vertices[face[j]].vsub(vertices[face[k]], edge);\n        edge.normalize();\n        let found = false;\n\n        for (let p = 0; p !== edges.length; p++) {\n          if (edges[p].almostEquals(edge) || edges[p].almostEquals(edge)) {\n            found = true;\n            break;\n          }\n        }\n\n        if (!found) {\n          edges.push(edge.clone());\n        }\n      }\n    }\n  }\n  /**\n   * Compute the normals of the faces.\n   * Will reuse existing Vec3 objects in the `faceNormals` array if they exist.\n   */\n\n\n  computeNormals() {\n    this.faceNormals.length = this.faces.length; // Generate normals\n\n    for (let i = 0; i < this.faces.length; i++) {\n      // Check so all vertices exists for this face\n      for (let j = 0; j < this.faces[i].length; j++) {\n        if (!this.vertices[this.faces[i][j]]) {\n          throw new Error(`Vertex ${this.faces[i][j]} not found!`);\n        }\n      }\n\n      const n = this.faceNormals[i] || new Vec3();\n      this.getFaceNormal(i, n);\n      n.negate(n);\n      this.faceNormals[i] = n;\n      const vertex = this.vertices[this.faces[i][0]];\n\n      if (n.dot(vertex) < 0) {\n        console.error(`.faceNormals[${i}] = Vec3(${n.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);\n\n        for (let j = 0; j < this.faces[i].length; j++) {\n          console.warn(`.vertices[${this.faces[i][j]}] = Vec3(${this.vertices[this.faces[i][j]].toString()})`);\n        }\n      }\n    }\n  }\n  /**\n   * Compute the normal of a face from its vertices\n   */\n\n\n  getFaceNormal(i, target) {\n    const f = this.faces[i];\n    const va = this.vertices[f[0]];\n    const vb = this.vertices[f[1]];\n    const vc = this.vertices[f[2]];\n    ConvexPolyhedron.computeNormal(va, vb, vc, target);\n  }\n  /**\n   * Get face normal given 3 vertices\n   */\n\n\n  static computeNormal(va, vb, vc, target) {\n    const cb = new Vec3();\n    const ab = new Vec3();\n    vb.vsub(va, ab);\n    vc.vsub(vb, cb);\n    cb.cross(ab, target);\n\n    if (!target.isZero()) {\n      target.normalize();\n    }\n  }\n  /**\n   * @param minDist Clamp distance\n   * @param result The an array of contact point objects, see clipFaceAgainstHull\n   */\n\n\n  clipAgainstHull(posA, quatA, hullB, posB, quatB, separatingNormal, minDist, maxDist, result) {\n    const WorldNormal = new Vec3();\n    let closestFaceB = -1;\n    let dmax = -Number.MAX_VALUE;\n\n    for (let face = 0; face < hullB.faces.length; face++) {\n      WorldNormal.copy(hullB.faceNormals[face]);\n      quatB.vmult(WorldNormal, WorldNormal);\n      const d = WorldNormal.dot(separatingNormal);\n\n      if (d > dmax) {\n        dmax = d;\n        closestFaceB = face;\n      }\n    }\n\n    const worldVertsB1 = [];\n\n    for (let i = 0; i < hullB.faces[closestFaceB].length; i++) {\n      const b = hullB.vertices[hullB.faces[closestFaceB][i]];\n      const worldb = new Vec3();\n      worldb.copy(b);\n      quatB.vmult(worldb, worldb);\n      posB.vadd(worldb, worldb);\n      worldVertsB1.push(worldb);\n    }\n\n    if (closestFaceB >= 0) {\n      this.clipFaceAgainstHull(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist, result);\n    }\n  }\n  /**\n   * Find the separating axis between this hull and another\n   * @param target The target vector to save the axis in\n   * @return Returns false if a separation is found, else true\n   */\n\n\n  findSeparatingAxis(hullB, posA, quatA, posB, quatB, target, faceListA, faceListB) {\n    const faceANormalWS3 = new Vec3();\n    const Worldnormal1 = new Vec3();\n    const deltaC = new Vec3();\n    const worldEdge0 = new Vec3();\n    const worldEdge1 = new Vec3();\n    const Cross = new Vec3();\n    let dmin = Number.MAX_VALUE;\n    const hullA = this;\n\n    if (!hullA.uniqueAxes) {\n      const numFacesA = faceListA ? faceListA.length : hullA.faces.length; // Test face normals from hullA\n\n      for (let i = 0; i < numFacesA; i++) {\n        const fi = faceListA ? faceListA[i] : i; // Get world face normal\n\n        faceANormalWS3.copy(hullA.faceNormals[fi]);\n        quatA.vmult(faceANormalWS3, faceANormalWS3);\n        const d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n\n        if (d === false) {\n          return false;\n        }\n\n        if (d < dmin) {\n          dmin = d;\n          target.copy(faceANormalWS3);\n        }\n      }\n    } else {\n      // Test unique axes\n      for (let i = 0; i !== hullA.uniqueAxes.length; i++) {\n        // Get world axis\n        quatA.vmult(hullA.uniqueAxes[i], faceANormalWS3);\n        const d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n\n        if (d === false) {\n          return false;\n        }\n\n        if (d < dmin) {\n          dmin = d;\n          target.copy(faceANormalWS3);\n        }\n      }\n    }\n\n    if (!hullB.uniqueAxes) {\n      // Test face normals from hullB\n      const numFacesB = faceListB ? faceListB.length : hullB.faces.length;\n\n      for (let i = 0; i < numFacesB; i++) {\n        const fi = faceListB ? faceListB[i] : i;\n        Worldnormal1.copy(hullB.faceNormals[fi]);\n        quatB.vmult(Worldnormal1, Worldnormal1);\n        const d = hullA.testSepAxis(Worldnormal1, hullB, posA, quatA, posB, quatB);\n\n        if (d === false) {\n          return false;\n        }\n\n        if (d < dmin) {\n          dmin = d;\n          target.copy(Worldnormal1);\n        }\n      }\n    } else {\n      // Test unique axes in B\n      for (let i = 0; i !== hullB.uniqueAxes.length; i++) {\n        quatB.vmult(hullB.uniqueAxes[i], Worldnormal1);\n        const d = hullA.testSepAxis(Worldnormal1, hullB, posA, quatA, posB, quatB);\n\n        if (d === false) {\n          return false;\n        }\n\n        if (d < dmin) {\n          dmin = d;\n          target.copy(Worldnormal1);\n        }\n      }\n    } // Test edges\n\n\n    for (let e0 = 0; e0 !== hullA.uniqueEdges.length; e0++) {\n      // Get world edge\n      quatA.vmult(hullA.uniqueEdges[e0], worldEdge0);\n\n      for (let e1 = 0; e1 !== hullB.uniqueEdges.length; e1++) {\n        // Get world edge 2\n        quatB.vmult(hullB.uniqueEdges[e1], worldEdge1);\n        worldEdge0.cross(worldEdge1, Cross);\n\n        if (!Cross.almostZero()) {\n          Cross.normalize();\n          const dist = hullA.testSepAxis(Cross, hullB, posA, quatA, posB, quatB);\n\n          if (dist === false) {\n            return false;\n          }\n\n          if (dist < dmin) {\n            dmin = dist;\n            target.copy(Cross);\n          }\n        }\n      }\n    }\n\n    posB.vsub(posA, deltaC);\n\n    if (deltaC.dot(target) > 0.0) {\n      target.negate(target);\n    }\n\n    return true;\n  }\n  /**\n   * Test separating axis against two hulls. Both hulls are projected onto the axis and the overlap size is returned if there is one.\n   * @return The overlap depth, or FALSE if no penetration.\n   */\n\n\n  testSepAxis(axis, hullB, posA, quatA, posB, quatB) {\n    const hullA = this;\n    ConvexPolyhedron.project(hullA, axis, posA, quatA, maxminA);\n    ConvexPolyhedron.project(hullB, axis, posB, quatB, maxminB);\n    const maxA = maxminA[0];\n    const minA = maxminA[1];\n    const maxB = maxminB[0];\n    const minB = maxminB[1];\n\n    if (maxA < minB || maxB < minA) {\n      return false; // Separated\n    }\n\n    const d0 = maxA - minB;\n    const d1 = maxB - minA;\n    const depth = d0 < d1 ? d0 : d1;\n    return depth;\n  }\n  /**\n   * calculateLocalInertia\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    // Approximate with box inertia\n    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n    const aabbmax = new Vec3();\n    const aabbmin = new Vec3();\n    this.computeLocalAABB(aabbmin, aabbmax);\n    const x = aabbmax.x - aabbmin.x;\n    const y = aabbmax.y - aabbmin.y;\n    const z = aabbmax.z - aabbmin.z;\n    target.x = 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * z * 2 * z);\n    target.y = 1.0 / 12.0 * mass * (2 * x * 2 * x + 2 * z * 2 * z);\n    target.z = 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * x * 2 * x);\n  }\n  /**\n   * @param face_i Index of the face\n   */\n\n\n  getPlaneConstantOfFace(face_i) {\n    const f = this.faces[face_i];\n    const n = this.faceNormals[face_i];\n    const v = this.vertices[f[0]];\n    const c = -n.dot(v);\n    return c;\n  }\n  /**\n   * Clip a face against a hull.\n   * @param worldVertsB1 An array of Vec3 with vertices in the world frame.\n   * @param minDist Distance clamping\n   * @param Array result Array to store resulting contact points in. Will be objects with properties: point, depth, normal. These are represented in world coordinates.\n   */\n\n\n  clipFaceAgainstHull(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist, result) {\n    const faceANormalWS = new Vec3();\n    const edge0 = new Vec3();\n    const WorldEdge0 = new Vec3();\n    const worldPlaneAnormal1 = new Vec3();\n    const planeNormalWS1 = new Vec3();\n    const worldA1 = new Vec3();\n    const localPlaneNormal = new Vec3();\n    const planeNormalWS = new Vec3();\n    const hullA = this;\n    const worldVertsB2 = [];\n    const pVtxIn = worldVertsB1;\n    const pVtxOut = worldVertsB2;\n    let closestFaceA = -1;\n    let dmin = Number.MAX_VALUE; // Find the face with normal closest to the separating axis\n\n    for (let face = 0; face < hullA.faces.length; face++) {\n      faceANormalWS.copy(hullA.faceNormals[face]);\n      quatA.vmult(faceANormalWS, faceANormalWS);\n      const d = faceANormalWS.dot(separatingNormal);\n\n      if (d < dmin) {\n        dmin = d;\n        closestFaceA = face;\n      }\n    }\n\n    if (closestFaceA < 0) {\n      return;\n    } // Get the face and construct connected faces\n\n\n    const polyA = hullA.faces[closestFaceA];\n    polyA.connectedFaces = [];\n\n    for (let i = 0; i < hullA.faces.length; i++) {\n      for (let j = 0; j < hullA.faces[i].length; j++) {\n        if (\n        /* Sharing a vertex*/\n        polyA.indexOf(hullA.faces[i][j]) !== -1 &&\n        /* Not the one we are looking for connections from */\n        i !== closestFaceA &&\n        /* Not already added */\n        polyA.connectedFaces.indexOf(i) === -1) {\n          polyA.connectedFaces.push(i);\n        }\n      }\n    } // Clip the polygon to the back of the planes of all faces of hull A,\n    // that are adjacent to the witness face\n\n\n    const numVerticesA = polyA.length;\n\n    for (let i = 0; i < numVerticesA; i++) {\n      const a = hullA.vertices[polyA[i]];\n      const b = hullA.vertices[polyA[(i + 1) % numVerticesA]];\n      a.vsub(b, edge0);\n      WorldEdge0.copy(edge0);\n      quatA.vmult(WorldEdge0, WorldEdge0);\n      posA.vadd(WorldEdge0, WorldEdge0);\n      worldPlaneAnormal1.copy(this.faceNormals[closestFaceA]);\n      quatA.vmult(worldPlaneAnormal1, worldPlaneAnormal1);\n      posA.vadd(worldPlaneAnormal1, worldPlaneAnormal1);\n      WorldEdge0.cross(worldPlaneAnormal1, planeNormalWS1);\n      planeNormalWS1.negate(planeNormalWS1);\n      worldA1.copy(a);\n      quatA.vmult(worldA1, worldA1);\n      posA.vadd(worldA1, worldA1);\n      const otherFace = polyA.connectedFaces[i];\n      localPlaneNormal.copy(this.faceNormals[otherFace]);\n      const localPlaneEq = this.getPlaneConstantOfFace(otherFace);\n      planeNormalWS.copy(localPlaneNormal);\n      quatA.vmult(planeNormalWS, planeNormalWS);\n      const planeEqWS = localPlaneEq - planeNormalWS.dot(posA); // Clip face against our constructed plane\n\n      this.clipFaceAgainstPlane(pVtxIn, pVtxOut, planeNormalWS, planeEqWS); // Throw away all clipped points, but save the remaining until next clip\n\n      while (pVtxIn.length) {\n        pVtxIn.shift();\n      }\n\n      while (pVtxOut.length) {\n        pVtxIn.push(pVtxOut.shift());\n      }\n    } // only keep contact points that are behind the witness face\n\n\n    localPlaneNormal.copy(this.faceNormals[closestFaceA]);\n    const localPlaneEq = this.getPlaneConstantOfFace(closestFaceA);\n    planeNormalWS.copy(localPlaneNormal);\n    quatA.vmult(planeNormalWS, planeNormalWS);\n    const planeEqWS = localPlaneEq - planeNormalWS.dot(posA);\n\n    for (let i = 0; i < pVtxIn.length; i++) {\n      let depth = planeNormalWS.dot(pVtxIn[i]) + planeEqWS; // ???\n\n      if (depth <= minDist) {\n        console.log(`clamped: depth=${depth} to minDist=${minDist}`);\n        depth = minDist;\n      }\n\n      if (depth <= maxDist) {\n        const point = pVtxIn[i];\n\n        if (depth <= 1e-6) {\n          const p = {\n            point,\n            normal: planeNormalWS,\n            depth\n          };\n          result.push(p);\n        }\n      }\n    }\n  }\n  /**\n   * Clip a face in a hull against the back of a plane.\n   * @param planeConstant The constant in the mathematical plane equation\n   */\n\n\n  clipFaceAgainstPlane(inVertices, outVertices, planeNormal, planeConstant) {\n    let n_dot_first;\n    let n_dot_last;\n    const numVerts = inVertices.length;\n\n    if (numVerts < 2) {\n      return outVertices;\n    }\n\n    let firstVertex = inVertices[inVertices.length - 1];\n    let lastVertex = inVertices[0];\n    n_dot_first = planeNormal.dot(firstVertex) + planeConstant;\n\n    for (let vi = 0; vi < numVerts; vi++) {\n      lastVertex = inVertices[vi];\n      n_dot_last = planeNormal.dot(lastVertex) + planeConstant;\n\n      if (n_dot_first < 0) {\n        if (n_dot_last < 0) {\n          // Start < 0, end < 0, so output lastVertex\n          const newv = new Vec3();\n          newv.copy(lastVertex);\n          outVertices.push(newv);\n        } else {\n          // Start < 0, end >= 0, so output intersection\n          const newv = new Vec3();\n          firstVertex.lerp(lastVertex, n_dot_first / (n_dot_first - n_dot_last), newv);\n          outVertices.push(newv);\n        }\n      } else {\n        if (n_dot_last < 0) {\n          // Start >= 0, end < 0 so output intersection and end\n          const newv = new Vec3();\n          firstVertex.lerp(lastVertex, n_dot_first / (n_dot_first - n_dot_last), newv);\n          outVertices.push(newv);\n          outVertices.push(lastVertex);\n        }\n      }\n\n      firstVertex = lastVertex;\n      n_dot_first = n_dot_last;\n    }\n\n    return outVertices;\n  }\n  /**\n   * Updates `.worldVertices` and sets `.worldVerticesNeedsUpdate` to false.\n   */\n\n\n  computeWorldVertices(position, quat) {\n    while (this.worldVertices.length < this.vertices.length) {\n      this.worldVertices.push(new Vec3());\n    }\n\n    const verts = this.vertices;\n    const worldVerts = this.worldVertices;\n\n    for (let i = 0; i !== this.vertices.length; i++) {\n      quat.vmult(verts[i], worldVerts[i]);\n      position.vadd(worldVerts[i], worldVerts[i]);\n    }\n\n    this.worldVerticesNeedsUpdate = false;\n  }\n\n  computeLocalAABB(aabbmin, aabbmax) {\n    const vertices = this.vertices;\n    aabbmin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    aabbmax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n    for (let i = 0; i < this.vertices.length; i++) {\n      const v = vertices[i];\n\n      if (v.x < aabbmin.x) {\n        aabbmin.x = v.x;\n      } else if (v.x > aabbmax.x) {\n        aabbmax.x = v.x;\n      }\n\n      if (v.y < aabbmin.y) {\n        aabbmin.y = v.y;\n      } else if (v.y > aabbmax.y) {\n        aabbmax.y = v.y;\n      }\n\n      if (v.z < aabbmin.z) {\n        aabbmin.z = v.z;\n      } else if (v.z > aabbmax.z) {\n        aabbmax.z = v.z;\n      }\n    }\n  }\n  /**\n   * Updates `worldVertices` and sets `worldVerticesNeedsUpdate` to false.\n   */\n\n\n  computeWorldFaceNormals(quat) {\n    const N = this.faceNormals.length;\n\n    while (this.worldFaceNormals.length < N) {\n      this.worldFaceNormals.push(new Vec3());\n    }\n\n    const normals = this.faceNormals;\n    const worldNormals = this.worldFaceNormals;\n\n    for (let i = 0; i !== N; i++) {\n      quat.vmult(normals[i], worldNormals[i]);\n    }\n\n    this.worldFaceNormalsNeedsUpdate = false;\n  }\n  /**\n   * updateBoundingSphereRadius\n   */\n\n\n  updateBoundingSphereRadius() {\n    // Assume points are distributed with local (0,0,0) as center\n    let max2 = 0;\n    const verts = this.vertices;\n\n    for (let i = 0; i !== verts.length; i++) {\n      const norm2 = verts[i].lengthSquared();\n\n      if (norm2 > max2) {\n        max2 = norm2;\n      }\n    }\n\n    this.boundingSphereRadius = Math.sqrt(max2);\n  }\n  /**\n   * calculateWorldAABB\n   */\n\n\n  calculateWorldAABB(pos, quat, min, max) {\n    const verts = this.vertices;\n    let minx;\n    let miny;\n    let minz;\n    let maxx;\n    let maxy;\n    let maxz;\n    let tempWorldVertex = new Vec3();\n\n    for (let i = 0; i < verts.length; i++) {\n      tempWorldVertex.copy(verts[i]);\n      quat.vmult(tempWorldVertex, tempWorldVertex);\n      pos.vadd(tempWorldVertex, tempWorldVertex);\n      const v = tempWorldVertex;\n\n      if (minx === undefined || v.x < minx) {\n        minx = v.x;\n      }\n\n      if (maxx === undefined || v.x > maxx) {\n        maxx = v.x;\n      }\n\n      if (miny === undefined || v.y < miny) {\n        miny = v.y;\n      }\n\n      if (maxy === undefined || v.y > maxy) {\n        maxy = v.y;\n      }\n\n      if (minz === undefined || v.z < minz) {\n        minz = v.z;\n      }\n\n      if (maxz === undefined || v.z > maxz) {\n        maxz = v.z;\n      }\n    }\n\n    min.set(minx, miny, minz);\n    max.set(maxx, maxy, maxz);\n  }\n  /**\n   * Get approximate convex volume\n   */\n\n\n  volume() {\n    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n  }\n  /**\n   * Get an average of all the vertices positions\n   */\n\n\n  getAveragePointLocal(target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const verts = this.vertices;\n\n    for (let i = 0; i < verts.length; i++) {\n      target.vadd(verts[i], target);\n    }\n\n    target.scale(1 / verts.length, target);\n    return target;\n  }\n  /**\n   * Transform all local points. Will change the .vertices\n   */\n\n\n  transformAllPoints(offset, quat) {\n    const n = this.vertices.length;\n    const verts = this.vertices; // Apply rotation\n\n    if (quat) {\n      // Rotate vertices\n      for (let i = 0; i < n; i++) {\n        const v = verts[i];\n        quat.vmult(v, v);\n      } // Rotate face normals\n\n\n      for (let i = 0; i < this.faceNormals.length; i++) {\n        const v = this.faceNormals[i];\n        quat.vmult(v, v);\n      }\n      /*\n            // Rotate edges\n            for(let i=0; i<this.uniqueEdges.length; i++){\n                const v = this.uniqueEdges[i];\n                quat.vmult(v,v);\n            }*/\n\n    } // Apply offset\n\n\n    if (offset) {\n      for (let i = 0; i < n; i++) {\n        const v = verts[i];\n        v.vadd(offset, v);\n      }\n    }\n  }\n  /**\n   * Checks whether p is inside the polyhedra. Must be in local coords.\n   * The point lies outside of the convex hull of the other points if and only if the direction\n   * of all the vectors from it to those other points are on less than one half of a sphere around it.\n   * @param p A point given in local coordinates\n   */\n\n\n  pointIsInside(p) {\n    const verts = this.vertices;\n    const faces = this.faces;\n    const normals = this.faceNormals;\n    const positiveResult = null;\n    const pointInside = new Vec3();\n    this.getAveragePointLocal(pointInside);\n\n    for (let i = 0; i < this.faces.length; i++) {\n      let n = normals[i];\n      const v = verts[faces[i][0]]; // We only need one point in the face\n      // This dot product determines which side of the edge the point is\n\n      const vToP = new Vec3();\n      p.vsub(v, vToP);\n      const r1 = n.dot(vToP);\n      const vToPointInside = new Vec3();\n      pointInside.vsub(v, vToPointInside);\n      const r2 = n.dot(vToPointInside);\n\n      if (r1 < 0 && r2 > 0 || r1 > 0 && r2 < 0) {\n        return false; // Encountered some other sign. Exit.\n      }\n    } // If we got here, all dot products were of the same sign.\n\n\n    return positiveResult ? 1 : -1;\n  }\n  /**\n   * Get max and min dot product of a convex hull at position (pos,quat) projected onto an axis.\n   * Results are saved in the array maxmin.\n   * @param result result[0] and result[1] will be set to maximum and minimum, respectively.\n   */\n\n\n  static project(shape, axis, pos, quat, result) {\n    const n = shape.vertices.length;\n    project_worldVertex;\n    const localAxis = project_localAxis;\n    let max = 0;\n    let min = 0;\n    const localOrigin = project_localOrigin;\n    const vs = shape.vertices;\n    localOrigin.setZero(); // Transform the axis to local\n\n    Transform.vectorToLocalFrame(pos, quat, axis, localAxis);\n    Transform.pointToLocalFrame(pos, quat, localOrigin, localOrigin);\n    const add = localOrigin.dot(localAxis);\n    min = max = vs[0].dot(localAxis);\n\n    for (let i = 1; i < n; i++) {\n      const val = vs[i].dot(localAxis);\n\n      if (val > max) {\n        max = val;\n      }\n\n      if (val < min) {\n        min = val;\n      }\n    }\n\n    min -= add;\n    max -= add;\n\n    if (min > max) {\n      // Inconsistent - swap\n      const temp = min;\n      min = max;\n      max = temp;\n    } // Output\n\n\n    result[0] = max;\n    result[1] = min;\n  }\n\n}\nconst maxminA = [];\nconst maxminB = [];\nconst project_worldVertex = new Vec3();\nconst project_localAxis = new Vec3();\nconst project_localOrigin = new Vec3();\n\n/**\n * A 3d box shape.\n * @example\n *     const size = 1\n *     const halfExtents = new CANNON.Vec3(size, size, size)\n *     const boxShape = new CANNON.Box(halfExtents)\n *     const boxBody = new CANNON.Body({ mass: 1, shape: boxShape })\n *     world.addBody(boxBody)\n */\nclass Box extends Shape {\n  /**\n   * The half extents of the box.\n   */\n\n  /**\n   * Used by the contact generator to make contacts with other convex polyhedra for example.\n   */\n  constructor(halfExtents) {\n    super({\n      type: Shape.types.BOX\n    });\n    this.halfExtents = halfExtents;\n    this.convexPolyhedronRepresentation = null;\n    this.updateConvexPolyhedronRepresentation();\n    this.updateBoundingSphereRadius();\n  }\n  /**\n   * Updates the local convex polyhedron representation used for some collisions.\n   */\n\n\n  updateConvexPolyhedronRepresentation() {\n    const sx = this.halfExtents.x;\n    const sy = this.halfExtents.y;\n    const sz = this.halfExtents.z;\n    const V = Vec3;\n    const vertices = [new V(-sx, -sy, -sz), new V(sx, -sy, -sz), new V(sx, sy, -sz), new V(-sx, sy, -sz), new V(-sx, -sy, sz), new V(sx, -sy, sz), new V(sx, sy, sz), new V(-sx, sy, sz)];\n    const faces = [[3, 2, 1, 0], // -z\n    [4, 5, 6, 7], // +z\n    [5, 4, 0, 1], // -y\n    [2, 3, 7, 6], // +y\n    [0, 4, 7, 3], // -x\n    [1, 2, 6, 5] // +x\n    ];\n    const axes = [new V(0, 0, 1), new V(0, 1, 0), new V(1, 0, 0)];\n    const h = new ConvexPolyhedron({\n      vertices,\n      faces,\n      axes\n    });\n    this.convexPolyhedronRepresentation = h;\n    h.material = this.material;\n  }\n  /**\n   * Calculate the inertia of the box.\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    Box.calculateInertia(this.halfExtents, mass, target);\n    return target;\n  }\n\n  static calculateInertia(halfExtents, mass, target) {\n    const e = halfExtents;\n    target.x = 1.0 / 12.0 * mass * (2 * e.y * 2 * e.y + 2 * e.z * 2 * e.z);\n    target.y = 1.0 / 12.0 * mass * (2 * e.x * 2 * e.x + 2 * e.z * 2 * e.z);\n    target.z = 1.0 / 12.0 * mass * (2 * e.y * 2 * e.y + 2 * e.x * 2 * e.x);\n  }\n  /**\n   * Get the box 6 side normals\n   * @param sixTargetVectors An array of 6 vectors, to store the resulting side normals in.\n   * @param quat Orientation to apply to the normal vectors. If not provided, the vectors will be in respect to the local frame.\n   */\n\n\n  getSideNormals(sixTargetVectors, quat) {\n    const sides = sixTargetVectors;\n    const ex = this.halfExtents;\n    sides[0].set(ex.x, 0, 0);\n    sides[1].set(0, ex.y, 0);\n    sides[2].set(0, 0, ex.z);\n    sides[3].set(-ex.x, 0, 0);\n    sides[4].set(0, -ex.y, 0);\n    sides[5].set(0, 0, -ex.z);\n\n    if (quat !== undefined) {\n      for (let i = 0; i !== sides.length; i++) {\n        quat.vmult(sides[i], sides[i]);\n      }\n    }\n\n    return sides;\n  }\n  /**\n   * Returns the volume of the box.\n   */\n\n\n  volume() {\n    return 8.0 * this.halfExtents.x * this.halfExtents.y * this.halfExtents.z;\n  }\n  /**\n   * updateBoundingSphereRadius\n   */\n\n\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = this.halfExtents.length();\n  }\n  /**\n   * forEachWorldCorner\n   */\n\n\n  forEachWorldCorner(pos, quat, callback) {\n    const e = this.halfExtents;\n    const corners = [[e.x, e.y, e.z], [-e.x, e.y, e.z], [-e.x, -e.y, e.z], [-e.x, -e.y, -e.z], [e.x, -e.y, -e.z], [e.x, e.y, -e.z], [-e.x, e.y, -e.z], [e.x, -e.y, e.z]];\n\n    for (let i = 0; i < corners.length; i++) {\n      worldCornerTempPos.set(corners[i][0], corners[i][1], corners[i][2]);\n      quat.vmult(worldCornerTempPos, worldCornerTempPos);\n      pos.vadd(worldCornerTempPos, worldCornerTempPos);\n      callback(worldCornerTempPos.x, worldCornerTempPos.y, worldCornerTempPos.z);\n    }\n  }\n  /**\n   * calculateWorldAABB\n   */\n\n\n  calculateWorldAABB(pos, quat, min, max) {\n    const e = this.halfExtents;\n    worldCornersTemp[0].set(e.x, e.y, e.z);\n    worldCornersTemp[1].set(-e.x, e.y, e.z);\n    worldCornersTemp[2].set(-e.x, -e.y, e.z);\n    worldCornersTemp[3].set(-e.x, -e.y, -e.z);\n    worldCornersTemp[4].set(e.x, -e.y, -e.z);\n    worldCornersTemp[5].set(e.x, e.y, -e.z);\n    worldCornersTemp[6].set(-e.x, e.y, -e.z);\n    worldCornersTemp[7].set(e.x, -e.y, e.z);\n    const wc = worldCornersTemp[0];\n    quat.vmult(wc, wc);\n    pos.vadd(wc, wc);\n    max.copy(wc);\n    min.copy(wc);\n\n    for (let i = 1; i < 8; i++) {\n      const wc = worldCornersTemp[i];\n      quat.vmult(wc, wc);\n      pos.vadd(wc, wc);\n      const x = wc.x;\n      const y = wc.y;\n      const z = wc.z;\n\n      if (x > max.x) {\n        max.x = x;\n      }\n\n      if (y > max.y) {\n        max.y = y;\n      }\n\n      if (z > max.z) {\n        max.z = z;\n      }\n\n      if (x < min.x) {\n        min.x = x;\n      }\n\n      if (y < min.y) {\n        min.y = y;\n      }\n\n      if (z < min.z) {\n        min.z = z;\n      }\n    } // Get each axis max\n    // min.set(Infinity,Infinity,Infinity);\n    // max.set(-Infinity,-Infinity,-Infinity);\n    // this.forEachWorldCorner(pos,quat,function(x,y,z){\n    //     if(x > max.x){\n    //         max.x = x;\n    //     }\n    //     if(y > max.y){\n    //         max.y = y;\n    //     }\n    //     if(z > max.z){\n    //         max.z = z;\n    //     }\n    //     if(x < min.x){\n    //         min.x = x;\n    //     }\n    //     if(y < min.y){\n    //         min.y = y;\n    //     }\n    //     if(z < min.z){\n    //         min.z = z;\n    //     }\n    // });\n\n  }\n\n}\nconst worldCornerTempPos = new Vec3();\nconst worldCornersTemp = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\n\n/**\n * BODY_TYPES\n */\nconst BODY_TYPES = {\n  /** DYNAMIC */\n  DYNAMIC: 1,\n\n  /** STATIC */\n  STATIC: 2,\n\n  /** KINEMATIC */\n  KINEMATIC: 4\n};\n/**\n * BodyType\n */\n\n/**\n * BODY_SLEEP_STATES\n */\nconst BODY_SLEEP_STATES = {\n  /** AWAKE */\n  AWAKE: 0,\n\n  /** SLEEPY */\n  SLEEPY: 1,\n\n  /** SLEEPING */\n  SLEEPING: 2\n};\n/**\n * BodySleepState\n */\n\n/**\n * Base class for all body types.\n * @example\n *     const shape = new CANNON.Sphere(1)\n *     const body = new CANNON.Body({\n *       mass: 1,\n *       shape,\n *     })\n *     world.addBody(body)\n */\nclass Body extends EventTarget {\n  /**\n   * Dispatched after two bodies collide. This event is dispatched on each\n   * of the two bodies involved in the collision.\n   * @event collide\n   * @param body The body that was involved in the collision.\n   * @param contact The details of the collision.\n   */\n\n  /**\n   * A dynamic body is fully simulated. Can be moved manually by the user, but normally they move according to forces. A dynamic body can collide with all body types. A dynamic body always has finite, non-zero mass.\n   */\n\n  /**\n   * A static body does not move during simulation and behaves as if it has infinite mass. Static bodies can be moved manually by setting the position of the body. The velocity of a static body is always zero. Static bodies do not collide with other static or kinematic bodies.\n   */\n\n  /**\n   * A kinematic body moves under simulation according to its velocity. They do not respond to forces. They can be moved manually, but normally a kinematic body is moved by setting its velocity. A kinematic body behaves as if it has infinite mass. Kinematic bodies do not collide with other static or kinematic bodies.\n   */\n\n  /**\n   * AWAKE\n   */\n\n  /**\n   * SLEEPY\n   */\n\n  /**\n   * SLEEPING\n   */\n\n  /**\n   * Dispatched after a sleeping body has woken up.\n   * @event wakeup\n   */\n\n  /**\n   * Dispatched after a body has gone in to the sleepy state.\n   * @event sleepy\n   */\n\n  /**\n   * Dispatched after a body has fallen asleep.\n   * @event sleep\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    super();\n    this.id = Body.idCounter++;\n    this.index = -1;\n    this.world = null;\n    this.vlambda = new Vec3();\n    this.collisionFilterGroup = typeof options.collisionFilterGroup === 'number' ? options.collisionFilterGroup : 1;\n    this.collisionFilterMask = typeof options.collisionFilterMask === 'number' ? options.collisionFilterMask : -1;\n    this.collisionResponse = typeof options.collisionResponse === 'boolean' ? options.collisionResponse : true;\n    this.position = new Vec3();\n    this.previousPosition = new Vec3();\n    this.interpolatedPosition = new Vec3();\n    this.initPosition = new Vec3();\n\n    if (options.position) {\n      this.position.copy(options.position);\n      this.previousPosition.copy(options.position);\n      this.interpolatedPosition.copy(options.position);\n      this.initPosition.copy(options.position);\n    }\n\n    this.velocity = new Vec3();\n\n    if (options.velocity) {\n      this.velocity.copy(options.velocity);\n    }\n\n    this.initVelocity = new Vec3();\n    this.force = new Vec3();\n    const mass = typeof options.mass === 'number' ? options.mass : 0;\n    this.mass = mass;\n    this.invMass = mass > 0 ? 1.0 / mass : 0;\n    this.material = options.material || null;\n    this.linearDamping = typeof options.linearDamping === 'number' ? options.linearDamping : 0.01;\n    this.type = mass <= 0.0 ? Body.STATIC : Body.DYNAMIC;\n\n    if (typeof options.type === typeof Body.STATIC) {\n      this.type = options.type;\n    }\n\n    this.allowSleep = typeof options.allowSleep !== 'undefined' ? options.allowSleep : true;\n    this.sleepState = Body.AWAKE;\n    this.sleepSpeedLimit = typeof options.sleepSpeedLimit !== 'undefined' ? options.sleepSpeedLimit : 0.1;\n    this.sleepTimeLimit = typeof options.sleepTimeLimit !== 'undefined' ? options.sleepTimeLimit : 1;\n    this.timeLastSleepy = 0;\n    this.wakeUpAfterNarrowphase = false;\n    this.torque = new Vec3();\n    this.quaternion = new Quaternion();\n    this.initQuaternion = new Quaternion();\n    this.previousQuaternion = new Quaternion();\n    this.interpolatedQuaternion = new Quaternion();\n\n    if (options.quaternion) {\n      this.quaternion.copy(options.quaternion);\n      this.initQuaternion.copy(options.quaternion);\n      this.previousQuaternion.copy(options.quaternion);\n      this.interpolatedQuaternion.copy(options.quaternion);\n    }\n\n    this.angularVelocity = new Vec3();\n\n    if (options.angularVelocity) {\n      this.angularVelocity.copy(options.angularVelocity);\n    }\n\n    this.initAngularVelocity = new Vec3();\n    this.shapes = [];\n    this.shapeOffsets = [];\n    this.shapeOrientations = [];\n    this.inertia = new Vec3();\n    this.invInertia = new Vec3();\n    this.invInertiaWorld = new Mat3();\n    this.invMassSolve = 0;\n    this.invInertiaSolve = new Vec3();\n    this.invInertiaWorldSolve = new Mat3();\n    this.fixedRotation = typeof options.fixedRotation !== 'undefined' ? options.fixedRotation : false;\n    this.angularDamping = typeof options.angularDamping !== 'undefined' ? options.angularDamping : 0.01;\n    this.linearFactor = new Vec3(1, 1, 1);\n\n    if (options.linearFactor) {\n      this.linearFactor.copy(options.linearFactor);\n    }\n\n    this.angularFactor = new Vec3(1, 1, 1);\n\n    if (options.angularFactor) {\n      this.angularFactor.copy(options.angularFactor);\n    }\n\n    this.aabb = new AABB();\n    this.aabbNeedsUpdate = true;\n    this.boundingRadius = 0;\n    this.wlambda = new Vec3();\n    this.isTrigger = Boolean(options.isTrigger);\n\n    if (options.shape) {\n      this.addShape(options.shape);\n    }\n\n    this.updateMassProperties();\n  }\n  /**\n   * Wake the body up.\n   */\n\n\n  wakeUp() {\n    const prevState = this.sleepState;\n    this.sleepState = Body.AWAKE;\n    this.wakeUpAfterNarrowphase = false;\n\n    if (prevState === Body.SLEEPING) {\n      this.dispatchEvent(Body.wakeupEvent);\n    }\n  }\n  /**\n   * Force body sleep\n   */\n\n\n  sleep() {\n    this.sleepState = Body.SLEEPING;\n    this.velocity.set(0, 0, 0);\n    this.angularVelocity.set(0, 0, 0);\n    this.wakeUpAfterNarrowphase = false;\n  }\n  /**\n   * Called every timestep to update internal sleep timer and change sleep state if needed.\n   * @param time The world time in seconds\n   */\n\n\n  sleepTick(time) {\n    if (this.allowSleep) {\n      const sleepState = this.sleepState;\n      const speedSquared = this.velocity.lengthSquared() + this.angularVelocity.lengthSquared();\n      const speedLimitSquared = this.sleepSpeedLimit ** 2;\n\n      if (sleepState === Body.AWAKE && speedSquared < speedLimitSquared) {\n        this.sleepState = Body.SLEEPY; // Sleepy\n\n        this.timeLastSleepy = time;\n        this.dispatchEvent(Body.sleepyEvent);\n      } else if (sleepState === Body.SLEEPY && speedSquared > speedLimitSquared) {\n        this.wakeUp(); // Wake up\n      } else if (sleepState === Body.SLEEPY && time - this.timeLastSleepy > this.sleepTimeLimit) {\n        this.sleep(); // Sleeping\n\n        this.dispatchEvent(Body.sleepEvent);\n      }\n    }\n  }\n  /**\n   * If the body is sleeping, it should be immovable / have infinite mass during solve. We solve it by having a separate \"solve mass\".\n   */\n\n\n  updateSolveMassProperties() {\n    if (this.sleepState === Body.SLEEPING || this.type === Body.KINEMATIC) {\n      this.invMassSolve = 0;\n      this.invInertiaSolve.setZero();\n      this.invInertiaWorldSolve.setZero();\n    } else {\n      this.invMassSolve = this.invMass;\n      this.invInertiaSolve.copy(this.invInertia);\n      this.invInertiaWorldSolve.copy(this.invInertiaWorld);\n    }\n  }\n  /**\n   * Convert a world point to local body frame.\n   */\n\n\n  pointToLocalFrame(worldPoint, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    worldPoint.vsub(this.position, result);\n    this.quaternion.conjugate().vmult(result, result);\n    return result;\n  }\n  /**\n   * Convert a world vector to local body frame.\n   */\n\n\n  vectorToLocalFrame(worldVector, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    this.quaternion.conjugate().vmult(worldVector, result);\n    return result;\n  }\n  /**\n   * Convert a local body point to world frame.\n   */\n\n\n  pointToWorldFrame(localPoint, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    this.quaternion.vmult(localPoint, result);\n    result.vadd(this.position, result);\n    return result;\n  }\n  /**\n   * Convert a local body point to world frame.\n   */\n\n\n  vectorToWorldFrame(localVector, result) {\n    if (result === void 0) {\n      result = new Vec3();\n    }\n\n    this.quaternion.vmult(localVector, result);\n    return result;\n  }\n  /**\n   * Add a shape to the body with a local offset and orientation.\n   * @return The body object, for chainability.\n   */\n\n\n  addShape(shape, _offset, _orientation) {\n    const offset = new Vec3();\n    const orientation = new Quaternion();\n\n    if (_offset) {\n      offset.copy(_offset);\n    }\n\n    if (_orientation) {\n      orientation.copy(_orientation);\n    }\n\n    this.shapes.push(shape);\n    this.shapeOffsets.push(offset);\n    this.shapeOrientations.push(orientation);\n    this.updateMassProperties();\n    this.updateBoundingRadius();\n    this.aabbNeedsUpdate = true;\n    shape.body = this;\n    return this;\n  }\n  /**\n   * Remove a shape from the body.\n   * @return The body object, for chainability.\n   */\n\n\n  removeShape(shape) {\n    const index = this.shapes.indexOf(shape);\n\n    if (index === -1) {\n      console.warn('Shape does not belong to the body');\n      return this;\n    }\n\n    this.shapes.splice(index, 1);\n    this.shapeOffsets.splice(index, 1);\n    this.shapeOrientations.splice(index, 1);\n    this.updateMassProperties();\n    this.updateBoundingRadius();\n    this.aabbNeedsUpdate = true;\n    shape.body = null;\n    return this;\n  }\n  /**\n   * Update the bounding radius of the body. Should be done if any of the shapes are changed.\n   */\n\n\n  updateBoundingRadius() {\n    const shapes = this.shapes;\n    const shapeOffsets = this.shapeOffsets;\n    const N = shapes.length;\n    let radius = 0;\n\n    for (let i = 0; i !== N; i++) {\n      const shape = shapes[i];\n      shape.updateBoundingSphereRadius();\n      const offset = shapeOffsets[i].length();\n      const r = shape.boundingSphereRadius;\n\n      if (offset + r > radius) {\n        radius = offset + r;\n      }\n    }\n\n    this.boundingRadius = radius;\n  }\n  /**\n   * Updates the .aabb\n   */\n\n\n  updateAABB() {\n    const shapes = this.shapes;\n    const shapeOffsets = this.shapeOffsets;\n    const shapeOrientations = this.shapeOrientations;\n    const N = shapes.length;\n    const offset = tmpVec;\n    const orientation = tmpQuat;\n    const bodyQuat = this.quaternion;\n    const aabb = this.aabb;\n    const shapeAABB = updateAABB_shapeAABB;\n\n    for (let i = 0; i !== N; i++) {\n      const shape = shapes[i]; // Get shape world position\n\n      bodyQuat.vmult(shapeOffsets[i], offset);\n      offset.vadd(this.position, offset); // Get shape world quaternion\n\n      bodyQuat.mult(shapeOrientations[i], orientation); // Get shape AABB\n\n      shape.calculateWorldAABB(offset, orientation, shapeAABB.lowerBound, shapeAABB.upperBound);\n\n      if (i === 0) {\n        aabb.copy(shapeAABB);\n      } else {\n        aabb.extend(shapeAABB);\n      }\n    }\n\n    this.aabbNeedsUpdate = false;\n  }\n  /**\n   * Update `.inertiaWorld` and `.invInertiaWorld`\n   */\n\n\n  updateInertiaWorld(force) {\n    const I = this.invInertia;\n\n    if (I.x === I.y && I.y === I.z && !force) ; else {\n      const m1 = uiw_m1;\n      const m2 = uiw_m2;\n      uiw_m3;\n      m1.setRotationFromQuaternion(this.quaternion);\n      m1.transpose(m2);\n      m1.scale(I, m1);\n      m1.mmult(m2, this.invInertiaWorld);\n    }\n  }\n  /**\n   * Apply force to a point of the body. This could for example be a point on the Body surface.\n   * Applying force this way will add to Body.force and Body.torque.\n   * @param force The amount of force to add.\n   * @param relativePoint A point relative to the center of mass to apply the force on.\n   */\n\n\n  applyForce(force, relativePoint) {\n    if (relativePoint === void 0) {\n      relativePoint = new Vec3();\n    }\n\n    // Needed?\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n\n    if (this.sleepState === Body.SLEEPING) {\n      this.wakeUp();\n    } // Compute produced rotational force\n\n\n    const rotForce = Body_applyForce_rotForce;\n    relativePoint.cross(force, rotForce); // Add linear force\n\n    this.force.vadd(force, this.force); // Add rotational force\n\n    this.torque.vadd(rotForce, this.torque);\n  }\n  /**\n   * Apply force to a local point in the body.\n   * @param force The force vector to apply, defined locally in the body frame.\n   * @param localPoint A local point in the body to apply the force on.\n   */\n\n\n  applyLocalForce(localForce, localPoint) {\n    if (localPoint === void 0) {\n      localPoint = new Vec3();\n    }\n\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n\n    const worldForce = Body_applyLocalForce_worldForce;\n    const relativePointWorld = Body_applyLocalForce_relativePointWorld; // Transform the force vector to world space\n\n    this.vectorToWorldFrame(localForce, worldForce);\n    this.vectorToWorldFrame(localPoint, relativePointWorld);\n    this.applyForce(worldForce, relativePointWorld);\n  }\n  /**\n   * Apply torque to the body.\n   * @param torque The amount of torque to add.\n   */\n\n\n  applyTorque(torque) {\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n\n    if (this.sleepState === Body.SLEEPING) {\n      this.wakeUp();\n    } // Add rotational force\n\n\n    this.torque.vadd(torque, this.torque);\n  }\n  /**\n   * Apply impulse to a point of the body. This could for example be a point on the Body surface.\n   * An impulse is a force added to a body during a short period of time (impulse = force * time).\n   * Impulses will be added to Body.velocity and Body.angularVelocity.\n   * @param impulse The amount of impulse to add.\n   * @param relativePoint A point relative to the center of mass to apply the force on.\n   */\n\n\n  applyImpulse(impulse, relativePoint) {\n    if (relativePoint === void 0) {\n      relativePoint = new Vec3();\n    }\n\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n\n    if (this.sleepState === Body.SLEEPING) {\n      this.wakeUp();\n    } // Compute point position relative to the body center\n\n\n    const r = relativePoint; // Compute produced central impulse velocity\n\n    const velo = Body_applyImpulse_velo;\n    velo.copy(impulse);\n    velo.scale(this.invMass, velo); // Add linear impulse\n\n    this.velocity.vadd(velo, this.velocity); // Compute produced rotational impulse velocity\n\n    const rotVelo = Body_applyImpulse_rotVelo;\n    r.cross(impulse, rotVelo);\n    /*\n     rotVelo.x *= this.invInertia.x;\n     rotVelo.y *= this.invInertia.y;\n     rotVelo.z *= this.invInertia.z;\n     */\n\n    this.invInertiaWorld.vmult(rotVelo, rotVelo); // Add rotational Impulse\n\n    this.angularVelocity.vadd(rotVelo, this.angularVelocity);\n  }\n  /**\n   * Apply locally-defined impulse to a local point in the body.\n   * @param force The force vector to apply, defined locally in the body frame.\n   * @param localPoint A local point in the body to apply the force on.\n   */\n\n\n  applyLocalImpulse(localImpulse, localPoint) {\n    if (localPoint === void 0) {\n      localPoint = new Vec3();\n    }\n\n    if (this.type !== Body.DYNAMIC) {\n      return;\n    }\n\n    const worldImpulse = Body_applyLocalImpulse_worldImpulse;\n    const relativePointWorld = Body_applyLocalImpulse_relativePoint; // Transform the force vector to world space\n\n    this.vectorToWorldFrame(localImpulse, worldImpulse);\n    this.vectorToWorldFrame(localPoint, relativePointWorld);\n    this.applyImpulse(worldImpulse, relativePointWorld);\n  }\n  /**\n   * Should be called whenever you change the body shape or mass.\n   */\n\n\n  updateMassProperties() {\n    const halfExtents = Body_updateMassProperties_halfExtents;\n    this.invMass = this.mass > 0 ? 1.0 / this.mass : 0;\n    const I = this.inertia;\n    const fixed = this.fixedRotation; // Approximate with AABB box\n\n    this.updateAABB();\n    halfExtents.set((this.aabb.upperBound.x - this.aabb.lowerBound.x) / 2, (this.aabb.upperBound.y - this.aabb.lowerBound.y) / 2, (this.aabb.upperBound.z - this.aabb.lowerBound.z) / 2);\n    Box.calculateInertia(halfExtents, this.mass, I);\n    this.invInertia.set(I.x > 0 && !fixed ? 1.0 / I.x : 0, I.y > 0 && !fixed ? 1.0 / I.y : 0, I.z > 0 && !fixed ? 1.0 / I.z : 0);\n    this.updateInertiaWorld(true);\n  }\n  /**\n   * Get world velocity of a point in the body.\n   * @param worldPoint\n   * @param result\n   * @return The result vector.\n   */\n\n\n  getVelocityAtWorldPoint(worldPoint, result) {\n    const r = new Vec3();\n    worldPoint.vsub(this.position, r);\n    this.angularVelocity.cross(r, result);\n    this.velocity.vadd(result, result);\n    return result;\n  }\n  /**\n   * Move the body forward in time.\n   * @param dt Time step\n   * @param quatNormalize Set to true to normalize the body quaternion\n   * @param quatNormalizeFast If the quaternion should be normalized using \"fast\" quaternion normalization\n   */\n\n\n  integrate(dt, quatNormalize, quatNormalizeFast) {\n    // Save previous position\n    this.previousPosition.copy(this.position);\n    this.previousQuaternion.copy(this.quaternion);\n\n    if (!(this.type === Body.DYNAMIC || this.type === Body.KINEMATIC) || this.sleepState === Body.SLEEPING) {\n      // Only for dynamic\n      return;\n    }\n\n    const velo = this.velocity;\n    const angularVelo = this.angularVelocity;\n    const pos = this.position;\n    const force = this.force;\n    const torque = this.torque;\n    const quat = this.quaternion;\n    const invMass = this.invMass;\n    const invInertia = this.invInertiaWorld;\n    const linearFactor = this.linearFactor;\n    const iMdt = invMass * dt;\n    velo.x += force.x * iMdt * linearFactor.x;\n    velo.y += force.y * iMdt * linearFactor.y;\n    velo.z += force.z * iMdt * linearFactor.z;\n    const e = invInertia.elements;\n    const angularFactor = this.angularFactor;\n    const tx = torque.x * angularFactor.x;\n    const ty = torque.y * angularFactor.y;\n    const tz = torque.z * angularFactor.z;\n    angularVelo.x += dt * (e[0] * tx + e[1] * ty + e[2] * tz);\n    angularVelo.y += dt * (e[3] * tx + e[4] * ty + e[5] * tz);\n    angularVelo.z += dt * (e[6] * tx + e[7] * ty + e[8] * tz); // Use new velocity  - leap frog\n\n    pos.x += velo.x * dt;\n    pos.y += velo.y * dt;\n    pos.z += velo.z * dt;\n    quat.integrate(this.angularVelocity, dt, this.angularFactor, quat);\n\n    if (quatNormalize) {\n      if (quatNormalizeFast) {\n        quat.normalizeFast();\n      } else {\n        quat.normalize();\n      }\n    }\n\n    this.aabbNeedsUpdate = true; // Update world inertia\n\n    this.updateInertiaWorld();\n  }\n\n}\nBody.idCounter = 0;\nBody.COLLIDE_EVENT_NAME = 'collide';\nBody.DYNAMIC = BODY_TYPES.DYNAMIC;\nBody.STATIC = BODY_TYPES.STATIC;\nBody.KINEMATIC = BODY_TYPES.KINEMATIC;\nBody.AWAKE = BODY_SLEEP_STATES.AWAKE;\nBody.SLEEPY = BODY_SLEEP_STATES.SLEEPY;\nBody.SLEEPING = BODY_SLEEP_STATES.SLEEPING;\nBody.wakeupEvent = {\n  type: 'wakeup'\n};\nBody.sleepyEvent = {\n  type: 'sleepy'\n};\nBody.sleepEvent = {\n  type: 'sleep'\n};\nconst tmpVec = new Vec3();\nconst tmpQuat = new Quaternion();\nconst updateAABB_shapeAABB = new AABB();\nconst uiw_m1 = new Mat3();\nconst uiw_m2 = new Mat3();\nconst uiw_m3 = new Mat3();\nconst Body_applyForce_rotForce = new Vec3();\nconst Body_applyLocalForce_worldForce = new Vec3();\nconst Body_applyLocalForce_relativePointWorld = new Vec3();\nconst Body_applyImpulse_velo = new Vec3();\nconst Body_applyImpulse_rotVelo = new Vec3();\nconst Body_applyLocalImpulse_worldImpulse = new Vec3();\nconst Body_applyLocalImpulse_relativePoint = new Vec3();\nconst Body_updateMassProperties_halfExtents = new Vec3();\n\n/**\n * Base class for broadphase implementations\n * @author schteppe\n */\nclass Broadphase {\n  /**\n   * The world to search for collisions in.\n   */\n\n  /**\n   * If set to true, the broadphase uses bounding boxes for intersection tests, else it uses bounding spheres.\n   */\n\n  /**\n   * Set to true if the objects in the world moved.\n   */\n  constructor() {\n    this.world = null;\n    this.useBoundingBoxes = false;\n    this.dirty = true;\n  }\n  /**\n   * Get the collision pairs from the world\n   * @param world The world to search in\n   * @param p1 Empty array to be filled with body objects\n   * @param p2 Empty array to be filled with body objects\n   */\n\n\n  collisionPairs(world, p1, p2) {\n    throw new Error('collisionPairs not implemented for this BroadPhase class!');\n  }\n  /**\n   * Check if a body pair needs to be intersection tested at all.\n   */\n\n\n  needBroadphaseCollision(bodyA, bodyB) {\n    // Check collision filter masks\n    if ((bodyA.collisionFilterGroup & bodyB.collisionFilterMask) === 0 || (bodyB.collisionFilterGroup & bodyA.collisionFilterMask) === 0) {\n      return false;\n    } // Check types\n\n\n    if (((bodyA.type & Body.STATIC) !== 0 || bodyA.sleepState === Body.SLEEPING) && ((bodyB.type & Body.STATIC) !== 0 || bodyB.sleepState === Body.SLEEPING)) {\n      // Both bodies are static or sleeping. Skip.\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Check if the bounding volumes of two bodies intersect.\n   */\n\n\n  intersectionTest(bodyA, bodyB, pairs1, pairs2) {\n    if (this.useBoundingBoxes) {\n      this.doBoundingBoxBroadphase(bodyA, bodyB, pairs1, pairs2);\n    } else {\n      this.doBoundingSphereBroadphase(bodyA, bodyB, pairs1, pairs2);\n    }\n  }\n  /**\n   * Check if the bounding spheres of two bodies are intersecting.\n   * @param pairs1 bodyA is appended to this array if intersection\n   * @param pairs2 bodyB is appended to this array if intersection\n   */\n\n\n  doBoundingSphereBroadphase(bodyA, bodyB, pairs1, pairs2) {\n    const r = Broadphase_collisionPairs_r;\n    bodyB.position.vsub(bodyA.position, r);\n    const boundingRadiusSum2 = (bodyA.boundingRadius + bodyB.boundingRadius) ** 2;\n    const norm2 = r.lengthSquared();\n\n    if (norm2 < boundingRadiusSum2) {\n      pairs1.push(bodyA);\n      pairs2.push(bodyB);\n    }\n  }\n  /**\n   * Check if the bounding boxes of two bodies are intersecting.\n   */\n\n\n  doBoundingBoxBroadphase(bodyA, bodyB, pairs1, pairs2) {\n    if (bodyA.aabbNeedsUpdate) {\n      bodyA.updateAABB();\n    }\n\n    if (bodyB.aabbNeedsUpdate) {\n      bodyB.updateAABB();\n    } // Check AABB / AABB\n\n\n    if (bodyA.aabb.overlaps(bodyB.aabb)) {\n      pairs1.push(bodyA);\n      pairs2.push(bodyB);\n    }\n  }\n  /**\n   * Removes duplicate pairs from the pair arrays.\n   */\n\n\n  makePairsUnique(pairs1, pairs2) {\n    const t = Broadphase_makePairsUnique_temp;\n    const p1 = Broadphase_makePairsUnique_p1;\n    const p2 = Broadphase_makePairsUnique_p2;\n    const N = pairs1.length;\n\n    for (let i = 0; i !== N; i++) {\n      p1[i] = pairs1[i];\n      p2[i] = pairs2[i];\n    }\n\n    pairs1.length = 0;\n    pairs2.length = 0;\n\n    for (let i = 0; i !== N; i++) {\n      const id1 = p1[i].id;\n      const id2 = p2[i].id;\n      const key = id1 < id2 ? `${id1},${id2}` : `${id2},${id1}`;\n      t[key] = i;\n      t.keys.push(key);\n    }\n\n    for (let i = 0; i !== t.keys.length; i++) {\n      const key = t.keys.pop();\n      const pairIndex = t[key];\n      pairs1.push(p1[pairIndex]);\n      pairs2.push(p2[pairIndex]);\n      delete t[key];\n    }\n  }\n  /**\n   * To be implemented by subcasses\n   */\n\n\n  setWorld(world) {}\n  /**\n   * Check if the bounding spheres of two bodies overlap.\n   */\n\n\n  static boundingSphereCheck(bodyA, bodyB) {\n    const dist = new Vec3(); // bsc_dist;\n\n    bodyA.position.vsub(bodyB.position, dist);\n    const sa = bodyA.shapes[0];\n    const sb = bodyB.shapes[0];\n    return Math.pow(sa.boundingSphereRadius + sb.boundingSphereRadius, 2) > dist.lengthSquared();\n  }\n  /**\n   * Returns all the bodies within the AABB.\n   */\n\n\n  aabbQuery(world, aabb, result) {\n    console.warn('.aabbQuery is not implemented in this Broadphase subclass.');\n    return [];\n  }\n\n} // Temp objects\n\nconst Broadphase_collisionPairs_r = new Vec3();\nnew Vec3();\nnew Quaternion();\nnew Vec3();\nconst Broadphase_makePairsUnique_temp = {\n  keys: []\n};\nconst Broadphase_makePairsUnique_p1 = [];\nconst Broadphase_makePairsUnique_p2 = [];\nnew Vec3();\n\n/**\n * Axis aligned uniform grid broadphase.\n * @todo Needs support for more than just planes and spheres.\n */\nclass GridBroadphase extends Broadphase {\n  /**\n   * Number of boxes along x\n   */\n\n  /**\n   * Number of boxes along y\n   */\n\n  /**\n   * Number of boxes along z\n   */\n\n  /**\n   * aabbMin\n   */\n\n  /**\n   * aabbMax\n   */\n\n  /**\n   * bins\n   */\n\n  /**\n   * binLengths\n   */\n\n  /**\n   * @param nx Number of boxes along x.\n   * @param ny Number of boxes along y.\n   * @param nz Number of boxes along z.\n   */\n  constructor(aabbMin, aabbMax, nx, ny, nz) {\n    if (aabbMin === void 0) {\n      aabbMin = new Vec3(100, 100, 100);\n    }\n\n    if (aabbMax === void 0) {\n      aabbMax = new Vec3(-100, -100, -100);\n    }\n\n    if (nx === void 0) {\n      nx = 10;\n    }\n\n    if (ny === void 0) {\n      ny = 10;\n    }\n\n    if (nz === void 0) {\n      nz = 10;\n    }\n\n    super();\n    this.nx = nx;\n    this.ny = ny;\n    this.nz = nz;\n    this.aabbMin = aabbMin;\n    this.aabbMax = aabbMax;\n    const nbins = this.nx * this.ny * this.nz;\n\n    if (nbins <= 0) {\n      throw \"GridBroadphase: Each dimension's n must be >0\";\n    }\n\n    this.bins = [];\n    this.binLengths = []; // Rather than continually resizing arrays (thrashing the memory), just record length and allow them to grow\n\n    this.bins.length = nbins;\n    this.binLengths.length = nbins;\n\n    for (let i = 0; i < nbins; i++) {\n      this.bins[i] = [];\n      this.binLengths[i] = 0;\n    }\n  }\n  /**\n   * Get all the collision pairs in the physics world\n   */\n\n\n  collisionPairs(world, pairs1, pairs2) {\n    const N = world.bodies.length;\n    const bodies = world.bodies;\n    const max = this.aabbMax;\n    const min = this.aabbMin;\n    const nx = this.nx;\n    const ny = this.ny;\n    const nz = this.nz;\n    const xstep = ny * nz;\n    const ystep = nz;\n    const zstep = 1;\n    const xmax = max.x;\n    const ymax = max.y;\n    const zmax = max.z;\n    const xmin = min.x;\n    const ymin = min.y;\n    const zmin = min.z;\n    const xmult = nx / (xmax - xmin);\n    const ymult = ny / (ymax - ymin);\n    const zmult = nz / (zmax - zmin);\n    const binsizeX = (xmax - xmin) / nx;\n    const binsizeY = (ymax - ymin) / ny;\n    const binsizeZ = (zmax - zmin) / nz;\n    const binRadius = Math.sqrt(binsizeX * binsizeX + binsizeY * binsizeY + binsizeZ * binsizeZ) * 0.5;\n    const types = Shape.types;\n    const SPHERE = types.SPHERE;\n    const PLANE = types.PLANE;\n    types.BOX;\n    types.COMPOUND;\n    types.CONVEXPOLYHEDRON;\n    const bins = this.bins;\n    const binLengths = this.binLengths;\n    const Nbins = this.bins.length; // Reset bins\n\n    for (let i = 0; i !== Nbins; i++) {\n      binLengths[i] = 0;\n    }\n\n    const ceil = Math.ceil;\n\n    function addBoxToBins(x0, y0, z0, x1, y1, z1, bi) {\n      let xoff0 = (x0 - xmin) * xmult | 0;\n      let yoff0 = (y0 - ymin) * ymult | 0;\n      let zoff0 = (z0 - zmin) * zmult | 0;\n      let xoff1 = ceil((x1 - xmin) * xmult);\n      let yoff1 = ceil((y1 - ymin) * ymult);\n      let zoff1 = ceil((z1 - zmin) * zmult);\n\n      if (xoff0 < 0) {\n        xoff0 = 0;\n      } else if (xoff0 >= nx) {\n        xoff0 = nx - 1;\n      }\n\n      if (yoff0 < 0) {\n        yoff0 = 0;\n      } else if (yoff0 >= ny) {\n        yoff0 = ny - 1;\n      }\n\n      if (zoff0 < 0) {\n        zoff0 = 0;\n      } else if (zoff0 >= nz) {\n        zoff0 = nz - 1;\n      }\n\n      if (xoff1 < 0) {\n        xoff1 = 0;\n      } else if (xoff1 >= nx) {\n        xoff1 = nx - 1;\n      }\n\n      if (yoff1 < 0) {\n        yoff1 = 0;\n      } else if (yoff1 >= ny) {\n        yoff1 = ny - 1;\n      }\n\n      if (zoff1 < 0) {\n        zoff1 = 0;\n      } else if (zoff1 >= nz) {\n        zoff1 = nz - 1;\n      }\n\n      xoff0 *= xstep;\n      yoff0 *= ystep;\n      zoff0 *= zstep;\n      xoff1 *= xstep;\n      yoff1 *= ystep;\n      zoff1 *= zstep;\n\n      for (let xoff = xoff0; xoff <= xoff1; xoff += xstep) {\n        for (let yoff = yoff0; yoff <= yoff1; yoff += ystep) {\n          for (let zoff = zoff0; zoff <= zoff1; zoff += zstep) {\n            const idx = xoff + yoff + zoff;\n            bins[idx][binLengths[idx]++] = bi;\n          }\n        }\n      }\n    } // Put all bodies into the bins\n\n\n    for (let i = 0; i !== N; i++) {\n      const bi = bodies[i];\n      const si = bi.shapes[0];\n\n      switch (si.type) {\n        case SPHERE:\n          {\n            const shape = si; // Put in bin\n            // check if overlap with other bins\n\n            const x = bi.position.x;\n            const y = bi.position.y;\n            const z = bi.position.z;\n            const r = shape.radius;\n            addBoxToBins(x - r, y - r, z - r, x + r, y + r, z + r, bi);\n            break;\n          }\n\n        case PLANE:\n          {\n            const shape = si;\n\n            if (shape.worldNormalNeedsUpdate) {\n              shape.computeWorldNormal(bi.quaternion);\n            }\n\n            const planeNormal = shape.worldNormal; //Relative position from origin of plane object to the first bin\n            //Incremented as we iterate through the bins\n\n            const xreset = xmin + binsizeX * 0.5 - bi.position.x;\n            const yreset = ymin + binsizeY * 0.5 - bi.position.y;\n            const zreset = zmin + binsizeZ * 0.5 - bi.position.z;\n            const d = GridBroadphase_collisionPairs_d;\n            d.set(xreset, yreset, zreset);\n\n            for (let xi = 0, xoff = 0; xi !== nx; xi++, xoff += xstep, d.y = yreset, d.x += binsizeX) {\n              for (let yi = 0, yoff = 0; yi !== ny; yi++, yoff += ystep, d.z = zreset, d.y += binsizeY) {\n                for (let zi = 0, zoff = 0; zi !== nz; zi++, zoff += zstep, d.z += binsizeZ) {\n                  if (d.dot(planeNormal) < binRadius) {\n                    const idx = xoff + yoff + zoff;\n                    bins[idx][binLengths[idx]++] = bi;\n                  }\n                }\n              }\n            }\n\n            break;\n          }\n\n        default:\n          {\n            if (bi.aabbNeedsUpdate) {\n              bi.updateAABB();\n            }\n\n            addBoxToBins(bi.aabb.lowerBound.x, bi.aabb.lowerBound.y, bi.aabb.lowerBound.z, bi.aabb.upperBound.x, bi.aabb.upperBound.y, bi.aabb.upperBound.z, bi);\n            break;\n          }\n      }\n    } // Check each bin\n\n\n    for (let i = 0; i !== Nbins; i++) {\n      const binLength = binLengths[i]; //Skip bins with no potential collisions\n\n      if (binLength > 1) {\n        const bin = bins[i]; // Do N^2 broadphase inside\n\n        for (let xi = 0; xi !== binLength; xi++) {\n          const bi = bin[xi];\n\n          for (let yi = 0; yi !== xi; yi++) {\n            const bj = bin[yi];\n\n            if (this.needBroadphaseCollision(bi, bj)) {\n              this.intersectionTest(bi, bj, pairs1, pairs2);\n            }\n          }\n        }\n      }\n    } //\tfor (let zi = 0, zoff=0; zi < nz; zi++, zoff+= zstep) {\n    //\t\tconsole.log(\"layer \"+zi);\n    //\t\tfor (let yi = 0, yoff=0; yi < ny; yi++, yoff += ystep) {\n    //\t\t\tconst row = '';\n    //\t\t\tfor (let xi = 0, xoff=0; xi < nx; xi++, xoff += xstep) {\n    //\t\t\t\tconst idx = xoff + yoff + zoff;\n    //\t\t\t\trow += ' ' + binLengths[idx];\n    //\t\t\t}\n    //\t\t\tconsole.log(row);\n    //\t\t}\n    //\t}\n\n\n    this.makePairsUnique(pairs1, pairs2);\n  }\n\n}\nconst GridBroadphase_collisionPairs_d = new Vec3();\nnew Vec3();\n\n/**\n * Naive broadphase implementation, used in lack of better ones.\n *\n * The naive broadphase looks at all possible pairs without restriction, therefore it has complexity N^2 _(which is bad)_\n */\nclass NaiveBroadphase extends Broadphase {\n  /**\n   * @todo Remove useless constructor\n   */\n  constructor() {\n    super();\n  }\n  /**\n   * Get all the collision pairs in the physics world\n   */\n\n\n  collisionPairs(world, pairs1, pairs2) {\n    const bodies = world.bodies;\n    const n = bodies.length;\n    let bi;\n    let bj; // Naive N^2 ftw!\n\n    for (let i = 0; i !== n; i++) {\n      for (let j = 0; j !== i; j++) {\n        bi = bodies[i];\n        bj = bodies[j];\n\n        if (!this.needBroadphaseCollision(bi, bj)) {\n          continue;\n        }\n\n        this.intersectionTest(bi, bj, pairs1, pairs2);\n      }\n    }\n  }\n  /**\n   * Returns all the bodies within an AABB.\n   * @param result An array to store resulting bodies in.\n   */\n\n\n  aabbQuery(world, aabb, result) {\n    if (result === void 0) {\n      result = [];\n    }\n\n    for (let i = 0; i < world.bodies.length; i++) {\n      const b = world.bodies[i];\n\n      if (b.aabbNeedsUpdate) {\n        b.updateAABB();\n      } // Ugly hack until Body gets aabb\n\n\n      if (b.aabb.overlaps(aabb)) {\n        result.push(b);\n      }\n    }\n\n    return result;\n  }\n\n}\n\n/**\n * Storage for Ray casting data\n */\nclass RaycastResult {\n  /**\n   * rayFromWorld\n   */\n\n  /**\n   * rayToWorld\n   */\n\n  /**\n   * hitNormalWorld\n   */\n\n  /**\n   * hitPointWorld\n   */\n\n  /**\n   * hasHit\n   */\n\n  /**\n   * shape\n   */\n\n  /**\n   * body\n   */\n\n  /**\n   * The index of the hit triangle, if the hit shape was a trimesh\n   */\n\n  /**\n   * Distance to the hit. Will be set to -1 if there was no hit\n   */\n\n  /**\n   * If the ray should stop traversing the bodies\n   */\n  constructor() {\n    this.rayFromWorld = new Vec3();\n    this.rayToWorld = new Vec3();\n    this.hitNormalWorld = new Vec3();\n    this.hitPointWorld = new Vec3();\n    this.hasHit = false;\n    this.shape = null;\n    this.body = null;\n    this.hitFaceIndex = -1;\n    this.distance = -1;\n    this.shouldStop = false;\n  }\n  /**\n   * Reset all result data.\n   */\n\n\n  reset() {\n    this.rayFromWorld.setZero();\n    this.rayToWorld.setZero();\n    this.hitNormalWorld.setZero();\n    this.hitPointWorld.setZero();\n    this.hasHit = false;\n    this.shape = null;\n    this.body = null;\n    this.hitFaceIndex = -1;\n    this.distance = -1;\n    this.shouldStop = false;\n  }\n  /**\n   * abort\n   */\n\n\n  abort() {\n    this.shouldStop = true;\n  }\n  /**\n   * Set result data.\n   */\n\n\n  set(rayFromWorld, rayToWorld, hitNormalWorld, hitPointWorld, shape, body, distance) {\n    this.rayFromWorld.copy(rayFromWorld);\n    this.rayToWorld.copy(rayToWorld);\n    this.hitNormalWorld.copy(hitNormalWorld);\n    this.hitPointWorld.copy(hitPointWorld);\n    this.shape = shape;\n    this.body = body;\n    this.distance = distance;\n  }\n\n}\n\nlet _Shape$types$SPHERE, _Shape$types$PLANE, _Shape$types$BOX, _Shape$types$CYLINDER, _Shape$types$CONVEXPO, _Shape$types$HEIGHTFI, _Shape$types$TRIMESH;\n\n/**\n * RAY_MODES\n */\nconst RAY_MODES = {\n  /** CLOSEST */\n  CLOSEST: 1,\n\n  /** ANY */\n  ANY: 2,\n\n  /** ALL */\n  ALL: 4\n};\n/**\n * RayMode\n */\n\n_Shape$types$SPHERE = Shape.types.SPHERE;\n_Shape$types$PLANE = Shape.types.PLANE;\n_Shape$types$BOX = Shape.types.BOX;\n_Shape$types$CYLINDER = Shape.types.CYLINDER;\n_Shape$types$CONVEXPO = Shape.types.CONVEXPOLYHEDRON;\n_Shape$types$HEIGHTFI = Shape.types.HEIGHTFIELD;\n_Shape$types$TRIMESH = Shape.types.TRIMESH;\n\n/**\n * A line in 3D space that intersects bodies and return points.\n */\nclass Ray {\n  /**\n   * from\n   */\n\n  /**\n   * to\n   */\n\n  /**\n   * direction\n   */\n\n  /**\n   * The precision of the ray. Used when checking parallelity etc.\n   * @default 0.0001\n   */\n\n  /**\n   * Set to `false` if you don't want the Ray to take `collisionResponse` flags into account on bodies and shapes.\n   * @default true\n   */\n\n  /**\n   * If set to `true`, the ray skips any hits with normal.dot(rayDirection) < 0.\n   * @default false\n   */\n\n  /**\n   * collisionFilterMask\n   * @default -1\n   */\n\n  /**\n   * collisionFilterGroup\n   * @default -1\n   */\n\n  /**\n   * The intersection mode. Should be Ray.ANY, Ray.ALL or Ray.CLOSEST.\n   * @default RAY.ANY\n   */\n\n  /**\n   * Current result object.\n   */\n\n  /**\n   * Will be set to `true` during intersectWorld() if the ray hit anything.\n   */\n\n  /**\n   * User-provided result callback. Will be used if mode is Ray.ALL.\n   */\n\n  /**\n   * CLOSEST\n   */\n\n  /**\n   * ANY\n   */\n\n  /**\n   * ALL\n   */\n  get [_Shape$types$SPHERE]() {\n    return this._intersectSphere;\n  }\n\n  get [_Shape$types$PLANE]() {\n    return this._intersectPlane;\n  }\n\n  get [_Shape$types$BOX]() {\n    return this._intersectBox;\n  }\n\n  get [_Shape$types$CYLINDER]() {\n    return this._intersectConvex;\n  }\n\n  get [_Shape$types$CONVEXPO]() {\n    return this._intersectConvex;\n  }\n\n  get [_Shape$types$HEIGHTFI]() {\n    return this._intersectHeightfield;\n  }\n\n  get [_Shape$types$TRIMESH]() {\n    return this._intersectTrimesh;\n  }\n\n  constructor(from, to) {\n    if (from === void 0) {\n      from = new Vec3();\n    }\n\n    if (to === void 0) {\n      to = new Vec3();\n    }\n\n    this.from = from.clone();\n    this.to = to.clone();\n    this.direction = new Vec3();\n    this.precision = 0.0001;\n    this.checkCollisionResponse = true;\n    this.skipBackfaces = false;\n    this.collisionFilterMask = -1;\n    this.collisionFilterGroup = -1;\n    this.mode = Ray.ANY;\n    this.result = new RaycastResult();\n    this.hasHit = false;\n\n    this.callback = result => {};\n  }\n  /**\n   * Do itersection against all bodies in the given World.\n   * @return True if the ray hit anything, otherwise false.\n   */\n\n\n  intersectWorld(world, options) {\n    this.mode = options.mode || Ray.ANY;\n    this.result = options.result || new RaycastResult();\n    this.skipBackfaces = !!options.skipBackfaces;\n    this.collisionFilterMask = typeof options.collisionFilterMask !== 'undefined' ? options.collisionFilterMask : -1;\n    this.collisionFilterGroup = typeof options.collisionFilterGroup !== 'undefined' ? options.collisionFilterGroup : -1;\n    this.checkCollisionResponse = typeof options.checkCollisionResponse !== 'undefined' ? options.checkCollisionResponse : true;\n\n    if (options.from) {\n      this.from.copy(options.from);\n    }\n\n    if (options.to) {\n      this.to.copy(options.to);\n    }\n\n    this.callback = options.callback || (() => {});\n\n    this.hasHit = false;\n    this.result.reset();\n    this.updateDirection();\n    this.getAABB(tmpAABB$1);\n    tmpArray.length = 0;\n    world.broadphase.aabbQuery(world, tmpAABB$1, tmpArray);\n    this.intersectBodies(tmpArray);\n    return this.hasHit;\n  }\n  /**\n   * Shoot a ray at a body, get back information about the hit.\n   * @deprecated @param result set the result property of the Ray instead.\n   */\n\n\n  intersectBody(body, result) {\n    if (result) {\n      this.result = result;\n      this.updateDirection();\n    }\n\n    const checkCollisionResponse = this.checkCollisionResponse;\n\n    if (checkCollisionResponse && !body.collisionResponse) {\n      return;\n    }\n\n    if ((this.collisionFilterGroup & body.collisionFilterMask) === 0 || (body.collisionFilterGroup & this.collisionFilterMask) === 0) {\n      return;\n    }\n\n    const xi = intersectBody_xi;\n    const qi = intersectBody_qi;\n\n    for (let i = 0, N = body.shapes.length; i < N; i++) {\n      const shape = body.shapes[i];\n\n      if (checkCollisionResponse && !shape.collisionResponse) {\n        continue; // Skip\n      }\n\n      body.quaternion.mult(body.shapeOrientations[i], qi);\n      body.quaternion.vmult(body.shapeOffsets[i], xi);\n      xi.vadd(body.position, xi);\n      this.intersectShape(shape, qi, xi, body);\n\n      if (this.result.shouldStop) {\n        break;\n      }\n    }\n  }\n  /**\n   * Shoot a ray at an array bodies, get back information about the hit.\n   * @param bodies An array of Body objects.\n   * @deprecated @param result set the result property of the Ray instead.\n   *\n   */\n\n\n  intersectBodies(bodies, result) {\n    if (result) {\n      this.result = result;\n      this.updateDirection();\n    }\n\n    for (let i = 0, l = bodies.length; !this.result.shouldStop && i < l; i++) {\n      this.intersectBody(bodies[i]);\n    }\n  }\n  /**\n   * Updates the direction vector.\n   */\n\n\n  updateDirection() {\n    this.to.vsub(this.from, this.direction);\n    this.direction.normalize();\n  }\n\n  intersectShape(shape, quat, position, body) {\n    const from = this.from; // Checking boundingSphere\n\n    const distance = distanceFromIntersection(from, this.direction, position);\n\n    if (distance > shape.boundingSphereRadius) {\n      return;\n    }\n\n    const intersectMethod = this[shape.type];\n\n    if (intersectMethod) {\n      intersectMethod.call(this, shape, quat, position, body, shape);\n    }\n  }\n\n  _intersectBox(box, quat, position, body, reportedShape) {\n    return this._intersectConvex(box.convexPolyhedronRepresentation, quat, position, body, reportedShape);\n  }\n\n  _intersectPlane(shape, quat, position, body, reportedShape) {\n    const from = this.from;\n    const to = this.to;\n    const direction = this.direction; // Get plane normal\n\n    const worldNormal = new Vec3(0, 0, 1);\n    quat.vmult(worldNormal, worldNormal);\n    const len = new Vec3();\n    from.vsub(position, len);\n    const planeToFrom = len.dot(worldNormal);\n    to.vsub(position, len);\n    const planeToTo = len.dot(worldNormal);\n\n    if (planeToFrom * planeToTo > 0) {\n      // \"from\" and \"to\" are on the same side of the plane... bail out\n      return;\n    }\n\n    if (from.distanceTo(to) < planeToFrom) {\n      return;\n    }\n\n    const n_dot_dir = worldNormal.dot(direction);\n\n    if (Math.abs(n_dot_dir) < this.precision) {\n      // No intersection\n      return;\n    }\n\n    const planePointToFrom = new Vec3();\n    const dir_scaled_with_t = new Vec3();\n    const hitPointWorld = new Vec3();\n    from.vsub(position, planePointToFrom);\n    const t = -worldNormal.dot(planePointToFrom) / n_dot_dir;\n    direction.scale(t, dir_scaled_with_t);\n    from.vadd(dir_scaled_with_t, hitPointWorld);\n    this.reportIntersection(worldNormal, hitPointWorld, reportedShape, body, -1);\n  }\n  /**\n   * Get the world AABB of the ray.\n   */\n\n\n  getAABB(aabb) {\n    const {\n      lowerBound,\n      upperBound\n    } = aabb;\n    const to = this.to;\n    const from = this.from;\n    lowerBound.x = Math.min(to.x, from.x);\n    lowerBound.y = Math.min(to.y, from.y);\n    lowerBound.z = Math.min(to.z, from.z);\n    upperBound.x = Math.max(to.x, from.x);\n    upperBound.y = Math.max(to.y, from.y);\n    upperBound.z = Math.max(to.z, from.z);\n  }\n\n  _intersectHeightfield(shape, quat, position, body, reportedShape) {\n    shape.data;\n    shape.elementSize; // Convert the ray to local heightfield coordinates\n\n    const localRay = intersectHeightfield_localRay; //new Ray(this.from, this.to);\n\n    localRay.from.copy(this.from);\n    localRay.to.copy(this.to);\n    Transform.pointToLocalFrame(position, quat, localRay.from, localRay.from);\n    Transform.pointToLocalFrame(position, quat, localRay.to, localRay.to);\n    localRay.updateDirection(); // Get the index of the data points to test against\n\n    const index = intersectHeightfield_index;\n    let iMinX;\n    let iMinY;\n    let iMaxX;\n    let iMaxY; // Set to max\n\n    iMinX = iMinY = 0;\n    iMaxX = iMaxY = shape.data.length - 1;\n    const aabb = new AABB();\n    localRay.getAABB(aabb);\n    shape.getIndexOfPosition(aabb.lowerBound.x, aabb.lowerBound.y, index, true);\n    iMinX = Math.max(iMinX, index[0]);\n    iMinY = Math.max(iMinY, index[1]);\n    shape.getIndexOfPosition(aabb.upperBound.x, aabb.upperBound.y, index, true);\n    iMaxX = Math.min(iMaxX, index[0] + 1);\n    iMaxY = Math.min(iMaxY, index[1] + 1);\n\n    for (let i = iMinX; i < iMaxX; i++) {\n      for (let j = iMinY; j < iMaxY; j++) {\n        if (this.result.shouldStop) {\n          return;\n        }\n\n        shape.getAabbAtIndex(i, j, aabb);\n\n        if (!aabb.overlapsRay(localRay)) {\n          continue;\n        } // Lower triangle\n\n\n        shape.getConvexTrianglePillar(i, j, false);\n        Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n\n        this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);\n\n        if (this.result.shouldStop) {\n          return;\n        } // Upper triangle\n\n\n        shape.getConvexTrianglePillar(i, j, true);\n        Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n\n        this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);\n      }\n    }\n  }\n\n  _intersectSphere(sphere, quat, position, body, reportedShape) {\n    const from = this.from;\n    const to = this.to;\n    const r = sphere.radius;\n    const a = (to.x - from.x) ** 2 + (to.y - from.y) ** 2 + (to.z - from.z) ** 2;\n    const b = 2 * ((to.x - from.x) * (from.x - position.x) + (to.y - from.y) * (from.y - position.y) + (to.z - from.z) * (from.z - position.z));\n    const c = (from.x - position.x) ** 2 + (from.y - position.y) ** 2 + (from.z - position.z) ** 2 - r ** 2;\n    const delta = b ** 2 - 4 * a * c;\n    const intersectionPoint = Ray_intersectSphere_intersectionPoint;\n    const normal = Ray_intersectSphere_normal;\n\n    if (delta < 0) {\n      // No intersection\n      return;\n    } else if (delta === 0) {\n      // single intersection point\n      from.lerp(to, delta, intersectionPoint);\n      intersectionPoint.vsub(position, normal);\n      normal.normalize();\n      this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n    } else {\n      const d1 = (-b - Math.sqrt(delta)) / (2 * a);\n      const d2 = (-b + Math.sqrt(delta)) / (2 * a);\n\n      if (d1 >= 0 && d1 <= 1) {\n        from.lerp(to, d1, intersectionPoint);\n        intersectionPoint.vsub(position, normal);\n        normal.normalize();\n        this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n      }\n\n      if (this.result.shouldStop) {\n        return;\n      }\n\n      if (d2 >= 0 && d2 <= 1) {\n        from.lerp(to, d2, intersectionPoint);\n        intersectionPoint.vsub(position, normal);\n        normal.normalize();\n        this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n      }\n    }\n  }\n\n  _intersectConvex(shape, quat, position, body, reportedShape, options) {\n    intersectConvex_minDistNormal;\n    const normal = intersectConvex_normal;\n    const vector = intersectConvex_vector;\n    intersectConvex_minDistIntersect;\n    const faceList = options && options.faceList || null; // Checking faces\n\n    const faces = shape.faces;\n    const vertices = shape.vertices;\n    const normals = shape.faceNormals;\n    const direction = this.direction;\n    const from = this.from;\n    const to = this.to;\n    const fromToDistance = from.distanceTo(to);\n    const Nfaces = faceList ? faceList.length : faces.length;\n    const result = this.result;\n\n    for (let j = 0; !result.shouldStop && j < Nfaces; j++) {\n      const fi = faceList ? faceList[j] : j;\n      const face = faces[fi];\n      const faceNormal = normals[fi];\n      const q = quat;\n      const x = position; // determine if ray intersects the plane of the face\n      // note: this works regardless of the direction of the face normal\n      // Get plane point in world coordinates...\n\n      vector.copy(vertices[face[0]]);\n      q.vmult(vector, vector);\n      vector.vadd(x, vector); // ...but make it relative to the ray from. We'll fix this later.\n\n      vector.vsub(from, vector); // Get plane normal\n\n      q.vmult(faceNormal, normal); // If this dot product is negative, we have something interesting\n\n      const dot = direction.dot(normal); // Bail out if ray and plane are parallel\n\n      if (Math.abs(dot) < this.precision) {\n        continue;\n      } // calc distance to plane\n\n\n      const scalar = normal.dot(vector) / dot; // if negative distance, then plane is behind ray\n\n      if (scalar < 0) {\n        continue;\n      } // if (dot < 0) {\n      // Intersection point is from + direction * scalar\n\n\n      direction.scale(scalar, intersectPoint);\n      intersectPoint.vadd(from, intersectPoint); // a is the point we compare points b and c with.\n\n      a.copy(vertices[face[0]]);\n      q.vmult(a, a);\n      x.vadd(a, a);\n\n      for (let i = 1; !result.shouldStop && i < face.length - 1; i++) {\n        // Transform 3 vertices to world coords\n        b.copy(vertices[face[i]]);\n        c.copy(vertices[face[i + 1]]);\n        q.vmult(b, b);\n        q.vmult(c, c);\n        x.vadd(b, b);\n        x.vadd(c, c);\n        const distance = intersectPoint.distanceTo(from);\n\n        if (!(Ray.pointInTriangle(intersectPoint, a, b, c) || Ray.pointInTriangle(intersectPoint, b, a, c)) || distance > fromToDistance) {\n          continue;\n        }\n\n        this.reportIntersection(normal, intersectPoint, reportedShape, body, fi);\n      } // }\n\n    }\n  }\n  /**\n   * @todo Optimize by transforming the world to local space first.\n   * @todo Use Octree lookup\n   */\n\n\n  _intersectTrimesh(mesh, quat, position, body, reportedShape, options) {\n    const normal = intersectTrimesh_normal;\n    const triangles = intersectTrimesh_triangles;\n    const treeTransform = intersectTrimesh_treeTransform;\n    const vector = intersectConvex_vector;\n    const localDirection = intersectTrimesh_localDirection;\n    const localFrom = intersectTrimesh_localFrom;\n    const localTo = intersectTrimesh_localTo;\n    const worldIntersectPoint = intersectTrimesh_worldIntersectPoint;\n    const worldNormal = intersectTrimesh_worldNormal; // Checking faces\n\n    const indices = mesh.indices;\n    mesh.vertices; // const normals = mesh.faceNormals\n\n    const from = this.from;\n    const to = this.to;\n    const direction = this.direction;\n    treeTransform.position.copy(position);\n    treeTransform.quaternion.copy(quat); // Transform ray to local space!\n\n    Transform.vectorToLocalFrame(position, quat, direction, localDirection);\n    Transform.pointToLocalFrame(position, quat, from, localFrom);\n    Transform.pointToLocalFrame(position, quat, to, localTo);\n    localTo.x *= mesh.scale.x;\n    localTo.y *= mesh.scale.y;\n    localTo.z *= mesh.scale.z;\n    localFrom.x *= mesh.scale.x;\n    localFrom.y *= mesh.scale.y;\n    localFrom.z *= mesh.scale.z;\n    localTo.vsub(localFrom, localDirection);\n    localDirection.normalize();\n    const fromToDistanceSquared = localFrom.distanceSquared(localTo);\n    mesh.tree.rayQuery(this, treeTransform, triangles);\n\n    for (let i = 0, N = triangles.length; !this.result.shouldStop && i !== N; i++) {\n      const trianglesIndex = triangles[i];\n      mesh.getNormal(trianglesIndex, normal); // determine if ray intersects the plane of the face\n      // note: this works regardless of the direction of the face normal\n      // Get plane point in world coordinates...\n\n      mesh.getVertex(indices[trianglesIndex * 3], a); // ...but make it relative to the ray from. We'll fix this later.\n\n      a.vsub(localFrom, vector); // If this dot product is negative, we have something interesting\n\n      const dot = localDirection.dot(normal); // Bail out if ray and plane are parallel\n      // if (Math.abs( dot ) < this.precision){\n      //     continue;\n      // }\n      // calc distance to plane\n\n      const scalar = normal.dot(vector) / dot; // if negative distance, then plane is behind ray\n\n      if (scalar < 0) {\n        continue;\n      } // Intersection point is from + direction * scalar\n\n\n      localDirection.scale(scalar, intersectPoint);\n      intersectPoint.vadd(localFrom, intersectPoint); // Get triangle vertices\n\n      mesh.getVertex(indices[trianglesIndex * 3 + 1], b);\n      mesh.getVertex(indices[trianglesIndex * 3 + 2], c);\n      const squaredDistance = intersectPoint.distanceSquared(localFrom);\n\n      if (!(Ray.pointInTriangle(intersectPoint, b, a, c) || Ray.pointInTriangle(intersectPoint, a, b, c)) || squaredDistance > fromToDistanceSquared) {\n        continue;\n      } // transform intersectpoint and normal to world\n\n\n      Transform.vectorToWorldFrame(quat, normal, worldNormal);\n      Transform.pointToWorldFrame(position, quat, intersectPoint, worldIntersectPoint);\n      this.reportIntersection(worldNormal, worldIntersectPoint, reportedShape, body, trianglesIndex);\n    }\n\n    triangles.length = 0;\n  }\n  /**\n   * @return True if the intersections should continue\n   */\n\n\n  reportIntersection(normal, hitPointWorld, shape, body, hitFaceIndex) {\n    const from = this.from;\n    const to = this.to;\n    const distance = from.distanceTo(hitPointWorld);\n    const result = this.result; // Skip back faces?\n\n    if (this.skipBackfaces && normal.dot(this.direction) > 0) {\n      return;\n    }\n\n    result.hitFaceIndex = typeof hitFaceIndex !== 'undefined' ? hitFaceIndex : -1;\n\n    switch (this.mode) {\n      case Ray.ALL:\n        this.hasHit = true;\n        result.set(from, to, normal, hitPointWorld, shape, body, distance);\n        result.hasHit = true;\n        this.callback(result);\n        break;\n\n      case Ray.CLOSEST:\n        // Store if closer than current closest\n        if (distance < result.distance || !result.hasHit) {\n          this.hasHit = true;\n          result.hasHit = true;\n          result.set(from, to, normal, hitPointWorld, shape, body, distance);\n        }\n\n        break;\n\n      case Ray.ANY:\n        // Report and stop.\n        this.hasHit = true;\n        result.hasHit = true;\n        result.set(from, to, normal, hitPointWorld, shape, body, distance);\n        result.shouldStop = true;\n        break;\n    }\n  }\n  /**\n   * As per \"Barycentric Technique\" as named\n   * {@link https://www.blackpawn.com/texts/pointinpoly/default.html here} but without the division\n   */\n\n\n  static pointInTriangle(p, a, b, c) {\n    c.vsub(a, v0);\n    b.vsub(a, v1);\n    p.vsub(a, v2);\n    const dot00 = v0.dot(v0);\n    const dot01 = v0.dot(v1);\n    const dot02 = v0.dot(v2);\n    const dot11 = v1.dot(v1);\n    const dot12 = v1.dot(v2);\n    let u;\n    let v;\n    return (u = dot11 * dot02 - dot01 * dot12) >= 0 && (v = dot00 * dot12 - dot01 * dot02) >= 0 && u + v < dot00 * dot11 - dot01 * dot01;\n  }\n\n}\nRay.CLOSEST = RAY_MODES.CLOSEST;\nRay.ANY = RAY_MODES.ANY;\nRay.ALL = RAY_MODES.ALL;\nconst tmpAABB$1 = new AABB();\nconst tmpArray = [];\nconst v1 = new Vec3();\nconst v2 = new Vec3();\nconst intersectBody_xi = new Vec3();\nconst intersectBody_qi = new Quaternion();\nconst intersectPoint = new Vec3();\nconst a = new Vec3();\nconst b = new Vec3();\nconst c = new Vec3();\nnew Vec3();\nnew RaycastResult();\nconst intersectConvexOptions = {\n  faceList: [0]\n};\nconst worldPillarOffset = new Vec3();\nconst intersectHeightfield_localRay = new Ray();\nconst intersectHeightfield_index = [];\nconst Ray_intersectSphere_intersectionPoint = new Vec3();\nconst Ray_intersectSphere_normal = new Vec3();\nconst intersectConvex_normal = new Vec3();\nconst intersectConvex_minDistNormal = new Vec3();\nconst intersectConvex_minDistIntersect = new Vec3();\nconst intersectConvex_vector = new Vec3();\nconst intersectTrimesh_normal = new Vec3();\nconst intersectTrimesh_localDirection = new Vec3();\nconst intersectTrimesh_localFrom = new Vec3();\nconst intersectTrimesh_localTo = new Vec3();\nconst intersectTrimesh_worldNormal = new Vec3();\nconst intersectTrimesh_worldIntersectPoint = new Vec3();\nnew AABB();\nconst intersectTrimesh_triangles = [];\nconst intersectTrimesh_treeTransform = new Transform();\nconst v0 = new Vec3();\nconst intersect = new Vec3();\n\nfunction distanceFromIntersection(from, direction, position) {\n  // v0 is vector from from to position\n  position.vsub(from, v0);\n  const dot = v0.dot(direction); // intersect = direction*dot + from\n\n  direction.scale(dot, intersect);\n  intersect.vadd(from, intersect);\n  const distance = position.distanceTo(intersect);\n  return distance;\n}\n\n/**\n * Sweep and prune broadphase along one axis.\n */\nclass SAPBroadphase extends Broadphase {\n  /**\n   * List of bodies currently in the broadphase.\n   */\n\n  /**\n   * The world to search in.\n   */\n\n  /**\n   * Axis to sort the bodies along.\n   * Set to 0 for x axis, and 1 for y axis.\n   * For best performance, pick the axis where bodies are most distributed.\n   */\n\n  /**\n   * Check if the bounds of two bodies overlap, along the given SAP axis.\n   */\n  static checkBounds(bi, bj, axisIndex) {\n    let biPos;\n    let bjPos;\n\n    if (axisIndex === 0) {\n      biPos = bi.position.x;\n      bjPos = bj.position.x;\n    } else if (axisIndex === 1) {\n      biPos = bi.position.y;\n      bjPos = bj.position.y;\n    } else if (axisIndex === 2) {\n      biPos = bi.position.z;\n      bjPos = bj.position.z;\n    }\n\n    const ri = bi.boundingRadius,\n          rj = bj.boundingRadius,\n          boundA2 = biPos + ri,\n          boundB1 = bjPos - rj;\n    return boundB1 < boundA2;\n  } // Note: these are identical, save for x/y/z lowerbound\n\n  /**\n   * insertionSortX\n   */\n\n\n  static insertionSortX(a) {\n    for (let i = 1, l = a.length; i < l; i++) {\n      const v = a[i];\n      let j;\n\n      for (j = i - 1; j >= 0; j--) {\n        if (a[j].aabb.lowerBound.x <= v.aabb.lowerBound.x) {\n          break;\n        }\n\n        a[j + 1] = a[j];\n      }\n\n      a[j + 1] = v;\n    }\n\n    return a;\n  }\n  /**\n   * insertionSortY\n   */\n\n\n  static insertionSortY(a) {\n    for (let i = 1, l = a.length; i < l; i++) {\n      const v = a[i];\n      let j;\n\n      for (j = i - 1; j >= 0; j--) {\n        if (a[j].aabb.lowerBound.y <= v.aabb.lowerBound.y) {\n          break;\n        }\n\n        a[j + 1] = a[j];\n      }\n\n      a[j + 1] = v;\n    }\n\n    return a;\n  }\n  /**\n   * insertionSortZ\n   */\n\n\n  static insertionSortZ(a) {\n    for (let i = 1, l = a.length; i < l; i++) {\n      const v = a[i];\n      let j;\n\n      for (j = i - 1; j >= 0; j--) {\n        if (a[j].aabb.lowerBound.z <= v.aabb.lowerBound.z) {\n          break;\n        }\n\n        a[j + 1] = a[j];\n      }\n\n      a[j + 1] = v;\n    }\n\n    return a;\n  }\n\n  constructor(world) {\n    super();\n    this.axisList = [];\n    this.world = null;\n    this.axisIndex = 0;\n    const axisList = this.axisList;\n\n    this._addBodyHandler = event => {\n      axisList.push(event.body);\n    };\n\n    this._removeBodyHandler = event => {\n      const idx = axisList.indexOf(event.body);\n\n      if (idx !== -1) {\n        axisList.splice(idx, 1);\n      }\n    };\n\n    if (world) {\n      this.setWorld(world);\n    }\n  }\n  /**\n   * Change the world\n   */\n\n\n  setWorld(world) {\n    // Clear the old axis array\n    this.axisList.length = 0; // Add all bodies from the new world\n\n    for (let i = 0; i < world.bodies.length; i++) {\n      this.axisList.push(world.bodies[i]);\n    } // Remove old handlers, if any\n\n\n    world.removeEventListener('addBody', this._addBodyHandler);\n    world.removeEventListener('removeBody', this._removeBodyHandler); // Add handlers to update the list of bodies.\n\n    world.addEventListener('addBody', this._addBodyHandler);\n    world.addEventListener('removeBody', this._removeBodyHandler);\n    this.world = world;\n    this.dirty = true;\n  }\n  /**\n   * Collect all collision pairs\n   */\n\n\n  collisionPairs(world, p1, p2) {\n    const bodies = this.axisList;\n    const N = bodies.length;\n    const axisIndex = this.axisIndex;\n    let i;\n    let j;\n\n    if (this.dirty) {\n      this.sortList();\n      this.dirty = false;\n    } // Look through the list\n\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n\n      for (j = i + 1; j < N; j++) {\n        const bj = bodies[j];\n\n        if (!this.needBroadphaseCollision(bi, bj)) {\n          continue;\n        }\n\n        if (!SAPBroadphase.checkBounds(bi, bj, axisIndex)) {\n          break;\n        }\n\n        this.intersectionTest(bi, bj, p1, p2);\n      }\n    }\n  }\n\n  sortList() {\n    const axisList = this.axisList;\n    const axisIndex = this.axisIndex;\n    const N = axisList.length; // Update AABBs\n\n    for (let i = 0; i !== N; i++) {\n      const bi = axisList[i];\n\n      if (bi.aabbNeedsUpdate) {\n        bi.updateAABB();\n      }\n    } // Sort the list\n\n\n    if (axisIndex === 0) {\n      SAPBroadphase.insertionSortX(axisList);\n    } else if (axisIndex === 1) {\n      SAPBroadphase.insertionSortY(axisList);\n    } else if (axisIndex === 2) {\n      SAPBroadphase.insertionSortZ(axisList);\n    }\n  }\n  /**\n   * Computes the variance of the body positions and estimates the best axis to use.\n   * Will automatically set property `axisIndex`.\n   */\n\n\n  autoDetectAxis() {\n    let sumX = 0;\n    let sumX2 = 0;\n    let sumY = 0;\n    let sumY2 = 0;\n    let sumZ = 0;\n    let sumZ2 = 0;\n    const bodies = this.axisList;\n    const N = bodies.length;\n    const invN = 1 / N;\n\n    for (let i = 0; i !== N; i++) {\n      const b = bodies[i];\n      const centerX = b.position.x;\n      sumX += centerX;\n      sumX2 += centerX * centerX;\n      const centerY = b.position.y;\n      sumY += centerY;\n      sumY2 += centerY * centerY;\n      const centerZ = b.position.z;\n      sumZ += centerZ;\n      sumZ2 += centerZ * centerZ;\n    }\n\n    const varianceX = sumX2 - sumX * sumX * invN;\n    const varianceY = sumY2 - sumY * sumY * invN;\n    const varianceZ = sumZ2 - sumZ * sumZ * invN;\n\n    if (varianceX > varianceY) {\n      if (varianceX > varianceZ) {\n        this.axisIndex = 0;\n      } else {\n        this.axisIndex = 2;\n      }\n    } else if (varianceY > varianceZ) {\n      this.axisIndex = 1;\n    } else {\n      this.axisIndex = 2;\n    }\n  }\n  /**\n   * Returns all the bodies within an AABB.\n   * @param result An array to store resulting bodies in.\n   */\n\n\n  aabbQuery(world, aabb, result) {\n    if (result === void 0) {\n      result = [];\n    }\n\n    if (this.dirty) {\n      this.sortList();\n      this.dirty = false;\n    }\n\n    const axisIndex = this.axisIndex;\n    let axis = 'x';\n\n    if (axisIndex === 1) {\n      axis = 'y';\n    }\n\n    if (axisIndex === 2) {\n      axis = 'z';\n    }\n\n    const axisList = this.axisList;\n    aabb.lowerBound[axis];\n    aabb.upperBound[axis];\n\n    for (let i = 0; i < axisList.length; i++) {\n      const b = axisList[i];\n\n      if (b.aabbNeedsUpdate) {\n        b.updateAABB();\n      }\n\n      if (b.aabb.overlaps(aabb)) {\n        result.push(b);\n      }\n    }\n\n    return result;\n  }\n\n}\n\nclass Utils {\n  /**\n   * Extend an options object with default values.\n   * @param options The options object. May be falsy: in this case, a new object is created and returned.\n   * @param defaults An object containing default values.\n   * @return The modified options object.\n   */\n  static defaults(options, defaults) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    for (let key in defaults) {\n      if (!(key in options)) {\n        options[key] = defaults[key];\n      }\n    }\n\n    return options;\n  }\n\n}\n\n/**\n * Constraint base class\n */\nclass Constraint {\n  /**\n   * Equations to be solved in this constraint.\n   */\n\n  /**\n   * Body A.\n   */\n\n  /**\n   * Body B.\n   */\n\n  /**\n   * Set to false if you don't want the bodies to collide when they are connected.\n   */\n  constructor(bodyA, bodyB, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    options = Utils.defaults(options, {\n      collideConnected: true,\n      wakeUpBodies: true\n    });\n    this.equations = [];\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.id = Constraint.idCounter++;\n    this.collideConnected = options.collideConnected;\n\n    if (options.wakeUpBodies) {\n      if (bodyA) {\n        bodyA.wakeUp();\n      }\n\n      if (bodyB) {\n        bodyB.wakeUp();\n      }\n    }\n  }\n  /**\n   * Update all the equations with data.\n   */\n\n\n  update() {\n    throw new Error('method update() not implmemented in this Constraint subclass!');\n  }\n  /**\n   * Enables all equations in the constraint.\n   */\n\n\n  enable() {\n    const eqs = this.equations;\n\n    for (let i = 0; i < eqs.length; i++) {\n      eqs[i].enabled = true;\n    }\n  }\n  /**\n   * Disables all equations in the constraint.\n   */\n\n\n  disable() {\n    const eqs = this.equations;\n\n    for (let i = 0; i < eqs.length; i++) {\n      eqs[i].enabled = false;\n    }\n  }\n\n}\nConstraint.idCounter = 0;\n\n/**\n * An element containing 6 entries, 3 spatial and 3 rotational degrees of freedom.\n */\n\nclass JacobianElement {\n  /**\n   * spatial\n   */\n\n  /**\n   * rotational\n   */\n  constructor() {\n    this.spatial = new Vec3();\n    this.rotational = new Vec3();\n  }\n  /**\n   * Multiply with other JacobianElement\n   */\n\n\n  multiplyElement(element) {\n    return element.spatial.dot(this.spatial) + element.rotational.dot(this.rotational);\n  }\n  /**\n   * Multiply with two vectors\n   */\n\n\n  multiplyVectors(spatial, rotational) {\n    return spatial.dot(this.spatial) + rotational.dot(this.rotational);\n  }\n\n}\n\n/**\n * Equation base class.\n *\n * `a`, `b` and `eps` are {@link https://www8.cs.umu.se/kurser/5DV058/VT15/lectures/SPOOKlabnotes.pdf SPOOK} parameters that default to `0.0`. See {@link https://github.com/schteppe/cannon.js/issues/238#issuecomment-147172327 this exchange} for more details on Cannon's physics implementation.\n */\nclass Equation {\n  /**\n   * Minimum (read: negative max) force to be applied by the constraint.\n   */\n\n  /**\n   * Maximum (read: positive max) force to be applied by the constraint.\n   */\n\n  /**\n   * SPOOK parameter\n   */\n\n  /**\n   * SPOOK parameter\n   */\n\n  /**\n   * SPOOK parameter\n   */\n\n  /**\n   * A number, proportional to the force added to the bodies.\n   */\n  constructor(bi, bj, minForce, maxForce) {\n    if (minForce === void 0) {\n      minForce = -1e6;\n    }\n\n    if (maxForce === void 0) {\n      maxForce = 1e6;\n    }\n\n    this.id = Equation.idCounter++;\n    this.minForce = minForce;\n    this.maxForce = maxForce;\n    this.bi = bi;\n    this.bj = bj;\n    this.a = 0.0; // SPOOK parameter\n\n    this.b = 0.0; // SPOOK parameter\n\n    this.eps = 0.0; // SPOOK parameter\n\n    this.jacobianElementA = new JacobianElement();\n    this.jacobianElementB = new JacobianElement();\n    this.enabled = true;\n    this.multiplier = 0;\n    this.setSpookParams(1e7, 4, 1 / 60); // Set typical spook params\n  }\n  /**\n   * Recalculates a, b, and eps.\n   *\n   * The Equation constructor sets typical SPOOK parameters as such:\n   * * `stiffness` = 1e7\n   * * `relaxation` = 4\n   * * `timeStep`= 1 / 60, _note the hardcoded refresh rate._\n   */\n\n\n  setSpookParams(stiffness, relaxation, timeStep) {\n    const d = relaxation;\n    const k = stiffness;\n    const h = timeStep;\n    this.a = 4.0 / (h * (1 + 4 * d));\n    this.b = 4.0 * d / (1 + 4 * d);\n    this.eps = 4.0 / (h * h * k * (1 + 4 * d));\n  }\n  /**\n   * Computes the right hand side of the SPOOK equation\n   */\n\n\n  computeB(a, b, h) {\n    const GW = this.computeGW();\n    const Gq = this.computeGq();\n    const GiMf = this.computeGiMf();\n    return -Gq * a - GW * b - GiMf * h;\n  }\n  /**\n   * Computes G*q, where q are the generalized body coordinates\n   */\n\n\n  computeGq() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const xi = bi.position;\n    const xj = bj.position;\n    return GA.spatial.dot(xi) + GB.spatial.dot(xj);\n  }\n  /**\n   * Computes G*W, where W are the body velocities\n   */\n\n\n  computeGW() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const vi = bi.velocity;\n    const vj = bj.velocity;\n    const wi = bi.angularVelocity;\n    const wj = bj.angularVelocity;\n    return GA.multiplyVectors(vi, wi) + GB.multiplyVectors(vj, wj);\n  }\n  /**\n   * Computes G*Wlambda, where W are the body velocities\n   */\n\n\n  computeGWlambda() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const vi = bi.vlambda;\n    const vj = bj.vlambda;\n    const wi = bi.wlambda;\n    const wj = bj.wlambda;\n    return GA.multiplyVectors(vi, wi) + GB.multiplyVectors(vj, wj);\n  }\n  /**\n   * Computes G*inv(M)*f, where M is the mass matrix with diagonal blocks for each body, and f are the forces on the bodies.\n   */\n\n\n  computeGiMf() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const fi = bi.force;\n    const ti = bi.torque;\n    const fj = bj.force;\n    const tj = bj.torque;\n    const invMassi = bi.invMassSolve;\n    const invMassj = bj.invMassSolve;\n    fi.scale(invMassi, iMfi);\n    fj.scale(invMassj, iMfj);\n    bi.invInertiaWorldSolve.vmult(ti, invIi_vmult_taui);\n    bj.invInertiaWorldSolve.vmult(tj, invIj_vmult_tauj);\n    return GA.multiplyVectors(iMfi, invIi_vmult_taui) + GB.multiplyVectors(iMfj, invIj_vmult_tauj);\n  }\n  /**\n   * Computes G*inv(M)*G'\n   */\n\n\n  computeGiMGt() {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const invMassi = bi.invMassSolve;\n    const invMassj = bj.invMassSolve;\n    const invIi = bi.invInertiaWorldSolve;\n    const invIj = bj.invInertiaWorldSolve;\n    let result = invMassi + invMassj;\n    invIi.vmult(GA.rotational, tmp);\n    result += tmp.dot(GA.rotational);\n    invIj.vmult(GB.rotational, tmp);\n    result += tmp.dot(GB.rotational);\n    return result;\n  }\n  /**\n   * Add constraint velocity to the bodies.\n   */\n\n\n  addToWlambda(deltalambda) {\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const bi = this.bi;\n    const bj = this.bj;\n    const temp = addToWlambda_temp; // Add to linear velocity\n    // v_lambda += inv(M) * delta_lamba * G\n\n    bi.vlambda.addScaledVector(bi.invMassSolve * deltalambda, GA.spatial, bi.vlambda);\n    bj.vlambda.addScaledVector(bj.invMassSolve * deltalambda, GB.spatial, bj.vlambda); // Add to angular velocity\n\n    bi.invInertiaWorldSolve.vmult(GA.rotational, temp);\n    bi.wlambda.addScaledVector(deltalambda, temp, bi.wlambda);\n    bj.invInertiaWorldSolve.vmult(GB.rotational, temp);\n    bj.wlambda.addScaledVector(deltalambda, temp, bj.wlambda);\n  }\n  /**\n   * Compute the denominator part of the SPOOK equation: C = G*inv(M)*G' + eps\n   */\n\n\n  computeC() {\n    return this.computeGiMGt() + this.eps;\n  }\n\n}\nEquation.idCounter = 0;\nconst iMfi = new Vec3();\nconst iMfj = new Vec3();\nconst invIi_vmult_taui = new Vec3();\nconst invIj_vmult_tauj = new Vec3();\nconst tmp = new Vec3();\nconst addToWlambda_temp = new Vec3();\n\n/**\n * Contact/non-penetration constraint equation\n */\nclass ContactEquation extends Equation {\n  /**\n   * \"bounciness\": u1 = -e*u0\n   */\n\n  /**\n   * World-oriented vector that goes from the center of bi to the contact point.\n   */\n\n  /**\n   * World-oriented vector that starts in body j position and goes to the contact point.\n   */\n\n  /**\n   * Contact normal, pointing out of body i.\n   */\n  constructor(bodyA, bodyB, maxForce) {\n    if (maxForce === void 0) {\n      maxForce = 1e6;\n    }\n\n    super(bodyA, bodyB, 0, maxForce);\n    this.restitution = 0.0;\n    this.ri = new Vec3();\n    this.rj = new Vec3();\n    this.ni = new Vec3();\n  }\n\n  computeB(h) {\n    const a = this.a;\n    const b = this.b;\n    const bi = this.bi;\n    const bj = this.bj;\n    const ri = this.ri;\n    const rj = this.rj;\n    const rixn = ContactEquation_computeB_temp1;\n    const rjxn = ContactEquation_computeB_temp2;\n    const vi = bi.velocity;\n    const wi = bi.angularVelocity;\n    bi.force;\n    bi.torque;\n    const vj = bj.velocity;\n    const wj = bj.angularVelocity;\n    bj.force;\n    bj.torque;\n    const penetrationVec = ContactEquation_computeB_temp3;\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    const n = this.ni; // Caluclate cross products\n\n    ri.cross(n, rixn);\n    rj.cross(n, rjxn); // g = xj+rj -(xi+ri)\n    // G = [ -ni  -rixn  ni  rjxn ]\n\n    n.negate(GA.spatial);\n    rixn.negate(GA.rotational);\n    GB.spatial.copy(n);\n    GB.rotational.copy(rjxn); // Calculate the penetration vector\n\n    penetrationVec.copy(bj.position);\n    penetrationVec.vadd(rj, penetrationVec);\n    penetrationVec.vsub(bi.position, penetrationVec);\n    penetrationVec.vsub(ri, penetrationVec);\n    const g = n.dot(penetrationVec); // Compute iteration\n\n    const ePlusOne = this.restitution + 1;\n    const GW = ePlusOne * vj.dot(n) - ePlusOne * vi.dot(n) + wj.dot(rjxn) - wi.dot(rixn);\n    const GiMf = this.computeGiMf();\n    const B = -g * a - GW * b - h * GiMf;\n    return B;\n  }\n  /**\n   * Get the current relative velocity in the contact point.\n   */\n\n\n  getImpactVelocityAlongNormal() {\n    const vi = ContactEquation_getImpactVelocityAlongNormal_vi;\n    const vj = ContactEquation_getImpactVelocityAlongNormal_vj;\n    const xi = ContactEquation_getImpactVelocityAlongNormal_xi;\n    const xj = ContactEquation_getImpactVelocityAlongNormal_xj;\n    const relVel = ContactEquation_getImpactVelocityAlongNormal_relVel;\n    this.bi.position.vadd(this.ri, xi);\n    this.bj.position.vadd(this.rj, xj);\n    this.bi.getVelocityAtWorldPoint(xi, vi);\n    this.bj.getVelocityAtWorldPoint(xj, vj);\n    vi.vsub(vj, relVel);\n    return this.ni.dot(relVel);\n  }\n\n}\nconst ContactEquation_computeB_temp1 = new Vec3(); // Temp vectors\n\nconst ContactEquation_computeB_temp2 = new Vec3();\nconst ContactEquation_computeB_temp3 = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_vi = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_vj = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_xi = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_xj = new Vec3();\nconst ContactEquation_getImpactVelocityAlongNormal_relVel = new Vec3();\n\n/**\n * Connects two bodies at given offset points.\n * @example\n *     const bodyA = new Body({ mass: 1 })\n *     const bodyB = new Body({ mass: 1 })\n *     bodyA.position.set(-1, 0, 0)\n *     bodyB.position.set(1, 0, 0)\n *     bodyA.addShape(shapeA)\n *     bodyB.addShape(shapeB)\n *     world.addBody(bodyA)\n *     world.addBody(bodyB)\n *     const localPivotA = new Vec3(1, 0, 0)\n *     const localPivotB = new Vec3(-1, 0, 0)\n *     const constraint = new PointToPointConstraint(bodyA, localPivotA, bodyB, localPivotB)\n *     world.addConstraint(constraint)\n */\nclass PointToPointConstraint extends Constraint {\n  /**\n   * Pivot, defined locally in bodyA.\n   */\n\n  /**\n   * Pivot, defined locally in bodyB.\n   */\n\n  /**\n   * @param pivotA The point relative to the center of mass of bodyA which bodyA is constrained to.\n   * @param bodyB Body that will be constrained in a similar way to the same point as bodyA. We will therefore get a link between bodyA and bodyB. If not specified, bodyA will be constrained to a static point.\n   * @param pivotB The point relative to the center of mass of bodyB which bodyB is constrained to.\n   * @param maxForce The maximum force that should be applied to constrain the bodies.\n   */\n  constructor(bodyA, pivotA, bodyB, pivotB, maxForce) {\n    if (pivotA === void 0) {\n      pivotA = new Vec3();\n    }\n\n    if (pivotB === void 0) {\n      pivotB = new Vec3();\n    }\n\n    if (maxForce === void 0) {\n      maxForce = 1e6;\n    }\n\n    super(bodyA, bodyB);\n    this.pivotA = pivotA.clone();\n    this.pivotB = pivotB.clone();\n    const x = this.equationX = new ContactEquation(bodyA, bodyB);\n    const y = this.equationY = new ContactEquation(bodyA, bodyB);\n    const z = this.equationZ = new ContactEquation(bodyA, bodyB); // Equations to be fed to the solver\n\n    this.equations.push(x, y, z); // Make the equations bidirectional\n\n    x.minForce = y.minForce = z.minForce = -maxForce;\n    x.maxForce = y.maxForce = z.maxForce = maxForce;\n    x.ni.set(1, 0, 0);\n    y.ni.set(0, 1, 0);\n    z.ni.set(0, 0, 1);\n  }\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const x = this.equationX;\n    const y = this.equationY;\n    const z = this.equationZ; // Rotate the pivots to world space\n\n    bodyA.quaternion.vmult(this.pivotA, x.ri);\n    bodyB.quaternion.vmult(this.pivotB, x.rj);\n    y.ri.copy(x.ri);\n    y.rj.copy(x.rj);\n    z.ri.copy(x.ri);\n    z.rj.copy(x.rj);\n  }\n\n}\n\n/**\n * Cone equation. Works to keep the given body world vectors aligned, or tilted within a given angle from each other.\n */\nclass ConeEquation extends Equation {\n  /**\n   * Local axis in A\n   */\n\n  /**\n   * Local axis in B\n   */\n\n  /**\n   * The \"cone angle\" to keep\n   */\n  constructor(bodyA, bodyB, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;\n    super(bodyA, bodyB, -maxForce, maxForce);\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);\n    this.angle = typeof options.angle !== 'undefined' ? options.angle : 0;\n  }\n\n  computeB(h) {\n    const a = this.a;\n    const b = this.b;\n    const ni = this.axisA;\n    const nj = this.axisB;\n    const nixnj = tmpVec1$2;\n    const njxni = tmpVec2$2;\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB; // Caluclate cross products\n\n    ni.cross(nj, nixnj);\n    nj.cross(ni, njxni); // The angle between two vector is:\n    // cos(theta) = a * b / (length(a) * length(b) = { len(a) = len(b) = 1 } = a * b\n    // g = a * b\n    // gdot = (b x a) * wi + (a x b) * wj\n    // G = [0 bxa 0 axb]\n    // W = [vi wi vj wj]\n\n    GA.rotational.copy(njxni);\n    GB.rotational.copy(nixnj);\n    const g = Math.cos(this.angle) - ni.dot(nj);\n    const GW = this.computeGW();\n    const GiMf = this.computeGiMf();\n    const B = -g * a - GW * b - h * GiMf;\n    return B;\n  }\n\n}\nconst tmpVec1$2 = new Vec3();\nconst tmpVec2$2 = new Vec3();\n\n/**\n * Rotational constraint. Works to keep the local vectors orthogonal to each other in world space.\n */\nclass RotationalEquation extends Equation {\n  /**\n   * World oriented rotational axis.\n   */\n\n  /**\n   * World oriented rotational axis.\n   */\n\n  /**\n   * maxAngle\n   */\n  constructor(bodyA, bodyB, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;\n    super(bodyA, bodyB, -maxForce, maxForce);\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3(0, 1, 0);\n    this.maxAngle = Math.PI / 2;\n  }\n\n  computeB(h) {\n    const a = this.a;\n    const b = this.b;\n    const ni = this.axisA;\n    const nj = this.axisB;\n    const nixnj = tmpVec1$1;\n    const njxni = tmpVec2$1;\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB; // Caluclate cross products\n\n    ni.cross(nj, nixnj);\n    nj.cross(ni, njxni); // g = ni * nj\n    // gdot = (nj x ni) * wi + (ni x nj) * wj\n    // G = [0 njxni 0 nixnj]\n    // W = [vi wi vj wj]\n\n    GA.rotational.copy(njxni);\n    GB.rotational.copy(nixnj);\n    const g = Math.cos(this.maxAngle) - ni.dot(nj);\n    const GW = this.computeGW();\n    const GiMf = this.computeGiMf();\n    const B = -g * a - GW * b - h * GiMf;\n    return B;\n  }\n\n}\nconst tmpVec1$1 = new Vec3();\nconst tmpVec2$1 = new Vec3();\n\n/**\n * A Cone Twist constraint, useful for ragdolls.\n */\nclass ConeTwistConstraint extends PointToPointConstraint {\n  /**\n   * The axis direction for the constraint of the body A.\n   */\n\n  /**\n   * The axis direction for the constraint of the body B.\n   */\n\n  /**\n   * The aperture angle of the cone.\n   */\n\n  /**\n   * The twist angle of the joint.\n   */\n  constructor(bodyA, bodyB, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6; // Set pivot point in between\n\n    const pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n    const pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n    super(bodyA, pivotA, bodyB, pivotB, maxForce);\n    this.axisA = options.axisA ? options.axisA.clone() : new Vec3();\n    this.axisB = options.axisB ? options.axisB.clone() : new Vec3();\n    this.collideConnected = !!options.collideConnected;\n    this.angle = typeof options.angle !== 'undefined' ? options.angle : 0;\n    const c = this.coneEquation = new ConeEquation(bodyA, bodyB, options);\n    const t = this.twistEquation = new RotationalEquation(bodyA, bodyB, options);\n    this.twistAngle = typeof options.twistAngle !== 'undefined' ? options.twistAngle : 0; // Make the cone equation push the bodies toward the cone axis, not outward\n\n    c.maxForce = 0;\n    c.minForce = -maxForce; // Make the twist equation add torque toward the initial position\n\n    t.maxForce = 0;\n    t.minForce = -maxForce;\n    this.equations.push(c, t);\n  }\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const cone = this.coneEquation;\n    const twist = this.twistEquation;\n    super.update(); // Update the axes to the cone constraint\n\n    bodyA.vectorToWorldFrame(this.axisA, cone.axisA);\n    bodyB.vectorToWorldFrame(this.axisB, cone.axisB); // Update the world axes in the twist constraint\n\n    this.axisA.tangents(twist.axisA, twist.axisA);\n    bodyA.vectorToWorldFrame(twist.axisA, twist.axisA);\n    this.axisB.tangents(twist.axisB, twist.axisB);\n    bodyB.vectorToWorldFrame(twist.axisB, twist.axisB);\n    cone.angle = this.angle;\n    twist.maxAngle = this.twistAngle;\n  }\n\n}\nnew Vec3();\nnew Vec3();\n\n/**\n * Constrains two bodies to be at a constant distance from each others center of mass.\n */\nclass DistanceConstraint extends Constraint {\n  /**\n   * The distance to keep. If undefined, it will be set to the current distance between bodyA and bodyB\n   */\n\n  /**\n   * @param distance The distance to keep. If undefined, it will be set to the current distance between bodyA and bodyB.\n   * @param maxForce The maximum force that should be applied to constrain the bodies.\n   */\n  constructor(bodyA, bodyB, distance, maxForce) {\n    if (maxForce === void 0) {\n      maxForce = 1e6;\n    }\n\n    super(bodyA, bodyB);\n\n    if (typeof distance === 'undefined') {\n      distance = bodyA.position.distanceTo(bodyB.position);\n    }\n\n    this.distance = distance;\n    const eq = this.distanceEquation = new ContactEquation(bodyA, bodyB);\n    this.equations.push(eq); // Make it bidirectional\n\n    eq.minForce = -maxForce;\n    eq.maxForce = maxForce;\n  }\n  /**\n   * update\n   */\n\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const eq = this.distanceEquation;\n    const halfDist = this.distance * 0.5;\n    const normal = eq.ni;\n    bodyB.position.vsub(bodyA.position, normal);\n    normal.normalize();\n    normal.scale(halfDist, eq.ri);\n    normal.scale(-halfDist, eq.rj);\n  }\n\n}\n\n/**\n * Lock constraint. Will remove all degrees of freedom between the bodies.\n */\nclass LockConstraint extends PointToPointConstraint {\n  constructor(bodyA, bodyB, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6; // Set pivot point in between\n\n    const pivotA = new Vec3();\n    const pivotB = new Vec3();\n    const halfWay = new Vec3();\n    bodyA.position.vadd(bodyB.position, halfWay);\n    halfWay.scale(0.5, halfWay);\n    bodyB.pointToLocalFrame(halfWay, pivotB);\n    bodyA.pointToLocalFrame(halfWay, pivotA); // The point-to-point constraint will keep a point shared between the bodies\n\n    super(bodyA, pivotA, bodyB, pivotB, maxForce); // Store initial rotation of the bodies as unit vectors in the local body spaces\n\n    this.xA = bodyA.vectorToLocalFrame(Vec3.UNIT_X);\n    this.xB = bodyB.vectorToLocalFrame(Vec3.UNIT_X);\n    this.yA = bodyA.vectorToLocalFrame(Vec3.UNIT_Y);\n    this.yB = bodyB.vectorToLocalFrame(Vec3.UNIT_Y);\n    this.zA = bodyA.vectorToLocalFrame(Vec3.UNIT_Z);\n    this.zB = bodyB.vectorToLocalFrame(Vec3.UNIT_Z); // ...and the following rotational equations will keep all rotational DOF's in place\n\n    const r1 = this.rotationalEquation1 = new RotationalEquation(bodyA, bodyB, options);\n    const r2 = this.rotationalEquation2 = new RotationalEquation(bodyA, bodyB, options);\n    const r3 = this.rotationalEquation3 = new RotationalEquation(bodyA, bodyB, options);\n    this.equations.push(r1, r2, r3);\n  }\n  /**\n   * update\n   */\n\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    this.motorEquation;\n    const r1 = this.rotationalEquation1;\n    const r2 = this.rotationalEquation2;\n    const r3 = this.rotationalEquation3;\n    LockConstraint_update_tmpVec1;\n    LockConstraint_update_tmpVec2;\n    super.update(); // These vector pairs must be orthogonal\n\n    bodyA.vectorToWorldFrame(this.xA, r1.axisA);\n    bodyB.vectorToWorldFrame(this.yB, r1.axisB);\n    bodyA.vectorToWorldFrame(this.yA, r2.axisA);\n    bodyB.vectorToWorldFrame(this.zB, r2.axisB);\n    bodyA.vectorToWorldFrame(this.zA, r3.axisA);\n    bodyB.vectorToWorldFrame(this.xB, r3.axisB);\n  }\n\n}\nconst LockConstraint_update_tmpVec1 = new Vec3();\nconst LockConstraint_update_tmpVec2 = new Vec3();\n\n/**\n * Rotational motor constraint. Tries to keep the relative angular velocity of the bodies to a given value.\n */\nclass RotationalMotorEquation extends Equation {\n  /**\n   * World oriented rotational axis.\n   */\n\n  /**\n   * World oriented rotational axis.\n   */\n\n  /**\n   * Motor velocity.\n   */\n  constructor(bodyA, bodyB, maxForce) {\n    if (maxForce === void 0) {\n      maxForce = 1e6;\n    }\n\n    super(bodyA, bodyB, -maxForce, maxForce);\n    this.axisA = new Vec3();\n    this.axisB = new Vec3();\n    this.targetVelocity = 0;\n  }\n\n  computeB(h) {\n    this.a;\n    const b = this.b;\n    this.bi;\n    this.bj;\n    const axisA = this.axisA;\n    const axisB = this.axisB;\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB; // g = 0\n    // gdot = axisA * wi - axisB * wj\n    // gdot = G * W = G * [vi wi vj wj]\n    // =>\n    // G = [0 axisA 0 -axisB]\n\n    GA.rotational.copy(axisA);\n    axisB.negate(GB.rotational);\n    const GW = this.computeGW() - this.targetVelocity;\n    const GiMf = this.computeGiMf();\n    const B = -GW * b - h * GiMf;\n    return B;\n  }\n\n}\n\n/**\n * Hinge constraint. Think of it as a door hinge. It tries to keep the door in the correct place and with the correct orientation.\n */\nclass HingeConstraint extends PointToPointConstraint {\n  /**\n   * Rotation axis, defined locally in bodyA.\n   */\n\n  /**\n   * Rotation axis, defined locally in bodyB.\n   */\n  constructor(bodyA, bodyB, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    const maxForce = typeof options.maxForce !== 'undefined' ? options.maxForce : 1e6;\n    const pivotA = options.pivotA ? options.pivotA.clone() : new Vec3();\n    const pivotB = options.pivotB ? options.pivotB.clone() : new Vec3();\n    super(bodyA, pivotA, bodyB, pivotB, maxForce);\n    const axisA = this.axisA = options.axisA ? options.axisA.clone() : new Vec3(1, 0, 0);\n    axisA.normalize();\n    const axisB = this.axisB = options.axisB ? options.axisB.clone() : new Vec3(1, 0, 0);\n    axisB.normalize();\n    this.collideConnected = !!options.collideConnected;\n    const rotational1 = this.rotationalEquation1 = new RotationalEquation(bodyA, bodyB, options);\n    const rotational2 = this.rotationalEquation2 = new RotationalEquation(bodyA, bodyB, options);\n    const motor = this.motorEquation = new RotationalMotorEquation(bodyA, bodyB, maxForce);\n    motor.enabled = false; // Not enabled by default\n    // Equations to be fed to the solver\n\n    this.equations.push(rotational1, rotational2, motor);\n  }\n  /**\n   * enableMotor\n   */\n\n\n  enableMotor() {\n    this.motorEquation.enabled = true;\n  }\n  /**\n   * disableMotor\n   */\n\n\n  disableMotor() {\n    this.motorEquation.enabled = false;\n  }\n  /**\n   * setMotorSpeed\n   */\n\n\n  setMotorSpeed(speed) {\n    this.motorEquation.targetVelocity = speed;\n  }\n  /**\n   * setMotorMaxForce\n   */\n\n\n  setMotorMaxForce(maxForce) {\n    this.motorEquation.maxForce = maxForce;\n    this.motorEquation.minForce = -maxForce;\n  }\n  /**\n   * update\n   */\n\n\n  update() {\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const motor = this.motorEquation;\n    const r1 = this.rotationalEquation1;\n    const r2 = this.rotationalEquation2;\n    const worldAxisA = HingeConstraint_update_tmpVec1;\n    const worldAxisB = HingeConstraint_update_tmpVec2;\n    const axisA = this.axisA;\n    const axisB = this.axisB;\n    super.update(); // Get world axes\n\n    bodyA.quaternion.vmult(axisA, worldAxisA);\n    bodyB.quaternion.vmult(axisB, worldAxisB);\n    worldAxisA.tangents(r1.axisA, r2.axisA);\n    r1.axisB.copy(worldAxisB);\n    r2.axisB.copy(worldAxisB);\n\n    if (this.motorEquation.enabled) {\n      bodyA.quaternion.vmult(this.axisA, motor.axisA);\n      bodyB.quaternion.vmult(this.axisB, motor.axisB);\n    }\n  }\n\n}\nconst HingeConstraint_update_tmpVec1 = new Vec3();\nconst HingeConstraint_update_tmpVec2 = new Vec3();\n\n/**\n * Constrains the slipping in a contact along a tangent\n */\nclass FrictionEquation extends Equation {\n  // Tangent\n\n  /**\n   * @param slipForce should be +-F_friction = +-mu * F_normal = +-mu * m * g\n   */\n  constructor(bodyA, bodyB, slipForce) {\n    super(bodyA, bodyB, -slipForce, slipForce);\n    this.ri = new Vec3();\n    this.rj = new Vec3();\n    this.t = new Vec3();\n  }\n\n  computeB(h) {\n    this.a;\n    const b = this.b;\n    this.bi;\n    this.bj;\n    const ri = this.ri;\n    const rj = this.rj;\n    const rixt = FrictionEquation_computeB_temp1;\n    const rjxt = FrictionEquation_computeB_temp2;\n    const t = this.t; // Caluclate cross products\n\n    ri.cross(t, rixt);\n    rj.cross(t, rjxt); // G = [-t -rixt t rjxt]\n    // And remember, this is a pure velocity constraint, g is always zero!\n\n    const GA = this.jacobianElementA;\n    const GB = this.jacobianElementB;\n    t.negate(GA.spatial);\n    rixt.negate(GA.rotational);\n    GB.spatial.copy(t);\n    GB.rotational.copy(rjxt);\n    const GW = this.computeGW();\n    const GiMf = this.computeGiMf();\n    const B = -GW * b - h * GiMf;\n    return B;\n  }\n\n}\nconst FrictionEquation_computeB_temp1 = new Vec3();\nconst FrictionEquation_computeB_temp2 = new Vec3();\n\n/**\n * Defines what happens when two materials meet.\n * @todo Refactor materials to materialA and materialB\n */\nclass ContactMaterial {\n  /**\n   * Identifier of this material.\n   */\n\n  /**\n   * Participating materials.\n   */\n\n  /**\n   * Friction coefficient.\n   * @default 0.3\n   */\n\n  /**\n   * Restitution coefficient.\n   * @default 0.3\n   */\n\n  /**\n   * Stiffness of the produced contact equations.\n   * @default 1e7\n   */\n\n  /**\n   * Relaxation time of the produced contact equations.\n   * @default 3\n   */\n\n  /**\n   * Stiffness of the produced friction equations.\n   * @default 1e7\n   */\n\n  /**\n   * Relaxation time of the produced friction equations\n   * @default 3\n   */\n  constructor(m1, m2, options) {\n    options = Utils.defaults(options, {\n      friction: 0.3,\n      restitution: 0.3,\n      contactEquationStiffness: 1e7,\n      contactEquationRelaxation: 3,\n      frictionEquationStiffness: 1e7,\n      frictionEquationRelaxation: 3\n    });\n    this.id = ContactMaterial.idCounter++;\n    this.materials = [m1, m2];\n    this.friction = options.friction;\n    this.restitution = options.restitution;\n    this.contactEquationStiffness = options.contactEquationStiffness;\n    this.contactEquationRelaxation = options.contactEquationRelaxation;\n    this.frictionEquationStiffness = options.frictionEquationStiffness;\n    this.frictionEquationRelaxation = options.frictionEquationRelaxation;\n  }\n\n}\nContactMaterial.idCounter = 0;\n\n/**\n * Defines a physics material.\n */\nclass Material {\n  /**\n   * Material name.\n   * If options is a string, name will be set to that string.\n   * @todo Deprecate this\n   */\n\n  /** Material id. */\n\n  /**\n   * Friction for this material.\n   * If non-negative, it will be used instead of the friction given by ContactMaterials. If there's no matching ContactMaterial, the value from `defaultContactMaterial` in the World will be used.\n   */\n\n  /**\n   * Restitution for this material.\n   * If non-negative, it will be used instead of the restitution given by ContactMaterials. If there's no matching ContactMaterial, the value from `defaultContactMaterial` in the World will be used.\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    let name = ''; // Backwards compatibility fix\n\n    if (typeof options === 'string') {\n      //console.warn(`Passing a string to MaterialOptions is deprecated, and has no effect`)\n      name = options;\n      options = {};\n    }\n\n    this.name = name;\n    this.id = Material.idCounter++;\n    this.friction = typeof options.friction !== 'undefined' ? options.friction : -1;\n    this.restitution = typeof options.restitution !== 'undefined' ? options.restitution : -1;\n  }\n\n}\nMaterial.idCounter = 0;\n\n/**\n * A spring, connecting two bodies.\n * @example\n *     const spring = new Spring(boxBody, sphereBody, {\n *       restLength: 0,\n *       stiffness: 50,\n *       damping: 1,\n *     })\n *\n *     // Compute the force after each step\n *     world.addEventListener('postStep', (event) => {\n *       spring.applyForce()\n *     })\n */\nclass Spring {\n  /**\n   * Rest length of the spring. A number > 0.\n   * @default 1\n   */\n\n  /**\n   * Stiffness of the spring. A number >= 0.\n   * @default 100\n   */\n\n  /**\n   * Damping of the spring. A number >= 0.\n   * @default 1\n   */\n\n  /**\n   * First connected body.\n   */\n\n  /**\n   * Second connected body.\n   */\n\n  /**\n   * Anchor for bodyA in local bodyA coordinates.\n   * Where to hook the spring to body A, in local body coordinates.\n   * @default new Vec3()\n   */\n\n  /**\n   * Anchor for bodyB in local bodyB coordinates.\n   * Where to hook the spring to body B, in local body coordinates.\n   * @default new Vec3()\n   */\n  constructor(bodyA, bodyB, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.restLength = typeof options.restLength === 'number' ? options.restLength : 1;\n    this.stiffness = options.stiffness || 100;\n    this.damping = options.damping || 1;\n    this.bodyA = bodyA;\n    this.bodyB = bodyB;\n    this.localAnchorA = new Vec3();\n    this.localAnchorB = new Vec3();\n\n    if (options.localAnchorA) {\n      this.localAnchorA.copy(options.localAnchorA);\n    }\n\n    if (options.localAnchorB) {\n      this.localAnchorB.copy(options.localAnchorB);\n    }\n\n    if (options.worldAnchorA) {\n      this.setWorldAnchorA(options.worldAnchorA);\n    }\n\n    if (options.worldAnchorB) {\n      this.setWorldAnchorB(options.worldAnchorB);\n    }\n  }\n  /**\n   * Set the anchor point on body A, using world coordinates.\n   */\n\n\n  setWorldAnchorA(worldAnchorA) {\n    this.bodyA.pointToLocalFrame(worldAnchorA, this.localAnchorA);\n  }\n  /**\n   * Set the anchor point on body B, using world coordinates.\n   */\n\n\n  setWorldAnchorB(worldAnchorB) {\n    this.bodyB.pointToLocalFrame(worldAnchorB, this.localAnchorB);\n  }\n  /**\n   * Get the anchor point on body A, in world coordinates.\n   * @param result The vector to store the result in.\n   */\n\n\n  getWorldAnchorA(result) {\n    this.bodyA.pointToWorldFrame(this.localAnchorA, result);\n  }\n  /**\n   * Get the anchor point on body B, in world coordinates.\n   * @param result The vector to store the result in.\n   */\n\n\n  getWorldAnchorB(result) {\n    this.bodyB.pointToWorldFrame(this.localAnchorB, result);\n  }\n  /**\n   * Apply the spring force to the connected bodies.\n   */\n\n\n  applyForce() {\n    const k = this.stiffness;\n    const d = this.damping;\n    const l = this.restLength;\n    const bodyA = this.bodyA;\n    const bodyB = this.bodyB;\n    const r = applyForce_r;\n    const r_unit = applyForce_r_unit;\n    const u = applyForce_u;\n    const f = applyForce_f;\n    const tmp = applyForce_tmp;\n    const worldAnchorA = applyForce_worldAnchorA;\n    const worldAnchorB = applyForce_worldAnchorB;\n    const ri = applyForce_ri;\n    const rj = applyForce_rj;\n    const ri_x_f = applyForce_ri_x_f;\n    const rj_x_f = applyForce_rj_x_f; // Get world anchors\n\n    this.getWorldAnchorA(worldAnchorA);\n    this.getWorldAnchorB(worldAnchorB); // Get offset points\n\n    worldAnchorA.vsub(bodyA.position, ri);\n    worldAnchorB.vsub(bodyB.position, rj); // Compute distance vector between world anchor points\n\n    worldAnchorB.vsub(worldAnchorA, r);\n    const rlen = r.length();\n    r_unit.copy(r);\n    r_unit.normalize(); // Compute relative velocity of the anchor points, u\n\n    bodyB.velocity.vsub(bodyA.velocity, u); // Add rotational velocity\n\n    bodyB.angularVelocity.cross(rj, tmp);\n    u.vadd(tmp, u);\n    bodyA.angularVelocity.cross(ri, tmp);\n    u.vsub(tmp, u); // F = - k * ( x - L ) - D * ( u )\n\n    r_unit.scale(-k * (rlen - l) - d * u.dot(r_unit), f); // Add forces to bodies\n\n    bodyA.force.vsub(f, bodyA.force);\n    bodyB.force.vadd(f, bodyB.force); // Angular force\n\n    ri.cross(f, ri_x_f);\n    rj.cross(f, rj_x_f);\n    bodyA.torque.vsub(ri_x_f, bodyA.torque);\n    bodyB.torque.vadd(rj_x_f, bodyB.torque);\n  }\n\n}\nconst applyForce_r = new Vec3();\nconst applyForce_r_unit = new Vec3();\nconst applyForce_u = new Vec3();\nconst applyForce_f = new Vec3();\nconst applyForce_worldAnchorA = new Vec3();\nconst applyForce_worldAnchorB = new Vec3();\nconst applyForce_ri = new Vec3();\nconst applyForce_rj = new Vec3();\nconst applyForce_ri_x_f = new Vec3();\nconst applyForce_rj_x_f = new Vec3();\nconst applyForce_tmp = new Vec3();\n\n/**\n * WheelInfo\n */\nclass WheelInfo {\n  /**\n   * Max travel distance of the suspension, in meters.\n   * @default 1\n   */\n\n  /**\n   * Speed to apply to the wheel rotation when the wheel is sliding.\n   * @default -0.1\n   */\n\n  /**\n   * If the customSlidingRotationalSpeed should be used.\n   * @default false\n   */\n\n  /**\n   * sliding\n   */\n\n  /**\n   * Connection point, defined locally in the chassis body frame.\n   */\n\n  /**\n   * chassisConnectionPointWorld\n   */\n\n  /**\n   * directionLocal\n   */\n\n  /**\n   * directionWorld\n   */\n\n  /**\n   * axleLocal\n   */\n\n  /**\n   * axleWorld\n   */\n\n  /**\n   * suspensionRestLength\n   * @default 1\n   */\n\n  /**\n   * suspensionMaxLength\n   * @default 2\n   */\n\n  /**\n   * radius\n   * @default 1\n   */\n\n  /**\n   * suspensionStiffness\n   * @default 100\n   */\n\n  /**\n   * dampingCompression\n   * @default 10\n   */\n\n  /**\n   * dampingRelaxation\n   * @default 10\n   */\n\n  /**\n   * frictionSlip\n   * @default 10.5\n   */\n\n  /** forwardAcceleration */\n\n  /** sideAcceleration */\n\n  /**\n   * steering\n   * @default 0\n   */\n\n  /**\n   * Rotation value, in radians.\n   * @default 0\n   */\n\n  /**\n   * deltaRotation\n   * @default 0\n   */\n\n  /**\n   * rollInfluence\n   * @default 0.01\n   */\n\n  /**\n   * maxSuspensionForce\n   */\n\n  /**\n   * engineForce\n   */\n\n  /**\n   * brake\n   */\n\n  /**\n   * isFrontWheel\n   * @default true\n   */\n\n  /**\n   * clippedInvContactDotSuspension\n   * @default 1\n   */\n\n  /**\n   * suspensionRelativeVelocity\n   * @default 0\n   */\n\n  /**\n   * suspensionForce\n   * @default 0\n   */\n\n  /**\n   * slipInfo\n   */\n\n  /**\n   * skidInfo\n   * @default 0\n   */\n\n  /**\n   * suspensionLength\n   * @default 0\n   */\n\n  /**\n   * sideImpulse\n   */\n\n  /**\n   * forwardImpulse\n   */\n\n  /**\n   * The result from raycasting.\n   */\n\n  /**\n   * Wheel world transform.\n   */\n\n  /**\n   * isInContact\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    options = Utils.defaults(options, {\n      chassisConnectionPointLocal: new Vec3(),\n      chassisConnectionPointWorld: new Vec3(),\n      directionLocal: new Vec3(),\n      directionWorld: new Vec3(),\n      axleLocal: new Vec3(),\n      axleWorld: new Vec3(),\n      suspensionRestLength: 1,\n      suspensionMaxLength: 2,\n      radius: 1,\n      suspensionStiffness: 100,\n      dampingCompression: 10,\n      dampingRelaxation: 10,\n      frictionSlip: 10.5,\n      forwardAcceleration: 1,\n      sideAcceleration: 1,\n      steering: 0,\n      rotation: 0,\n      deltaRotation: 0,\n      rollInfluence: 0.01,\n      maxSuspensionForce: Number.MAX_VALUE,\n      isFrontWheel: true,\n      clippedInvContactDotSuspension: 1,\n      suspensionRelativeVelocity: 0,\n      suspensionForce: 0,\n      slipInfo: 0,\n      skidInfo: 0,\n      suspensionLength: 0,\n      maxSuspensionTravel: 1,\n      useCustomSlidingRotationalSpeed: false,\n      customSlidingRotationalSpeed: -0.1\n    });\n    this.maxSuspensionTravel = options.maxSuspensionTravel;\n    this.customSlidingRotationalSpeed = options.customSlidingRotationalSpeed;\n    this.useCustomSlidingRotationalSpeed = options.useCustomSlidingRotationalSpeed;\n    this.sliding = false;\n    this.chassisConnectionPointLocal = options.chassisConnectionPointLocal.clone();\n    this.chassisConnectionPointWorld = options.chassisConnectionPointWorld.clone();\n    this.directionLocal = options.directionLocal.clone();\n    this.directionWorld = options.directionWorld.clone();\n    this.axleLocal = options.axleLocal.clone();\n    this.axleWorld = options.axleWorld.clone();\n    this.suspensionRestLength = options.suspensionRestLength;\n    this.suspensionMaxLength = options.suspensionMaxLength;\n    this.radius = options.radius;\n    this.suspensionStiffness = options.suspensionStiffness;\n    this.dampingCompression = options.dampingCompression;\n    this.dampingRelaxation = options.dampingRelaxation;\n    this.frictionSlip = options.frictionSlip;\n    this.forwardAcceleration = options.forwardAcceleration;\n    this.sideAcceleration = options.sideAcceleration;\n    this.steering = 0;\n    this.rotation = 0;\n    this.deltaRotation = 0;\n    this.rollInfluence = options.rollInfluence;\n    this.maxSuspensionForce = options.maxSuspensionForce;\n    this.engineForce = 0;\n    this.brake = 0;\n    this.isFrontWheel = options.isFrontWheel;\n    this.clippedInvContactDotSuspension = 1;\n    this.suspensionRelativeVelocity = 0;\n    this.suspensionForce = 0;\n    this.slipInfo = 0;\n    this.skidInfo = 0;\n    this.suspensionLength = 0;\n    this.sideImpulse = 0;\n    this.forwardImpulse = 0;\n    this.raycastResult = new RaycastResult();\n    this.worldTransform = new Transform();\n    this.isInContact = false;\n  }\n\n  updateWheel(chassis) {\n    const raycastResult = this.raycastResult;\n\n    if (this.isInContact) {\n      const project = raycastResult.hitNormalWorld.dot(raycastResult.directionWorld);\n      raycastResult.hitPointWorld.vsub(chassis.position, relpos);\n      chassis.getVelocityAtWorldPoint(relpos, chassis_velocity_at_contactPoint);\n      const projVel = raycastResult.hitNormalWorld.dot(chassis_velocity_at_contactPoint);\n\n      if (project >= -0.1) {\n        this.suspensionRelativeVelocity = 0.0;\n        this.clippedInvContactDotSuspension = 1.0 / 0.1;\n      } else {\n        const inv = -1 / project;\n        this.suspensionRelativeVelocity = projVel * inv;\n        this.clippedInvContactDotSuspension = inv;\n      }\n    } else {\n      // Not in contact : position wheel in a nice (rest length) position\n      raycastResult.suspensionLength = this.suspensionRestLength;\n      this.suspensionRelativeVelocity = 0.0;\n      raycastResult.directionWorld.scale(-1, raycastResult.hitNormalWorld);\n      this.clippedInvContactDotSuspension = 1.0;\n    }\n  }\n\n}\nconst chassis_velocity_at_contactPoint = new Vec3();\nconst relpos = new Vec3();\n\n/**\n * Vehicle helper class that casts rays from the wheel positions towards the ground and applies forces.\n */\nclass RaycastVehicle {\n  /** The car chassis body. */\n\n  /** The wheels. */\n\n  /** Will be set to true if the car is sliding. */\n\n  /** Index of the right axis. x=0, y=1, z=2 */\n\n  /** Index of the forward axis. x=0, y=1, z=2 */\n\n  /** Index of the up axis. x=0, y=1, z=2 */\n\n  /** The constraints. */\n\n  /** Optional pre-step callback. */\n\n  /** Number of wheels on the ground. */\n  constructor(options) {\n    this.chassisBody = options.chassisBody;\n    this.wheelInfos = [];\n    this.sliding = false;\n    this.world = null;\n    this.indexRightAxis = typeof options.indexRightAxis !== 'undefined' ? options.indexRightAxis : 2;\n    this.indexForwardAxis = typeof options.indexForwardAxis !== 'undefined' ? options.indexForwardAxis : 0;\n    this.indexUpAxis = typeof options.indexUpAxis !== 'undefined' ? options.indexUpAxis : 1;\n    this.constraints = [];\n\n    this.preStepCallback = () => {};\n\n    this.currentVehicleSpeedKmHour = 0;\n    this.numWheelsOnGround = 0;\n  }\n  /**\n   * Add a wheel. For information about the options, see `WheelInfo`.\n   */\n\n\n  addWheel(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    const info = new WheelInfo(options);\n    const index = this.wheelInfos.length;\n    this.wheelInfos.push(info);\n    return index;\n  }\n  /**\n   * Set the steering value of a wheel.\n   */\n\n\n  setSteeringValue(value, wheelIndex) {\n    const wheel = this.wheelInfos[wheelIndex];\n    wheel.steering = value;\n  }\n  /**\n   * Set the wheel force to apply on one of the wheels each time step\n   */\n\n\n  applyEngineForce(value, wheelIndex) {\n    this.wheelInfos[wheelIndex].engineForce = value;\n  }\n  /**\n   * Set the braking force of a wheel\n   */\n\n\n  setBrake(brake, wheelIndex) {\n    this.wheelInfos[wheelIndex].brake = brake;\n  }\n  /**\n   * Add the vehicle including its constraints to the world.\n   */\n\n\n  addToWorld(world) {\n    world.addBody(this.chassisBody);\n    const that = this;\n\n    this.preStepCallback = () => {\n      that.updateVehicle(world.dt);\n    };\n\n    world.addEventListener('preStep', this.preStepCallback);\n    this.world = world;\n  }\n  /**\n   * Get one of the wheel axles, world-oriented.\n   */\n\n\n  getVehicleAxisWorld(axisIndex, result) {\n    result.set(axisIndex === 0 ? 1 : 0, axisIndex === 1 ? 1 : 0, axisIndex === 2 ? 1 : 0);\n    this.chassisBody.vectorToWorldFrame(result, result);\n  }\n\n  updateVehicle(timeStep) {\n    const wheelInfos = this.wheelInfos;\n    const numWheels = wheelInfos.length;\n    const chassisBody = this.chassisBody;\n\n    for (let i = 0; i < numWheels; i++) {\n      this.updateWheelTransform(i);\n    }\n\n    this.currentVehicleSpeedKmHour = 3.6 * chassisBody.velocity.length();\n    const forwardWorld = new Vec3();\n    this.getVehicleAxisWorld(this.indexForwardAxis, forwardWorld);\n\n    if (forwardWorld.dot(chassisBody.velocity) < 0) {\n      this.currentVehicleSpeedKmHour *= -1;\n    } // simulate suspension\n\n\n    for (let i = 0; i < numWheels; i++) {\n      this.castRay(wheelInfos[i]);\n    }\n\n    this.updateSuspension(timeStep);\n    const impulse = new Vec3();\n    const relpos = new Vec3();\n\n    for (let i = 0; i < numWheels; i++) {\n      //apply suspension force\n      const wheel = wheelInfos[i];\n      let suspensionForce = wheel.suspensionForce;\n\n      if (suspensionForce > wheel.maxSuspensionForce) {\n        suspensionForce = wheel.maxSuspensionForce;\n      }\n\n      wheel.raycastResult.hitNormalWorld.scale(suspensionForce * timeStep, impulse);\n      wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, relpos);\n      chassisBody.applyImpulse(impulse, relpos);\n    }\n\n    this.updateFriction(timeStep);\n    const hitNormalWorldScaledWithProj = new Vec3();\n    const fwd = new Vec3();\n    const vel = new Vec3();\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i]; //const relpos = new Vec3();\n      //wheel.chassisConnectionPointWorld.vsub(chassisBody.position, relpos);\n\n      chassisBody.getVelocityAtWorldPoint(wheel.chassisConnectionPointWorld, vel); // Hack to get the rotation in the correct direction\n\n      let m = 1;\n\n      switch (this.indexUpAxis) {\n        case 1:\n          m = -1;\n          break;\n      }\n\n      if (wheel.isInContact) {\n        this.getVehicleAxisWorld(this.indexForwardAxis, fwd);\n        const proj = fwd.dot(wheel.raycastResult.hitNormalWorld);\n        wheel.raycastResult.hitNormalWorld.scale(proj, hitNormalWorldScaledWithProj);\n        fwd.vsub(hitNormalWorldScaledWithProj, fwd);\n        const proj2 = fwd.dot(vel);\n        wheel.deltaRotation = m * proj2 * timeStep / wheel.radius;\n      }\n\n      if ((wheel.sliding || !wheel.isInContact) && wheel.engineForce !== 0 && wheel.useCustomSlidingRotationalSpeed) {\n        // Apply custom rotation when accelerating and sliding\n        wheel.deltaRotation = (wheel.engineForce > 0 ? 1 : -1) * wheel.customSlidingRotationalSpeed * timeStep;\n      } // Lock wheels\n\n\n      if (Math.abs(wheel.brake) > Math.abs(wheel.engineForce)) {\n        wheel.deltaRotation = 0;\n      }\n\n      wheel.rotation += wheel.deltaRotation; // Use the old value\n\n      wheel.deltaRotation *= 0.99; // damping of rotation when not in contact\n    }\n  }\n\n  updateSuspension(deltaTime) {\n    const chassisBody = this.chassisBody;\n    const chassisMass = chassisBody.mass;\n    const wheelInfos = this.wheelInfos;\n    const numWheels = wheelInfos.length;\n\n    for (let w_it = 0; w_it < numWheels; w_it++) {\n      const wheel = wheelInfos[w_it];\n\n      if (wheel.isInContact) {\n        let force; // Spring\n\n        const susp_length = wheel.suspensionRestLength;\n        const current_length = wheel.suspensionLength;\n        const length_diff = susp_length - current_length;\n        force = wheel.suspensionStiffness * length_diff * wheel.clippedInvContactDotSuspension; // Damper\n\n        const projected_rel_vel = wheel.suspensionRelativeVelocity;\n        let susp_damping;\n\n        if (projected_rel_vel < 0) {\n          susp_damping = wheel.dampingCompression;\n        } else {\n          susp_damping = wheel.dampingRelaxation;\n        }\n\n        force -= susp_damping * projected_rel_vel;\n        wheel.suspensionForce = force * chassisMass;\n\n        if (wheel.suspensionForce < 0) {\n          wheel.suspensionForce = 0;\n        }\n      } else {\n        wheel.suspensionForce = 0;\n      }\n    }\n  }\n  /**\n   * Remove the vehicle including its constraints from the world.\n   */\n\n\n  removeFromWorld(world) {\n    this.constraints;\n    world.removeBody(this.chassisBody);\n    world.removeEventListener('preStep', this.preStepCallback);\n    this.world = null;\n  }\n\n  castRay(wheel) {\n    const rayvector = castRay_rayvector;\n    const target = castRay_target;\n    this.updateWheelTransformWorld(wheel);\n    const chassisBody = this.chassisBody;\n    let depth = -1;\n    const raylen = wheel.suspensionRestLength + wheel.radius;\n    wheel.directionWorld.scale(raylen, rayvector);\n    const source = wheel.chassisConnectionPointWorld;\n    source.vadd(rayvector, target);\n    const raycastResult = wheel.raycastResult;\n    raycastResult.reset(); // Turn off ray collision with the chassis temporarily\n\n    const oldState = chassisBody.collisionResponse;\n    chassisBody.collisionResponse = false; // Cast ray against world\n\n    this.world.rayTest(source, target, raycastResult);\n    chassisBody.collisionResponse = oldState;\n    const object = raycastResult.body;\n    wheel.raycastResult.groundObject = 0;\n\n    if (object) {\n      depth = raycastResult.distance;\n      wheel.raycastResult.hitNormalWorld = raycastResult.hitNormalWorld;\n      wheel.isInContact = true;\n      const hitDistance = raycastResult.distance;\n      wheel.suspensionLength = hitDistance - wheel.radius; // clamp on max suspension travel\n\n      const minSuspensionLength = wheel.suspensionRestLength - wheel.maxSuspensionTravel;\n      const maxSuspensionLength = wheel.suspensionRestLength + wheel.maxSuspensionTravel;\n\n      if (wheel.suspensionLength < minSuspensionLength) {\n        wheel.suspensionLength = minSuspensionLength;\n      }\n\n      if (wheel.suspensionLength > maxSuspensionLength) {\n        wheel.suspensionLength = maxSuspensionLength;\n        wheel.raycastResult.reset();\n      }\n\n      const denominator = wheel.raycastResult.hitNormalWorld.dot(wheel.directionWorld);\n      const chassis_velocity_at_contactPoint = new Vec3();\n      chassisBody.getVelocityAtWorldPoint(wheel.raycastResult.hitPointWorld, chassis_velocity_at_contactPoint);\n      const projVel = wheel.raycastResult.hitNormalWorld.dot(chassis_velocity_at_contactPoint);\n\n      if (denominator >= -0.1) {\n        wheel.suspensionRelativeVelocity = 0;\n        wheel.clippedInvContactDotSuspension = 1 / 0.1;\n      } else {\n        const inv = -1 / denominator;\n        wheel.suspensionRelativeVelocity = projVel * inv;\n        wheel.clippedInvContactDotSuspension = inv;\n      }\n    } else {\n      //put wheel info as in rest position\n      wheel.suspensionLength = wheel.suspensionRestLength + 0 * wheel.maxSuspensionTravel;\n      wheel.suspensionRelativeVelocity = 0.0;\n      wheel.directionWorld.scale(-1, wheel.raycastResult.hitNormalWorld);\n      wheel.clippedInvContactDotSuspension = 1.0;\n    }\n\n    return depth;\n  }\n\n  updateWheelTransformWorld(wheel) {\n    wheel.isInContact = false;\n    const chassisBody = this.chassisBody;\n    chassisBody.pointToWorldFrame(wheel.chassisConnectionPointLocal, wheel.chassisConnectionPointWorld);\n    chassisBody.vectorToWorldFrame(wheel.directionLocal, wheel.directionWorld);\n    chassisBody.vectorToWorldFrame(wheel.axleLocal, wheel.axleWorld);\n  }\n  /**\n   * Update one of the wheel transform.\n   * Note when rendering wheels: during each step, wheel transforms are updated BEFORE the chassis; ie. their position becomes invalid after the step. Thus when you render wheels, you must update wheel transforms before rendering them. See raycastVehicle demo for an example.\n   * @param wheelIndex The wheel index to update.\n   */\n\n\n  updateWheelTransform(wheelIndex) {\n    const up = tmpVec4;\n    const right = tmpVec5;\n    const fwd = tmpVec6;\n    const wheel = this.wheelInfos[wheelIndex];\n    this.updateWheelTransformWorld(wheel);\n    wheel.directionLocal.scale(-1, up);\n    right.copy(wheel.axleLocal);\n    up.cross(right, fwd);\n    fwd.normalize();\n    right.normalize(); // Rotate around steering over the wheelAxle\n\n    const steering = wheel.steering;\n    const steeringOrn = new Quaternion();\n    steeringOrn.setFromAxisAngle(up, steering);\n    const rotatingOrn = new Quaternion();\n    rotatingOrn.setFromAxisAngle(right, wheel.rotation); // World rotation of the wheel\n\n    const q = wheel.worldTransform.quaternion;\n    this.chassisBody.quaternion.mult(steeringOrn, q);\n    q.mult(rotatingOrn, q);\n    q.normalize(); // world position of the wheel\n\n    const p = wheel.worldTransform.position;\n    p.copy(wheel.directionWorld);\n    p.scale(wheel.suspensionLength, p);\n    p.vadd(wheel.chassisConnectionPointWorld, p);\n  }\n  /**\n   * Get the world transform of one of the wheels\n   */\n\n\n  getWheelTransformWorld(wheelIndex) {\n    return this.wheelInfos[wheelIndex].worldTransform;\n  }\n\n  updateFriction(timeStep) {\n    const surfNormalWS_scaled_proj = updateFriction_surfNormalWS_scaled_proj; //calculate the impulse, so that the wheels don't move sidewards\n\n    const wheelInfos = this.wheelInfos;\n    const numWheels = wheelInfos.length;\n    const chassisBody = this.chassisBody;\n    const forwardWS = updateFriction_forwardWS;\n    const axle = updateFriction_axle;\n    this.numWheelsOnGround = 0;\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      const groundObject = wheel.raycastResult.body;\n\n      if (groundObject) {\n        this.numWheelsOnGround++;\n      }\n\n      wheel.sideImpulse = 0;\n      wheel.forwardImpulse = 0;\n\n      if (!forwardWS[i]) {\n        forwardWS[i] = new Vec3();\n      }\n\n      if (!axle[i]) {\n        axle[i] = new Vec3();\n      }\n    }\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      const groundObject = wheel.raycastResult.body;\n\n      if (groundObject) {\n        const axlei = axle[i];\n        const wheelTrans = this.getWheelTransformWorld(i); // Get world axle\n\n        wheelTrans.vectorToWorldFrame(directions[this.indexRightAxis], axlei);\n        const surfNormalWS = wheel.raycastResult.hitNormalWorld;\n        const proj = axlei.dot(surfNormalWS);\n        surfNormalWS.scale(proj, surfNormalWS_scaled_proj);\n        axlei.vsub(surfNormalWS_scaled_proj, axlei);\n        axlei.normalize();\n        surfNormalWS.cross(axlei, forwardWS[i]);\n        forwardWS[i].normalize();\n        wheel.sideImpulse = resolveSingleBilateral(chassisBody, wheel.raycastResult.hitPointWorld, groundObject, wheel.raycastResult.hitPointWorld, axlei);\n        wheel.sideImpulse *= sideFrictionStiffness2;\n      }\n    }\n\n    const sideFactor = 1;\n    const fwdFactor = 0.5;\n    this.sliding = false;\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      const groundObject = wheel.raycastResult.body;\n      let rollingFriction = 0;\n      wheel.slipInfo = 1;\n\n      if (groundObject) {\n        const defaultRollingFrictionImpulse = 0;\n        const maxImpulse = wheel.brake ? wheel.brake : defaultRollingFrictionImpulse; // btWheelContactPoint contactPt(chassisBody,groundObject,wheelInfraycastInfo.hitPointWorld,forwardWS[wheel],maxImpulse);\n        // rollingFriction = calcRollingFriction(contactPt);\n\n        rollingFriction = calcRollingFriction(chassisBody, groundObject, wheel.raycastResult.hitPointWorld, forwardWS[i], maxImpulse);\n        rollingFriction += wheel.engineForce * timeStep; // rollingFriction = 0;\n\n        const factor = maxImpulse / rollingFriction;\n        wheel.slipInfo *= factor;\n      } //switch between active rolling (throttle), braking and non-active rolling friction (nthrottle/break)\n\n\n      wheel.forwardImpulse = 0;\n      wheel.skidInfo = 1;\n\n      if (groundObject) {\n        wheel.skidInfo = 1;\n        const maximp = wheel.suspensionForce * timeStep * wheel.frictionSlip;\n        const maximpSide = maximp;\n        const maximpSquared = maximp * maximpSide;\n        wheel.forwardImpulse = rollingFriction; //wheelInfo.engineForce* timeStep;\n\n        const x = wheel.forwardImpulse * fwdFactor / wheel.forwardAcceleration;\n        const y = wheel.sideImpulse * sideFactor / wheel.sideAcceleration;\n        const impulseSquared = x * x + y * y;\n        wheel.sliding = false;\n\n        if (impulseSquared > maximpSquared) {\n          this.sliding = true;\n          wheel.sliding = true;\n          const factor = maximp / Math.sqrt(impulseSquared);\n          wheel.skidInfo *= factor;\n        }\n      }\n    }\n\n    if (this.sliding) {\n      for (let i = 0; i < numWheels; i++) {\n        const wheel = wheelInfos[i];\n\n        if (wheel.sideImpulse !== 0) {\n          if (wheel.skidInfo < 1) {\n            wheel.forwardImpulse *= wheel.skidInfo;\n            wheel.sideImpulse *= wheel.skidInfo;\n          }\n        }\n      }\n    } // apply the impulses\n\n\n    for (let i = 0; i < numWheels; i++) {\n      const wheel = wheelInfos[i];\n      const rel_pos = new Vec3();\n      wheel.raycastResult.hitPointWorld.vsub(chassisBody.position, rel_pos); // cannons applyimpulse is using world coord for the position\n      //rel_pos.copy(wheel.raycastResult.hitPointWorld);\n\n      if (wheel.forwardImpulse !== 0) {\n        const impulse = new Vec3();\n        forwardWS[i].scale(wheel.forwardImpulse, impulse);\n        chassisBody.applyImpulse(impulse, rel_pos);\n      }\n\n      if (wheel.sideImpulse !== 0) {\n        const groundObject = wheel.raycastResult.body;\n        const rel_pos2 = new Vec3();\n        wheel.raycastResult.hitPointWorld.vsub(groundObject.position, rel_pos2); //rel_pos2.copy(wheel.raycastResult.hitPointWorld);\n\n        const sideImp = new Vec3();\n        axle[i].scale(wheel.sideImpulse, sideImp); // Scale the relative position in the up direction with rollInfluence.\n        // If rollInfluence is 1, the impulse will be applied on the hitPoint (easy to roll over), if it is zero it will be applied in the same plane as the center of mass (not easy to roll over).\n\n        chassisBody.vectorToLocalFrame(rel_pos, rel_pos);\n        rel_pos['xyz'[this.indexUpAxis]] *= wheel.rollInfluence;\n        chassisBody.vectorToWorldFrame(rel_pos, rel_pos);\n        chassisBody.applyImpulse(sideImp, rel_pos); //apply friction impulse on the ground\n\n        sideImp.scale(-1, sideImp);\n        groundObject.applyImpulse(sideImp, rel_pos2);\n      }\n    }\n  }\n\n}\nnew Vec3();\nnew Vec3();\nnew Vec3();\nconst tmpVec4 = new Vec3();\nconst tmpVec5 = new Vec3();\nconst tmpVec6 = new Vec3();\nnew Ray();\nnew Vec3();\nconst castRay_rayvector = new Vec3();\nconst castRay_target = new Vec3();\nconst directions = [new Vec3(1, 0, 0), new Vec3(0, 1, 0), new Vec3(0, 0, 1)];\nconst updateFriction_surfNormalWS_scaled_proj = new Vec3();\nconst updateFriction_axle = [];\nconst updateFriction_forwardWS = [];\nconst sideFrictionStiffness2 = 1;\nconst calcRollingFriction_vel1 = new Vec3();\nconst calcRollingFriction_vel2 = new Vec3();\nconst calcRollingFriction_vel = new Vec3();\n\nfunction calcRollingFriction(body0, body1, frictionPosWorld, frictionDirectionWorld, maxImpulse) {\n  let j1 = 0;\n  const contactPosWorld = frictionPosWorld; // const rel_pos1 = new Vec3();\n  // const rel_pos2 = new Vec3();\n\n  const vel1 = calcRollingFriction_vel1;\n  const vel2 = calcRollingFriction_vel2;\n  const vel = calcRollingFriction_vel; // contactPosWorld.vsub(body0.position, rel_pos1);\n  // contactPosWorld.vsub(body1.position, rel_pos2);\n\n  body0.getVelocityAtWorldPoint(contactPosWorld, vel1);\n  body1.getVelocityAtWorldPoint(contactPosWorld, vel2);\n  vel1.vsub(vel2, vel);\n  const vrel = frictionDirectionWorld.dot(vel);\n  const denom0 = computeImpulseDenominator(body0, frictionPosWorld, frictionDirectionWorld);\n  const denom1 = computeImpulseDenominator(body1, frictionPosWorld, frictionDirectionWorld);\n  const relaxation = 1;\n  const jacDiagABInv = relaxation / (denom0 + denom1); // calculate j that moves us to zero relative velocity\n\n  j1 = -vrel * jacDiagABInv;\n\n  if (maxImpulse < j1) {\n    j1 = maxImpulse;\n  }\n\n  if (j1 < -maxImpulse) {\n    j1 = -maxImpulse;\n  }\n\n  return j1;\n}\n\nconst computeImpulseDenominator_r0 = new Vec3();\nconst computeImpulseDenominator_c0 = new Vec3();\nconst computeImpulseDenominator_vec = new Vec3();\nconst computeImpulseDenominator_m = new Vec3();\n\nfunction computeImpulseDenominator(body, pos, normal) {\n  const r0 = computeImpulseDenominator_r0;\n  const c0 = computeImpulseDenominator_c0;\n  const vec = computeImpulseDenominator_vec;\n  const m = computeImpulseDenominator_m;\n  pos.vsub(body.position, r0);\n  r0.cross(normal, c0);\n  body.invInertiaWorld.vmult(c0, m);\n  m.cross(r0, vec);\n  return body.invMass + normal.dot(vec);\n}\n\nconst resolveSingleBilateral_vel1 = new Vec3();\nconst resolveSingleBilateral_vel2 = new Vec3();\nconst resolveSingleBilateral_vel = new Vec3(); // bilateral constraint between two dynamic objects\n\nfunction resolveSingleBilateral(body1, pos1, body2, pos2, normal) {\n  const normalLenSqr = normal.lengthSquared();\n\n  if (normalLenSqr > 1.1) {\n    return 0; // no impulse\n  } // const rel_pos1 = new Vec3();\n  // const rel_pos2 = new Vec3();\n  // pos1.vsub(body1.position, rel_pos1);\n  // pos2.vsub(body2.position, rel_pos2);\n\n\n  const vel1 = resolveSingleBilateral_vel1;\n  const vel2 = resolveSingleBilateral_vel2;\n  const vel = resolveSingleBilateral_vel;\n  body1.getVelocityAtWorldPoint(pos1, vel1);\n  body2.getVelocityAtWorldPoint(pos2, vel2);\n  vel1.vsub(vel2, vel);\n  const rel_vel = normal.dot(vel);\n  const contactDamping = 0.2;\n  const massTerm = 1 / (body1.invMass + body2.invMass);\n  const impulse = -contactDamping * rel_vel * massTerm;\n  return impulse;\n}\n\n/**\n * Spherical shape\n * @example\n *     const radius = 1\n *     const sphereShape = new CANNON.Sphere(radius)\n *     const sphereBody = new CANNON.Body({ mass: 1, shape: sphereShape })\n *     world.addBody(sphereBody)\n */\nclass Sphere extends Shape {\n  /**\n   * The radius of the sphere.\n   */\n\n  /**\n   *\n   * @param radius The radius of the sphere, a non-negative number.\n   */\n  constructor(radius) {\n    super({\n      type: Shape.types.SPHERE\n    });\n    this.radius = radius !== undefined ? radius : 1.0;\n\n    if (this.radius < 0) {\n      throw new Error('The sphere radius cannot be negative.');\n    }\n\n    this.updateBoundingSphereRadius();\n  }\n  /** calculateLocalInertia */\n\n\n  calculateLocalInertia(mass, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    const I = 2.0 * mass * this.radius * this.radius / 5.0;\n    target.x = I;\n    target.y = I;\n    target.z = I;\n    return target;\n  }\n  /** volume */\n\n\n  volume() {\n    return 4.0 * Math.PI * Math.pow(this.radius, 3) / 3.0;\n  }\n\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = this.radius;\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    const r = this.radius;\n    const axes = ['x', 'y', 'z'];\n\n    for (let i = 0; i < axes.length; i++) {\n      const ax = axes[i];\n      min[ax] = pos[ax] - r;\n      max[ax] = pos[ax] + r;\n    }\n  }\n\n}\n\n/**\n * Simple vehicle helper class with spherical rigid body wheels.\n */\nclass RigidVehicle {\n  /**\n   * The bodies of the wheels.\n   */\n\n  /**\n   * The chassis body.\n   */\n\n  /**\n   * The constraints.\n   */\n\n  /**\n   * The wheel axes.\n   */\n\n  /**\n   * The wheel forces.\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.wheelBodies = [];\n    this.coordinateSystem = typeof options.coordinateSystem !== 'undefined' ? options.coordinateSystem.clone() : new Vec3(1, 2, 3);\n\n    if (options.chassisBody) {\n      this.chassisBody = options.chassisBody;\n    } else {\n      // No chassis body given. Create it!\n      this.chassisBody = new Body({\n        mass: 1,\n        shape: new Box(new Vec3(5, 0.5, 2))\n      });\n    }\n\n    this.constraints = [];\n    this.wheelAxes = [];\n    this.wheelForces = [];\n  }\n  /**\n   * Add a wheel\n   */\n\n\n  addWheel(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    let wheelBody;\n\n    if (options.body) {\n      wheelBody = options.body;\n    } else {\n      // No wheel body given. Create it!\n      wheelBody = new Body({\n        mass: 1,\n        shape: new Sphere(1.2)\n      });\n    }\n\n    this.wheelBodies.push(wheelBody);\n    this.wheelForces.push(0); // Position constrain wheels\n\n    const position = typeof options.position !== 'undefined' ? options.position.clone() : new Vec3(); // Set position locally to the chassis\n\n    const worldPosition = new Vec3();\n    this.chassisBody.pointToWorldFrame(position, worldPosition);\n    wheelBody.position.set(worldPosition.x, worldPosition.y, worldPosition.z); // Constrain wheel\n\n    const axis = typeof options.axis !== 'undefined' ? options.axis.clone() : new Vec3(0, 0, 1);\n    this.wheelAxes.push(axis);\n    const hingeConstraint = new HingeConstraint(this.chassisBody, wheelBody, {\n      pivotA: position,\n      axisA: axis,\n      pivotB: Vec3.ZERO,\n      axisB: axis,\n      collideConnected: false\n    });\n    this.constraints.push(hingeConstraint);\n    return this.wheelBodies.length - 1;\n  }\n  /**\n   * Set the steering value of a wheel.\n   * @todo check coordinateSystem\n   */\n\n\n  setSteeringValue(value, wheelIndex) {\n    // Set angle of the hinge axis\n    const axis = this.wheelAxes[wheelIndex];\n    const c = Math.cos(value);\n    const s = Math.sin(value);\n    const x = axis.x;\n    const z = axis.z;\n    this.constraints[wheelIndex].axisA.set(-c * x + s * z, 0, s * x + c * z);\n  }\n  /**\n   * Set the target rotational speed of the hinge constraint.\n   */\n\n\n  setMotorSpeed(value, wheelIndex) {\n    const hingeConstraint = this.constraints[wheelIndex];\n    hingeConstraint.enableMotor();\n    hingeConstraint.motorTargetVelocity = value;\n  }\n  /**\n   * Set the target rotational speed of the hinge constraint.\n   */\n\n\n  disableMotor(wheelIndex) {\n    const hingeConstraint = this.constraints[wheelIndex];\n    hingeConstraint.disableMotor();\n  }\n  /**\n   * Set the wheel force to apply on one of the wheels each time step\n   */\n\n\n  setWheelForce(value, wheelIndex) {\n    this.wheelForces[wheelIndex] = value;\n  }\n  /**\n   * Apply a torque on one of the wheels.\n   */\n\n\n  applyWheelForce(value, wheelIndex) {\n    const axis = this.wheelAxes[wheelIndex];\n    const wheelBody = this.wheelBodies[wheelIndex];\n    const bodyTorque = wheelBody.torque;\n    axis.scale(value, torque);\n    wheelBody.vectorToWorldFrame(torque, torque);\n    bodyTorque.vadd(torque, bodyTorque);\n  }\n  /**\n   * Add the vehicle including its constraints to the world.\n   */\n\n\n  addToWorld(world) {\n    const constraints = this.constraints;\n    const bodies = this.wheelBodies.concat([this.chassisBody]);\n\n    for (let i = 0; i < bodies.length; i++) {\n      world.addBody(bodies[i]);\n    }\n\n    for (let i = 0; i < constraints.length; i++) {\n      world.addConstraint(constraints[i]);\n    }\n\n    world.addEventListener('preStep', this._update.bind(this));\n  }\n\n  _update() {\n    const wheelForces = this.wheelForces;\n\n    for (let i = 0; i < wheelForces.length; i++) {\n      this.applyWheelForce(wheelForces[i], i);\n    }\n  }\n  /**\n   * Remove the vehicle including its constraints from the world.\n   */\n\n\n  removeFromWorld(world) {\n    const constraints = this.constraints;\n    const bodies = this.wheelBodies.concat([this.chassisBody]);\n\n    for (let i = 0; i < bodies.length; i++) {\n      world.removeBody(bodies[i]);\n    }\n\n    for (let i = 0; i < constraints.length; i++) {\n      world.removeConstraint(constraints[i]);\n    }\n  }\n  /**\n   * Get current rotational velocity of a wheel\n   */\n\n\n  getWheelSpeed(wheelIndex) {\n    const axis = this.wheelAxes[wheelIndex];\n    const wheelBody = this.wheelBodies[wheelIndex];\n    const w = wheelBody.angularVelocity;\n    this.chassisBody.vectorToWorldFrame(axis, worldAxis);\n    return w.dot(worldAxis);\n  }\n\n}\nconst torque = new Vec3();\nconst worldAxis = new Vec3();\n\n/**\n * Smoothed-particle hydrodynamics system\n * @todo Make parameters customizable in the constructor\n */\nclass SPHSystem {\n  /**\n   * The particles array.\n   */\n\n  /**\n   * Density of the system (kg/m3).\n   * @default 1\n   */\n\n  /**\n   * Distance below which two particles are considered to be neighbors.\n   * It should be adjusted so there are about 15-20 neighbor particles within this radius.\n   * @default 1\n   */\n\n  /**\n   * @default 1\n   */\n\n  /**\n   * Viscosity of the system.\n   * @default 0.01\n   */\n\n  /**\n   * @default 0.000001\n   */\n  constructor() {\n    this.particles = [];\n    this.density = 1;\n    this.smoothingRadius = 1;\n    this.speedOfSound = 1;\n    this.viscosity = 0.01;\n    this.eps = 0.000001; // Stuff Computed per particle\n\n    this.pressures = [];\n    this.densities = [];\n    this.neighbors = [];\n  }\n  /**\n   * Add a particle to the system.\n   */\n\n\n  add(particle) {\n    this.particles.push(particle);\n\n    if (this.neighbors.length < this.particles.length) {\n      this.neighbors.push([]);\n    }\n  }\n  /**\n   * Remove a particle from the system.\n   */\n\n\n  remove(particle) {\n    const idx = this.particles.indexOf(particle);\n\n    if (idx !== -1) {\n      this.particles.splice(idx, 1);\n\n      if (this.neighbors.length > this.particles.length) {\n        this.neighbors.pop();\n      }\n    }\n  }\n  /**\n   * Get neighbors within smoothing volume, save in the array neighbors\n   */\n\n\n  getNeighbors(particle, neighbors) {\n    const N = this.particles.length;\n    const id = particle.id;\n    const R2 = this.smoothingRadius * this.smoothingRadius;\n    const dist = SPHSystem_getNeighbors_dist;\n\n    for (let i = 0; i !== N; i++) {\n      const p = this.particles[i];\n      p.position.vsub(particle.position, dist);\n\n      if (id !== p.id && dist.lengthSquared() < R2) {\n        neighbors.push(p);\n      }\n    }\n  }\n\n  update() {\n    const N = this.particles.length;\n    const dist = SPHSystem_update_dist;\n    const cs = this.speedOfSound;\n    const eps = this.eps;\n\n    for (let i = 0; i !== N; i++) {\n      const p = this.particles[i]; // Current particle\n\n      const neighbors = this.neighbors[i]; // Get neighbors\n\n      neighbors.length = 0;\n      this.getNeighbors(p, neighbors);\n      neighbors.push(this.particles[i]); // Add current too\n\n      const numNeighbors = neighbors.length; // Accumulate density for the particle\n\n      let sum = 0.0;\n\n      for (let j = 0; j !== numNeighbors; j++) {\n        //printf(\"Current particle has position %f %f %f\\n\",objects[id].pos.x(),objects[id].pos.y(),objects[id].pos.z());\n        p.position.vsub(neighbors[j].position, dist);\n        const len = dist.length();\n        const weight = this.w(len);\n        sum += neighbors[j].mass * weight;\n      } // Save\n\n\n      this.densities[i] = sum;\n      this.pressures[i] = cs * cs * (this.densities[i] - this.density);\n    } // Add forces\n    // Sum to these accelerations\n\n\n    const a_pressure = SPHSystem_update_a_pressure;\n    const a_visc = SPHSystem_update_a_visc;\n    const gradW = SPHSystem_update_gradW;\n    const r_vec = SPHSystem_update_r_vec;\n    const u = SPHSystem_update_u;\n\n    for (let i = 0; i !== N; i++) {\n      const particle = this.particles[i];\n      a_pressure.set(0, 0, 0);\n      a_visc.set(0, 0, 0); // Init vars\n\n      let Pij;\n      let nabla;\n\n      const neighbors = this.neighbors[i];\n      const numNeighbors = neighbors.length; //printf(\"Neighbors: \");\n\n      for (let j = 0; j !== numNeighbors; j++) {\n        const neighbor = neighbors[j]; //printf(\"%d \",nj);\n        // Get r once for all..\n\n        particle.position.vsub(neighbor.position, r_vec);\n        const r = r_vec.length(); // Pressure contribution\n\n        Pij = -neighbor.mass * (this.pressures[i] / (this.densities[i] * this.densities[i] + eps) + this.pressures[j] / (this.densities[j] * this.densities[j] + eps));\n        this.gradw(r_vec, gradW); // Add to pressure acceleration\n\n        gradW.scale(Pij, gradW);\n        a_pressure.vadd(gradW, a_pressure); // Viscosity contribution\n\n        neighbor.velocity.vsub(particle.velocity, u);\n        u.scale(1.0 / (0.0001 + this.densities[i] * this.densities[j]) * this.viscosity * neighbor.mass, u);\n        nabla = this.nablaw(r);\n        u.scale(nabla, u); // Add to viscosity acceleration\n\n        a_visc.vadd(u, a_visc);\n      } // Calculate force\n\n\n      a_visc.scale(particle.mass, a_visc);\n      a_pressure.scale(particle.mass, a_pressure); // Add force to particles\n\n      particle.force.vadd(a_visc, particle.force);\n      particle.force.vadd(a_pressure, particle.force);\n    }\n  } // Calculate the weight using the W(r) weightfunction\n\n\n  w(r) {\n    // 315\n    const h = this.smoothingRadius;\n    return 315.0 / (64.0 * Math.PI * h ** 9) * (h * h - r * r) ** 3;\n  } // calculate gradient of the weight function\n\n\n  gradw(rVec, resultVec) {\n    const r = rVec.length();\n    const h = this.smoothingRadius;\n    rVec.scale(945.0 / (32.0 * Math.PI * h ** 9) * (h * h - r * r) ** 2, resultVec);\n  } // Calculate nabla(W)\n\n\n  nablaw(r) {\n    const h = this.smoothingRadius;\n    const nabla = 945.0 / (32.0 * Math.PI * h ** 9) * (h * h - r * r) * (7 * r * r - 3 * h * h);\n    return nabla;\n  }\n\n}\nconst SPHSystem_getNeighbors_dist = new Vec3(); // Temp vectors for calculation\n\nconst SPHSystem_update_dist = new Vec3(); // Relative velocity\n\nconst SPHSystem_update_a_pressure = new Vec3();\nconst SPHSystem_update_a_visc = new Vec3();\nconst SPHSystem_update_gradW = new Vec3();\nconst SPHSystem_update_r_vec = new Vec3();\nconst SPHSystem_update_u = new Vec3();\n\n/**\n * Cylinder class.\n * @example\n *     const radiusTop = 0.5\n *     const radiusBottom = 0.5\n *     const height = 2\n *     const numSegments = 12\n *     const cylinderShape = new CANNON.Cylinder(radiusTop, radiusBottom, height, numSegments)\n *     const cylinderBody = new CANNON.Body({ mass: 1, shape: cylinderShape })\n *     world.addBody(cylinderBody)\n */\n\nclass Cylinder extends ConvexPolyhedron {\n  /** The radius of the top of the Cylinder. */\n\n  /** The radius of the bottom of the Cylinder. */\n\n  /** The height of the Cylinder. */\n\n  /** The number of segments to build the cylinder out of. */\n\n  /**\n   * @param radiusTop The radius of the top of the Cylinder.\n   * @param radiusBottom The radius of the bottom of the Cylinder.\n   * @param height The height of the Cylinder.\n   * @param numSegments The number of segments to build the cylinder out of.\n   */\n  constructor(radiusTop, radiusBottom, height, numSegments) {\n    if (radiusTop === void 0) {\n      radiusTop = 1;\n    }\n\n    if (radiusBottom === void 0) {\n      radiusBottom = 1;\n    }\n\n    if (height === void 0) {\n      height = 1;\n    }\n\n    if (numSegments === void 0) {\n      numSegments = 8;\n    }\n\n    if (radiusTop < 0) {\n      throw new Error('The cylinder radiusTop cannot be negative.');\n    }\n\n    if (radiusBottom < 0) {\n      throw new Error('The cylinder radiusBottom cannot be negative.');\n    }\n\n    const N = numSegments;\n    const vertices = [];\n    const axes = [];\n    const faces = [];\n    const bottomface = [];\n    const topface = [];\n    const cos = Math.cos;\n    const sin = Math.sin; // First bottom point\n\n    vertices.push(new Vec3(-radiusBottom * sin(0), -height * 0.5, radiusBottom * cos(0)));\n    bottomface.push(0); // First top point\n\n    vertices.push(new Vec3(-radiusTop * sin(0), height * 0.5, radiusTop * cos(0)));\n    topface.push(1);\n\n    for (let i = 0; i < N; i++) {\n      const theta = 2 * Math.PI / N * (i + 1);\n      const thetaN = 2 * Math.PI / N * (i + 0.5);\n\n      if (i < N - 1) {\n        // Bottom\n        vertices.push(new Vec3(-radiusBottom * sin(theta), -height * 0.5, radiusBottom * cos(theta)));\n        bottomface.push(2 * i + 2); // Top\n\n        vertices.push(new Vec3(-radiusTop * sin(theta), height * 0.5, radiusTop * cos(theta)));\n        topface.push(2 * i + 3); // Face\n\n        faces.push([2 * i, 2 * i + 1, 2 * i + 3, 2 * i + 2]);\n      } else {\n        faces.push([2 * i, 2 * i + 1, 1, 0]); // Connect\n      } // Axis: we can cut off half of them if we have even number of segments\n\n\n      if (N % 2 === 1 || i < N / 2) {\n        axes.push(new Vec3(-sin(thetaN), 0, cos(thetaN)));\n      }\n    }\n\n    faces.push(bottomface);\n    axes.push(new Vec3(0, 1, 0)); // Reorder top face\n\n    const temp = [];\n\n    for (let i = 0; i < topface.length; i++) {\n      temp.push(topface[topface.length - i - 1]);\n    }\n\n    faces.push(temp);\n    super({\n      vertices,\n      faces,\n      axes\n    });\n    this.type = Shape.types.CYLINDER;\n    this.radiusTop = radiusTop;\n    this.radiusBottom = radiusBottom;\n    this.height = height;\n    this.numSegments = numSegments;\n  }\n\n}\n\n/**\n * Particle shape.\n * @example\n *     const particleShape = new CANNON.Particle()\n *     const particleBody = new CANNON.Body({ mass: 1, shape: particleShape })\n *     world.addBody(particleBody)\n */\nclass Particle extends Shape {\n  constructor() {\n    super({\n      type: Shape.types.PARTICLE\n    });\n  }\n  /**\n   * calculateLocalInertia\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    target.set(0, 0, 0);\n    return target;\n  }\n\n  volume() {\n    return 0;\n  }\n\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = 0;\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    // Get each axis max\n    min.copy(pos);\n    max.copy(pos);\n  }\n\n}\n\n/**\n * A plane, facing in the Z direction. The plane has its surface at z=0 and everything below z=0 is assumed to be solid plane. To make the plane face in some other direction than z, you must put it inside a Body and rotate that body. See the demos.\n * @example\n *     const planeShape = new CANNON.Plane()\n *     const planeBody = new CANNON.Body({ mass: 0, shape:  planeShape })\n *     planeBody.quaternion.setFromEuler(-Math.PI / 2, 0, 0) // make it face up\n *     world.addBody(planeBody)\n */\nclass Plane extends Shape {\n  /** worldNormal */\n\n  /** worldNormalNeedsUpdate */\n  constructor() {\n    super({\n      type: Shape.types.PLANE\n    }); // World oriented normal\n\n    this.worldNormal = new Vec3();\n    this.worldNormalNeedsUpdate = true;\n    this.boundingSphereRadius = Number.MAX_VALUE;\n  }\n  /** computeWorldNormal */\n\n\n  computeWorldNormal(quat) {\n    const n = this.worldNormal;\n    n.set(0, 0, 1);\n    quat.vmult(n, n);\n    this.worldNormalNeedsUpdate = false;\n  }\n\n  calculateLocalInertia(mass, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    return target;\n  }\n\n  volume() {\n    return (// The plane is infinite...\n      Number.MAX_VALUE\n    );\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    // The plane AABB is infinite, except if the normal is pointing along any axis\n    tempNormal.set(0, 0, 1); // Default plane normal is z\n\n    quat.vmult(tempNormal, tempNormal);\n    const maxVal = Number.MAX_VALUE;\n    min.set(-maxVal, -maxVal, -maxVal);\n    max.set(maxVal, maxVal, maxVal);\n\n    if (tempNormal.x === 1) {\n      max.x = pos.x;\n    } else if (tempNormal.x === -1) {\n      min.x = pos.x;\n    }\n\n    if (tempNormal.y === 1) {\n      max.y = pos.y;\n    } else if (tempNormal.y === -1) {\n      min.y = pos.y;\n    }\n\n    if (tempNormal.z === 1) {\n      max.z = pos.z;\n    } else if (tempNormal.z === -1) {\n      min.z = pos.z;\n    }\n  }\n\n  updateBoundingSphereRadius() {\n    this.boundingSphereRadius = Number.MAX_VALUE;\n  }\n\n}\nconst tempNormal = new Vec3();\n\n/**\n * Heightfield shape class. Height data is given as an array. These data points are spread out evenly with a given distance.\n * @todo Should be possible to use along all axes, not just y\n * @todo should be possible to scale along all axes\n * @todo Refactor elementSize to elementSizeX and elementSizeY\n *\n * @example\n *     // Generate some height data (y-values).\n *     const data = []\n *     for (let i = 0; i < 1000; i++) {\n *         const y = 0.5 * Math.cos(0.2 * i)\n *         data.push(y)\n *     }\n *\n *     // Create the heightfield shape\n *     const heightfieldShape = new CANNON.Heightfield(data, {\n *         elementSize: 1 // Distance between the data points in X and Y directions\n *     })\n *     const heightfieldBody = new CANNON.Body({ shape: heightfieldShape })\n *     world.addBody(heightfieldBody)\n */\nclass Heightfield extends Shape {\n  /**\n   * An array of numbers, or height values, that are spread out along the x axis.\n   */\n\n  /**\n   * Max value of the data points in the data array.\n   */\n\n  /**\n   * Minimum value of the data points in the data array.\n   */\n\n  /**\n   * World spacing between the data points in X and Y direction.\n   * @todo elementSizeX and Y\n   * @default 1\n   */\n\n  /**\n   * @default true\n   */\n\n  /**\n   * @param data An array of numbers, or height values, that are spread out along the x axis.\n   */\n  constructor(data, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    options = Utils.defaults(options, {\n      maxValue: null,\n      minValue: null,\n      elementSize: 1\n    });\n    super({\n      type: Shape.types.HEIGHTFIELD\n    });\n    this.data = data;\n    this.maxValue = options.maxValue;\n    this.minValue = options.minValue;\n    this.elementSize = options.elementSize;\n\n    if (options.minValue === null) {\n      this.updateMinValue();\n    }\n\n    if (options.maxValue === null) {\n      this.updateMaxValue();\n    }\n\n    this.cacheEnabled = true;\n    this.pillarConvex = new ConvexPolyhedron();\n    this.pillarOffset = new Vec3();\n    this.updateBoundingSphereRadius(); // \"i_j_isUpper\" => { convex: ..., offset: ... }\n    // for example:\n    // _cachedPillars[\"0_2_1\"]\n\n    this._cachedPillars = {};\n  }\n  /**\n   * Call whenever you change the data array.\n   */\n\n\n  update() {\n    this._cachedPillars = {};\n  }\n  /**\n   * Update the `minValue` property\n   */\n\n\n  updateMinValue() {\n    const data = this.data;\n    let minValue = data[0][0];\n\n    for (let i = 0; i !== data.length; i++) {\n      for (let j = 0; j !== data[i].length; j++) {\n        const v = data[i][j];\n\n        if (v < minValue) {\n          minValue = v;\n        }\n      }\n    }\n\n    this.minValue = minValue;\n  }\n  /**\n   * Update the `maxValue` property\n   */\n\n\n  updateMaxValue() {\n    const data = this.data;\n    let maxValue = data[0][0];\n\n    for (let i = 0; i !== data.length; i++) {\n      for (let j = 0; j !== data[i].length; j++) {\n        const v = data[i][j];\n\n        if (v > maxValue) {\n          maxValue = v;\n        }\n      }\n    }\n\n    this.maxValue = maxValue;\n  }\n  /**\n   * Set the height value at an index. Don't forget to update maxValue and minValue after you're done.\n   */\n\n\n  setHeightValueAtIndex(xi, yi, value) {\n    const data = this.data;\n    data[xi][yi] = value; // Invalidate cache\n\n    this.clearCachedConvexTrianglePillar(xi, yi, false);\n\n    if (xi > 0) {\n      this.clearCachedConvexTrianglePillar(xi - 1, yi, true);\n      this.clearCachedConvexTrianglePillar(xi - 1, yi, false);\n    }\n\n    if (yi > 0) {\n      this.clearCachedConvexTrianglePillar(xi, yi - 1, true);\n      this.clearCachedConvexTrianglePillar(xi, yi - 1, false);\n    }\n\n    if (yi > 0 && xi > 0) {\n      this.clearCachedConvexTrianglePillar(xi - 1, yi - 1, true);\n    }\n  }\n  /**\n   * Get max/min in a rectangle in the matrix data\n   * @param result An array to store the results in.\n   * @return The result array, if it was passed in. Minimum will be at position 0 and max at 1.\n   */\n\n\n  getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, result) {\n    if (result === void 0) {\n      result = [];\n    }\n\n    // Get max and min of the data\n    const data = this.data; // Set first value\n\n    let max = this.minValue;\n\n    for (let i = iMinX; i <= iMaxX; i++) {\n      for (let j = iMinY; j <= iMaxY; j++) {\n        const height = data[i][j];\n\n        if (height > max) {\n          max = height;\n        }\n      }\n    }\n\n    result[0] = this.minValue;\n    result[1] = max;\n  }\n  /**\n   * Get the index of a local position on the heightfield. The indexes indicate the rectangles, so if your terrain is made of N x N height data points, you will have rectangle indexes ranging from 0 to N-1.\n   * @param result Two-element array\n   * @param clamp If the position should be clamped to the heightfield edge.\n   */\n\n\n  getIndexOfPosition(x, y, result, clamp) {\n    // Get the index of the data points to test against\n    const w = this.elementSize;\n    const data = this.data;\n    let xi = Math.floor(x / w);\n    let yi = Math.floor(y / w);\n    result[0] = xi;\n    result[1] = yi;\n\n    if (clamp) {\n      // Clamp index to edges\n      if (xi < 0) {\n        xi = 0;\n      }\n\n      if (yi < 0) {\n        yi = 0;\n      }\n\n      if (xi >= data.length - 1) {\n        xi = data.length - 1;\n      }\n\n      if (yi >= data[0].length - 1) {\n        yi = data[0].length - 1;\n      }\n    } // Bail out if we are out of the terrain\n\n\n    if (xi < 0 || yi < 0 || xi >= data.length - 1 || yi >= data[0].length - 1) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getTriangleAt(x, y, edgeClamp, a, b, c) {\n    const idx = getHeightAt_idx;\n    this.getIndexOfPosition(x, y, idx, edgeClamp);\n    let xi = idx[0];\n    let yi = idx[1];\n    const data = this.data;\n\n    if (edgeClamp) {\n      xi = Math.min(data.length - 2, Math.max(0, xi));\n      yi = Math.min(data[0].length - 2, Math.max(0, yi));\n    }\n\n    const elementSize = this.elementSize;\n    const lowerDist2 = (x / elementSize - xi) ** 2 + (y / elementSize - yi) ** 2;\n    const upperDist2 = (x / elementSize - (xi + 1)) ** 2 + (y / elementSize - (yi + 1)) ** 2;\n    const upper = lowerDist2 > upperDist2;\n    this.getTriangle(xi, yi, upper, a, b, c);\n    return upper;\n  }\n\n  getNormalAt(x, y, edgeClamp, result) {\n    const a = getNormalAt_a;\n    const b = getNormalAt_b;\n    const c = getNormalAt_c;\n    const e0 = getNormalAt_e0;\n    const e1 = getNormalAt_e1;\n    this.getTriangleAt(x, y, edgeClamp, a, b, c);\n    b.vsub(a, e0);\n    c.vsub(a, e1);\n    e0.cross(e1, result);\n    result.normalize();\n  }\n  /**\n   * Get an AABB of a square in the heightfield\n   * @param xi\n   * @param yi\n   * @param result\n   */\n\n\n  getAabbAtIndex(xi, yi, _ref) {\n    let {\n      lowerBound,\n      upperBound\n    } = _ref;\n    const data = this.data;\n    const elementSize = this.elementSize;\n    lowerBound.set(xi * elementSize, yi * elementSize, data[xi][yi]);\n    upperBound.set((xi + 1) * elementSize, (yi + 1) * elementSize, data[xi + 1][yi + 1]);\n  }\n  /**\n   * Get the height in the heightfield at a given position\n   */\n\n\n  getHeightAt(x, y, edgeClamp) {\n    const data = this.data;\n    const a = getHeightAt_a;\n    const b = getHeightAt_b;\n    const c = getHeightAt_c;\n    const idx = getHeightAt_idx;\n    this.getIndexOfPosition(x, y, idx, edgeClamp);\n    let xi = idx[0];\n    let yi = idx[1];\n\n    if (edgeClamp) {\n      xi = Math.min(data.length - 2, Math.max(0, xi));\n      yi = Math.min(data[0].length - 2, Math.max(0, yi));\n    }\n\n    const upper = this.getTriangleAt(x, y, edgeClamp, a, b, c);\n    barycentricWeights(x, y, a.x, a.y, b.x, b.y, c.x, c.y, getHeightAt_weights);\n    const w = getHeightAt_weights;\n\n    if (upper) {\n      // Top triangle verts\n      return data[xi + 1][yi + 1] * w.x + data[xi][yi + 1] * w.y + data[xi + 1][yi] * w.z;\n    } else {\n      // Top triangle verts\n      return data[xi][yi] * w.x + data[xi + 1][yi] * w.y + data[xi][yi + 1] * w.z;\n    }\n  }\n\n  getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle) {\n    return `${xi}_${yi}_${getUpperTriangle ? 1 : 0}`;\n  }\n\n  getCachedConvexTrianglePillar(xi, yi, getUpperTriangle) {\n    return this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n  }\n\n  setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, convex, offset) {\n    this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)] = {\n      convex,\n      offset\n    };\n  }\n\n  clearCachedConvexTrianglePillar(xi, yi, getUpperTriangle) {\n    delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n  }\n  /**\n   * Get a triangle from the heightfield\n   */\n\n\n  getTriangle(xi, yi, upper, a, b, c) {\n    const data = this.data;\n    const elementSize = this.elementSize;\n\n    if (upper) {\n      // Top triangle verts\n      a.set((xi + 1) * elementSize, (yi + 1) * elementSize, data[xi + 1][yi + 1]);\n      b.set(xi * elementSize, (yi + 1) * elementSize, data[xi][yi + 1]);\n      c.set((xi + 1) * elementSize, yi * elementSize, data[xi + 1][yi]);\n    } else {\n      // Top triangle verts\n      a.set(xi * elementSize, yi * elementSize, data[xi][yi]);\n      b.set((xi + 1) * elementSize, yi * elementSize, data[xi + 1][yi]);\n      c.set(xi * elementSize, (yi + 1) * elementSize, data[xi][yi + 1]);\n    }\n  }\n  /**\n   * Get a triangle in the terrain in the form of a triangular convex shape.\n   */\n\n\n  getConvexTrianglePillar(xi, yi, getUpperTriangle) {\n    let result = this.pillarConvex;\n    let offsetResult = this.pillarOffset;\n\n    if (this.cacheEnabled) {\n      const data = this.getCachedConvexTrianglePillar(xi, yi, getUpperTriangle);\n\n      if (data) {\n        this.pillarConvex = data.convex;\n        this.pillarOffset = data.offset;\n        return;\n      }\n\n      result = new ConvexPolyhedron();\n      offsetResult = new Vec3();\n      this.pillarConvex = result;\n      this.pillarOffset = offsetResult;\n    }\n\n    const data = this.data;\n    const elementSize = this.elementSize;\n    const faces = result.faces; // Reuse verts if possible\n\n    result.vertices.length = 6;\n\n    for (let i = 0; i < 6; i++) {\n      if (!result.vertices[i]) {\n        result.vertices[i] = new Vec3();\n      }\n    } // Reuse faces if possible\n\n\n    faces.length = 5;\n\n    for (let i = 0; i < 5; i++) {\n      if (!faces[i]) {\n        faces[i] = [];\n      }\n    }\n\n    const verts = result.vertices;\n    const h = (Math.min(data[xi][yi], data[xi + 1][yi], data[xi][yi + 1], data[xi + 1][yi + 1]) - this.minValue) / 2 + this.minValue;\n\n    if (!getUpperTriangle) {\n      // Center of the triangle pillar - all polygons are given relative to this one\n      offsetResult.set((xi + 0.25) * elementSize, // sort of center of a triangle\n      (yi + 0.25) * elementSize, h // vertical center\n      ); // Top triangle verts\n\n      verts[0].set(-0.25 * elementSize, -0.25 * elementSize, data[xi][yi] - h);\n      verts[1].set(0.75 * elementSize, -0.25 * elementSize, data[xi + 1][yi] - h);\n      verts[2].set(-0.25 * elementSize, 0.75 * elementSize, data[xi][yi + 1] - h); // bottom triangle verts\n\n      verts[3].set(-0.25 * elementSize, -0.25 * elementSize, -Math.abs(h) - 1);\n      verts[4].set(0.75 * elementSize, -0.25 * elementSize, -Math.abs(h) - 1);\n      verts[5].set(-0.25 * elementSize, 0.75 * elementSize, -Math.abs(h) - 1); // top triangle\n\n      faces[0][0] = 0;\n      faces[0][1] = 1;\n      faces[0][2] = 2; // bottom triangle\n\n      faces[1][0] = 5;\n      faces[1][1] = 4;\n      faces[1][2] = 3; // -x facing quad\n\n      faces[2][0] = 0;\n      faces[2][1] = 2;\n      faces[2][2] = 5;\n      faces[2][3] = 3; // -y facing quad\n\n      faces[3][0] = 1;\n      faces[3][1] = 0;\n      faces[3][2] = 3;\n      faces[3][3] = 4; // +xy facing quad\n\n      faces[4][0] = 4;\n      faces[4][1] = 5;\n      faces[4][2] = 2;\n      faces[4][3] = 1;\n    } else {\n      // Center of the triangle pillar - all polygons are given relative to this one\n      offsetResult.set((xi + 0.75) * elementSize, // sort of center of a triangle\n      (yi + 0.75) * elementSize, h // vertical center\n      ); // Top triangle verts\n\n      verts[0].set(0.25 * elementSize, 0.25 * elementSize, data[xi + 1][yi + 1] - h);\n      verts[1].set(-0.75 * elementSize, 0.25 * elementSize, data[xi][yi + 1] - h);\n      verts[2].set(0.25 * elementSize, -0.75 * elementSize, data[xi + 1][yi] - h); // bottom triangle verts\n\n      verts[3].set(0.25 * elementSize, 0.25 * elementSize, -Math.abs(h) - 1);\n      verts[4].set(-0.75 * elementSize, 0.25 * elementSize, -Math.abs(h) - 1);\n      verts[5].set(0.25 * elementSize, -0.75 * elementSize, -Math.abs(h) - 1); // Top triangle\n\n      faces[0][0] = 0;\n      faces[0][1] = 1;\n      faces[0][2] = 2; // bottom triangle\n\n      faces[1][0] = 5;\n      faces[1][1] = 4;\n      faces[1][2] = 3; // +x facing quad\n\n      faces[2][0] = 2;\n      faces[2][1] = 5;\n      faces[2][2] = 3;\n      faces[2][3] = 0; // +y facing quad\n\n      faces[3][0] = 3;\n      faces[3][1] = 4;\n      faces[3][2] = 1;\n      faces[3][3] = 0; // -xy facing quad\n\n      faces[4][0] = 1;\n      faces[4][1] = 4;\n      faces[4][2] = 5;\n      faces[4][3] = 2;\n    }\n\n    result.computeNormals();\n    result.computeEdges();\n    result.updateBoundingSphereRadius();\n    this.setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, result, offsetResult);\n  }\n\n  calculateLocalInertia(mass, target) {\n    if (target === void 0) {\n      target = new Vec3();\n    }\n\n    target.set(0, 0, 0);\n    return target;\n  }\n\n  volume() {\n    return (// The terrain is infinite\n      Number.MAX_VALUE\n    );\n  }\n\n  calculateWorldAABB(pos, quat, min, max) {\n    /** @TODO do it properly */\n    min.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n    max.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n  }\n\n  updateBoundingSphereRadius() {\n    // Use the bounding box of the min/max values\n    const data = this.data;\n    const s = this.elementSize;\n    this.boundingSphereRadius = new Vec3(data.length * s, data[0].length * s, Math.max(Math.abs(this.maxValue), Math.abs(this.minValue))).length();\n  }\n  /**\n   * Sets the height values from an image. Currently only supported in browser.\n   */\n\n\n  setHeightsFromImage(image, scale) {\n    const {\n      x,\n      z,\n      y\n    } = scale;\n    const canvas = document.createElement('canvas');\n    canvas.width = image.width;\n    canvas.height = image.height;\n    const context = canvas.getContext('2d');\n    context.drawImage(image, 0, 0);\n    const imageData = context.getImageData(0, 0, image.width, image.height);\n    const matrix = this.data;\n    matrix.length = 0;\n    this.elementSize = Math.abs(x) / imageData.width;\n\n    for (let i = 0; i < imageData.height; i++) {\n      const row = [];\n\n      for (let j = 0; j < imageData.width; j++) {\n        const a = imageData.data[(i * imageData.height + j) * 4];\n        const b = imageData.data[(i * imageData.height + j) * 4 + 1];\n        const c = imageData.data[(i * imageData.height + j) * 4 + 2];\n        const height = (a + b + c) / 4 / 255 * z;\n\n        if (x < 0) {\n          row.push(height);\n        } else {\n          row.unshift(height);\n        }\n      }\n\n      if (y < 0) {\n        matrix.unshift(row);\n      } else {\n        matrix.push(row);\n      }\n    }\n\n    this.updateMaxValue();\n    this.updateMinValue();\n    this.update();\n  }\n\n}\nconst getHeightAt_idx = [];\nconst getHeightAt_weights = new Vec3();\nconst getHeightAt_a = new Vec3();\nconst getHeightAt_b = new Vec3();\nconst getHeightAt_c = new Vec3();\nconst getNormalAt_a = new Vec3();\nconst getNormalAt_b = new Vec3();\nconst getNormalAt_c = new Vec3();\nconst getNormalAt_e0 = new Vec3();\nconst getNormalAt_e1 = new Vec3(); // from https://en.wikipedia.org/wiki/Barycentric_coordinate_system\n\nfunction barycentricWeights(x, y, ax, ay, bx, by, cx, cy, result) {\n  result.x = ((by - cy) * (x - cx) + (cx - bx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));\n  result.y = ((cy - ay) * (x - cx) + (ax - cx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));\n  result.z = 1 - result.x - result.y;\n}\n\n/**\n * OctreeNode\n */\nclass OctreeNode {\n  /** The root node */\n\n  /** Boundary of this node */\n\n  /** Contained data at the current node level */\n\n  /** Children to this node */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.root = options.root || null;\n    this.aabb = options.aabb ? options.aabb.clone() : new AABB();\n    this.data = [];\n    this.children = [];\n  }\n  /**\n   * reset\n   */\n\n\n  reset() {\n    this.children.length = this.data.length = 0;\n  }\n  /**\n   * Insert data into this node\n   * @return True if successful, otherwise false\n   */\n\n\n  insert(aabb, elementData, level) {\n    if (level === void 0) {\n      level = 0;\n    }\n\n    const nodeData = this.data; // Ignore objects that do not belong in this node\n\n    if (!this.aabb.contains(aabb)) {\n      return false; // object cannot be added\n    }\n\n    const children = this.children;\n    const maxDepth = this.maxDepth || this.root.maxDepth;\n\n    if (level < maxDepth) {\n      // Subdivide if there are no children yet\n      let subdivided = false;\n\n      if (!children.length) {\n        this.subdivide();\n        subdivided = true;\n      } // add to whichever node will accept it\n\n\n      for (let i = 0; i !== 8; i++) {\n        if (children[i].insert(aabb, elementData, level + 1)) {\n          return true;\n        }\n      }\n\n      if (subdivided) {\n        // No children accepted! Might as well just remove em since they contain none\n        children.length = 0;\n      }\n    } // Too deep, or children didnt want it. add it in current node\n\n\n    nodeData.push(elementData);\n    return true;\n  }\n  /**\n   * Create 8 equally sized children nodes and put them in the `children` array.\n   */\n\n\n  subdivide() {\n    const aabb = this.aabb;\n    const l = aabb.lowerBound;\n    const u = aabb.upperBound;\n    const children = this.children;\n    children.push(new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(0, 0, 0)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(1, 0, 0)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(1, 1, 0)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(1, 1, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(0, 1, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(0, 0, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(1, 0, 1)\n      })\n    }), new OctreeNode({\n      aabb: new AABB({\n        lowerBound: new Vec3(0, 1, 0)\n      })\n    }));\n    u.vsub(l, halfDiagonal);\n    halfDiagonal.scale(0.5, halfDiagonal);\n    const root = this.root || this;\n\n    for (let i = 0; i !== 8; i++) {\n      const child = children[i]; // Set current node as root\n\n      child.root = root; // Compute bounds\n\n      const lowerBound = child.aabb.lowerBound;\n      lowerBound.x *= halfDiagonal.x;\n      lowerBound.y *= halfDiagonal.y;\n      lowerBound.z *= halfDiagonal.z;\n      lowerBound.vadd(l, lowerBound); // Upper bound is always lower bound + halfDiagonal\n\n      lowerBound.vadd(halfDiagonal, child.aabb.upperBound);\n    }\n  }\n  /**\n   * Get all data, potentially within an AABB\n   * @return The \"result\" object\n   */\n\n\n  aabbQuery(aabb, result) {\n    this.data; // abort if the range does not intersect this node\n    // if (!this.aabb.overlaps(aabb)){\n    //     return result;\n    // }\n    // Add objects at this level\n    // Array.prototype.push.apply(result, nodeData);\n    // Add child data\n    // @todo unwrap recursion into a queue / loop, that's faster in JS\n\n    this.children; // for (let i = 0, N = this.children.length; i !== N; i++) {\n    //     children[i].aabbQuery(aabb, result);\n    // }\n\n    const queue = [this];\n\n    while (queue.length) {\n      const node = queue.pop();\n\n      if (node.aabb.overlaps(aabb)) {\n        Array.prototype.push.apply(result, node.data);\n      }\n\n      Array.prototype.push.apply(queue, node.children);\n    }\n\n    return result;\n  }\n  /**\n   * Get all data, potentially intersected by a ray.\n   * @return The \"result\" object\n   */\n\n\n  rayQuery(ray, treeTransform, result) {\n    // Use aabb query for now.\n\n    /** @todo implement real ray query which needs less lookups */\n    ray.getAABB(tmpAABB);\n    tmpAABB.toLocalFrame(treeTransform, tmpAABB);\n    this.aabbQuery(tmpAABB, result);\n    return result;\n  }\n  /**\n   * removeEmptyNodes\n   */\n\n\n  removeEmptyNodes() {\n    for (let i = this.children.length - 1; i >= 0; i--) {\n      this.children[i].removeEmptyNodes();\n\n      if (!this.children[i].children.length && !this.children[i].data.length) {\n        this.children.splice(i, 1);\n      }\n    }\n  }\n\n}\n/**\n * Octree\n */\n\n\nclass Octree extends OctreeNode {\n  /**\n   * Maximum subdivision depth\n   * @default 8\n   */\n\n  /**\n   * @param aabb The total AABB of the tree\n   */\n  constructor(aabb, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    super({\n      root: null,\n      aabb\n    });\n    this.maxDepth = typeof options.maxDepth !== 'undefined' ? options.maxDepth : 8;\n  }\n\n}\nconst halfDiagonal = new Vec3();\nconst tmpAABB = new AABB();\n\n/**\n * Trimesh.\n * @example\n *     // How to make a mesh with a single triangle\n *     const vertices = [\n *         0, 0, 0, // vertex 0\n *         1, 0, 0, // vertex 1\n *         0, 1, 0  // vertex 2\n *     ]\n *     const indices = [\n *         0, 1, 2  // triangle 0\n *     ]\n *     const trimeshShape = new CANNON.Trimesh(vertices, indices)\n */\nclass Trimesh extends Shape {\n  /**\n   * vertices\n   */\n\n  /**\n   * Array of integers, indicating which vertices each triangle consists of. The length of this array is thus 3 times the number of triangles.\n   */\n\n  /**\n   * The normals data.\n   */\n\n  /**\n   * The local AABB of the mesh.\n   */\n\n  /**\n   * References to vertex pairs, making up all unique edges in the trimesh.\n   */\n\n  /**\n   * Local scaling of the mesh. Use .setScale() to set it.\n   */\n\n  /**\n   * The indexed triangles. Use .updateTree() to update it.\n   */\n  constructor(vertices, indices) {\n    super({\n      type: Shape.types.TRIMESH\n    });\n    this.vertices = new Float32Array(vertices);\n    this.indices = new Int16Array(indices);\n    this.normals = new Float32Array(indices.length);\n    this.aabb = new AABB();\n    this.edges = null;\n    this.scale = new Vec3(1, 1, 1);\n    this.tree = new Octree();\n    this.updateEdges();\n    this.updateNormals();\n    this.updateAABB();\n    this.updateBoundingSphereRadius();\n    this.updateTree();\n  }\n  /**\n   * updateTree\n   */\n\n\n  updateTree() {\n    const tree = this.tree;\n    tree.reset();\n    tree.aabb.copy(this.aabb);\n    const scale = this.scale; // The local mesh AABB is scaled, but the octree AABB should be unscaled\n\n    tree.aabb.lowerBound.x *= 1 / scale.x;\n    tree.aabb.lowerBound.y *= 1 / scale.y;\n    tree.aabb.lowerBound.z *= 1 / scale.z;\n    tree.aabb.upperBound.x *= 1 / scale.x;\n    tree.aabb.upperBound.y *= 1 / scale.y;\n    tree.aabb.upperBound.z *= 1 / scale.z; // Insert all triangles\n\n    const triangleAABB = new AABB();\n    const a = new Vec3();\n    const b = new Vec3();\n    const c = new Vec3();\n    const points = [a, b, c];\n\n    for (let i = 0; i < this.indices.length / 3; i++) {\n      //this.getTriangleVertices(i, a, b, c);\n      // Get unscaled triangle verts\n      const i3 = i * 3;\n\n      this._getUnscaledVertex(this.indices[i3], a);\n\n      this._getUnscaledVertex(this.indices[i3 + 1], b);\n\n      this._getUnscaledVertex(this.indices[i3 + 2], c);\n\n      triangleAABB.setFromPoints(points);\n      tree.insert(triangleAABB, i);\n    }\n\n    tree.removeEmptyNodes();\n  }\n  /**\n   * Get triangles in a local AABB from the trimesh.\n   * @param result An array of integers, referencing the queried triangles.\n   */\n\n\n  getTrianglesInAABB(aabb, result) {\n    unscaledAABB.copy(aabb); // Scale it to local\n\n    const scale = this.scale;\n    const isx = scale.x;\n    const isy = scale.y;\n    const isz = scale.z;\n    const l = unscaledAABB.lowerBound;\n    const u = unscaledAABB.upperBound;\n    l.x /= isx;\n    l.y /= isy;\n    l.z /= isz;\n    u.x /= isx;\n    u.y /= isy;\n    u.z /= isz;\n    return this.tree.aabbQuery(unscaledAABB, result);\n  }\n  /**\n   * setScale\n   */\n\n\n  setScale(scale) {\n    const wasUniform = this.scale.x === this.scale.y && this.scale.y === this.scale.z;\n    const isUniform = scale.x === scale.y && scale.y === scale.z;\n\n    if (!(wasUniform && isUniform)) {\n      // Non-uniform scaling. Need to update normals.\n      this.updateNormals();\n    }\n\n    this.scale.copy(scale);\n    this.updateAABB();\n    this.updateBoundingSphereRadius();\n  }\n  /**\n   * Compute the normals of the faces. Will save in the `.normals` array.\n   */\n\n\n  updateNormals() {\n    const n = computeNormals_n; // Generate normals\n\n    const normals = this.normals;\n\n    for (let i = 0; i < this.indices.length / 3; i++) {\n      const i3 = i * 3;\n      const a = this.indices[i3];\n      const b = this.indices[i3 + 1];\n      const c = this.indices[i3 + 2];\n      this.getVertex(a, va);\n      this.getVertex(b, vb);\n      this.getVertex(c, vc);\n      Trimesh.computeNormal(vb, va, vc, n);\n      normals[i3] = n.x;\n      normals[i3 + 1] = n.y;\n      normals[i3 + 2] = n.z;\n    }\n  }\n  /**\n   * Update the `.edges` property\n   */\n\n\n  updateEdges() {\n    const edges = {};\n\n    const add = (a, b) => {\n      const key = a < b ? `${a}_${b}` : `${b}_${a}`;\n      edges[key] = true;\n    };\n\n    for (let i = 0; i < this.indices.length / 3; i++) {\n      const i3 = i * 3;\n      const a = this.indices[i3];\n      const b = this.indices[i3 + 1];\n      const c = this.indices[i3 + 2];\n      add(a, b);\n      add(b, c);\n      add(c, a);\n    }\n\n    const keys = Object.keys(edges);\n    this.edges = new Int16Array(keys.length * 2);\n\n    for (let i = 0; i < keys.length; i++) {\n      const indices = keys[i].split('_');\n      this.edges[2 * i] = parseInt(indices[0], 10);\n      this.edges[2 * i + 1] = parseInt(indices[1], 10);\n    }\n  }\n  /**\n   * Get an edge vertex\n   * @param firstOrSecond 0 or 1, depending on which one of the vertices you need.\n   * @param vertexStore Where to store the result\n   */\n\n\n  getEdgeVertex(edgeIndex, firstOrSecond, vertexStore) {\n    const vertexIndex = this.edges[edgeIndex * 2 + (firstOrSecond ? 1 : 0)];\n    this.getVertex(vertexIndex, vertexStore);\n  }\n  /**\n   * Get a vector along an edge.\n   */\n\n\n  getEdgeVector(edgeIndex, vectorStore) {\n    const va = getEdgeVector_va;\n    const vb = getEdgeVector_vb;\n    this.getEdgeVertex(edgeIndex, 0, va);\n    this.getEdgeVertex(edgeIndex, 1, vb);\n    vb.vsub(va, vectorStore);\n  }\n  /**\n   * Get face normal given 3 vertices\n   */\n\n\n  static computeNormal(va, vb, vc, target) {\n    vb.vsub(va, ab);\n    vc.vsub(vb, cb);\n    cb.cross(ab, target);\n\n    if (!target.isZero()) {\n      target.normalize();\n    }\n  }\n  /**\n   * Get vertex i.\n   * @return The \"out\" vector object\n   */\n\n\n  getVertex(i, out) {\n    const scale = this.scale;\n\n    this._getUnscaledVertex(i, out);\n\n    out.x *= scale.x;\n    out.y *= scale.y;\n    out.z *= scale.z;\n    return out;\n  }\n  /**\n   * Get raw vertex i\n   * @return The \"out\" vector object\n   */\n\n\n  _getUnscaledVertex(i, out) {\n    const i3 = i * 3;\n    const vertices = this.vertices;\n    return out.set(vertices[i3], vertices[i3 + 1], vertices[i3 + 2]);\n  }\n  /**\n   * Get a vertex from the trimesh,transformed by the given position and quaternion.\n   * @return The \"out\" vector object\n   */\n\n\n  getWorldVertex(i, pos, quat, out) {\n    this.getVertex(i, out);\n    Transform.pointToWorldFrame(pos, quat, out, out);\n    return out;\n  }\n  /**\n   * Get the three vertices for triangle i.\n   */\n\n\n  getTriangleVertices(i, a, b, c) {\n    const i3 = i * 3;\n    this.getVertex(this.indices[i3], a);\n    this.getVertex(this.indices[i3 + 1], b);\n    this.getVertex(this.indices[i3 + 2], c);\n  }\n  /**\n   * Compute the normal of triangle i.\n   * @return The \"target\" vector object\n   */\n\n\n  getNormal(i, target) {\n    const i3 = i * 3;\n    return target.set(this.normals[i3], this.normals[i3 + 1], this.normals[i3 + 2]);\n  }\n  /**\n   * @return The \"target\" vector object\n   */\n\n\n  calculateLocalInertia(mass, target) {\n    // Approximate with box inertia\n    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n    this.computeLocalAABB(cli_aabb);\n    const x = cli_aabb.upperBound.x - cli_aabb.lowerBound.x;\n    const y = cli_aabb.upperBound.y - cli_aabb.lowerBound.y;\n    const z = cli_aabb.upperBound.z - cli_aabb.lowerBound.z;\n    return target.set(1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * z * 2 * z), 1.0 / 12.0 * mass * (2 * x * 2 * x + 2 * z * 2 * z), 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * x * 2 * x));\n  }\n  /**\n   * Compute the local AABB for the trimesh\n   */\n\n\n  computeLocalAABB(aabb) {\n    const l = aabb.lowerBound;\n    const u = aabb.upperBound;\n    const n = this.vertices.length;\n    this.vertices;\n    const v = computeLocalAABB_worldVert;\n    this.getVertex(0, v);\n    l.copy(v);\n    u.copy(v);\n\n    for (let i = 0; i !== n; i++) {\n      this.getVertex(i, v);\n\n      if (v.x < l.x) {\n        l.x = v.x;\n      } else if (v.x > u.x) {\n        u.x = v.x;\n      }\n\n      if (v.y < l.y) {\n        l.y = v.y;\n      } else if (v.y > u.y) {\n        u.y = v.y;\n      }\n\n      if (v.z < l.z) {\n        l.z = v.z;\n      } else if (v.z > u.z) {\n        u.z = v.z;\n      }\n    }\n  }\n  /**\n   * Update the `.aabb` property\n   */\n\n\n  updateAABB() {\n    this.computeLocalAABB(this.aabb);\n  }\n  /**\n   * Will update the `.boundingSphereRadius` property\n   */\n\n\n  updateBoundingSphereRadius() {\n    // Assume points are distributed with local (0,0,0) as center\n    let max2 = 0;\n    const vertices = this.vertices;\n    const v = new Vec3();\n\n    for (let i = 0, N = vertices.length / 3; i !== N; i++) {\n      this.getVertex(i, v);\n      const norm2 = v.lengthSquared();\n\n      if (norm2 > max2) {\n        max2 = norm2;\n      }\n    }\n\n    this.boundingSphereRadius = Math.sqrt(max2);\n  }\n  /**\n   * calculateWorldAABB\n   */\n\n\n  calculateWorldAABB(pos, quat, min, max) {\n    /*\n        const n = this.vertices.length / 3,\n            verts = this.vertices;\n        const minx,miny,minz,maxx,maxy,maxz;\n         const v = tempWorldVertex;\n        for(let i=0; i<n; i++){\n            this.getVertex(i, v);\n            quat.vmult(v, v);\n            pos.vadd(v, v);\n            if (v.x < minx || minx===undefined){\n                minx = v.x;\n            } else if(v.x > maxx || maxx===undefined){\n                maxx = v.x;\n            }\n             if (v.y < miny || miny===undefined){\n                miny = v.y;\n            } else if(v.y > maxy || maxy===undefined){\n                maxy = v.y;\n            }\n             if (v.z < minz || minz===undefined){\n                minz = v.z;\n            } else if(v.z > maxz || maxz===undefined){\n                maxz = v.z;\n            }\n        }\n        min.set(minx,miny,minz);\n        max.set(maxx,maxy,maxz);\n        */\n    // Faster approximation using local AABB\n    const frame = calculateWorldAABB_frame;\n    const result = calculateWorldAABB_aabb;\n    frame.position = pos;\n    frame.quaternion = quat;\n    this.aabb.toWorldFrame(frame, result);\n    min.copy(result.lowerBound);\n    max.copy(result.upperBound);\n  }\n  /**\n   * Get approximate volume\n   */\n\n\n  volume() {\n    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n  }\n  /**\n   * Create a Trimesh instance, shaped as a torus.\n   */\n\n\n  static createTorus(radius, tube, radialSegments, tubularSegments, arc) {\n    if (radius === void 0) {\n      radius = 1;\n    }\n\n    if (tube === void 0) {\n      tube = 0.5;\n    }\n\n    if (radialSegments === void 0) {\n      radialSegments = 8;\n    }\n\n    if (tubularSegments === void 0) {\n      tubularSegments = 6;\n    }\n\n    if (arc === void 0) {\n      arc = Math.PI * 2;\n    }\n\n    const vertices = [];\n    const indices = [];\n\n    for (let j = 0; j <= radialSegments; j++) {\n      for (let i = 0; i <= tubularSegments; i++) {\n        const u = i / tubularSegments * arc;\n        const v = j / radialSegments * Math.PI * 2;\n        const x = (radius + tube * Math.cos(v)) * Math.cos(u);\n        const y = (radius + tube * Math.cos(v)) * Math.sin(u);\n        const z = tube * Math.sin(v);\n        vertices.push(x, y, z);\n      }\n    }\n\n    for (let j = 1; j <= radialSegments; j++) {\n      for (let i = 1; i <= tubularSegments; i++) {\n        const a = (tubularSegments + 1) * j + i - 1;\n        const b = (tubularSegments + 1) * (j - 1) + i - 1;\n        const c = (tubularSegments + 1) * (j - 1) + i;\n        const d = (tubularSegments + 1) * j + i;\n        indices.push(a, b, d);\n        indices.push(b, c, d);\n      }\n    }\n\n    return new Trimesh(vertices, indices);\n  }\n\n}\nconst computeNormals_n = new Vec3();\nconst unscaledAABB = new AABB();\nconst getEdgeVector_va = new Vec3();\nconst getEdgeVector_vb = new Vec3();\nconst cb = new Vec3();\nconst ab = new Vec3();\nconst va = new Vec3();\nconst vb = new Vec3();\nconst vc = new Vec3();\nconst cli_aabb = new AABB();\nconst computeLocalAABB_worldVert = new Vec3();\nconst calculateWorldAABB_frame = new Transform();\nconst calculateWorldAABB_aabb = new AABB();\n\n/**\n * Constraint equation solver base class.\n */\nclass Solver {\n  /**\n   * All equations to be solved\n   */\n\n  /**\n   * @todo remove useless constructor\n   */\n  constructor() {\n    this.equations = [];\n  }\n  /**\n   * Should be implemented in subclasses!\n   * @todo use abstract\n   * @return number of iterations performed\n   */\n\n\n  solve(dt, world) {\n    return (// Should return the number of iterations done!\n      0\n    );\n  }\n  /**\n   * Add an equation\n   */\n\n\n  addEquation(eq) {\n    if (eq.enabled && !eq.bi.isTrigger && !eq.bj.isTrigger) {\n      this.equations.push(eq);\n    }\n  }\n  /**\n   * Remove an equation\n   */\n\n\n  removeEquation(eq) {\n    const eqs = this.equations;\n    const i = eqs.indexOf(eq);\n\n    if (i !== -1) {\n      eqs.splice(i, 1);\n    }\n  }\n  /**\n   * Add all equations\n   */\n\n\n  removeAllEquations() {\n    this.equations.length = 0;\n  }\n\n}\n\n/**\n * Constraint equation Gauss-Seidel solver.\n * @todo The spook parameters should be specified for each constraint, not globally.\n * @see https://www8.cs.umu.se/kurser/5DV058/VT09/lectures/spooknotes.pdf\n */\nclass GSSolver extends Solver {\n  /**\n   * The number of solver iterations determines quality of the constraints in the world.\n   * The more iterations, the more correct simulation. More iterations need more computations though. If you have a large gravity force in your world, you will need more iterations.\n   */\n\n  /**\n   * When tolerance is reached, the system is assumed to be converged.\n   */\n\n  /**\n   * @todo remove useless constructor\n   */\n  constructor() {\n    super();\n    this.iterations = 10;\n    this.tolerance = 1e-7;\n  }\n  /**\n   * Solve\n   * @return number of iterations performed\n   */\n\n\n  solve(dt, world) {\n    let iter = 0;\n    const maxIter = this.iterations;\n    const tolSquared = this.tolerance * this.tolerance;\n    const equations = this.equations;\n    const Neq = equations.length;\n    const bodies = world.bodies;\n    const Nbodies = bodies.length;\n    const h = dt;\n    let B;\n    let invC;\n    let deltalambda;\n    let deltalambdaTot;\n    let GWlambda;\n    let lambdaj; // Update solve mass\n\n    if (Neq !== 0) {\n      for (let i = 0; i !== Nbodies; i++) {\n        bodies[i].updateSolveMassProperties();\n      }\n    } // Things that do not change during iteration can be computed once\n\n\n    const invCs = GSSolver_solve_invCs;\n    const Bs = GSSolver_solve_Bs;\n    const lambda = GSSolver_solve_lambda;\n    invCs.length = Neq;\n    Bs.length = Neq;\n    lambda.length = Neq;\n\n    for (let i = 0; i !== Neq; i++) {\n      const c = equations[i];\n      lambda[i] = 0.0;\n      Bs[i] = c.computeB(h);\n      invCs[i] = 1.0 / c.computeC();\n    }\n\n    if (Neq !== 0) {\n      // Reset vlambda\n      for (let i = 0; i !== Nbodies; i++) {\n        const b = bodies[i];\n        const vlambda = b.vlambda;\n        const wlambda = b.wlambda;\n        vlambda.set(0, 0, 0);\n        wlambda.set(0, 0, 0);\n      } // Iterate over equations\n\n\n      for (iter = 0; iter !== maxIter; iter++) {\n        // Accumulate the total error for each iteration.\n        deltalambdaTot = 0.0;\n\n        for (let j = 0; j !== Neq; j++) {\n          const c = equations[j]; // Compute iteration\n\n          B = Bs[j];\n          invC = invCs[j];\n          lambdaj = lambda[j];\n          GWlambda = c.computeGWlambda();\n          deltalambda = invC * (B - GWlambda - c.eps * lambdaj); // Clamp if we are not within the min/max interval\n\n          if (lambdaj + deltalambda < c.minForce) {\n            deltalambda = c.minForce - lambdaj;\n          } else if (lambdaj + deltalambda > c.maxForce) {\n            deltalambda = c.maxForce - lambdaj;\n          }\n\n          lambda[j] += deltalambda;\n          deltalambdaTot += deltalambda > 0.0 ? deltalambda : -deltalambda; // abs(deltalambda)\n\n          c.addToWlambda(deltalambda);\n        } // If the total error is small enough - stop iterate\n\n\n        if (deltalambdaTot * deltalambdaTot < tolSquared) {\n          break;\n        }\n      } // Add result to velocity\n\n\n      for (let i = 0; i !== Nbodies; i++) {\n        const b = bodies[i];\n        const v = b.velocity;\n        const w = b.angularVelocity;\n        b.vlambda.vmul(b.linearFactor, b.vlambda);\n        v.vadd(b.vlambda, v);\n        b.wlambda.vmul(b.angularFactor, b.wlambda);\n        w.vadd(b.wlambda, w);\n      } // Set the `.multiplier` property of each equation\n\n\n      let l = equations.length;\n      const invDt = 1 / h;\n\n      while (l--) {\n        equations[l].multiplier = lambda[l] * invDt;\n      }\n    }\n\n    return iter;\n  }\n\n} // Just temporary number holders that we want to reuse each iteration.\n\nconst GSSolver_solve_lambda = [];\nconst GSSolver_solve_invCs = [];\nconst GSSolver_solve_Bs = [];\n\n/**\n * Splits the equations into islands and solves them independently. Can improve performance.\n */\nclass SplitSolver extends Solver {\n  /**\n   * The number of solver iterations determines quality of the constraints in the world. The more iterations, the more correct simulation. More iterations need more computations though. If you have a large gravity force in your world, you will need more iterations.\n   */\n\n  /**\n   * When tolerance is reached, the system is assumed to be converged.\n   */\n\n  /** subsolver */\n  constructor(subsolver) {\n    super();\n    this.iterations = 10;\n    this.tolerance = 1e-7;\n    this.subsolver = subsolver;\n    this.nodes = [];\n    this.nodePool = []; // Create needed nodes, reuse if possible\n\n    while (this.nodePool.length < 128) {\n      this.nodePool.push(this.createNode());\n    }\n  }\n  /**\n   * createNode\n   */\n\n\n  createNode() {\n    return {\n      body: null,\n      children: [],\n      eqs: [],\n      visited: false\n    };\n  }\n  /**\n   * Solve the subsystems\n   * @return number of iterations performed\n   */\n\n\n  solve(dt, world) {\n    const nodes = SplitSolver_solve_nodes;\n    const nodePool = this.nodePool;\n    const bodies = world.bodies;\n    const equations = this.equations;\n    const Neq = equations.length;\n    const Nbodies = bodies.length;\n    const subsolver = this.subsolver; // Create needed nodes, reuse if possible\n\n    while (nodePool.length < Nbodies) {\n      nodePool.push(this.createNode());\n    }\n\n    nodes.length = Nbodies;\n\n    for (let i = 0; i < Nbodies; i++) {\n      nodes[i] = nodePool[i];\n    } // Reset node values\n\n\n    for (let i = 0; i !== Nbodies; i++) {\n      const node = nodes[i];\n      node.body = bodies[i];\n      node.children.length = 0;\n      node.eqs.length = 0;\n      node.visited = false;\n    }\n\n    for (let k = 0; k !== Neq; k++) {\n      const eq = equations[k];\n      const i = bodies.indexOf(eq.bi);\n      const j = bodies.indexOf(eq.bj);\n      const ni = nodes[i];\n      const nj = nodes[j];\n      ni.children.push(nj);\n      ni.eqs.push(eq);\n      nj.children.push(ni);\n      nj.eqs.push(eq);\n    }\n\n    let child;\n    let n = 0;\n    let eqs = SplitSolver_solve_eqs;\n    subsolver.tolerance = this.tolerance;\n    subsolver.iterations = this.iterations;\n    const dummyWorld = SplitSolver_solve_dummyWorld;\n\n    while (child = getUnvisitedNode(nodes)) {\n      eqs.length = 0;\n      dummyWorld.bodies.length = 0;\n      bfs(child, visitFunc, dummyWorld.bodies, eqs);\n      const Neqs = eqs.length;\n      eqs = eqs.sort(sortById);\n\n      for (let i = 0; i !== Neqs; i++) {\n        subsolver.addEquation(eqs[i]);\n      }\n\n      subsolver.solve(dt, dummyWorld);\n      subsolver.removeAllEquations();\n      n++;\n    }\n\n    return n;\n  }\n\n} // Returns the number of subsystems\n\nconst SplitSolver_solve_nodes = []; // All allocated node objects\n\nconst SplitSolver_solve_eqs = []; // Temp array\n\nconst SplitSolver_solve_dummyWorld = {\n  bodies: []\n}; // Temp object\n\nconst STATIC = Body.STATIC;\n\nfunction getUnvisitedNode(nodes) {\n  const Nnodes = nodes.length;\n\n  for (let i = 0; i !== Nnodes; i++) {\n    const node = nodes[i];\n\n    if (!node.visited && !(node.body.type & STATIC)) {\n      return node;\n    }\n  }\n\n  return false;\n}\n\nconst queue = [];\n\nfunction bfs(root, visitFunc, bds, eqs) {\n  queue.push(root);\n  root.visited = true;\n  visitFunc(root, bds, eqs);\n\n  while (queue.length) {\n    const node = queue.pop(); // Loop over unvisited child nodes\n\n    let child;\n\n    while (child = getUnvisitedNode(node.children)) {\n      child.visited = true;\n      visitFunc(child, bds, eqs);\n      queue.push(child);\n    }\n  }\n}\n\nfunction visitFunc(node, bds, eqs) {\n  bds.push(node.body);\n  const Neqs = node.eqs.length;\n\n  for (let i = 0; i !== Neqs; i++) {\n    const eq = node.eqs[i];\n\n    if (!eqs.includes(eq)) {\n      eqs.push(eq);\n    }\n  }\n}\n\nfunction sortById(a, b) {\n  return b.id - a.id;\n}\n\n/**\n * For pooling objects that can be reused.\n */\nclass Pool {\n  constructor() {\n    this.objects = [];\n    this.type = Object;\n  }\n\n  /**\n   * Release an object after use\n   */\n  release() {\n    const Nargs = arguments.length;\n\n    for (let i = 0; i !== Nargs; i++) {\n      this.objects.push(i < 0 || arguments.length <= i ? undefined : arguments[i]);\n    }\n\n    return this;\n  }\n  /**\n   * Get an object\n   */\n\n\n  get() {\n    if (this.objects.length === 0) {\n      return this.constructObject();\n    } else {\n      return this.objects.pop();\n    }\n  }\n  /**\n   * Construct an object. Should be implemented in each subclass.\n   */\n\n\n  constructObject() {\n    throw new Error('constructObject() not implemented in this Pool subclass yet!');\n  }\n  /**\n   * @return Self, for chaining\n   */\n\n\n  resize(size) {\n    const objects = this.objects;\n\n    while (objects.length > size) {\n      objects.pop();\n    }\n\n    while (objects.length < size) {\n      objects.push(this.constructObject());\n    }\n\n    return this;\n  }\n\n}\n\n/**\n * Vec3Pool\n */\n\nclass Vec3Pool extends Pool {\n  constructor() {\n    super(...arguments);\n    this.type = Vec3;\n  }\n\n  /**\n   * Construct a vector\n   */\n  constructObject() {\n    return new Vec3();\n  }\n\n}\n\n// Naming rule: based of the order in SHAPE_TYPES,\n// the first part of the method is formed by the\n// shape type that comes before, in the second part\n// there is the shape type that comes after in the SHAPE_TYPES list\nconst COLLISION_TYPES = {\n  sphereSphere: Shape.types.SPHERE,\n  spherePlane: Shape.types.SPHERE | Shape.types.PLANE,\n  boxBox: Shape.types.BOX | Shape.types.BOX,\n  sphereBox: Shape.types.SPHERE | Shape.types.BOX,\n  planeBox: Shape.types.PLANE | Shape.types.BOX,\n  convexConvex: Shape.types.CONVEXPOLYHEDRON,\n  sphereConvex: Shape.types.SPHERE | Shape.types.CONVEXPOLYHEDRON,\n  planeConvex: Shape.types.PLANE | Shape.types.CONVEXPOLYHEDRON,\n  boxConvex: Shape.types.BOX | Shape.types.CONVEXPOLYHEDRON,\n  sphereHeightfield: Shape.types.SPHERE | Shape.types.HEIGHTFIELD,\n  boxHeightfield: Shape.types.BOX | Shape.types.HEIGHTFIELD,\n  convexHeightfield: Shape.types.CONVEXPOLYHEDRON | Shape.types.HEIGHTFIELD,\n  sphereParticle: Shape.types.PARTICLE | Shape.types.SPHERE,\n  planeParticle: Shape.types.PLANE | Shape.types.PARTICLE,\n  boxParticle: Shape.types.BOX | Shape.types.PARTICLE,\n  convexParticle: Shape.types.PARTICLE | Shape.types.CONVEXPOLYHEDRON,\n  cylinderCylinder: Shape.types.CYLINDER,\n  sphereCylinder: Shape.types.SPHERE | Shape.types.CYLINDER,\n  planeCylinder: Shape.types.PLANE | Shape.types.CYLINDER,\n  boxCylinder: Shape.types.BOX | Shape.types.CYLINDER,\n  convexCylinder: Shape.types.CONVEXPOLYHEDRON | Shape.types.CYLINDER,\n  heightfieldCylinder: Shape.types.HEIGHTFIELD | Shape.types.CYLINDER,\n  particleCylinder: Shape.types.PARTICLE | Shape.types.CYLINDER,\n  sphereTrimesh: Shape.types.SPHERE | Shape.types.TRIMESH,\n  planeTrimesh: Shape.types.PLANE | Shape.types.TRIMESH\n};\n\n/**\n * Helper class for the World. Generates ContactEquations.\n * @todo Sphere-ConvexPolyhedron contacts\n * @todo Contact reduction\n * @todo should move methods to prototype\n */\nclass Narrowphase {\n  /**\n   * Internal storage of pooled contact points.\n   */\n\n  /**\n   * Pooled vectors.\n   */\n  get [COLLISION_TYPES.sphereSphere]() {\n    return this.sphereSphere;\n  }\n\n  get [COLLISION_TYPES.spherePlane]() {\n    return this.spherePlane;\n  }\n\n  get [COLLISION_TYPES.boxBox]() {\n    return this.boxBox;\n  }\n\n  get [COLLISION_TYPES.sphereBox]() {\n    return this.sphereBox;\n  }\n\n  get [COLLISION_TYPES.planeBox]() {\n    return this.planeBox;\n  }\n\n  get [COLLISION_TYPES.convexConvex]() {\n    return this.convexConvex;\n  }\n\n  get [COLLISION_TYPES.sphereConvex]() {\n    return this.sphereConvex;\n  }\n\n  get [COLLISION_TYPES.planeConvex]() {\n    return this.planeConvex;\n  }\n\n  get [COLLISION_TYPES.boxConvex]() {\n    return this.boxConvex;\n  }\n\n  get [COLLISION_TYPES.sphereHeightfield]() {\n    return this.sphereHeightfield;\n  }\n\n  get [COLLISION_TYPES.boxHeightfield]() {\n    return this.boxHeightfield;\n  }\n\n  get [COLLISION_TYPES.convexHeightfield]() {\n    return this.convexHeightfield;\n  }\n\n  get [COLLISION_TYPES.sphereParticle]() {\n    return this.sphereParticle;\n  }\n\n  get [COLLISION_TYPES.planeParticle]() {\n    return this.planeParticle;\n  }\n\n  get [COLLISION_TYPES.boxParticle]() {\n    return this.boxParticle;\n  }\n\n  get [COLLISION_TYPES.convexParticle]() {\n    return this.convexParticle;\n  }\n\n  get [COLLISION_TYPES.cylinderCylinder]() {\n    return this.convexConvex;\n  }\n\n  get [COLLISION_TYPES.sphereCylinder]() {\n    return this.sphereConvex;\n  }\n\n  get [COLLISION_TYPES.planeCylinder]() {\n    return this.planeConvex;\n  }\n\n  get [COLLISION_TYPES.boxCylinder]() {\n    return this.boxConvex;\n  }\n\n  get [COLLISION_TYPES.convexCylinder]() {\n    return this.convexConvex;\n  }\n\n  get [COLLISION_TYPES.heightfieldCylinder]() {\n    return this.heightfieldCylinder;\n  }\n\n  get [COLLISION_TYPES.particleCylinder]() {\n    return this.particleCylinder;\n  }\n\n  get [COLLISION_TYPES.sphereTrimesh]() {\n    return this.sphereTrimesh;\n  }\n\n  get [COLLISION_TYPES.planeTrimesh]() {\n    return this.planeTrimesh;\n  } // get [COLLISION_TYPES.convexTrimesh]() {\n  //   return this.convexTrimesh\n  // }\n\n\n  constructor(world) {\n    this.contactPointPool = [];\n    this.frictionEquationPool = [];\n    this.result = [];\n    this.frictionResult = [];\n    this.v3pool = new Vec3Pool();\n    this.world = world;\n    this.currentContactMaterial = world.defaultContactMaterial;\n    this.enableFrictionReduction = false;\n  }\n  /**\n   * Make a contact object, by using the internal pool or creating a new one.\n   */\n\n\n  createContactEquation(bi, bj, si, sj, overrideShapeA, overrideShapeB) {\n    let c;\n\n    if (this.contactPointPool.length) {\n      c = this.contactPointPool.pop();\n      c.bi = bi;\n      c.bj = bj;\n    } else {\n      c = new ContactEquation(bi, bj);\n    }\n\n    c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;\n    const cm = this.currentContactMaterial;\n    c.restitution = cm.restitution;\n    c.setSpookParams(cm.contactEquationStiffness, cm.contactEquationRelaxation, this.world.dt);\n    const matA = si.material || bi.material;\n    const matB = sj.material || bj.material;\n\n    if (matA && matB && matA.restitution >= 0 && matB.restitution >= 0) {\n      c.restitution = matA.restitution * matB.restitution;\n    }\n\n    c.si = overrideShapeA || si;\n    c.sj = overrideShapeB || sj;\n    return c;\n  }\n\n  createFrictionEquationsFromContact(contactEquation, outArray) {\n    const bodyA = contactEquation.bi;\n    const bodyB = contactEquation.bj;\n    const shapeA = contactEquation.si;\n    const shapeB = contactEquation.sj;\n    const world = this.world;\n    const cm = this.currentContactMaterial; // If friction or restitution were specified in the material, use them\n\n    let friction = cm.friction;\n    const matA = shapeA.material || bodyA.material;\n    const matB = shapeB.material || bodyB.material;\n\n    if (matA && matB && matA.friction >= 0 && matB.friction >= 0) {\n      friction = matA.friction * matB.friction;\n    }\n\n    if (friction > 0) {\n      // Create 2 tangent equations\n      // Users may provide a force different from global gravity to use when computing contact friction.\n      const mug = friction * (world.frictionGravity || world.gravity).length();\n      let reducedMass = bodyA.invMass + bodyB.invMass;\n\n      if (reducedMass > 0) {\n        reducedMass = 1 / reducedMass;\n      }\n\n      const pool = this.frictionEquationPool;\n      const c1 = pool.length ? pool.pop() : new FrictionEquation(bodyA, bodyB, mug * reducedMass);\n      const c2 = pool.length ? pool.pop() : new FrictionEquation(bodyA, bodyB, mug * reducedMass);\n      c1.bi = c2.bi = bodyA;\n      c1.bj = c2.bj = bodyB;\n      c1.minForce = c2.minForce = -mug * reducedMass;\n      c1.maxForce = c2.maxForce = mug * reducedMass; // Copy over the relative vectors\n\n      c1.ri.copy(contactEquation.ri);\n      c1.rj.copy(contactEquation.rj);\n      c2.ri.copy(contactEquation.ri);\n      c2.rj.copy(contactEquation.rj); // Construct tangents\n\n      contactEquation.ni.tangents(c1.t, c2.t); // Set spook params\n\n      c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);\n      c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, world.dt);\n      c1.enabled = c2.enabled = contactEquation.enabled;\n      outArray.push(c1, c2);\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Take the average N latest contact point on the plane.\n   */\n\n\n  createFrictionFromAverage(numContacts) {\n    // The last contactEquation\n    let c = this.result[this.result.length - 1]; // Create the result: two \"average\" friction equations\n\n    if (!this.createFrictionEquationsFromContact(c, this.frictionResult) || numContacts === 1) {\n      return;\n    }\n\n    const f1 = this.frictionResult[this.frictionResult.length - 2];\n    const f2 = this.frictionResult[this.frictionResult.length - 1];\n    averageNormal.setZero();\n    averageContactPointA.setZero();\n    averageContactPointB.setZero();\n    const bodyA = c.bi;\n    c.bj;\n\n    for (let i = 0; i !== numContacts; i++) {\n      c = this.result[this.result.length - 1 - i];\n\n      if (c.bi !== bodyA) {\n        averageNormal.vadd(c.ni, averageNormal);\n        averageContactPointA.vadd(c.ri, averageContactPointA);\n        averageContactPointB.vadd(c.rj, averageContactPointB);\n      } else {\n        averageNormal.vsub(c.ni, averageNormal);\n        averageContactPointA.vadd(c.rj, averageContactPointA);\n        averageContactPointB.vadd(c.ri, averageContactPointB);\n      }\n    }\n\n    const invNumContacts = 1 / numContacts;\n    averageContactPointA.scale(invNumContacts, f1.ri);\n    averageContactPointB.scale(invNumContacts, f1.rj);\n    f2.ri.copy(f1.ri); // Should be the same\n\n    f2.rj.copy(f1.rj);\n    averageNormal.normalize();\n    averageNormal.tangents(f1.t, f2.t); // return eq;\n  }\n  /**\n   * Generate all contacts between a list of body pairs\n   * @param p1 Array of body indices\n   * @param p2 Array of body indices\n   * @param result Array to store generated contacts\n   * @param oldcontacts Optional. Array of reusable contact objects\n   */\n\n\n  getContacts(p1, p2, world, result, oldcontacts, frictionResult, frictionPool) {\n    // Save old contact objects\n    this.contactPointPool = oldcontacts;\n    this.frictionEquationPool = frictionPool;\n    this.result = result;\n    this.frictionResult = frictionResult;\n    const qi = tmpQuat1;\n    const qj = tmpQuat2;\n    const xi = tmpVec1;\n    const xj = tmpVec2;\n\n    for (let k = 0, N = p1.length; k !== N; k++) {\n      // Get current collision bodies\n      const bi = p1[k];\n      const bj = p2[k]; // Get contact material\n\n      let bodyContactMaterial = null;\n\n      if (bi.material && bj.material) {\n        bodyContactMaterial = world.getContactMaterial(bi.material, bj.material) || null;\n      }\n\n      const justTest = bi.type & Body.KINEMATIC && bj.type & Body.STATIC || bi.type & Body.STATIC && bj.type & Body.KINEMATIC || bi.type & Body.KINEMATIC && bj.type & Body.KINEMATIC;\n\n      for (let i = 0; i < bi.shapes.length; i++) {\n        bi.quaternion.mult(bi.shapeOrientations[i], qi);\n        bi.quaternion.vmult(bi.shapeOffsets[i], xi);\n        xi.vadd(bi.position, xi);\n        const si = bi.shapes[i];\n\n        for (let j = 0; j < bj.shapes.length; j++) {\n          // Compute world transform of shapes\n          bj.quaternion.mult(bj.shapeOrientations[j], qj);\n          bj.quaternion.vmult(bj.shapeOffsets[j], xj);\n          xj.vadd(bj.position, xj);\n          const sj = bj.shapes[j];\n\n          if (!(si.collisionFilterMask & sj.collisionFilterGroup && sj.collisionFilterMask & si.collisionFilterGroup)) {\n            continue;\n          }\n\n          if (xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius) {\n            continue;\n          } // Get collision material\n\n\n          let shapeContactMaterial = null;\n\n          if (si.material && sj.material) {\n            shapeContactMaterial = world.getContactMaterial(si.material, sj.material) || null;\n          }\n\n          this.currentContactMaterial = shapeContactMaterial || bodyContactMaterial || world.defaultContactMaterial; // Get contacts\n\n          const resolverIndex = si.type | sj.type;\n          const resolver = this[resolverIndex];\n\n          if (resolver) {\n            let retval = false; // TO DO: investigate why sphereParticle and convexParticle\n            // resolvers expect si and sj shapes to be in reverse order\n            // (i.e. larger integer value type first instead of smaller first)\n\n            if (si.type < sj.type) {\n              retval = resolver.call(this, si, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n            } else {\n              retval = resolver.call(this, sj, si, xj, xi, qj, qi, bj, bi, si, sj, justTest);\n            }\n\n            if (retval && justTest) {\n              // Register overlap\n              world.shapeOverlapKeeper.set(si.id, sj.id);\n              world.bodyOverlapKeeper.set(bi.id, bj.id);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  sphereSphere(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    if (justTest) {\n      return xi.distanceSquared(xj) < (si.radius + sj.radius) ** 2;\n    } // We will have only one contact in this case\n\n\n    const contactEq = this.createContactEquation(bi, bj, si, sj, rsi, rsj); // Contact normal\n\n    xj.vsub(xi, contactEq.ni);\n    contactEq.ni.normalize(); // Contact point locations\n\n    contactEq.ri.copy(contactEq.ni);\n    contactEq.rj.copy(contactEq.ni);\n    contactEq.ri.scale(si.radius, contactEq.ri);\n    contactEq.rj.scale(-sj.radius, contactEq.rj);\n    contactEq.ri.vadd(xi, contactEq.ri);\n    contactEq.ri.vsub(bi.position, contactEq.ri);\n    contactEq.rj.vadd(xj, contactEq.rj);\n    contactEq.rj.vsub(bj.position, contactEq.rj);\n    this.result.push(contactEq);\n    this.createFrictionEquationsFromContact(contactEq, this.frictionResult);\n  }\n\n  spherePlane(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    // We will have one contact in this case\n    const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj); // Contact normal\n\n    r.ni.set(0, 0, 1);\n    qj.vmult(r.ni, r.ni);\n    r.ni.negate(r.ni); // body i is the sphere, flip normal\n\n    r.ni.normalize(); // Needed?\n    // Vector from sphere center to contact point\n\n    r.ni.scale(si.radius, r.ri); // Project down sphere on plane\n\n    xi.vsub(xj, point_on_plane_to_sphere);\n    r.ni.scale(r.ni.dot(point_on_plane_to_sphere), plane_to_sphere_ortho);\n    point_on_plane_to_sphere.vsub(plane_to_sphere_ortho, r.rj); // The sphere position projected to plane\n\n    if (-point_on_plane_to_sphere.dot(r.ni) <= si.radius) {\n      if (justTest) {\n        return true;\n      } // Make it relative to the body\n\n\n      const ri = r.ri;\n      const rj = r.rj;\n      ri.vadd(xi, ri);\n      ri.vsub(bi.position, ri);\n      rj.vadd(xj, rj);\n      rj.vsub(bj.position, rj);\n      this.result.push(r);\n      this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n  }\n\n  boxBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    si.convexPolyhedronRepresentation.material = si.material;\n    sj.convexPolyhedronRepresentation.material = sj.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;\n    return this.convexConvex(si.convexPolyhedronRepresentation, sj.convexPolyhedronRepresentation, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  sphereBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    const v3pool = this.v3pool; // we refer to the box as body j\n\n    const sides = sphereBox_sides;\n    xi.vsub(xj, box_to_sphere);\n    sj.getSideNormals(sides, qj);\n    const R = si.radius;\n\n    let found = false; // Store the resulting side penetration info\n\n    const side_ns = sphereBox_side_ns;\n    const side_ns1 = sphereBox_side_ns1;\n    const side_ns2 = sphereBox_side_ns2;\n    let side_h = null;\n    let side_penetrations = 0;\n    let side_dot1 = 0;\n    let side_dot2 = 0;\n    let side_distance = null;\n\n    for (let idx = 0, nsides = sides.length; idx !== nsides && found === false; idx++) {\n      // Get the plane side normal (ns)\n      const ns = sphereBox_ns;\n      ns.copy(sides[idx]);\n      const h = ns.length();\n      ns.normalize(); // The normal/distance dot product tells which side of the plane we are\n\n      const dot = box_to_sphere.dot(ns);\n\n      if (dot < h + R && dot > 0) {\n        // Intersects plane. Now check the other two dimensions\n        const ns1 = sphereBox_ns1;\n        const ns2 = sphereBox_ns2;\n        ns1.copy(sides[(idx + 1) % 3]);\n        ns2.copy(sides[(idx + 2) % 3]);\n        const h1 = ns1.length();\n        const h2 = ns2.length();\n        ns1.normalize();\n        ns2.normalize();\n        const dot1 = box_to_sphere.dot(ns1);\n        const dot2 = box_to_sphere.dot(ns2);\n\n        if (dot1 < h1 && dot1 > -h1 && dot2 < h2 && dot2 > -h2) {\n          const dist = Math.abs(dot - h - R);\n\n          if (side_distance === null || dist < side_distance) {\n            side_distance = dist;\n            side_dot1 = dot1;\n            side_dot2 = dot2;\n            side_h = h;\n            side_ns.copy(ns);\n            side_ns1.copy(ns1);\n            side_ns2.copy(ns2);\n            side_penetrations++;\n\n            if (justTest) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    if (side_penetrations) {\n      found = true;\n      const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n      side_ns.scale(-R, r.ri); // Sphere r\n\n      r.ni.copy(side_ns);\n      r.ni.negate(r.ni); // Normal should be out of sphere\n\n      side_ns.scale(side_h, side_ns);\n      side_ns1.scale(side_dot1, side_ns1);\n      side_ns.vadd(side_ns1, side_ns);\n      side_ns2.scale(side_dot2, side_ns2);\n      side_ns.vadd(side_ns2, r.rj); // Make relative to bodies\n\n      r.ri.vadd(xi, r.ri);\n      r.ri.vsub(bi.position, r.ri);\n      r.rj.vadd(xj, r.rj);\n      r.rj.vsub(bj.position, r.rj);\n      this.result.push(r);\n      this.createFrictionEquationsFromContact(r, this.frictionResult);\n    } // Check corners\n\n\n    let rj = v3pool.get();\n    const sphere_to_corner = sphereBox_sphere_to_corner;\n\n    for (let j = 0; j !== 2 && !found; j++) {\n      for (let k = 0; k !== 2 && !found; k++) {\n        for (let l = 0; l !== 2 && !found; l++) {\n          rj.set(0, 0, 0);\n\n          if (j) {\n            rj.vadd(sides[0], rj);\n          } else {\n            rj.vsub(sides[0], rj);\n          }\n\n          if (k) {\n            rj.vadd(sides[1], rj);\n          } else {\n            rj.vsub(sides[1], rj);\n          }\n\n          if (l) {\n            rj.vadd(sides[2], rj);\n          } else {\n            rj.vsub(sides[2], rj);\n          } // World position of corner\n\n\n          xj.vadd(rj, sphere_to_corner);\n          sphere_to_corner.vsub(xi, sphere_to_corner);\n\n          if (sphere_to_corner.lengthSquared() < R * R) {\n            if (justTest) {\n              return true;\n            }\n\n            found = true;\n            const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n            r.ri.copy(sphere_to_corner);\n            r.ri.normalize();\n            r.ni.copy(r.ri);\n            r.ri.scale(R, r.ri);\n            r.rj.copy(rj); // Make relative to bodies\n\n            r.ri.vadd(xi, r.ri);\n            r.ri.vsub(bi.position, r.ri);\n            r.rj.vadd(xj, r.rj);\n            r.rj.vsub(bj.position, r.rj);\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n          }\n        }\n      }\n    }\n\n    v3pool.release(rj);\n    rj = null; // Check edges\n\n    const edgeTangent = v3pool.get();\n    const edgeCenter = v3pool.get();\n    const r = v3pool.get(); // r = edge center to sphere center\n\n    const orthogonal = v3pool.get();\n    const dist = v3pool.get();\n    const Nsides = sides.length;\n\n    for (let j = 0; j !== Nsides && !found; j++) {\n      for (let k = 0; k !== Nsides && !found; k++) {\n        if (j % 3 !== k % 3) {\n          // Get edge tangent\n          sides[k].cross(sides[j], edgeTangent);\n          edgeTangent.normalize();\n          sides[j].vadd(sides[k], edgeCenter);\n          r.copy(xi);\n          r.vsub(edgeCenter, r);\n          r.vsub(xj, r);\n          const orthonorm = r.dot(edgeTangent); // distance from edge center to sphere center in the tangent direction\n\n          edgeTangent.scale(orthonorm, orthogonal); // Vector from edge center to sphere center in the tangent direction\n          // Find the third side orthogonal to this one\n\n          let l = 0;\n\n          while (l === j % 3 || l === k % 3) {\n            l++;\n          } // vec from edge center to sphere projected to the plane orthogonal to the edge tangent\n\n\n          dist.copy(xi);\n          dist.vsub(orthogonal, dist);\n          dist.vsub(edgeCenter, dist);\n          dist.vsub(xj, dist); // Distances in tangent direction and distance in the plane orthogonal to it\n\n          const tdist = Math.abs(orthonorm);\n          const ndist = dist.length();\n\n          if (tdist < sides[l].length() && ndist < R) {\n            if (justTest) {\n              return true;\n            }\n\n            found = true;\n            const res = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n            edgeCenter.vadd(orthogonal, res.rj); // box rj\n\n            res.rj.copy(res.rj);\n            dist.negate(res.ni);\n            res.ni.normalize();\n            res.ri.copy(res.rj);\n            res.ri.vadd(xj, res.ri);\n            res.ri.vsub(xi, res.ri);\n            res.ri.normalize();\n            res.ri.scale(R, res.ri); // Make relative to bodies\n\n            res.ri.vadd(xi, res.ri);\n            res.ri.vsub(bi.position, res.ri);\n            res.rj.vadd(xj, res.rj);\n            res.rj.vsub(bj.position, res.rj);\n            this.result.push(res);\n            this.createFrictionEquationsFromContact(res, this.frictionResult);\n          }\n        }\n      }\n    }\n\n    v3pool.release(edgeTangent, edgeCenter, r, orthogonal, dist);\n  }\n\n  planeBox(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    sj.convexPolyhedronRepresentation.material = sj.material;\n    sj.convexPolyhedronRepresentation.collisionResponse = sj.collisionResponse;\n    sj.convexPolyhedronRepresentation.id = sj.id;\n    return this.planeConvex(si, sj.convexPolyhedronRepresentation, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  convexConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest, faceListA, faceListB) {\n    const sepAxis = convexConvex_sepAxis;\n\n    if (xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius) {\n      return;\n    }\n\n    if (si.findSeparatingAxis(sj, xi, qi, xj, qj, sepAxis, faceListA, faceListB)) {\n      const res = [];\n      const q = convexConvex_q;\n      si.clipAgainstHull(xi, qi, sj, xj, qj, sepAxis, -100, 100, res);\n      let numContacts = 0;\n\n      for (let j = 0; j !== res.length; j++) {\n        if (justTest) {\n          return true;\n        }\n\n        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n        const ri = r.ri;\n        const rj = r.rj;\n        sepAxis.negate(r.ni);\n        res[j].normal.negate(q);\n        q.scale(res[j].depth, q);\n        res[j].point.vadd(q, ri);\n        rj.copy(res[j].point); // Contact points are in world coordinates. Transform back to relative\n\n        ri.vsub(xi, ri);\n        rj.vsub(xj, rj); // Make relative to bodies\n\n        ri.vadd(xi, ri);\n        ri.vsub(bi.position, ri);\n        rj.vadd(xj, rj);\n        rj.vsub(bj.position, rj);\n        this.result.push(r);\n        numContacts++;\n\n        if (!this.enableFrictionReduction) {\n          this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n      }\n\n      if (this.enableFrictionReduction && numContacts) {\n        this.createFrictionFromAverage(numContacts);\n      }\n    }\n  }\n\n  sphereConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    const v3pool = this.v3pool;\n    xi.vsub(xj, convex_to_sphere);\n    const normals = sj.faceNormals;\n    const faces = sj.faces;\n    const verts = sj.vertices;\n    const R = si.radius;\n    //     return;\n    // }\n\n    let found = false; // Check corners\n\n    for (let i = 0; i !== verts.length; i++) {\n      const v = verts[i]; // World position of corner\n\n      const worldCorner = sphereConvex_worldCorner;\n      qj.vmult(v, worldCorner);\n      xj.vadd(worldCorner, worldCorner);\n      const sphere_to_corner = sphereConvex_sphereToCorner;\n      worldCorner.vsub(xi, sphere_to_corner);\n\n      if (sphere_to_corner.lengthSquared() < R * R) {\n        if (justTest) {\n          return true;\n        }\n\n        found = true;\n        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n        r.ri.copy(sphere_to_corner);\n        r.ri.normalize();\n        r.ni.copy(r.ri);\n        r.ri.scale(R, r.ri);\n        worldCorner.vsub(xj, r.rj); // Should be relative to the body.\n\n        r.ri.vadd(xi, r.ri);\n        r.ri.vsub(bi.position, r.ri); // Should be relative to the body.\n\n        r.rj.vadd(xj, r.rj);\n        r.rj.vsub(bj.position, r.rj);\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n        return;\n      }\n    } // Check side (plane) intersections\n\n\n    for (let i = 0, nfaces = faces.length; i !== nfaces && found === false; i++) {\n      const normal = normals[i];\n      const face = faces[i]; // Get world-transformed normal of the face\n\n      const worldNormal = sphereConvex_worldNormal;\n      qj.vmult(normal, worldNormal); // Get a world vertex from the face\n\n      const worldPoint = sphereConvex_worldPoint;\n      qj.vmult(verts[face[0]], worldPoint);\n      worldPoint.vadd(xj, worldPoint); // Get a point on the sphere, closest to the face normal\n\n      const worldSpherePointClosestToPlane = sphereConvex_worldSpherePointClosestToPlane;\n      worldNormal.scale(-R, worldSpherePointClosestToPlane);\n      xi.vadd(worldSpherePointClosestToPlane, worldSpherePointClosestToPlane); // Vector from a face point to the closest point on the sphere\n\n      const penetrationVec = sphereConvex_penetrationVec;\n      worldSpherePointClosestToPlane.vsub(worldPoint, penetrationVec); // The penetration. Negative value means overlap.\n\n      const penetration = penetrationVec.dot(worldNormal);\n      const worldPointToSphere = sphereConvex_sphereToWorldPoint;\n      xi.vsub(worldPoint, worldPointToSphere);\n\n      if (penetration < 0 && worldPointToSphere.dot(worldNormal) > 0) {\n        // Intersects plane. Now check if the sphere is inside the face polygon\n        const faceVerts = []; // Face vertices, in world coords\n\n        for (let j = 0, Nverts = face.length; j !== Nverts; j++) {\n          const worldVertex = v3pool.get();\n          qj.vmult(verts[face[j]], worldVertex);\n          xj.vadd(worldVertex, worldVertex);\n          faceVerts.push(worldVertex);\n        }\n\n        if (pointInPolygon(faceVerts, worldNormal, xi)) {\n          // Is the sphere center in the face polygon?\n          if (justTest) {\n            return true;\n          }\n\n          found = true;\n          const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n          worldNormal.scale(-R, r.ri); // Contact offset, from sphere center to contact\n\n          worldNormal.negate(r.ni); // Normal pointing out of sphere\n\n          const penetrationVec2 = v3pool.get();\n          worldNormal.scale(-penetration, penetrationVec2);\n          const penetrationSpherePoint = v3pool.get();\n          worldNormal.scale(-R, penetrationSpherePoint); //xi.vsub(xj).vadd(penetrationSpherePoint).vadd(penetrationVec2 , r.rj);\n\n          xi.vsub(xj, r.rj);\n          r.rj.vadd(penetrationSpherePoint, r.rj);\n          r.rj.vadd(penetrationVec2, r.rj); // Should be relative to the body.\n\n          r.rj.vadd(xj, r.rj);\n          r.rj.vsub(bj.position, r.rj); // Should be relative to the body.\n\n          r.ri.vadd(xi, r.ri);\n          r.ri.vsub(bi.position, r.ri);\n          v3pool.release(penetrationVec2);\n          v3pool.release(penetrationSpherePoint);\n          this.result.push(r);\n          this.createFrictionEquationsFromContact(r, this.frictionResult); // Release world vertices\n\n          for (let j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {\n            v3pool.release(faceVerts[j]);\n          }\n\n          return; // We only expect *one* face contact\n        } else {\n          // Edge?\n          for (let j = 0; j !== face.length; j++) {\n            // Get two world transformed vertices\n            const v1 = v3pool.get();\n            const v2 = v3pool.get();\n            qj.vmult(verts[face[(j + 1) % face.length]], v1);\n            qj.vmult(verts[face[(j + 2) % face.length]], v2);\n            xj.vadd(v1, v1);\n            xj.vadd(v2, v2); // Construct edge vector\n\n            const edge = sphereConvex_edge;\n            v2.vsub(v1, edge); // Construct the same vector, but normalized\n\n            const edgeUnit = sphereConvex_edgeUnit;\n            edge.unit(edgeUnit); // p is xi projected onto the edge\n\n            const p = v3pool.get();\n            const v1_to_xi = v3pool.get();\n            xi.vsub(v1, v1_to_xi);\n            const dot = v1_to_xi.dot(edgeUnit);\n            edgeUnit.scale(dot, p);\n            p.vadd(v1, p); // Compute a vector from p to the center of the sphere\n\n            const xi_to_p = v3pool.get();\n            p.vsub(xi, xi_to_p); // Collision if the edge-sphere distance is less than the radius\n            // AND if p is in between v1 and v2\n\n            if (dot > 0 && dot * dot < edge.lengthSquared() && xi_to_p.lengthSquared() < R * R) {\n              // Collision if the edge-sphere distance is less than the radius\n              // Edge contact!\n              if (justTest) {\n                return true;\n              }\n\n              const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n              p.vsub(xj, r.rj);\n              p.vsub(xi, r.ni);\n              r.ni.normalize();\n              r.ni.scale(R, r.ri); // Should be relative to the body.\n\n              r.rj.vadd(xj, r.rj);\n              r.rj.vsub(bj.position, r.rj); // Should be relative to the body.\n\n              r.ri.vadd(xi, r.ri);\n              r.ri.vsub(bi.position, r.ri);\n              this.result.push(r);\n              this.createFrictionEquationsFromContact(r, this.frictionResult); // Release world vertices\n\n              for (let j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {\n                v3pool.release(faceVerts[j]);\n              }\n\n              v3pool.release(v1);\n              v3pool.release(v2);\n              v3pool.release(p);\n              v3pool.release(xi_to_p);\n              v3pool.release(v1_to_xi);\n              return;\n            }\n\n            v3pool.release(v1);\n            v3pool.release(v2);\n            v3pool.release(p);\n            v3pool.release(xi_to_p);\n            v3pool.release(v1_to_xi);\n          }\n        } // Release world vertices\n\n\n        for (let j = 0, Nfaceverts = faceVerts.length; j !== Nfaceverts; j++) {\n          v3pool.release(faceVerts[j]);\n        }\n      }\n    }\n  }\n\n  planeConvex(planeShape, convexShape, planePosition, convexPosition, planeQuat, convexQuat, planeBody, convexBody, si, sj, justTest) {\n    // Simply return the points behind the plane.\n    const worldVertex = planeConvex_v;\n    const worldNormal = planeConvex_normal;\n    worldNormal.set(0, 0, 1);\n    planeQuat.vmult(worldNormal, worldNormal); // Turn normal according to plane orientation\n\n    let numContacts = 0;\n    const relpos = planeConvex_relpos;\n\n    for (let i = 0; i !== convexShape.vertices.length; i++) {\n      // Get world convex vertex\n      worldVertex.copy(convexShape.vertices[i]);\n      convexQuat.vmult(worldVertex, worldVertex);\n      convexPosition.vadd(worldVertex, worldVertex);\n      worldVertex.vsub(planePosition, relpos);\n      const dot = worldNormal.dot(relpos);\n\n      if (dot <= 0.0) {\n        if (justTest) {\n          return true;\n        }\n\n        const r = this.createContactEquation(planeBody, convexBody, planeShape, convexShape, si, sj); // Get vertex position projected on plane\n\n        const projected = planeConvex_projected;\n        worldNormal.scale(worldNormal.dot(relpos), projected);\n        worldVertex.vsub(projected, projected);\n        projected.vsub(planePosition, r.ri); // From plane to vertex projected on plane\n\n        r.ni.copy(worldNormal); // Contact normal is the plane normal out from plane\n        // rj is now just the vector from the convex center to the vertex\n\n        worldVertex.vsub(convexPosition, r.rj); // Make it relative to the body\n\n        r.ri.vadd(planePosition, r.ri);\n        r.ri.vsub(planeBody.position, r.ri);\n        r.rj.vadd(convexPosition, r.rj);\n        r.rj.vsub(convexBody.position, r.rj);\n        this.result.push(r);\n        numContacts++;\n\n        if (!this.enableFrictionReduction) {\n          this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n      }\n    }\n\n    if (this.enableFrictionReduction && numContacts) {\n      this.createFrictionFromAverage(numContacts);\n    }\n  }\n\n  boxConvex(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    return this.convexConvex(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  sphereHeightfield(sphereShape, hfShape, spherePos, hfPos, sphereQuat, hfQuat, sphereBody, hfBody, rsi, rsj, justTest) {\n    const data = hfShape.data;\n    const radius = sphereShape.radius;\n    const w = hfShape.elementSize;\n    const worldPillarOffset = sphereHeightfield_tmp2; // Get sphere position to heightfield local!\n\n    const localSpherePos = sphereHeightfield_tmp1;\n    Transform.pointToLocalFrame(hfPos, hfQuat, spherePos, localSpherePos); // Get the index of the data points to test against\n\n    let iMinX = Math.floor((localSpherePos.x - radius) / w) - 1;\n    let iMaxX = Math.ceil((localSpherePos.x + radius) / w) + 1;\n    let iMinY = Math.floor((localSpherePos.y - radius) / w) - 1;\n    let iMaxY = Math.ceil((localSpherePos.y + radius) / w) + 1; // Bail out if we are out of the terrain\n\n    if (iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMinY > data[0].length) {\n      return;\n    } // Clamp index to edges\n\n\n    if (iMinX < 0) {\n      iMinX = 0;\n    }\n\n    if (iMaxX < 0) {\n      iMaxX = 0;\n    }\n\n    if (iMinY < 0) {\n      iMinY = 0;\n    }\n\n    if (iMaxY < 0) {\n      iMaxY = 0;\n    }\n\n    if (iMinX >= data.length) {\n      iMinX = data.length - 1;\n    }\n\n    if (iMaxX >= data.length) {\n      iMaxX = data.length - 1;\n    }\n\n    if (iMaxY >= data[0].length) {\n      iMaxY = data[0].length - 1;\n    }\n\n    if (iMinY >= data[0].length) {\n      iMinY = data[0].length - 1;\n    }\n\n    const minMax = [];\n    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n    const min = minMax[0];\n    const max = minMax[1]; // Bail out if we can't touch the bounding height box\n\n    if (localSpherePos.z - radius > max || localSpherePos.z + radius < min) {\n      return;\n    }\n\n    const result = this.result;\n\n    for (let i = iMinX; i < iMaxX; i++) {\n      for (let j = iMinY; j < iMaxY; j++) {\n        const numContactsBefore = result.length;\n        let intersecting = false; // Lower triangle\n\n        hfShape.getConvexTrianglePillar(i, j, false);\n        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n\n        if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {\n          intersecting = this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody, sphereShape, hfShape, justTest);\n        }\n\n        if (justTest && intersecting) {\n          return true;\n        } // Upper triangle\n\n\n        hfShape.getConvexTrianglePillar(i, j, true);\n        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n\n        if (spherePos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + sphereShape.boundingSphereRadius) {\n          intersecting = this.sphereConvex(sphereShape, hfShape.pillarConvex, spherePos, worldPillarOffset, sphereQuat, hfQuat, sphereBody, hfBody, sphereShape, hfShape, justTest);\n        }\n\n        if (justTest && intersecting) {\n          return true;\n        }\n\n        const numContacts = result.length - numContactsBefore;\n\n        if (numContacts > 2) {\n          return;\n        }\n        /*\n          // Skip all but 1\n          for (let k = 0; k < numContacts - 1; k++) {\n              result.pop();\n          }\n        */\n\n      }\n    }\n  }\n\n  boxHeightfield(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    return this.convexHeightfield(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  convexHeightfield(convexShape, hfShape, convexPos, hfPos, convexQuat, hfQuat, convexBody, hfBody, rsi, rsj, justTest) {\n    const data = hfShape.data;\n    const w = hfShape.elementSize;\n    const radius = convexShape.boundingSphereRadius;\n    const worldPillarOffset = convexHeightfield_tmp2;\n    const faceList = convexHeightfield_faceList; // Get sphere position to heightfield local!\n\n    const localConvexPos = convexHeightfield_tmp1;\n    Transform.pointToLocalFrame(hfPos, hfQuat, convexPos, localConvexPos); // Get the index of the data points to test against\n\n    let iMinX = Math.floor((localConvexPos.x - radius) / w) - 1;\n    let iMaxX = Math.ceil((localConvexPos.x + radius) / w) + 1;\n    let iMinY = Math.floor((localConvexPos.y - radius) / w) - 1;\n    let iMaxY = Math.ceil((localConvexPos.y + radius) / w) + 1; // Bail out if we are out of the terrain\n\n    if (iMaxX < 0 || iMaxY < 0 || iMinX > data.length || iMinY > data[0].length) {\n      return;\n    } // Clamp index to edges\n\n\n    if (iMinX < 0) {\n      iMinX = 0;\n    }\n\n    if (iMaxX < 0) {\n      iMaxX = 0;\n    }\n\n    if (iMinY < 0) {\n      iMinY = 0;\n    }\n\n    if (iMaxY < 0) {\n      iMaxY = 0;\n    }\n\n    if (iMinX >= data.length) {\n      iMinX = data.length - 1;\n    }\n\n    if (iMaxX >= data.length) {\n      iMaxX = data.length - 1;\n    }\n\n    if (iMaxY >= data[0].length) {\n      iMaxY = data[0].length - 1;\n    }\n\n    if (iMinY >= data[0].length) {\n      iMinY = data[0].length - 1;\n    }\n\n    const minMax = [];\n    hfShape.getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, minMax);\n    const min = minMax[0];\n    const max = minMax[1]; // Bail out if we're cant touch the bounding height box\n\n    if (localConvexPos.z - radius > max || localConvexPos.z + radius < min) {\n      return;\n    }\n\n    for (let i = iMinX; i < iMaxX; i++) {\n      for (let j = iMinY; j < iMaxY; j++) {\n        let intersecting = false; // Lower triangle\n\n        hfShape.getConvexTrianglePillar(i, j, false);\n        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n\n        if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {\n          intersecting = this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, justTest, faceList, null);\n        }\n\n        if (justTest && intersecting) {\n          return true;\n        } // Upper triangle\n\n\n        hfShape.getConvexTrianglePillar(i, j, true);\n        Transform.pointToWorldFrame(hfPos, hfQuat, hfShape.pillarOffset, worldPillarOffset);\n\n        if (convexPos.distanceTo(worldPillarOffset) < hfShape.pillarConvex.boundingSphereRadius + convexShape.boundingSphereRadius) {\n          intersecting = this.convexConvex(convexShape, hfShape.pillarConvex, convexPos, worldPillarOffset, convexQuat, hfQuat, convexBody, hfBody, null, null, justTest, faceList, null);\n        }\n\n        if (justTest && intersecting) {\n          return true;\n        }\n      }\n    }\n  }\n\n  sphereParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {\n    // The normal is the unit vector from sphere center to particle center\n    const normal = particleSphere_normal;\n    normal.set(0, 0, 1);\n    xi.vsub(xj, normal);\n    const lengthSquared = normal.lengthSquared();\n\n    if (lengthSquared <= sj.radius * sj.radius) {\n      if (justTest) {\n        return true;\n      }\n\n      const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n      normal.normalize();\n      r.rj.copy(normal);\n      r.rj.scale(sj.radius, r.rj);\n      r.ni.copy(normal); // Contact normal\n\n      r.ni.negate(r.ni);\n      r.ri.set(0, 0, 0); // Center of particle\n\n      this.result.push(r);\n      this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n  }\n\n  planeParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {\n    const normal = particlePlane_normal;\n    normal.set(0, 0, 1);\n    bj.quaternion.vmult(normal, normal); // Turn normal according to plane orientation\n\n    const relpos = particlePlane_relpos;\n    xi.vsub(bj.position, relpos);\n    const dot = normal.dot(relpos);\n\n    if (dot <= 0.0) {\n      if (justTest) {\n        return true;\n      }\n\n      const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n      r.ni.copy(normal); // Contact normal is the plane normal\n\n      r.ni.negate(r.ni);\n      r.ri.set(0, 0, 0); // Center of particle\n      // Get particle position projected on plane\n\n      const projected = particlePlane_projected;\n      normal.scale(normal.dot(xi), projected);\n      xi.vsub(projected, projected); //projected.vadd(bj.position,projected);\n      // rj is now the projected world position minus plane position\n\n      r.rj.copy(projected);\n      this.result.push(r);\n      this.createFrictionEquationsFromContact(r, this.frictionResult);\n    }\n  }\n\n  boxParticle(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    si.convexPolyhedronRepresentation.material = si.material;\n    si.convexPolyhedronRepresentation.collisionResponse = si.collisionResponse;\n    return this.convexParticle(si.convexPolyhedronRepresentation, sj, xi, xj, qi, qj, bi, bj, si, sj, justTest);\n  }\n\n  convexParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest) {\n    let penetratedFaceIndex = -1;\n    const penetratedFaceNormal = convexParticle_penetratedFaceNormal;\n    const worldPenetrationVec = convexParticle_worldPenetrationVec;\n    let minPenetration = null;\n\n    const local = convexParticle_local;\n    local.copy(xi);\n    local.vsub(xj, local); // Convert position to relative the convex origin\n\n    qj.conjugate(cqj);\n    cqj.vmult(local, local);\n\n    if (sj.pointIsInside(local)) {\n      if (sj.worldVerticesNeedsUpdate) {\n        sj.computeWorldVertices(xj, qj);\n      }\n\n      if (sj.worldFaceNormalsNeedsUpdate) {\n        sj.computeWorldFaceNormals(qj);\n      } // For each world polygon in the polyhedra\n\n\n      for (let i = 0, nfaces = sj.faces.length; i !== nfaces; i++) {\n        // Construct world face vertices\n        const verts = [sj.worldVertices[sj.faces[i][0]]];\n        const normal = sj.worldFaceNormals[i]; // Check how much the particle penetrates the polygon plane.\n\n        xi.vsub(verts[0], convexParticle_vertexToParticle);\n        const penetration = -normal.dot(convexParticle_vertexToParticle);\n\n        if (minPenetration === null || Math.abs(penetration) < Math.abs(minPenetration)) {\n          if (justTest) {\n            return true;\n          }\n\n          minPenetration = penetration;\n          penetratedFaceIndex = i;\n          penetratedFaceNormal.copy(normal);\n        }\n      }\n\n      if (penetratedFaceIndex !== -1) {\n        // Setup contact\n        const r = this.createContactEquation(bi, bj, si, sj, rsi, rsj);\n        penetratedFaceNormal.scale(minPenetration, worldPenetrationVec); // rj is the particle position projected to the face\n\n        worldPenetrationVec.vadd(xi, worldPenetrationVec);\n        worldPenetrationVec.vsub(xj, worldPenetrationVec);\n        r.rj.copy(worldPenetrationVec); //const projectedToFace = xi.vsub(xj).vadd(worldPenetrationVec);\n        //projectedToFace.copy(r.rj);\n        //qj.vmult(r.rj,r.rj);\n\n        penetratedFaceNormal.negate(r.ni); // Contact normal\n\n        r.ri.set(0, 0, 0); // Center of particle\n\n        const ri = r.ri;\n        const rj = r.rj; // Make relative to bodies\n\n        ri.vadd(xi, ri);\n        ri.vsub(bi.position, ri);\n        rj.vadd(xj, rj);\n        rj.vsub(bj.position, rj);\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n      } else {\n        console.warn('Point found inside convex, but did not find penetrating face!');\n      }\n    }\n  }\n\n  heightfieldCylinder(hfShape, convexShape, hfPos, convexPos, hfQuat, convexQuat, hfBody, convexBody, rsi, rsj, justTest) {\n    return this.convexHeightfield(convexShape, hfShape, convexPos, hfPos, convexQuat, hfQuat, convexBody, hfBody, rsi, rsj, justTest);\n  }\n\n  particleCylinder(si, sj, xi, xj, qi, qj, bi, bj, rsi, rsj, justTest) {\n    return this.convexParticle(sj, si, xj, xi, qj, qi, bj, bi, rsi, rsj, justTest);\n  }\n\n  sphereTrimesh(sphereShape, trimeshShape, spherePos, trimeshPos, sphereQuat, trimeshQuat, sphereBody, trimeshBody, rsi, rsj, justTest) {\n    const edgeVertexA = sphereTrimesh_edgeVertexA;\n    const edgeVertexB = sphereTrimesh_edgeVertexB;\n    const edgeVector = sphereTrimesh_edgeVector;\n    const edgeVectorUnit = sphereTrimesh_edgeVectorUnit;\n    const localSpherePos = sphereTrimesh_localSpherePos;\n    const tmp = sphereTrimesh_tmp;\n    const localSphereAABB = sphereTrimesh_localSphereAABB;\n    const v2 = sphereTrimesh_v2;\n    const relpos = sphereTrimesh_relpos;\n    const triangles = sphereTrimesh_triangles; // Convert sphere position to local in the trimesh\n\n    Transform.pointToLocalFrame(trimeshPos, trimeshQuat, spherePos, localSpherePos); // Get the aabb of the sphere locally in the trimesh\n\n    const sphereRadius = sphereShape.radius;\n    localSphereAABB.lowerBound.set(localSpherePos.x - sphereRadius, localSpherePos.y - sphereRadius, localSpherePos.z - sphereRadius);\n    localSphereAABB.upperBound.set(localSpherePos.x + sphereRadius, localSpherePos.y + sphereRadius, localSpherePos.z + sphereRadius);\n    trimeshShape.getTrianglesInAABB(localSphereAABB, triangles); //for (let i = 0; i < trimeshShape.indices.length / 3; i++) triangles.push(i); // All\n    // Vertices\n\n    const v = sphereTrimesh_v;\n    const radiusSquared = sphereShape.radius * sphereShape.radius;\n\n    for (let i = 0; i < triangles.length; i++) {\n      for (let j = 0; j < 3; j++) {\n        trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], v); // Check vertex overlap in sphere\n\n        v.vsub(localSpherePos, relpos);\n\n        if (relpos.lengthSquared() <= radiusSquared) {\n          // Safe up\n          v2.copy(v);\n          Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v);\n          v.vsub(spherePos, relpos);\n\n          if (justTest) {\n            return true;\n          }\n\n          let r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);\n          r.ni.copy(relpos);\n          r.ni.normalize(); // ri is the vector from sphere center to the sphere surface\n\n          r.ri.copy(r.ni);\n          r.ri.scale(sphereShape.radius, r.ri);\n          r.ri.vadd(spherePos, r.ri);\n          r.ri.vsub(sphereBody.position, r.ri);\n          r.rj.copy(v);\n          r.rj.vsub(trimeshBody.position, r.rj); // Store result\n\n          this.result.push(r);\n          this.createFrictionEquationsFromContact(r, this.frictionResult);\n        }\n      }\n    } // Check all edges\n\n\n    for (let i = 0; i < triangles.length; i++) {\n      for (let j = 0; j < 3; j++) {\n        trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + j], edgeVertexA);\n        trimeshShape.getVertex(trimeshShape.indices[triangles[i] * 3 + (j + 1) % 3], edgeVertexB);\n        edgeVertexB.vsub(edgeVertexA, edgeVector); // Project sphere position to the edge\n\n        localSpherePos.vsub(edgeVertexB, tmp);\n        const positionAlongEdgeB = tmp.dot(edgeVector);\n        localSpherePos.vsub(edgeVertexA, tmp);\n        let positionAlongEdgeA = tmp.dot(edgeVector);\n\n        if (positionAlongEdgeA > 0 && positionAlongEdgeB < 0) {\n          // Now check the orthogonal distance from edge to sphere center\n          localSpherePos.vsub(edgeVertexA, tmp);\n          edgeVectorUnit.copy(edgeVector);\n          edgeVectorUnit.normalize();\n          positionAlongEdgeA = tmp.dot(edgeVectorUnit);\n          edgeVectorUnit.scale(positionAlongEdgeA, tmp);\n          tmp.vadd(edgeVertexA, tmp); // tmp is now the sphere center position projected to the edge, defined locally in the trimesh frame\n\n          const dist = tmp.distanceTo(localSpherePos);\n\n          if (dist < sphereShape.radius) {\n            if (justTest) {\n              return true;\n            }\n\n            const r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);\n            tmp.vsub(localSpherePos, r.ni);\n            r.ni.normalize();\n            r.ni.scale(sphereShape.radius, r.ri);\n            r.ri.vadd(spherePos, r.ri);\n            r.ri.vsub(sphereBody.position, r.ri);\n            Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);\n            tmp.vsub(trimeshBody.position, r.rj);\n            Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);\n            Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);\n            this.result.push(r);\n            this.createFrictionEquationsFromContact(r, this.frictionResult);\n          }\n        }\n      }\n    } // Triangle faces\n\n\n    const va = sphereTrimesh_va;\n    const vb = sphereTrimesh_vb;\n    const vc = sphereTrimesh_vc;\n    const normal = sphereTrimesh_normal;\n\n    for (let i = 0, N = triangles.length; i !== N; i++) {\n      trimeshShape.getTriangleVertices(triangles[i], va, vb, vc);\n      trimeshShape.getNormal(triangles[i], normal);\n      localSpherePos.vsub(va, tmp);\n      let dist = tmp.dot(normal);\n      normal.scale(dist, tmp);\n      localSpherePos.vsub(tmp, tmp); // tmp is now the sphere position projected to the triangle plane\n\n      dist = tmp.distanceTo(localSpherePos);\n\n      if (Ray.pointInTriangle(tmp, va, vb, vc) && dist < sphereShape.radius) {\n        if (justTest) {\n          return true;\n        }\n\n        let r = this.createContactEquation(sphereBody, trimeshBody, sphereShape, trimeshShape, rsi, rsj);\n        tmp.vsub(localSpherePos, r.ni);\n        r.ni.normalize();\n        r.ni.scale(sphereShape.radius, r.ri);\n        r.ri.vadd(spherePos, r.ri);\n        r.ri.vsub(sphereBody.position, r.ri);\n        Transform.pointToWorldFrame(trimeshPos, trimeshQuat, tmp, tmp);\n        tmp.vsub(trimeshBody.position, r.rj);\n        Transform.vectorToWorldFrame(trimeshQuat, r.ni, r.ni);\n        Transform.vectorToWorldFrame(trimeshQuat, r.ri, r.ri);\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n      }\n    }\n\n    triangles.length = 0;\n  }\n\n  planeTrimesh(planeShape, trimeshShape, planePos, trimeshPos, planeQuat, trimeshQuat, planeBody, trimeshBody, rsi, rsj, justTest) {\n    // Make contacts!\n    const v = new Vec3();\n    const normal = planeTrimesh_normal;\n    normal.set(0, 0, 1);\n    planeQuat.vmult(normal, normal); // Turn normal according to plane\n\n    for (let i = 0; i < trimeshShape.vertices.length / 3; i++) {\n      // Get world vertex from trimesh\n      trimeshShape.getVertex(i, v); // Safe up\n\n      const v2 = new Vec3();\n      v2.copy(v);\n      Transform.pointToWorldFrame(trimeshPos, trimeshQuat, v2, v); // Check plane side\n\n      const relpos = planeTrimesh_relpos;\n      v.vsub(planePos, relpos);\n      const dot = normal.dot(relpos);\n\n      if (dot <= 0.0) {\n        if (justTest) {\n          return true;\n        }\n\n        const r = this.createContactEquation(planeBody, trimeshBody, planeShape, trimeshShape, rsi, rsj);\n        r.ni.copy(normal); // Contact normal is the plane normal\n        // Get vertex position projected on plane\n\n        const projected = planeTrimesh_projected;\n        normal.scale(relpos.dot(normal), projected);\n        v.vsub(projected, projected); // ri is the projected world position minus plane position\n\n        r.ri.copy(projected);\n        r.ri.vsub(planeBody.position, r.ri);\n        r.rj.copy(v);\n        r.rj.vsub(trimeshBody.position, r.rj); // Store result\n\n        this.result.push(r);\n        this.createFrictionEquationsFromContact(r, this.frictionResult);\n      }\n    }\n  } // convexTrimesh(\n  //   si: ConvexPolyhedron, sj: Trimesh, xi: Vec3, xj: Vec3, qi: Quaternion, qj: Quaternion,\n  //   bi: Body, bj: Body, rsi?: Shape | null, rsj?: Shape | null,\n  //   faceListA?: number[] | null, faceListB?: number[] | null,\n  // ) {\n  //   const sepAxis = convexConvex_sepAxis;\n  //   if(xi.distanceTo(xj) > si.boundingSphereRadius + sj.boundingSphereRadius){\n  //       return;\n  //   }\n  //   // Construct a temp hull for each triangle\n  //   const hullB = new ConvexPolyhedron();\n  //   hullB.faces = [[0,1,2]];\n  //   const va = new Vec3();\n  //   const vb = new Vec3();\n  //   const vc = new Vec3();\n  //   hullB.vertices = [\n  //       va,\n  //       vb,\n  //       vc\n  //   ];\n  //   for (let i = 0; i < sj.indices.length / 3; i++) {\n  //       const triangleNormal = new Vec3();\n  //       sj.getNormal(i, triangleNormal);\n  //       hullB.faceNormals = [triangleNormal];\n  //       sj.getTriangleVertices(i, va, vb, vc);\n  //       let d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);\n  //       if(!d){\n  //           triangleNormal.scale(-1, triangleNormal);\n  //           d = si.testSepAxis(triangleNormal, hullB, xi, qi, xj, qj);\n  //           if(!d){\n  //               continue;\n  //           }\n  //       }\n  //       const res: ConvexPolyhedronContactPoint[] = [];\n  //       const q = convexConvex_q;\n  //       si.clipAgainstHull(xi,qi,hullB,xj,qj,triangleNormal,-100,100,res);\n  //       for(let j = 0; j !== res.length; j++){\n  //           const r = this.createContactEquation(bi,bj,si,sj,rsi,rsj),\n  //               ri = r.ri,\n  //               rj = r.rj;\n  //           r.ni.copy(triangleNormal);\n  //           r.ni.negate(r.ni);\n  //           res[j].normal.negate(q);\n  //           q.mult(res[j].depth, q);\n  //           res[j].point.vadd(q, ri);\n  //           rj.copy(res[j].point);\n  //           // Contact points are in world coordinates. Transform back to relative\n  //           ri.vsub(xi,ri);\n  //           rj.vsub(xj,rj);\n  //           // Make relative to bodies\n  //           ri.vadd(xi, ri);\n  //           ri.vsub(bi.position, ri);\n  //           rj.vadd(xj, rj);\n  //           rj.vsub(bj.position, rj);\n  //           result.push(r);\n  //       }\n  //   }\n  // }\n\n\n}\nconst averageNormal = new Vec3();\nconst averageContactPointA = new Vec3();\nconst averageContactPointB = new Vec3();\nconst tmpVec1 = new Vec3();\nconst tmpVec2 = new Vec3();\nconst tmpQuat1 = new Quaternion();\nconst tmpQuat2 = new Quaternion();\n\nconst planeTrimesh_normal = new Vec3();\nconst planeTrimesh_relpos = new Vec3();\nconst planeTrimesh_projected = new Vec3();\nconst sphereTrimesh_normal = new Vec3();\nconst sphereTrimesh_relpos = new Vec3();\nnew Vec3();\nconst sphereTrimesh_v = new Vec3();\nconst sphereTrimesh_v2 = new Vec3();\nconst sphereTrimesh_edgeVertexA = new Vec3();\nconst sphereTrimesh_edgeVertexB = new Vec3();\nconst sphereTrimesh_edgeVector = new Vec3();\nconst sphereTrimesh_edgeVectorUnit = new Vec3();\nconst sphereTrimesh_localSpherePos = new Vec3();\nconst sphereTrimesh_tmp = new Vec3();\nconst sphereTrimesh_va = new Vec3();\nconst sphereTrimesh_vb = new Vec3();\nconst sphereTrimesh_vc = new Vec3();\nconst sphereTrimesh_localSphereAABB = new AABB();\nconst sphereTrimesh_triangles = [];\nconst point_on_plane_to_sphere = new Vec3();\nconst plane_to_sphere_ortho = new Vec3(); // See http://bulletphysics.com/Bullet/BulletFull/SphereTriangleDetector_8cpp_source.html\n\nconst pointInPolygon_edge = new Vec3();\nconst pointInPolygon_edge_x_normal = new Vec3();\nconst pointInPolygon_vtp = new Vec3();\n\nfunction pointInPolygon(verts, normal, p) {\n  let positiveResult = null;\n  const N = verts.length;\n\n  for (let i = 0; i !== N; i++) {\n    const v = verts[i]; // Get edge to the next vertex\n\n    const edge = pointInPolygon_edge;\n    verts[(i + 1) % N].vsub(v, edge); // Get cross product between polygon normal and the edge\n\n    const edge_x_normal = pointInPolygon_edge_x_normal; //const edge_x_normal = new Vec3();\n\n    edge.cross(normal, edge_x_normal); // Get vector between point and current vertex\n\n    const vertex_to_p = pointInPolygon_vtp;\n    p.vsub(v, vertex_to_p); // This dot product determines which side of the edge the point is\n\n    const r = edge_x_normal.dot(vertex_to_p); // If all such dot products have same sign, we are inside the polygon.\n\n    if (positiveResult === null || r > 0 && positiveResult === true || r <= 0 && positiveResult === false) {\n      if (positiveResult === null) {\n        positiveResult = r > 0;\n      }\n\n      continue;\n    } else {\n      return false; // Encountered some other sign. Exit.\n    }\n  } // If we got here, all dot products were of the same sign.\n\n\n  return true;\n}\n\nconst box_to_sphere = new Vec3();\nconst sphereBox_ns = new Vec3();\nconst sphereBox_ns1 = new Vec3();\nconst sphereBox_ns2 = new Vec3();\nconst sphereBox_sides = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\nconst sphereBox_sphere_to_corner = new Vec3();\nconst sphereBox_side_ns = new Vec3();\nconst sphereBox_side_ns1 = new Vec3();\nconst sphereBox_side_ns2 = new Vec3();\nconst convex_to_sphere = new Vec3();\nconst sphereConvex_edge = new Vec3();\nconst sphereConvex_edgeUnit = new Vec3();\nconst sphereConvex_sphereToCorner = new Vec3();\nconst sphereConvex_worldCorner = new Vec3();\nconst sphereConvex_worldNormal = new Vec3();\nconst sphereConvex_worldPoint = new Vec3();\nconst sphereConvex_worldSpherePointClosestToPlane = new Vec3();\nconst sphereConvex_penetrationVec = new Vec3();\nconst sphereConvex_sphereToWorldPoint = new Vec3();\nnew Vec3();\nnew Vec3();\nconst planeConvex_v = new Vec3();\nconst planeConvex_normal = new Vec3();\nconst planeConvex_relpos = new Vec3();\nconst planeConvex_projected = new Vec3();\nconst convexConvex_sepAxis = new Vec3();\nconst convexConvex_q = new Vec3();\nconst particlePlane_normal = new Vec3();\nconst particlePlane_relpos = new Vec3();\nconst particlePlane_projected = new Vec3();\nconst particleSphere_normal = new Vec3(); // WIP\n\nconst cqj = new Quaternion();\nconst convexParticle_local = new Vec3();\nnew Vec3();\nconst convexParticle_penetratedFaceNormal = new Vec3();\nconst convexParticle_vertexToParticle = new Vec3();\nconst convexParticle_worldPenetrationVec = new Vec3();\nconst convexHeightfield_tmp1 = new Vec3();\nconst convexHeightfield_tmp2 = new Vec3();\nconst convexHeightfield_faceList = [0];\nconst sphereHeightfield_tmp1 = new Vec3();\nconst sphereHeightfield_tmp2 = new Vec3();\n\nclass OverlapKeeper {\n  /**\n   * @todo Remove useless constructor\n   */\n  constructor() {\n    this.current = [];\n    this.previous = [];\n  }\n  /**\n   * getKey\n   */\n\n\n  getKey(i, j) {\n    if (j < i) {\n      const temp = j;\n      j = i;\n      i = temp;\n    }\n\n    return i << 16 | j;\n  }\n  /**\n   * set\n   */\n\n\n  set(i, j) {\n    // Insertion sort. This way the diff will have linear complexity.\n    const key = this.getKey(i, j);\n    const current = this.current;\n    let index = 0;\n\n    while (key > current[index]) {\n      index++;\n    }\n\n    if (key === current[index]) {\n      return; // Pair was already added\n    }\n\n    for (let j = current.length - 1; j >= index; j--) {\n      current[j + 1] = current[j];\n    }\n\n    current[index] = key;\n  }\n  /**\n   * tick\n   */\n\n\n  tick() {\n    const tmp = this.current;\n    this.current = this.previous;\n    this.previous = tmp;\n    this.current.length = 0;\n  }\n  /**\n   * getDiff\n   */\n\n\n  getDiff(additions, removals) {\n    const a = this.current;\n    const b = this.previous;\n    const al = a.length;\n    const bl = b.length;\n    let j = 0;\n\n    for (let i = 0; i < al; i++) {\n      let found = false;\n      const keyA = a[i];\n\n      while (keyA > b[j]) {\n        j++;\n      }\n\n      found = keyA === b[j];\n\n      if (!found) {\n        unpackAndPush(additions, keyA);\n      }\n    }\n\n    j = 0;\n\n    for (let i = 0; i < bl; i++) {\n      let found = false;\n      const keyB = b[i];\n\n      while (keyB > a[j]) {\n        j++;\n      }\n\n      found = a[j] === keyB;\n\n      if (!found) {\n        unpackAndPush(removals, keyB);\n      }\n    }\n  }\n\n}\n\nfunction unpackAndPush(array, key) {\n  array.push((key & 0xffff0000) >> 16, key & 0x0000ffff);\n}\n\nconst getKey = (i, j) => i < j ? `${i}-${j}` : `${j}-${i}`;\n/**\n * TupleDictionary\n */\n\n\nclass TupleDictionary {\n  constructor() {\n    this.data = {\n      keys: []\n    };\n  }\n\n  /** get */\n  get(i, j) {\n    const key = getKey(i, j);\n    return this.data[key];\n  }\n  /** set */\n\n\n  set(i, j, value) {\n    const key = getKey(i, j); // Check if key already exists\n\n    if (!this.get(i, j)) {\n      this.data.keys.push(key);\n    }\n\n    this.data[key] = value;\n  }\n  /** delete */\n\n\n  delete(i, j) {\n    const key = getKey(i, j);\n    const index = this.data.keys.indexOf(key);\n\n    if (index !== -1) {\n      this.data.keys.splice(index, 1);\n    }\n\n    delete this.data[key];\n  }\n  /** reset */\n\n\n  reset() {\n    const data = this.data;\n    const keys = data.keys;\n\n    while (keys.length > 0) {\n      const key = keys.pop();\n      delete data[key];\n    }\n  }\n\n}\n\n/**\n * The physics world\n */\nclass World extends EventTarget {\n  /**\n   * Currently / last used timestep. Is set to -1 if not available. This value is updated before each internal step, which means that it is \"fresh\" inside event callbacks.\n   */\n\n  /**\n   * Makes bodies go to sleep when they've been inactive.\n   * @default false\n   */\n\n  /**\n   * All the current contacts (instances of ContactEquation) in the world.\n   */\n\n  /**\n   * How often to normalize quaternions. Set to 0 for every step, 1 for every second etc.. A larger value increases performance. If bodies tend to explode, set to a smaller value (zero to be sure nothing can go wrong).\n   * @default 0\n   */\n\n  /**\n   * Set to true to use fast quaternion normalization. It is often enough accurate to use.\n   * If bodies tend to explode, set to false.\n   * @default false\n   */\n\n  /**\n   * The wall-clock time since simulation start.\n   */\n\n  /**\n   * Number of timesteps taken since start.\n   */\n\n  /**\n   * Default and last timestep sizes.\n   */\n\n  /**\n   * The gravity of the world.\n   */\n\n  /**\n   * Gravity to use when approximating the friction max force (mu*mass*gravity).\n   * If undefined, global gravity will be used.\n   * Use to enable friction in a World with a null gravity vector (no gravity).\n   */\n\n  /**\n   * The broadphase algorithm to use.\n   * @default NaiveBroadphase\n   */\n\n  /**\n   * All bodies in this world\n   */\n\n  /**\n   * True if any bodies are not sleeping, false if every body is sleeping.\n   */\n\n  /**\n   * The solver algorithm to use.\n   * @default GSSolver\n   */\n\n  /**\n   * collisionMatrix\n   */\n\n  /**\n   * CollisionMatrix from the previous step.\n   */\n\n  /**\n   * All added contactmaterials.\n   */\n\n  /**\n   * Used to look up a ContactMaterial given two instances of Material.\n   */\n\n  /**\n   * The default material of the bodies.\n   */\n\n  /**\n   * This contact material is used if no suitable contactmaterial is found for a contact.\n   */\n\n  /**\n   * Time accumulator for interpolation.\n   * @see https://gafferongames.com/game-physics/fix-your-timestep/\n   */\n\n  /**\n   * Dispatched after a body has been added to the world.\n   */\n\n  /**\n   * Dispatched after a body has been removed from the world.\n   */\n  constructor(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    super();\n    this.dt = -1;\n    this.allowSleep = !!options.allowSleep;\n    this.contacts = [];\n    this.frictionEquations = [];\n    this.quatNormalizeSkip = options.quatNormalizeSkip !== undefined ? options.quatNormalizeSkip : 0;\n    this.quatNormalizeFast = options.quatNormalizeFast !== undefined ? options.quatNormalizeFast : false;\n    this.time = 0.0;\n    this.stepnumber = 0;\n    this.default_dt = 1 / 60;\n    this.nextId = 0;\n    this.gravity = new Vec3();\n\n    if (options.gravity) {\n      this.gravity.copy(options.gravity);\n    }\n\n    if (options.frictionGravity) {\n      this.frictionGravity = new Vec3();\n      this.frictionGravity.copy(options.frictionGravity);\n    }\n\n    this.broadphase = options.broadphase !== undefined ? options.broadphase : new NaiveBroadphase();\n    this.bodies = [];\n    this.hasActiveBodies = false;\n    this.solver = options.solver !== undefined ? options.solver : new GSSolver();\n    this.constraints = [];\n    this.narrowphase = new Narrowphase(this);\n    this.collisionMatrix = new ArrayCollisionMatrix();\n    this.collisionMatrixPrevious = new ArrayCollisionMatrix();\n    this.bodyOverlapKeeper = new OverlapKeeper();\n    this.shapeOverlapKeeper = new OverlapKeeper();\n    this.contactmaterials = [];\n    this.contactMaterialTable = new TupleDictionary();\n    this.defaultMaterial = new Material('default');\n    this.defaultContactMaterial = new ContactMaterial(this.defaultMaterial, this.defaultMaterial, {\n      friction: 0.3,\n      restitution: 0.0\n    });\n    this.doProfiling = false;\n    this.profile = {\n      solve: 0,\n      makeContactConstraints: 0,\n      broadphase: 0,\n      integrate: 0,\n      narrowphase: 0\n    };\n    this.accumulator = 0;\n    this.subsystems = [];\n    this.addBodyEvent = {\n      type: 'addBody',\n      body: null\n    };\n    this.removeBodyEvent = {\n      type: 'removeBody',\n      body: null\n    };\n    this.idToBodyMap = {};\n    this.broadphase.setWorld(this);\n  }\n  /**\n   * Get the contact material between materials m1 and m2\n   * @return The contact material if it was found.\n   */\n\n\n  getContactMaterial(m1, m2) {\n    return this.contactMaterialTable.get(m1.id, m2.id);\n  }\n  /**\n   * Store old collision state info\n   */\n\n\n  collisionMatrixTick() {\n    const temp = this.collisionMatrixPrevious;\n    this.collisionMatrixPrevious = this.collisionMatrix;\n    this.collisionMatrix = temp;\n    this.collisionMatrix.reset();\n    this.bodyOverlapKeeper.tick();\n    this.shapeOverlapKeeper.tick();\n  }\n  /**\n   * Add a constraint to the simulation.\n   */\n\n\n  addConstraint(c) {\n    this.constraints.push(c);\n  }\n  /**\n   * Removes a constraint\n   */\n\n\n  removeConstraint(c) {\n    const idx = this.constraints.indexOf(c);\n\n    if (idx !== -1) {\n      this.constraints.splice(idx, 1);\n    }\n  }\n  /**\n   * Raycast test\n   * @deprecated Use .raycastAll, .raycastClosest or .raycastAny instead.\n   */\n\n\n  rayTest(from, to, result) {\n    if (result instanceof RaycastResult) {\n      // Do raycastClosest\n      this.raycastClosest(from, to, {\n        skipBackfaces: true\n      }, result);\n    } else {\n      // Do raycastAll\n      this.raycastAll(from, to, {\n        skipBackfaces: true\n      }, result);\n    }\n  }\n  /**\n   * Ray cast against all bodies. The provided callback will be executed for each hit with a RaycastResult as single argument.\n   * @return True if any body was hit.\n   */\n\n\n  raycastAll(from, to, options, callback) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    options.mode = Ray.ALL;\n    options.from = from;\n    options.to = to;\n    options.callback = callback;\n    return tmpRay.intersectWorld(this, options);\n  }\n  /**\n   * Ray cast, and stop at the first result. Note that the order is random - but the method is fast.\n   * @return True if any body was hit.\n   */\n\n\n  raycastAny(from, to, options, result) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    options.mode = Ray.ANY;\n    options.from = from;\n    options.to = to;\n    options.result = result;\n    return tmpRay.intersectWorld(this, options);\n  }\n  /**\n   * Ray cast, and return information of the closest hit.\n   * @return True if any body was hit.\n   */\n\n\n  raycastClosest(from, to, options, result) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    options.mode = Ray.CLOSEST;\n    options.from = from;\n    options.to = to;\n    options.result = result;\n    return tmpRay.intersectWorld(this, options);\n  }\n  /**\n   * Add a rigid body to the simulation.\n   * @todo If the simulation has not yet started, why recrete and copy arrays for each body? Accumulate in dynamic arrays in this case.\n   * @todo Adding an array of bodies should be possible. This would save some loops too\n   */\n\n\n  addBody(body) {\n    if (this.bodies.includes(body)) {\n      return;\n    }\n\n    body.index = this.bodies.length;\n    this.bodies.push(body);\n    body.world = this;\n    body.initPosition.copy(body.position);\n    body.initVelocity.copy(body.velocity);\n    body.timeLastSleepy = this.time;\n\n    if (body instanceof Body) {\n      body.initAngularVelocity.copy(body.angularVelocity);\n      body.initQuaternion.copy(body.quaternion);\n    }\n\n    this.collisionMatrix.setNumObjects(this.bodies.length);\n    this.addBodyEvent.body = body;\n    this.idToBodyMap[body.id] = body;\n    this.dispatchEvent(this.addBodyEvent);\n  }\n  /**\n   * Remove a rigid body from the simulation.\n   */\n\n\n  removeBody(body) {\n    body.world = null;\n    const n = this.bodies.length - 1;\n    const bodies = this.bodies;\n    const idx = bodies.indexOf(body);\n\n    if (idx !== -1) {\n      bodies.splice(idx, 1); // Todo: should use a garbage free method\n      // Recompute index\n\n      for (let i = 0; i !== bodies.length; i++) {\n        bodies[i].index = i;\n      }\n\n      this.collisionMatrix.setNumObjects(n);\n      this.removeBodyEvent.body = body;\n      delete this.idToBodyMap[body.id];\n      this.dispatchEvent(this.removeBodyEvent);\n    }\n  }\n\n  getBodyById(id) {\n    return this.idToBodyMap[id];\n  }\n  /**\n   * @todo Make a faster map\n   */\n\n\n  getShapeById(id) {\n    const bodies = this.bodies;\n\n    for (let i = 0; i < bodies.length; i++) {\n      const shapes = bodies[i].shapes;\n\n      for (let j = 0; j < shapes.length; j++) {\n        const shape = shapes[j];\n\n        if (shape.id === id) {\n          return shape;\n        }\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Adds a contact material to the World\n   */\n\n\n  addContactMaterial(cmat) {\n    // Add contact material\n    this.contactmaterials.push(cmat); // Add current contact material to the material table\n\n    this.contactMaterialTable.set(cmat.materials[0].id, cmat.materials[1].id, cmat);\n  }\n  /**\n   * Removes a contact material from the World.\n   */\n\n\n  removeContactMaterial(cmat) {\n    const idx = this.contactmaterials.indexOf(cmat);\n\n    if (idx === -1) {\n      return;\n    }\n\n    this.contactmaterials.splice(idx, 1);\n    this.contactMaterialTable.delete(cmat.materials[0].id, cmat.materials[1].id);\n  }\n  /**\n   * Step the simulation forward keeping track of last called time\n   * to be able to step the world at a fixed rate, independently of framerate.\n   *\n   * @param dt The fixed time step size to use (default: 1 / 60).\n   * @param maxSubSteps Maximum number of fixed steps to take per function call (default: 10).\n   * @see https://gafferongames.com/post/fix_your_timestep/\n   * @example\n   *     // Run the simulation independently of framerate every 1 / 60 ms\n   *     world.fixedStep()\n   */\n\n\n  fixedStep(dt, maxSubSteps) {\n    if (dt === void 0) {\n      dt = 1 / 60;\n    }\n\n    if (maxSubSteps === void 0) {\n      maxSubSteps = 10;\n    }\n\n    const time = performance.now() / 1000; // seconds\n\n    if (!this.lastCallTime) {\n      this.step(dt, undefined, maxSubSteps);\n    } else {\n      const timeSinceLastCalled = time - this.lastCallTime;\n      this.step(dt, timeSinceLastCalled, maxSubSteps);\n    }\n\n    this.lastCallTime = time;\n  }\n  /**\n   * Step the physics world forward in time.\n   *\n   * There are two modes. The simple mode is fixed timestepping without interpolation. In this case you only use the first argument. The second case uses interpolation. In that you also provide the time since the function was last used, as well as the maximum fixed timesteps to take.\n   *\n   * @param dt The fixed time step size to use.\n   * @param timeSinceLastCalled The time elapsed since the function was last called.\n   * @param maxSubSteps Maximum number of fixed steps to take per function call (default: 10).\n   * @see https://web.archive.org/web/20180426154531/http://bulletphysics.org/mediawiki-1.5.8/index.php/Stepping_The_World#What_do_the_parameters_to_btDynamicsWorld::stepSimulation_mean.3F\n   * @example\n   *     // fixed timestepping without interpolation\n   *     world.step(1 / 60)\n   */\n\n\n  step(dt, timeSinceLastCalled, maxSubSteps) {\n    if (maxSubSteps === void 0) {\n      maxSubSteps = 10;\n    }\n\n    if (timeSinceLastCalled === undefined) {\n      // Fixed, simple stepping\n      this.internalStep(dt); // Increment time\n\n      this.time += dt;\n    } else {\n      this.accumulator += timeSinceLastCalled;\n      const t0 = performance.now();\n      let substeps = 0;\n\n      while (this.accumulator >= dt && substeps < maxSubSteps) {\n        // Do fixed steps to catch up\n        this.internalStep(dt);\n        this.accumulator -= dt;\n        substeps++;\n\n        if (performance.now() - t0 > dt * 1000) {\n          // The framerate is not interactive anymore.\n          // We are below the target framerate.\n          // Better bail out.\n          break;\n        }\n      } // Remove the excess accumulator, since we may not\n      // have had enough substeps available to catch up\n\n\n      this.accumulator = this.accumulator % dt;\n      const t = this.accumulator / dt;\n\n      for (let j = 0; j !== this.bodies.length; j++) {\n        const b = this.bodies[j];\n        b.previousPosition.lerp(b.position, t, b.interpolatedPosition);\n        b.previousQuaternion.slerp(b.quaternion, t, b.interpolatedQuaternion);\n        b.previousQuaternion.normalize();\n      }\n\n      this.time += timeSinceLastCalled;\n    }\n  }\n\n  internalStep(dt) {\n    this.dt = dt;\n    const contacts = this.contacts;\n    const p1 = World_step_p1;\n    const p2 = World_step_p2;\n    const N = this.bodies.length;\n    const bodies = this.bodies;\n    const solver = this.solver;\n    const gravity = this.gravity;\n    const doProfiling = this.doProfiling;\n    const profile = this.profile;\n    const DYNAMIC = Body.DYNAMIC;\n    let profilingStart = -Infinity;\n    const constraints = this.constraints;\n    const frictionEquationPool = World_step_frictionEquationPool;\n    gravity.length();\n    const gx = gravity.x;\n    const gy = gravity.y;\n    const gz = gravity.z;\n    let i = 0;\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    } // Add gravity to all objects\n\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n\n      if (bi.type === DYNAMIC) {\n        // Only for dynamic bodies\n        const f = bi.force;\n        const m = bi.mass;\n        f.x += m * gx;\n        f.y += m * gy;\n        f.z += m * gz;\n      }\n    } // Update subsystems\n\n\n    for (let i = 0, Nsubsystems = this.subsystems.length; i !== Nsubsystems; i++) {\n      this.subsystems[i].update();\n    } // Collision detection\n\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    }\n\n    p1.length = 0; // Clean up pair arrays from last step\n\n    p2.length = 0;\n    this.broadphase.collisionPairs(this, p1, p2);\n\n    if (doProfiling) {\n      profile.broadphase = performance.now() - profilingStart;\n    } // Remove constrained pairs with collideConnected == false\n\n\n    let Nconstraints = constraints.length;\n\n    for (i = 0; i !== Nconstraints; i++) {\n      const c = constraints[i];\n\n      if (!c.collideConnected) {\n        for (let j = p1.length - 1; j >= 0; j -= 1) {\n          if (c.bodyA === p1[j] && c.bodyB === p2[j] || c.bodyB === p1[j] && c.bodyA === p2[j]) {\n            p1.splice(j, 1);\n            p2.splice(j, 1);\n          }\n        }\n      }\n    }\n\n    this.collisionMatrixTick(); // Generate contacts\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    }\n\n    const oldcontacts = World_step_oldContacts;\n    const NoldContacts = contacts.length;\n\n    for (i = 0; i !== NoldContacts; i++) {\n      oldcontacts.push(contacts[i]);\n    }\n\n    contacts.length = 0; // Transfer FrictionEquation from current list to the pool for reuse\n\n    const NoldFrictionEquations = this.frictionEquations.length;\n\n    for (i = 0; i !== NoldFrictionEquations; i++) {\n      frictionEquationPool.push(this.frictionEquations[i]);\n    }\n\n    this.frictionEquations.length = 0;\n    this.narrowphase.getContacts(p1, p2, this, contacts, oldcontacts, // To be reused\n    this.frictionEquations, frictionEquationPool);\n\n    if (doProfiling) {\n      profile.narrowphase = performance.now() - profilingStart;\n    } // Loop over all collisions\n\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    } // Add all friction eqs\n\n\n    for (i = 0; i < this.frictionEquations.length; i++) {\n      solver.addEquation(this.frictionEquations[i]);\n    }\n\n    const ncontacts = contacts.length;\n\n    for (let k = 0; k !== ncontacts; k++) {\n      // Current contact\n      const c = contacts[k]; // Get current collision indeces\n\n      const bi = c.bi;\n      const bj = c.bj;\n      const si = c.si;\n      const sj = c.sj; // Get collision properties\n\n      let cm;\n\n      if (bi.material && bj.material) {\n        cm = this.getContactMaterial(bi.material, bj.material) || this.defaultContactMaterial;\n      } else {\n        cm = this.defaultContactMaterial;\n      } // c.enabled = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;\n\n\n      cm.friction; // c.restitution = cm.restitution;\n      // If friction or restitution were specified in the material, use them\n\n      if (bi.material && bj.material) {\n        if (bi.material.friction >= 0 && bj.material.friction >= 0) {\n          bi.material.friction * bj.material.friction;\n        }\n\n        if (bi.material.restitution >= 0 && bj.material.restitution >= 0) {\n          c.restitution = bi.material.restitution * bj.material.restitution;\n        }\n      } // c.setSpookParams(\n      //           cm.contactEquationStiffness,\n      //           cm.contactEquationRelaxation,\n      //           dt\n      //       );\n\n\n      solver.addEquation(c); // // Add friction constraint equation\n      // if(mu > 0){\n      // \t// Create 2 tangent equations\n      // \tconst mug = mu * gnorm;\n      // \tconst reducedMass = (bi.invMass + bj.invMass);\n      // \tif(reducedMass > 0){\n      // \t\treducedMass = 1/reducedMass;\n      // \t}\n      // \tconst pool = frictionEquationPool;\n      // \tconst c1 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);\n      // \tconst c2 = pool.length ? pool.pop() : new FrictionEquation(bi,bj,mug*reducedMass);\n      // \tthis.frictionEquations.push(c1, c2);\n      // \tc1.bi = c2.bi = bi;\n      // \tc1.bj = c2.bj = bj;\n      // \tc1.minForce = c2.minForce = -mug*reducedMass;\n      // \tc1.maxForce = c2.maxForce = mug*reducedMass;\n      // \t// Copy over the relative vectors\n      // \tc1.ri.copy(c.ri);\n      // \tc1.rj.copy(c.rj);\n      // \tc2.ri.copy(c.ri);\n      // \tc2.rj.copy(c.rj);\n      // \t// Construct tangents\n      // \tc.ni.tangents(c1.t, c2.t);\n      //           // Set spook params\n      //           c1.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);\n      //           c2.setSpookParams(cm.frictionEquationStiffness, cm.frictionEquationRelaxation, dt);\n      //           c1.enabled = c2.enabled = c.enabled;\n      // \t// Add equations to solver\n      // \tsolver.addEquation(c1);\n      // \tsolver.addEquation(c2);\n      // }\n\n      if (bi.allowSleep && bi.type === Body.DYNAMIC && bi.sleepState === Body.SLEEPING && bj.sleepState === Body.AWAKE && bj.type !== Body.STATIC) {\n        const speedSquaredB = bj.velocity.lengthSquared() + bj.angularVelocity.lengthSquared();\n        const speedLimitSquaredB = bj.sleepSpeedLimit ** 2;\n\n        if (speedSquaredB >= speedLimitSquaredB * 2) {\n          bi.wakeUpAfterNarrowphase = true;\n        }\n      }\n\n      if (bj.allowSleep && bj.type === Body.DYNAMIC && bj.sleepState === Body.SLEEPING && bi.sleepState === Body.AWAKE && bi.type !== Body.STATIC) {\n        const speedSquaredA = bi.velocity.lengthSquared() + bi.angularVelocity.lengthSquared();\n        const speedLimitSquaredA = bi.sleepSpeedLimit ** 2;\n\n        if (speedSquaredA >= speedLimitSquaredA * 2) {\n          bj.wakeUpAfterNarrowphase = true;\n        }\n      } // Now we know that i and j are in contact. Set collision matrix state\n\n\n      this.collisionMatrix.set(bi, bj, true);\n\n      if (!this.collisionMatrixPrevious.get(bi, bj)) {\n        // First contact!\n        // We reuse the collideEvent object, otherwise we will end up creating new objects for each new contact, even if there's no event listener attached.\n        World_step_collideEvent.body = bj;\n        World_step_collideEvent.contact = c;\n        bi.dispatchEvent(World_step_collideEvent);\n        World_step_collideEvent.body = bi;\n        bj.dispatchEvent(World_step_collideEvent);\n      }\n\n      this.bodyOverlapKeeper.set(bi.id, bj.id);\n      this.shapeOverlapKeeper.set(si.id, sj.id);\n    }\n\n    this.emitContactEvents();\n\n    if (doProfiling) {\n      profile.makeContactConstraints = performance.now() - profilingStart;\n      profilingStart = performance.now();\n    } // Wake up bodies\n\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n\n      if (bi.wakeUpAfterNarrowphase) {\n        bi.wakeUp();\n        bi.wakeUpAfterNarrowphase = false;\n      }\n    } // Add user-added constraints\n\n\n    Nconstraints = constraints.length;\n\n    for (i = 0; i !== Nconstraints; i++) {\n      const c = constraints[i];\n      c.update();\n\n      for (let j = 0, Neq = c.equations.length; j !== Neq; j++) {\n        const eq = c.equations[j];\n        solver.addEquation(eq);\n      }\n    } // Solve the constrained system\n\n\n    solver.solve(dt, this);\n\n    if (doProfiling) {\n      profile.solve = performance.now() - profilingStart;\n    } // Remove all contacts from solver\n\n\n    solver.removeAllEquations(); // Apply damping, see http://code.google.com/p/bullet/issues/detail?id=74 for details\n\n    const pow = Math.pow;\n\n    for (i = 0; i !== N; i++) {\n      const bi = bodies[i];\n\n      if (bi.type & DYNAMIC) {\n        // Only for dynamic bodies\n        const ld = pow(1.0 - bi.linearDamping, dt);\n        const v = bi.velocity;\n        v.scale(ld, v);\n        const av = bi.angularVelocity;\n\n        if (av) {\n          const ad = pow(1.0 - bi.angularDamping, dt);\n          av.scale(ad, av);\n        }\n      }\n    }\n\n    this.dispatchEvent(World_step_preStepEvent); // Leap frog\n    // vnew = v + h*f/m\n    // xnew = x + h*vnew\n\n    if (doProfiling) {\n      profilingStart = performance.now();\n    }\n\n    const stepnumber = this.stepnumber;\n    const quatNormalize = stepnumber % (this.quatNormalizeSkip + 1) === 0;\n    const quatNormalizeFast = this.quatNormalizeFast;\n\n    for (i = 0; i !== N; i++) {\n      bodies[i].integrate(dt, quatNormalize, quatNormalizeFast);\n    }\n\n    this.clearForces();\n    this.broadphase.dirty = true;\n\n    if (doProfiling) {\n      profile.integrate = performance.now() - profilingStart;\n    } // Update step number\n\n\n    this.stepnumber += 1;\n    this.dispatchEvent(World_step_postStepEvent); // Sleeping update\n\n    let hasActiveBodies = true;\n\n    if (this.allowSleep) {\n      hasActiveBodies = false;\n\n      for (i = 0; i !== N; i++) {\n        const bi = bodies[i];\n        bi.sleepTick(this.time);\n\n        if (bi.sleepState !== Body.SLEEPING) {\n          hasActiveBodies = true;\n        }\n      }\n    }\n\n    this.hasActiveBodies = hasActiveBodies;\n  }\n\n  emitContactEvents() {\n    const hasBeginContact = this.hasAnyEventListener('beginContact');\n    const hasEndContact = this.hasAnyEventListener('endContact');\n\n    if (hasBeginContact || hasEndContact) {\n      this.bodyOverlapKeeper.getDiff(additions, removals);\n    }\n\n    if (hasBeginContact) {\n      for (let i = 0, l = additions.length; i < l; i += 2) {\n        beginContactEvent.bodyA = this.getBodyById(additions[i]);\n        beginContactEvent.bodyB = this.getBodyById(additions[i + 1]);\n        this.dispatchEvent(beginContactEvent);\n      }\n\n      beginContactEvent.bodyA = beginContactEvent.bodyB = null;\n    }\n\n    if (hasEndContact) {\n      for (let i = 0, l = removals.length; i < l; i += 2) {\n        endContactEvent.bodyA = this.getBodyById(removals[i]);\n        endContactEvent.bodyB = this.getBodyById(removals[i + 1]);\n        this.dispatchEvent(endContactEvent);\n      }\n\n      endContactEvent.bodyA = endContactEvent.bodyB = null;\n    }\n\n    additions.length = removals.length = 0;\n    const hasBeginShapeContact = this.hasAnyEventListener('beginShapeContact');\n    const hasEndShapeContact = this.hasAnyEventListener('endShapeContact');\n\n    if (hasBeginShapeContact || hasEndShapeContact) {\n      this.shapeOverlapKeeper.getDiff(additions, removals);\n    }\n\n    if (hasBeginShapeContact) {\n      for (let i = 0, l = additions.length; i < l; i += 2) {\n        const shapeA = this.getShapeById(additions[i]);\n        const shapeB = this.getShapeById(additions[i + 1]);\n        beginShapeContactEvent.shapeA = shapeA;\n        beginShapeContactEvent.shapeB = shapeB;\n        if (shapeA) beginShapeContactEvent.bodyA = shapeA.body;\n        if (shapeB) beginShapeContactEvent.bodyB = shapeB.body;\n        this.dispatchEvent(beginShapeContactEvent);\n      }\n\n      beginShapeContactEvent.bodyA = beginShapeContactEvent.bodyB = beginShapeContactEvent.shapeA = beginShapeContactEvent.shapeB = null;\n    }\n\n    if (hasEndShapeContact) {\n      for (let i = 0, l = removals.length; i < l; i += 2) {\n        const shapeA = this.getShapeById(removals[i]);\n        const shapeB = this.getShapeById(removals[i + 1]);\n        endShapeContactEvent.shapeA = shapeA;\n        endShapeContactEvent.shapeB = shapeB;\n        if (shapeA) endShapeContactEvent.bodyA = shapeA.body;\n        if (shapeB) endShapeContactEvent.bodyB = shapeB.body;\n        this.dispatchEvent(endShapeContactEvent);\n      }\n\n      endShapeContactEvent.bodyA = endShapeContactEvent.bodyB = endShapeContactEvent.shapeA = endShapeContactEvent.shapeB = null;\n    }\n  }\n  /**\n   * Sets all body forces in the world to zero.\n   */\n\n\n  clearForces() {\n    const bodies = this.bodies;\n    const N = bodies.length;\n\n    for (let i = 0; i !== N; i++) {\n      const b = bodies[i];\n      b.force;\n      b.torque;\n      b.force.set(0, 0, 0);\n      b.torque.set(0, 0, 0);\n    }\n  }\n\n} // Temp stuff\n\nnew AABB();\nconst tmpRay = new Ray(); // performance.now() fallback on Date.now()\n\nconst performance = globalThis.performance || {};\n\nif (!performance.now) {\n  let nowOffset = Date.now();\n\n  if (performance.timing && performance.timing.navigationStart) {\n    nowOffset = performance.timing.navigationStart;\n  }\n\n  performance.now = () => Date.now() - nowOffset;\n}\n\nnew Vec3(); // Dispatched after the world has stepped forward in time.\n// Reusable event objects to save memory.\n\nconst World_step_postStepEvent = {\n  type: 'postStep'\n}; // Dispatched before the world steps forward in time.\n\nconst World_step_preStepEvent = {\n  type: 'preStep'\n};\nconst World_step_collideEvent = {\n  type: Body.COLLIDE_EVENT_NAME,\n  body: null,\n  contact: null\n}; // Pools for unused objects\n\nconst World_step_oldContacts = [];\nconst World_step_frictionEquationPool = []; // Reusable arrays for collision pairs\n\nconst World_step_p1 = [];\nconst World_step_p2 = []; // Stuff for emitContactEvents\n\nconst additions = [];\nconst removals = [];\nconst beginContactEvent = {\n  type: 'beginContact',\n  bodyA: null,\n  bodyB: null\n};\nconst endContactEvent = {\n  type: 'endContact',\n  bodyA: null,\n  bodyB: null\n};\nconst beginShapeContactEvent = {\n  type: 'beginShapeContact',\n  bodyA: null,\n  bodyB: null,\n  shapeA: null,\n  shapeB: null\n};\nconst endShapeContactEvent = {\n  type: 'endShapeContact',\n  bodyA: null,\n  bodyB: null,\n  shapeA: null,\n  shapeB: null\n};\n\nexport { AABB, ArrayCollisionMatrix, BODY_SLEEP_STATES, BODY_TYPES, Body, Box, Broadphase, COLLISION_TYPES, ConeTwistConstraint, Constraint, ContactEquation, ContactMaterial, ConvexPolyhedron, Cylinder, DistanceConstraint, Equation, EventTarget, FrictionEquation, GSSolver, GridBroadphase, Heightfield, HingeConstraint, JacobianElement, LockConstraint, Mat3, Material, NaiveBroadphase, Narrowphase, ObjectCollisionMatrix, Particle, Plane, PointToPointConstraint, Pool, Quaternion, RAY_MODES, Ray, RaycastResult, RaycastVehicle, RigidVehicle, RotationalEquation, RotationalMotorEquation, SAPBroadphase, SHAPE_TYPES, SPHSystem, Shape, Solver, Sphere, SplitSolver, Spring, Transform, Trimesh, Vec3, Vec3Pool, WheelInfo, World };\n","import { ContactMaterial } from 'cannon-es'\n\nimport type { CannonMessageBody } from '../types'\nimport type { CreateMaterial } from './material'\nimport type { State } from './state'\nimport type { WithUUID } from './types'\n\nexport const addContactMaterial = (\n  world: State['world'],\n  createMaterial: CreateMaterial,\n  [materialA, materialB, options]: CannonMessageBody<'addContactMaterial'>['props'],\n  uuid: string,\n) => {\n  const matA = createMaterial(materialA)\n  const matB = createMaterial(materialB)\n  const contactMaterial: WithUUID<ContactMaterial> = new ContactMaterial(matA, matB, options)\n  contactMaterial.uuid = uuid\n  world.addContactMaterial(contactMaterial)\n}\n\nexport const removeContactMaterial = (world: State['world'], cmUUID: string) => {\n  const index = world.contactmaterials.findIndex(({ uuid }) => uuid === cmUUID)\n  const [{ id: i }, { id: j }] = world.contactmaterials[index].materials\n\n  world.contactmaterials.splice(index, 1)\n  delete world.contactMaterialTable.data[i < j ? `${i}-${j}` : `${j}-${i}`]\n}\n","import { Material } from 'cannon-es'\n\ntype MaterialOptions = {\n  friction?: number\n  name?: string | symbol\n  restitution?: number\n}\n\nexport type CreateMaterial = (nameOrOptions?: MaterialOptions | string) => Material\n\nlet materialId = 0\n\nexport const createMaterialFactory =\n  (materials: Record<string | symbol, Material>): CreateMaterial =>\n  (nameOrOptions = {}) => {\n    const materialOptions =\n      typeof nameOrOptions === 'string'\n        ? { name: nameOrOptions }\n        : { name: Symbol.for(`Material${materialId++}`), ...nameOrOptions }\n    const { name } = materialOptions\n    materials[name] = materials[name] || new Material(materialOptions)\n    return materials[name]\n  }\n","import {\n  Body,\n  Box,\n  ConvexPolyhedron,\n  Cylinder,\n  Heightfield,\n  Material,\n  Particle,\n  Plane,\n  Quaternion,\n  Sphere,\n  Trimesh,\n  Vec3,\n} from 'cannon-es'\n/**\n * @typedef { import('cannon-es').MaterialOptions } MaterialOptions\n */\n\nconst makeVec3 = ([x, y, z]) => new Vec3(x, y, z)\nconst prepareSphere = (args) => (Array.isArray(args) ? args : [args])\nconst prepareConvexPolyhedron = ([v, faces, n, a, boundingSphereRadius]) => [\n  {\n    axes: a ? a.map(makeVec3) : undefined,\n    boundingSphereRadius,\n    faces,\n    normals: n ? n.map(makeVec3) : undefined,\n    vertices: v ? v.map(makeVec3) : undefined,\n  },\n]\n\nfunction createShape(type, args) {\n  switch (type) {\n    case 'Box':\n      return new Box(new Vec3(...args.map((v) => v / 2))) // extents => halfExtents\n    case 'ConvexPolyhedron':\n      return new ConvexPolyhedron(...prepareConvexPolyhedron(args))\n    case 'Cylinder':\n      return new Cylinder(...args) // [ radiusTop, radiusBottom, height, numSegments ] = args\n    case 'Heightfield':\n      return new Heightfield(...args) // [ Array data, options: {minValue, maxValue, elementSize}  ] = args\n    case 'Particle':\n      return new Particle() // no args\n    case 'Plane':\n      return new Plane() // no args, infinite x and y\n    case 'Sphere':\n      return new Sphere(...prepareSphere(args)) // radius = args\n    case 'Trimesh':\n      return new Trimesh(...args) // [vertices, indices] = args\n  }\n}\n\n/**\n * @function\n * @param {Object} options\n * @param {string} options.uuid\n * @param {BodyProps} options.props\n * @param {BodyShapeType} options.type\n * @param {(materialOptions: MaterialOptions) => Material =} options.createMaterial\n * @returns {Body}\n */\nexport const propsToBody = (options) => {\n  const { uuid, props, type, createMaterial = (materialOptions) => new Material(materialOptions) } = options\n  const {\n    angularFactor = [1, 1, 1],\n    angularVelocity = [0, 0, 0],\n    args = [],\n    collisionResponse,\n    linearFactor = [1, 1, 1],\n    mass,\n    material,\n    onCollide,\n    position = [0, 0, 0],\n    rotation = [0, 0, 0],\n    shapes,\n    type: bodyType,\n    velocity = [0, 0, 0],\n    ...extra\n  } = props\n\n  const body = new Body({\n    ...extra,\n    mass: bodyType === 'Static' ? 0 : mass,\n    material: material ? createMaterial(material) : undefined,\n    type: bodyType ? Body[bodyType.toUpperCase()] : undefined,\n  })\n  body.uuid = uuid\n\n  if (collisionResponse !== undefined) {\n    body.collisionResponse = collisionResponse\n  }\n\n  if (type === 'Compound') {\n    shapes.forEach(({ type, args, position, rotation, material, ...extra }) => {\n      const shapeBody = body.addShape(\n        createShape(type, args),\n        position ? new Vec3(...position) : undefined,\n        rotation ? new Quaternion().setFromEuler(...rotation) : undefined,\n      )\n      if (material) shapeBody.material = createMaterial(material)\n      Object.assign(shapeBody, extra)\n    })\n  } else {\n    body.addShape(createShape(type, args))\n  }\n\n  body.position.set(position[0], position[1], position[2])\n  body.quaternion.setFromEuler(rotation[0], rotation[1], rotation[2])\n  body.velocity.set(velocity[0], velocity[1], velocity[2])\n  body.angularVelocity.set(angularVelocity[0], angularVelocity[1], angularVelocity[2])\n  body.linearFactor.set(linearFactor[0], linearFactor[1], linearFactor[2])\n  body.angularFactor.set(angularFactor[0], angularFactor[1], angularFactor[2])\n  return body\n}\n","import { propsToBody } from '../../props-to-body'\nimport type { CannonMessageMap } from '../../types'\nimport type { CreateMaterial } from '../material'\nimport type { State } from '../state'\nimport type { CannonCollideEvent, CannonWorkerGlobalScope } from '../types'\n\ndeclare const self: CannonWorkerGlobalScope\n\nexport const addBodies = (\n  state: State,\n  createMaterial: CreateMaterial,\n  { props, type, uuid }: CannonMessageMap['addBodies'],\n) => {\n  for (let i = 0; i < uuid.length; i++) {\n    const body = propsToBody({\n      createMaterial,\n      props: props[i],\n      type,\n      uuid: uuid[i],\n    })\n    state.world.addBody(body)\n\n    if (props[i].onCollide)\n      body.addEventListener('collide', ({ type, body, target, contact }: CannonCollideEvent) => {\n        if (!body.uuid || !target.uuid) return\n\n        const { ni, ri, rj, bi, bj, id } = contact\n        const contactPoint = bi.position.vadd(ri)\n        const contactNormal = bi === body ? ni : ni.scale(-1)\n\n        self.postMessage({\n          body: body.uuid,\n          collisionFilters: {\n            bodyFilterGroup: body.collisionFilterGroup,\n            bodyFilterMask: body.collisionFilterMask,\n            targetFilterGroup: target.collisionFilterGroup,\n            targetFilterMask: target.collisionFilterMask,\n          },\n          contact: {\n            // @ts-expect-error TODO: use id instead of uuid\n            bi: bi.uuid,\n            // @ts-expect-error TODO: use id instead of uuid\n            bj: bj.uuid,\n            // Normal of the contact, relative to the colliding body\n            contactNormal: contactNormal.toArray(),\n            // World position of the contact\n            contactPoint: contactPoint.toArray(),\n            id,\n            impactVelocity: contact.getImpactVelocityAlongNormal(),\n            ni: ni.toArray(),\n            ri: ri.toArray(),\n            rj: rj.toArray(),\n          },\n          op: 'event',\n          target: target.uuid,\n          type,\n        })\n      })\n  }\n}\n","import { Vec3 } from 'cannon-es'\n\nimport type { Triplet } from '../types'\n\nexport const tripletToVec3 = (t?: Triplet) => (t ? new Vec3(...t) : undefined)\n","import {\n  ConeTwistConstraint,\n  Constraint,\n  DistanceConstraint,\n  HingeConstraint,\n  LockConstraint,\n  PointToPointConstraint,\n} from 'cannon-es'\n\nimport type { CannonMessageMap } from '../../types'\nimport type { State } from '../state'\nimport { tripletToVec3 } from '../triplet-to-vec3'\nimport type { WithUUID } from '../types'\n\nexport const addConstraint = (\n  state: State,\n  {\n    props: [\n      bodyA,\n      bodyB,\n      {\n        angle,\n        axisA,\n        axisB,\n        collideConnected,\n        distance,\n        maxForce,\n        maxMultiplier,\n        pivotA,\n        pivotB,\n        twistAngle,\n        wakeUpBodies,\n      },\n    ],\n    type,\n    uuid,\n  }: CannonMessageMap['addConstraint'],\n) => {\n  let constraint: WithUUID<Constraint>\n\n  switch (type) {\n    case 'PointToPoint':\n      constraint = new PointToPointConstraint(\n        state.bodies[bodyA],\n        tripletToVec3(pivotA),\n        state.bodies[bodyB],\n        tripletToVec3(pivotB),\n        maxForce,\n      )\n      break\n    case 'ConeTwist':\n      constraint = new ConeTwistConstraint(state.bodies[bodyA], state.bodies[bodyB], {\n        angle,\n        axisA: tripletToVec3(axisA),\n        axisB: tripletToVec3(axisB),\n        collideConnected,\n        maxForce,\n        pivotA: tripletToVec3(pivotA),\n        pivotB: tripletToVec3(pivotB),\n        twistAngle,\n      })\n      break\n    case 'Hinge':\n      constraint = new HingeConstraint(state.bodies[bodyA], state.bodies[bodyB], {\n        axisA: tripletToVec3(axisA),\n        axisB: tripletToVec3(axisB),\n        collideConnected,\n        maxForce,\n        pivotA: tripletToVec3(pivotA),\n        pivotB: tripletToVec3(pivotB),\n      })\n      break\n    case 'Distance':\n      constraint = new DistanceConstraint(state.bodies[bodyA], state.bodies[bodyB], distance, maxForce)\n      break\n    case 'Lock':\n      constraint = new LockConstraint(state.bodies[bodyA], state.bodies[bodyB], { maxForce })\n      break\n    default:\n      constraint = new Constraint(state.bodies[bodyA], state.bodies[bodyB], {\n        collideConnected,\n        wakeUpBodies,\n      })\n      break\n  }\n  constraint.uuid = uuid\n  state.world.addConstraint(constraint)\n\n  if (maxMultiplier !== undefined) {\n    const postStepConstraint = () => {\n      // The multiplier is proportional to how much force is added to the bodies by the constraint.\n      // If this exceeds a limit the constraint is disabled.\n      const multiplier = Math.abs(constraint.equations[0].multiplier)\n      if (multiplier > maxMultiplier) {\n        constraint.disable()\n      }\n    }\n    state.constraints[uuid] = postStepConstraint\n    state.world.addEventListener('postStep', state.constraints[uuid])\n  }\n}\n","import type { Body, RayOptions } from 'cannon-es'\nimport { Ray, RAY_MODES, RaycastResult } from 'cannon-es'\n\nimport type { CannonMessageMap } from '../../types'\nimport type { State } from '../state'\nimport { tripletToVec3 } from '../triplet-to-vec3'\nimport type { CannonWorkerGlobalScope, WithUUID } from '../types'\n\ndeclare const self: CannonWorkerGlobalScope\n\nfunction toUppercase<T extends string>(str: T): Uppercase<T> {\n  return str.toUpperCase() as Uppercase<T>\n}\n\nexport const addRay = (\n  state: State,\n  { props: { from, mode, to, ...rayOptions }, uuid }: CannonMessageMap['addRay'],\n) => {\n  const ray = new Ray(tripletToVec3(from), tripletToVec3(to))\n\n  const options: RayOptions = {\n    mode: RAY_MODES[toUppercase(mode)],\n    result: new RaycastResult(),\n    ...rayOptions,\n  }\n\n  state.rays[uuid] = () => {\n    ray.intersectWorld(state.world, options)\n\n    if (!options.result || !options.result.body) return\n\n    const { body, shape, rayFromWorld, rayToWorld, hitNormalWorld, hitPointWorld, ...rest } = options.result\n\n    const bodyUUID = (body as WithUUID<Body>).uuid\n\n    if (!bodyUUID) return\n\n    self.postMessage({\n      body: bodyUUID,\n      hitNormalWorld: hitNormalWorld.toArray(),\n      hitPointWorld: hitPointWorld.toArray(),\n      op: 'event',\n      ray: {\n        collisionFilterGroup: ray.collisionFilterGroup,\n        collisionFilterMask: ray.collisionFilterMask,\n        direction: ray.direction.toArray(),\n        from,\n        to,\n        uuid,\n      },\n      rayFromWorld: rayFromWorld.toArray(),\n      rayToWorld: rayToWorld.toArray(),\n      shape: shape ? { ...shape, body: bodyUUID } : null,\n      type: 'rayhit',\n      ...rest,\n    })\n  }\n\n  state.world.addEventListener('preStep', state.rays[uuid])\n}\n","import { RaycastVehicle } from 'cannon-es'\n\nimport type { CannonMessageMap } from '../../types'\nimport type { State } from '../state'\nimport { tripletToVec3 } from '../triplet-to-vec3'\n\nexport const addRaycastVehicle = (state: State, data: CannonMessageMap['addRaycastVehicle']) => {\n  const [chassisBody, wheels, wheelInfos, indexForwardAxis, indexRightAxis, indexUpAxis] = data.props\n\n  const vehicle = new RaycastVehicle({\n    chassisBody: state.bodies[chassisBody],\n    indexForwardAxis,\n    indexRightAxis,\n    indexUpAxis,\n  })\n\n  vehicle.world = state.world\n\n  for (let i = 0; i < wheelInfos.length; i++) {\n    const { axleLocal, chassisConnectionPointLocal, directionLocal, ...rest } = wheelInfos[i]\n\n    vehicle.addWheel({\n      axleLocal: tripletToVec3(axleLocal),\n      chassisConnectionPointLocal: tripletToVec3(chassisConnectionPointLocal),\n      directionLocal: tripletToVec3(directionLocal),\n      ...rest,\n    })\n  }\n\n  const preStep = () => {\n    vehicle.updateVehicle(state.world.dt)\n  }\n\n  const postStep = () => {\n    for (let i = 0; i < vehicle.wheelInfos.length; i++) {\n      vehicle.updateWheelTransform(i)\n\n      const t = vehicle.wheelInfos[i].worldTransform\n      const wheelBody = state.bodies[wheels[i]]\n\n      wheelBody.position.copy(t.position)\n      wheelBody.quaternion.copy(t.quaternion)\n    }\n  }\n\n  state.vehicles[data.uuid] = { postStep, preStep, vehicle }\n\n  state.world.addEventListener('preStep', preStep)\n  state.world.addEventListener('postStep', postStep)\n}\n","import { Spring } from 'cannon-es'\n\nimport type { CannonMessageMap } from '../../types'\nimport type { State } from '../state'\nimport { tripletToVec3 } from '../triplet-to-vec3'\nimport type { WithUUID } from '../types'\n\nexport const addSpring = (\n  state: State,\n  {\n    props: [\n      bodyA,\n      bodyB,\n      { damping, localAnchorA, localAnchorB, restLength, stiffness, worldAnchorA, worldAnchorB },\n    ],\n    uuid,\n  }: CannonMessageMap['addSpring'],\n) => {\n  const spring: WithUUID<Spring> = new Spring(state.bodies[bodyA], state.bodies[bodyB], {\n    damping,\n    localAnchorA: tripletToVec3(localAnchorA),\n    localAnchorB: tripletToVec3(localAnchorB),\n    restLength,\n    stiffness,\n    worldAnchorA: tripletToVec3(worldAnchorA),\n    worldAnchorB: tripletToVec3(worldAnchorB),\n  })\n\n  spring.uuid = uuid\n\n  const postStepSpring = () => spring.applyForce()\n\n  state.springs[uuid] = postStepSpring\n  state.springInstances[uuid] = spring\n\n  // Compute the force after each step\n  state.world.addEventListener('postStep', state.springs[uuid])\n}\n","import type { Body } from 'cannon-es'\nimport { GSSolver, NaiveBroadphase, SAPBroadphase, SplitSolver, Vec3 } from 'cannon-es'\n\nimport type { CannonMessageProps } from '../../types'\nimport type { DecoratedWorld } from '../state'\nimport type { CannonWorkerGlobalScope, WithUUID } from '../types'\n\ndeclare const self: CannonWorkerGlobalScope\n\ntype TwoBodies = {\n  bodyA?: WithUUID<Body>\n  bodyB?: WithUUID<Body>\n}\n\nfunction emitBeginContact({ bodyA, bodyB }: TwoBodies) {\n  if (!bodyA?.uuid || !bodyB?.uuid) return\n  self.postMessage({ bodyA: bodyA.uuid, bodyB: bodyB.uuid, op: 'event', type: 'collideBegin' })\n}\n\nfunction emitEndContact({ bodyA, bodyB }: TwoBodies) {\n  if (!bodyA?.uuid || !bodyB?.uuid) return\n  self.postMessage({ bodyA: bodyA.uuid, bodyB: bodyB.uuid, op: 'event', type: 'collideEnd' })\n}\n\nexport const init = (\n  world: DecoratedWorld,\n  {\n    allowSleep,\n    axisIndex = 0,\n    broadphase,\n    defaultContactMaterial,\n    frictionGravity,\n    gravity,\n    iterations,\n    quatNormalizeFast,\n    quatNormalizeSkip,\n    solver,\n    tolerance,\n  }: CannonMessageProps<'init'>,\n): void => {\n  world.allowSleep = allowSleep\n  world.gravity.set(...gravity)\n  world.frictionGravity = frictionGravity ? new Vec3(...frictionGravity) : undefined\n  world.quatNormalizeFast = quatNormalizeFast\n  world.quatNormalizeSkip = quatNormalizeSkip\n\n  if (solver === 'Split') {\n    world.solver = new SplitSolver(new GSSolver())\n  }\n\n  if (world.solver instanceof GSSolver) {\n    world.solver.tolerance = tolerance\n    world.solver.iterations = iterations\n  }\n\n  world.broadphase = broadphase === 'SAP' ? new SAPBroadphase(world) : new NaiveBroadphase()\n\n  if (world.broadphase instanceof SAPBroadphase) {\n    world.broadphase.axisIndex = axisIndex\n  }\n\n  world.addEventListener('beginContact', emitBeginContact)\n  world.addEventListener('endContact', emitEndContact)\n\n  Object.assign(world.defaultContactMaterial, defaultContactMaterial)\n}\n","import { Quaternion, Vec3 } from 'cannon-es'\n\nimport type { CannonMessageMap, Observation, PropValue, WorkerFrameMessage } from '../../types'\nimport type { State } from '../state'\nimport type { CannonWorkerGlobalScope } from '../types'\n\ndeclare const self: CannonWorkerGlobalScope\n\nconst isQorV = (v: unknown): v is Quaternion | Vec3 => v instanceof Quaternion || v instanceof Vec3\n\nexport const step = (\n  state: State,\n  { positions, props: { maxSubSteps, stepSize, timeSinceLastCalled }, quaternions }: CannonMessageMap['step'],\n) => {\n  state.world.step(stepSize, timeSinceLastCalled, maxSubSteps)\n\n  for (let i = 0; i < state.world.bodies.length; i += 1) {\n    const p = state.world.bodies[i].position\n    const q = state.world.bodies[i].quaternion\n\n    positions[3 * i + 0] = p.x\n    positions[3 * i + 1] = p.y\n    positions[3 * i + 2] = p.z\n\n    quaternions[4 * i + 0] = q.x\n    quaternions[4 * i + 1] = q.y\n    quaternions[4 * i + 2] = q.z\n    quaternions[4 * i + 3] = q.w\n  }\n\n  const observations: Observation[] = []\n\n  for (const id of Object.keys(state.subscriptions)) {\n    const [uuid, type, target = 'bodies'] = state.subscriptions[id]\n\n    const { bodies, vehicles } = state\n\n    const value =\n      target === 'vehicles'\n        ? // @ts-expect-error TODO: Differentiate these \"types\"\n          vehicles[uuid].vehicle[type]\n        : // @ts-expect-error TODO: Differentiate these \"types\"\n          bodies[uuid][type]\n\n    const serializableValue: PropValue<typeof type> = isQorV(value) ? value.toArray() : value\n\n    observations.push([\n      Number(id),\n      serializableValue,\n      // @ts-expect-error TODO: Differentiate these \"types\"\n      type,\n    ])\n  }\n\n  const message: WorkerFrameMessage['data'] = {\n    active: state.world.hasActiveBodies,\n    observations,\n    op: 'frame',\n    positions,\n    quaternions,\n  }\n\n  if (state.bodiesNeedSyncing) {\n    message.bodies = state.world.bodies.reduce((bodies: string[], body) => {\n      if (body.uuid) bodies.push(body.uuid)\n      return bodies\n    }, [])\n    state.bodiesNeedSyncing = false\n  }\n\n  self.postMessage(message, [positions.buffer, quaternions.buffer])\n}\n","import type { Body, Constraint, ContactMaterial, Material, RaycastVehicle, Spring } from 'cannon-es'\nimport { World } from 'cannon-es'\n\nimport type { SubscriptionName, SubscriptionTarget } from '../types'\nimport type { WithUUID } from './types'\n\nexport interface DecoratedWorld extends World {\n  bodies: WithUUID<Body>[]\n  constraints: WithUUID<Constraint>[]\n  contactmaterials: WithUUID<ContactMaterial>[]\n}\n\nexport interface State {\n  bodies: { [uuid: string]: Body }\n  bodiesNeedSyncing: boolean\n  constraints: { [uuid: string]: () => void }\n  materials: { [uuid: string]: Material }\n  rays: { [uuid: string]: () => void }\n  springInstances: { [uuid: string]: Spring }\n  springs: { [uuid: string]: () => void }\n  subscriptions: { [id: string]: [uuid: string, type: SubscriptionName, target: SubscriptionTarget] }\n  vehicles: { [uuid: string]: { postStep: () => void; preStep: () => void; vehicle: RaycastVehicle } }\n  world: DecoratedWorld\n}\n\nexport const state: State = {\n  bodies: {},\n  bodiesNeedSyncing: false,\n  constraints: {},\n  materials: {},\n  rays: {},\n  springInstances: {},\n  springs: {},\n  subscriptions: {},\n  vehicles: {},\n  world: new World(),\n}\n","/// <reference no-default-lib=\"true\"/>\n/// <reference lib=\"esnext\" />\n/// <reference lib=\"webworker\" />\n\nimport { GSSolver, HingeConstraint, NaiveBroadphase, SAPBroadphase, Vec3 } from 'cannon-es'\n\nimport type { CannonMessage } from '../types'\nimport { addContactMaterial, removeContactMaterial } from './contact-material'\nimport { createMaterialFactory } from './material'\nimport { addBodies, addConstraint, addRay, addRaycastVehicle, addSpring, init, step } from './operations'\nimport { state } from './state'\nimport type { CannonWorkerGlobalScope } from './types'\n\n// TODO: Declare this for all files in worker\ndeclare const self: CannonWorkerGlobalScope\n\nconst isHingeConstraint = (c: unknown): c is HingeConstraint => c instanceof HingeConstraint\n\nfunction syncBodies() {\n  state.bodiesNeedSyncing = true\n  state.bodies = state.world.bodies.reduce(\n    (bodies, body) => (body.uuid ? { ...bodies, [body.uuid]: body } : bodies),\n    {},\n  )\n}\n\nconst broadphases = { NaiveBroadphase, SAPBroadphase }\nconst createMaterial = createMaterialFactory(state.materials)\n\nself.onmessage = ({ data }: { data: CannonMessage }) => {\n  switch (data.op) {\n    case 'init': {\n      init(state.world, data.props)\n      break\n    }\n    case 'step': {\n      step(state, data)\n      break\n    }\n    case 'addBodies': {\n      addBodies(state, createMaterial, data)\n      syncBodies()\n      break\n    }\n    case 'removeBodies': {\n      for (let i = 0; i < data.uuid.length; i++) {\n        state.world.removeBody(state.bodies[data.uuid[i]])\n        const key = Object.keys(state.subscriptions).find((k) => state.subscriptions[k][0] === data.uuid[i])\n        if (key) {\n          delete state.subscriptions[key]\n        }\n      }\n      syncBodies()\n      break\n    }\n    case 'subscribe': {\n      const { id, target, type } = data.props\n      state.subscriptions[id] = [data.uuid, type, target]\n      break\n    }\n    case 'unsubscribe': {\n      delete state.subscriptions[data.props]\n      break\n    }\n    case 'setPosition':\n      state.bodies[data.uuid].position.set(data.props[0], data.props[1], data.props[2])\n      break\n    case 'setQuaternion':\n      state.bodies[data.uuid].quaternion.set(data.props[0], data.props[1], data.props[2], data.props[3])\n      break\n    case 'setRotation':\n      state.bodies[data.uuid].quaternion.setFromEuler(data.props[0], data.props[1], data.props[2])\n      break\n    case 'setVelocity':\n      state.bodies[data.uuid].velocity.set(data.props[0], data.props[1], data.props[2])\n      break\n    case 'setAngularVelocity':\n      state.bodies[data.uuid].angularVelocity.set(data.props[0], data.props[1], data.props[2])\n      break\n    case 'setLinearFactor':\n      state.bodies[data.uuid].linearFactor.set(data.props[0], data.props[1], data.props[2])\n      break\n    case 'setAngularFactor':\n      state.bodies[data.uuid].angularFactor.set(data.props[0], data.props[1], data.props[2])\n      break\n    case 'setMass':\n      state.bodies[data.uuid].mass = data.props\n      state.bodies[data.uuid].updateMassProperties()\n      break\n    case 'setMaterial':\n      state.bodies[data.uuid].material = data.props ? createMaterial(data.props) : null\n      break\n    case 'setLinearDamping':\n      state.bodies[data.uuid].linearDamping = data.props\n      break\n    case 'setAngularDamping':\n      state.bodies[data.uuid].angularDamping = data.props\n      break\n    case 'setAllowSleep':\n      state.bodies[data.uuid].allowSleep = data.props\n      break\n    case 'setSleepSpeedLimit':\n      state.bodies[data.uuid].sleepSpeedLimit = data.props\n      break\n    case 'setSleepTimeLimit':\n      state.bodies[data.uuid].sleepTimeLimit = data.props\n      break\n    case 'setCollisionFilterGroup':\n      state.bodies[data.uuid].collisionFilterGroup = data.props\n      break\n    case 'setCollisionFilterMask':\n      state.bodies[data.uuid].collisionFilterMask = data.props\n      break\n    case 'setCollisionResponse':\n      state.bodies[data.uuid].collisionResponse = data.props\n      break\n    case 'setFixedRotation':\n      state.bodies[data.uuid].fixedRotation = data.props\n      break\n    case 'setFrictionGravity':\n      state.world.frictionGravity = data.props ? new Vec3(...data.props) : undefined\n      break\n    case 'setIsTrigger':\n      state.bodies[data.uuid].isTrigger = data.props\n      break\n    case 'setGravity':\n      state.world.gravity.set(data.props[0], data.props[1], data.props[2])\n      break\n    case 'setTolerance':\n      if (state.world.solver instanceof GSSolver) {\n        state.world.solver.tolerance = data.props\n      }\n      break\n    case 'setIterations':\n      if (state.world.solver instanceof GSSolver) {\n        state.world.solver.iterations = data.props\n      }\n      break\n    case 'setBroadphase':\n      state.world.broadphase = new (broadphases[`${data.props}Broadphase`] || NaiveBroadphase)(state.world)\n      break\n    case 'setAxisIndex':\n      if (state.world.broadphase instanceof SAPBroadphase) {\n        state.world.broadphase.axisIndex = data.props === undefined || data.props === null ? 0 : data.props\n      }\n      break\n    case 'applyForce':\n      state.bodies[data.uuid].applyForce(new Vec3(...data.props[0]), new Vec3(...data.props[1]))\n      break\n    case 'applyImpulse':\n      state.bodies[data.uuid].applyImpulse(new Vec3(...data.props[0]), new Vec3(...data.props[1]))\n      break\n    case 'applyLocalForce':\n      state.bodies[data.uuid].applyLocalForce(new Vec3(...data.props[0]), new Vec3(...data.props[1]))\n      break\n    case 'applyLocalImpulse':\n      state.bodies[data.uuid].applyLocalImpulse(new Vec3(...data.props[0]), new Vec3(...data.props[1]))\n      break\n    case 'applyTorque':\n      state.bodies[data.uuid].applyTorque(new Vec3(...data.props[0]))\n      break\n    case 'addConstraint': {\n      addConstraint(state, data)\n      break\n    }\n    case 'removeConstraint':\n      state.world.constraints\n        .filter(({ uuid }) => uuid === data.uuid)\n        .map((c) => state.world.removeConstraint(c))\n      if (state.constraints[data.uuid]) {\n        state.world.removeEventListener('postStep', state.constraints[data.uuid])\n        delete state.constraints[data.uuid]\n      }\n      break\n    case 'enableConstraint':\n      state.world.constraints.filter((c) => c.uuid === data.uuid).map((c) => c.enable())\n      break\n    case 'disableConstraint':\n      state.world.constraints.filter((c) => c.uuid === data.uuid).map((c) => c.disable())\n      break\n    case 'enableConstraintMotor':\n      state.world.constraints\n        .filter((c) => c.uuid === data.uuid)\n        .filter(isHingeConstraint)\n        .map((c) => c.enableMotor())\n      break\n    case 'disableConstraintMotor':\n      state.world.constraints\n        .filter((c) => c.uuid === data.uuid)\n        .filter(isHingeConstraint)\n        .map((c) => c.disableMotor())\n      break\n    case 'setConstraintMotorSpeed':\n      state.world.constraints\n        .filter((c) => c.uuid === data.uuid)\n        .filter(isHingeConstraint)\n        .map((c) => c.setMotorSpeed(data.props))\n      break\n    case 'setConstraintMotorMaxForce':\n      state.world.constraints\n        .filter((c) => c.uuid === data.uuid)\n        .filter(isHingeConstraint)\n        .map((c) => c.setMotorMaxForce(data.props))\n      break\n    case 'addSpring': {\n      addSpring(state, data)\n      break\n    }\n    case 'setSpringStiffness': {\n      state.springInstances[data.uuid].stiffness = data.props\n      break\n    }\n    case 'setSpringRestLength': {\n      state.springInstances[data.uuid].restLength = data.props\n      break\n    }\n    case 'setSpringDamping': {\n      state.springInstances[data.uuid].damping = data.props\n      break\n    }\n    case 'removeSpring': {\n      state.world.removeEventListener('postStep', state.springs[data.uuid])\n      break\n    }\n    case 'addRay': {\n      addRay(state, data)\n      break\n    }\n    case 'removeRay': {\n      state.world.removeEventListener('preStep', state.rays[data.uuid])\n      delete state.rays[data.uuid]\n      break\n    }\n    case 'addRaycastVehicle': {\n      addRaycastVehicle(state, data)\n      break\n    }\n    case 'removeRaycastVehicle': {\n      state.world.removeEventListener('preStep', state.vehicles[data.uuid].preStep)\n      state.world.removeEventListener('postStep', state.vehicles[data.uuid].postStep)\n      state.vehicles[data.uuid].vehicle.world = null\n      delete state.vehicles[data.uuid]\n      const key = Object.keys(state.subscriptions).find((k) => state.subscriptions[k][0] === data.uuid)\n      if (key) {\n        delete state.subscriptions[key]\n      }\n      break\n    }\n    case 'setRaycastVehicleSteeringValue': {\n      const [value, wheelIndex] = data.props\n      state.vehicles[data.uuid].vehicle.setSteeringValue(value, wheelIndex)\n      break\n    }\n    case 'applyRaycastVehicleEngineForce': {\n      const [value, wheelIndex] = data.props\n      state.vehicles[data.uuid].vehicle.applyEngineForce(value, wheelIndex)\n      break\n    }\n    case 'setRaycastVehicleBrake': {\n      const [brake, wheelIndex] = data.props\n      state.vehicles[data.uuid].vehicle.setBrake(brake, wheelIndex)\n      break\n    }\n    case 'addContactMaterial': {\n      addContactMaterial(state.world, createMaterial, data.props, data.uuid)\n      break\n    }\n    case 'removeContactMaterial': {\n      removeContactMaterial(state.world, data.uuid)\n      break\n    }\n    case 'wakeUp': {\n      state.bodies[data.uuid].wakeUp()\n      break\n    }\n    case 'sleep': {\n      state.bodies[data.uuid].sleep()\n      break\n    }\n  }\n}\n"],"names":["addContactMaterial","world","createMaterial","uuid","materialA","materialB","options","matA","matB","contactMaterial","ContactMaterial","removeContactMaterial","cmUUID","index","contactmaterials","findIndex","id","i","j","materials","splice","contactMaterialTable","data","materialId","createMaterialFactory","nameOrOptions","materialOptions","name","Symbol","for","Material","makeVec3","x","y","z","Vec3","prepareSphere","args","Array","isArray","prepareConvexPolyhedron","v","faces","n","a","boundingSphereRadius","axes","map","undefined","normals","vertices","createShape","type","Box","ConvexPolyhedron","Cylinder","Heightfield","Particle","Plane","Sphere","Trimesh","propsToBody","props","angularFactor","angularVelocity","collisionResponse","linearFactor","mass","material","onCollide","position","rotation","shapes","bodyType","velocity","extra","body","Body","toUpperCase","forEach","shapeBody","addShape","Quaternion","setFromEuler","Object","assign","set","quaternion","addBodies","state","length","addBody","addEventListener","target","contact","ni","ri","rj","bi","bj","contactPoint","vadd","contactNormal","scale","self","postMessage","collisionFilters","bodyFilterGroup","collisionFilterGroup","bodyFilterMask","collisionFilterMask","targetFilterGroup","targetFilterMask","toArray","impactVelocity","getImpactVelocityAlongNormal","op","tripletToVec3","t","addConstraint","bodyA","bodyB","angle","axisA","axisB","collideConnected","distance","maxForce","maxMultiplier","pivotA","pivotB","twistAngle","wakeUpBodies","constraint","PointToPointConstraint","bodies","ConeTwistConstraint","HingeConstraint","DistanceConstraint","LockConstraint","Constraint","postStepConstraint","multiplier","Math","abs","equations","disable","constraints","toUppercase","str","addRay","from","mode","to","rayOptions","ray","Ray","RAY_MODES","result","RaycastResult","rays","intersectWorld","shape","rayFromWorld","rayToWorld","hitNormalWorld","hitPointWorld","rest","bodyUUID","direction","addRaycastVehicle","chassisBody","wheels","wheelInfos","indexForwardAxis","indexRightAxis","indexUpAxis","vehicle","RaycastVehicle","axleLocal","chassisConnectionPointLocal","directionLocal","addWheel","preStep","updateVehicle","dt","postStep","updateWheelTransform","worldTransform","wheelBody","copy","vehicles","addSpring","damping","localAnchorA","localAnchorB","restLength","stiffness","worldAnchorA","worldAnchorB","spring","Spring","postStepSpring","applyForce","springs","springInstances","emitBeginContact","emitEndContact","init","allowSleep","axisIndex","broadphase","defaultContactMaterial","frictionGravity","gravity","iterations","quatNormalizeFast","quatNormalizeSkip","solver","tolerance","SplitSolver","GSSolver","SAPBroadphase","NaiveBroadphase","isQorV","step","positions","maxSubSteps","stepSize","timeSinceLastCalled","quaternions","p","q","w","observations","keys","subscriptions","value","serializableValue","push","Number","message","active","hasActiveBodies","bodiesNeedSyncing","reduce","buffer","World","isHingeConstraint","c","syncBodies","broadphases","onmessage","removeBody","key","find","k","updateMassProperties","linearDamping","angularDamping","sleepSpeedLimit","sleepTimeLimit","fixedRotation","isTrigger","applyImpulse","applyLocalForce","applyLocalImpulse","applyTorque","filter","removeConstraint","removeEventListener","enable","enableMotor","disableMotor","setMotorSpeed","setMotorMaxForce","wheelIndex","setSteeringValue","applyEngineForce","brake","setBrake","wakeUp","sleep"],"mappings":"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,CAAC;EACpB,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EACpB,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EACpB,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EACpB,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EACpB,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EACpB,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EACpB,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EACpB,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EACpB,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EACpB,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EACpB,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;EACpB,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACrB,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAC7C,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAC7C,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAC7C,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAC7C,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAC7C,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAC7C,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAC7C,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAC7C,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;EAC7C,IAAI,OAAO,MAAM,CAAC;EAClB,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,KAAK,CAAC,MAAM,EAAE,MAAM,EAAE;EACxB,IAAI,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE;EAC3B,MAAM,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;EAC1B,KAAK;AACL;EACA,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC;EAC5B,IAAI,MAAM,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC;AAC9B;EACA,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,EAAE;EAClC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;EAC7C,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;EAC7C,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;EAC7C,KAAK;AACL;EACA,IAAI,OAAO,MAAM,CAAC;EAClB,GAAG;EACH;EACA;EACA;EACA;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,KAAK,CAAC,CAAC,EAAE,MAAM,EAAE;EACnB,IAAI,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE;EAC3B,MAAM,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;EAC1B,KAAK;AACL;EACA;EACA,IAAI,MAAM,EAAE,GAAG,CAAC,CAAC;AACjB;EACA,IAAI,MAAM,EAAE,GAAG,CAAC,CAAC;AACjB;EACA,IAAI,MAAM,IAAI,GAAG,EAAE,CAAC;EACpB,IAAI,IAAI,CAAC,CAAC;EACV,IAAI,IAAI,CAAC,CAAC;AACV;EACA,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;EAClC,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;EACnB,KAAK;AACL;EACA,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;EAC5B,MAAM,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;EAC9B,QAAQ,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;EACpD,OAAO;EACP,KAAK;AACL;EACA,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC1B,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC1B,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC1B;EACA,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;EACd,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC;EAChB,IAAI,IAAI,EAAE,CAAC;EACX,IAAI,MAAM,EAAE,GAAG,CAAC,CAAC;AACjB;EACA,IAAI,IAAI,CAAC,CAAC;AACV;EACA,IAAI,GAAG;EACP,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAChB;EACA,MAAM,IAAI,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE;EAClC;EACA,QAAQ,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;EACpC,UAAU,IAAI,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE;EACtC,YAAY,EAAE,GAAG,EAAE,CAAC;AACpB;EACA,YAAY,GAAG;EACf;EACA,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;EAC1B,cAAc,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;EACnD,aAAa,QAAQ,EAAE,EAAE,EAAE;AAC3B;EACA,YAAY,MAAM;EAClB,WAAW;EACX,SAAS;EACT,OAAO;AACP;EACA,MAAM,IAAI,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE;EAClC,QAAQ,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;EACpC,UAAU,MAAM,UAAU,GAAG,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;EACjE,UAAU,EAAE,GAAG,EAAE,CAAC;AAClB;EACA,UAAU,GAAG;EACb;EACA,YAAY,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;EACxB,YAAY,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC;EAC7F,WAAW,QAAQ,EAAE,EAAE,EAAE;EACzB,SAAS;EACT,OAAO;EACP,KAAK,QAAQ,EAAE,CAAC,EAAE;AAClB;AACA;EACA,IAAI,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;EACnD,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;EACnF,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;AACjH;EACA,IAAI,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,KAAK,QAAQ,IAAI,MAAM,CAAC,CAAC,KAAK,QAAQ,IAAI,MAAM,CAAC,CAAC,KAAK,QAAQ,EAAE;EAC1I,MAAM,MAAM,CAAC,iCAAiC,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;EAClH,KAAK;AACL;EACA,IAAI,OAAO,MAAM,CAAC;EAClB,GAAG;EACH;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,CAAC,CAAC,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE;EACxB,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE;EAC7B,MAAM,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;EAC7C,KAAK,MAAM;EACX;EACA,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC;EAC9C,KAAK;EACL,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,IAAI,CAAC,MAAM,EAAE;EACf,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;EACrD,MAAM,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5C,KAAK;AACL;EACA,IAAI,OAAO,IAAI,CAAC;EAChB,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,QAAQ,GAAG;EACb,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;EACf,IAAI,MAAM,GAAG,GAAG,GAAG,CAAC;AACpB;EACA,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;EAChC,MAAM,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;EAClC,KAAK;AACL;EACA,IAAI,OAAO,CAAC,CAAC;EACb,GAAG;EACH;EACA;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,OAAO,CAAC,MAAM,EAAE;EAClB,IAAI,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE;EAC3B,MAAM,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;EAC1B,KAAK;AACL;EACA;EACA,IAAI,MAAM,EAAE,GAAG,CAAC,CAAC;AACjB;EACA,IAAI,MAAM,EAAE,GAAG,CAAC,CAAC;AACjB;EACA,IAAI,MAAM,IAAI,GAAG,YAAY,CAAC;EAC9B,IAAI,IAAI,CAAC,CAAC;EACV,IAAI,IAAI,CAAC,CAAC;AACV;EACA,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;EAC5B,MAAM,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;EAC9B,QAAQ,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;EACpD,OAAO;EACP,KAAK;AACL;EACA,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;EACxB,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;EACxB,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;EACxB,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;EACxB,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;EACxB,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;EACxB,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;EACxB,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;EACxB,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AACxB;EACA,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;EACd,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC;EAChB,IAAI,IAAI,EAAE,CAAC;EACX,IAAI,MAAM,EAAE,GAAG,EAAE,CAAC;AAClB;EACA,IAAI,IAAI,CAAC,CAAC;AACV;EACA,IAAI,GAAG;EACP,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAChB;EACA,MAAM,IAAI,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE;EAClC;EACA,QAAQ,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;EACpC,UAAU,IAAI,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE;EACtC,YAAY,EAAE,GAAG,EAAE,CAAC;AACpB;EACA,YAAY,GAAG;EACf;EACA,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;EAC1B,cAAc,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;EACnD,aAAa,QAAQ,EAAE,EAAE,EAAE;AAC3B;EACA,YAAY,MAAM;EAClB,WAAW;EACX,SAAS;EACT,OAAO;AACP;EACA,MAAM,IAAI,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE;EAClC,QAAQ,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;EACpC,UAAU,MAAM,UAAU,GAAG,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;EACjE,UAAU,EAAE,GAAG,EAAE,CAAC;AAClB;EACA,UAAU,GAAG;EACb;EACA,YAAY,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;EACxB,YAAY,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC;EAC7F,WAAW,QAAQ,EAAE,EAAE,EAAE;EACzB,SAAS;EACT,OAAO;EACP,KAAK,QAAQ,EAAE,CAAC,EAAE;AAClB;AACA;EACA,IAAI,CAAC,GAAG,CAAC,CAAC;AACV;EACA,IAAI,GAAG;EACP,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAChB;EACA,MAAM,GAAG;EACT,QAAQ,MAAM,UAAU,GAAG,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;EAC/D,QAAQ,EAAE,GAAG,EAAE,CAAC;AAChB;EACA,QAAQ,GAAG;EACX,UAAU,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;EACtB,UAAU,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC;EAC9E,SAAS,QAAQ,EAAE,EAAE,EAAE;EACvB,OAAO,QAAQ,CAAC,EAAE,EAAE;EACpB,KAAK,QAAQ,EAAE,CAAC,EAAE;AAClB;AACA;EACA,IAAI,CAAC,GAAG,CAAC,CAAC;AACV;EACA,IAAI,GAAG;EACP,MAAM,MAAM,UAAU,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;EAC9C,MAAM,EAAE,GAAG,EAAE,CAAC;AACd;EACA,MAAM,GAAG;EACT,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;EACpB,QAAQ,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC;EACzD,OAAO,QAAQ,EAAE,EAAE,EAAE;EACrB,KAAK,QAAQ,CAAC,EAAE,EAAE;AAClB;EACA,IAAI,CAAC,GAAG,CAAC,CAAC;AACV;EACA,IAAI,GAAG;EACP,MAAM,CAAC,GAAG,CAAC,CAAC;AACZ;EACA,MAAM,GAAG;EACT,QAAQ,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;AAClC;EACA,QAAQ,IAAI,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,QAAQ,EAAE;EACxC,UAAU,MAAM,CAAC,sBAAsB,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;EAC5D,SAAS;AACT;EACA,QAAQ,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1B,OAAO,QAAQ,CAAC,EAAE,EAAE;EACpB,KAAK,QAAQ,CAAC,EAAE,EAAE;AAClB;EACA,IAAI,OAAO,MAAM,CAAC;EAClB,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,yBAAyB,CAAC,CAAC,EAAE;EAC/B,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAClB,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAClB,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAClB,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAClB,IAAI,MAAM,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;EACrB,IAAI,MAAM,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;EACrB,IAAI,MAAM,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;EACrB,IAAI,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;EACtB,IAAI,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;EACtB,IAAI,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;EACtB,IAAI,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;EACtB,IAAI,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;EACtB,IAAI,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;EACtB,IAAI,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;EACtB,IAAI,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;EACtB,IAAI,MAAM,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;EACtB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC;EAC5B,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;EACjC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3B,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3B,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3B,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;EACjC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3B,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3B,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3B,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;EACjC,IAAI,OAAO,IAAI,CAAC;EAChB,GAAG;EACH;EACA;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,SAAS,CAAC,MAAM,EAAE;EACpB,IAAI,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE;EAC3B,MAAM,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;EAC1B,KAAK;AACL;EACA,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC;EAC5B,IAAI,MAAM,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC;EAC9B,IAAI,IAAI,GAAG,CAAC;AACZ;EACA,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EAChB,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EAChB,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EAChB,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EAChB,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;EACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EAChB,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;EACf,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EAChB,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;EACf,IAAI,OAAO,MAAM,CAAC;EAClB,GAAG;AACH;EACA,CAAC;EACD,MAAM,YAAY,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC5E;EACA;EACA;EACA;EACA;EACA;EACA;AACA;EACA,MAAM,IAAI,CAAC;EACX,EAAE,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;EACvB,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,EAAE;EACtB,MAAM,CAAC,GAAG,GAAG,CAAC;EACd,KAAK;AACL;EACA,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,EAAE;EACtB,MAAM,CAAC,GAAG,GAAG,CAAC;EACd,KAAK;AACL;EACA,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,EAAE;EACtB,MAAM,CAAC,GAAG,GAAG,CAAC;EACd,KAAK;AACL;EACA,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACf,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACf,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACf,GAAG;EACH;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,KAAK,CAAC,MAAM,EAAE,MAAM,EAAE;EACxB,IAAI,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE;EAC3B,MAAM,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;EAC1B,KAAK;AACL;EACA,IAAI,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;EACxB,IAAI,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;EACxB,IAAI,MAAM,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;EACxB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;EAC/B,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;EAC/B,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC;EAC/B,IAAI,OAAO,MAAM,CAAC;EAClB,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;EACf,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACf,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACf,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACf,IAAI,OAAO,IAAI,CAAC;EAChB,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,OAAO,GAAG;EACZ,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACjC,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE;EACvB,IAAI,IAAI,MAAM,EAAE;EAChB,MAAM,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACnC,MAAM,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACnC,MAAM,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACnC,KAAK,MAAM;EACX,MAAM,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;EAC/E,KAAK;EACL,GAAG;EACH;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE;EACvB,IAAI,IAAI,MAAM,EAAE;EAChB,MAAM,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;EACnC,MAAM,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;EACnC,MAAM,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;EACnC,KAAK,MAAM;EACX,MAAM,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;EAC/E,KAAK;EACL,GAAG;EACH;EACA;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,QAAQ,GAAG;EACb,IAAI,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EAClF,GAAG;EACH;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,SAAS,GAAG;EACd,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;AAC/C;EACA,IAAI,IAAI,CAAC,GAAG,GAAG,EAAE;EACjB,MAAM,MAAM,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;EACzB,MAAM,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC;EACrB,MAAM,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC;EACrB,MAAM,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC;EACrB,KAAK,MAAM;EACX;EACA,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACjB,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACjB,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACjB,KAAK;AACL;EACA,IAAI,OAAO,CAAC,CAAC;EACb,GAAG;EACH;EACA;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,IAAI,CAAC,MAAM,EAAE;EACf,IAAI,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE;EAC3B,MAAM,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;EAC1B,KAAK;AACL;EACA,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;AAChD;EACA,IAAI,IAAI,IAAI,GAAG,GAAG,EAAE;EACpB,MAAM,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC;EACxB,MAAM,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;EAC1B,MAAM,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;EAC1B,MAAM,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;EAC1B,KAAK,MAAM;EACX,MAAM,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;EACnB,MAAM,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;EACnB,MAAM,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;EACnB,KAAK;AACL;EACA,IAAI,OAAO,MAAM,CAAC;EAClB,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,MAAM,GAAG;EACX,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;EAC5C,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,aAAa,GAAG;EAClB,IAAI,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;EAC1B,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,UAAU,CAAC,CAAC,EAAE;EAChB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;EACnB,IAAI,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;EACnB,IAAI,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;EACnB,IAAI,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;EACtF,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,eAAe,CAAC,CAAC,EAAE;EACrB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;EACnB,IAAI,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;EACnB,IAAI,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;EACnB,IAAI,OAAO,CAAC,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;EAC3E,GAAG;EACH;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,KAAK,CAAC,MAAM,EAAE,MAAM,EAAE;EACxB,IAAI,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE;EAC3B,MAAM,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;EAC1B,KAAK;AACL;EACA,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,CAAC,CAAC,GAAG,MAAM,GAAG,CAAC,CAAC;EAC1B,IAAI,MAAM,CAAC,CAAC,GAAG,MAAM,GAAG,CAAC,CAAC;EAC1B,IAAI,MAAM,CAAC,CAAC,GAAG,MAAM,GAAG,CAAC,CAAC;EAC1B,IAAI,OAAO,MAAM,CAAC;EAClB,GAAG;EACH;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE;EACvB,IAAI,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE;EAC3B,MAAM,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;EAC1B,KAAK;AACL;EACA,IAAI,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACjC,IAAI,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACjC,IAAI,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACjC,IAAI,OAAO,MAAM,CAAC;EAClB,GAAG;EACH;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,eAAe,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE;EAC1C,IAAI,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE;EAC3B,MAAM,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;EAC1B,KAAK;AACL;EACA,IAAI,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC;EAC1C,IAAI,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC;EAC1C,IAAI,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC;EAC1C,IAAI,OAAO,MAAM,CAAC;EAClB,GAAG;EACH;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,GAAG,CAAC,MAAM,EAAE;EACd,IAAI,OAAO,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;EACrE,GAAG;AACH;EACA,EAAE,MAAM,GAAG;EACX,IAAI,OAAO,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC;EACxD,GAAG;EACH;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,MAAM,CAAC,MAAM,EAAE;EACjB,IAAI,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE;EAC3B,MAAM,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;EAC1B,KAAK;AACL;EACA,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;EACvB,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;EACvB,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;EACvB,IAAI,OAAO,MAAM,CAAC;EAClB,GAAG;EACH;EACA;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE;EACnB,IAAI,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;AAC/B;EACA,IAAI,IAAI,IAAI,GAAG,GAAG,EAAE;EACpB,MAAM,MAAM,CAAC,GAAG,eAAe,CAAC;EAChC,MAAM,MAAM,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC;EAC7B,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,EAAE,IAAI,CAAC,CAAC,GAAG,KAAK,EAAE,IAAI,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;EAC5D,MAAM,MAAM,OAAO,GAAG,qBAAqB,CAAC;AAC5C;EACA,MAAM,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,EAAE;EAC/B,QAAQ,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAC7B,QAAQ,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;EAC7B,OAAO,MAAM;EACb,QAAQ,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAC7B,QAAQ,CAAC,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;EAC7B,OAAO;AACP;EACA,MAAM,CAAC,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;EACtB,KAAK,MAAM;EACX;EACA,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EACtB,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EACtB,KAAK;EACL,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,QAAQ,GAAG;EACb,IAAI,OAAO,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EAC3C,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,OAAO,GAAG;EACZ,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;EACpC,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,IAAI,CAAC,MAAM,EAAE;EACf,IAAI,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;EACtB,IAAI,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;EACtB,IAAI,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;EACtB,IAAI,OAAO,IAAI,CAAC;EAChB,GAAG;EACH;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE;EAC1B,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;EACtC,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;EACtC,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;EACtC,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,YAAY,CAAC,MAAM,EAAE,SAAS,EAAE;EAClC,IAAI,IAAI,SAAS,KAAK,KAAK,CAAC,EAAE;EAC9B,MAAM,SAAS,GAAG,IAAI,CAAC;EACvB,KAAK;AACL;EACA,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,SAAS,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,SAAS,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,SAAS,EAAE;EACvI,MAAM,OAAO,KAAK,CAAC;EACnB,KAAK;AACL;EACA,IAAI,OAAO,IAAI,CAAC;EAChB,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,UAAU,CAAC,SAAS,EAAE;EACxB,IAAI,IAAI,SAAS,KAAK,KAAK,CAAC,EAAE;EAC9B,MAAM,SAAS,GAAG,IAAI,CAAC;EACvB,KAAK;AACL;EACA,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,SAAS,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,SAAS,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,SAAS,EAAE;EACtG,MAAM,OAAO,KAAK,CAAC;EACnB,KAAK;AACL;EACA,IAAI,OAAO,IAAI,CAAC;EAChB,GAAG;EACH;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,gBAAgB,CAAC,MAAM,EAAE,SAAS,EAAE;EACtC,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;EAC3B,IAAI,OAAO,SAAS,CAAC,YAAY,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;EACrD,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,KAAK,GAAG;EACV,IAAI,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;EAC5C,GAAG;AACH;EACA,CAAC;EACD,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9B,IAAI,CAAC,MAAM,GAAG,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAChC,IAAI,CAAC,MAAM,GAAG,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAChC,IAAI,CAAC,MAAM,GAAG,IAAI,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;EAChC,MAAM,eAAe,GAAG,IAAI,IAAI,EAAE,CAAC;EACnC,MAAM,qBAAqB,GAAG,IAAI,IAAI,EAAE,CAAC;EACzC,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;AAC7B;EACA;EACA;EACA;EACA,MAAM,IAAI,CAAC;EACX;EACA;EACA;AACA;EACA;EACA;EACA;EACA,EAAE,WAAW,CAAC,OAAO,EAAE;EACvB,IAAI,IAAI,OAAO,KAAK,KAAK,CAAC,EAAE;EAC5B,MAAM,OAAO,GAAG,EAAE,CAAC;EACnB,KAAK;AACL;EACA,IAAI,IAAI,CAAC,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC;EACjC,IAAI,IAAI,CAAC,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC;AACjC;EACA,IAAI,IAAI,OAAO,CAAC,UAAU,EAAE;EAC5B,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;EAC/C,KAAK;AACL;EACA,IAAI,IAAI,OAAO,CAAC,UAAU,EAAE;EAC5B,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;EAC/C,KAAK;EACL,GAAG;EACH;EACA;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,aAAa,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE;EACxD,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC;EAC9B,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC;EAC9B,IAAI,MAAM,CAAC,GAAG,UAAU,CAAC;AACzB;EACA,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AACtB;EACA,IAAI,IAAI,CAAC,EAAE;EACX,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACpB,KAAK;AACL;EACA,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AACd;EACA,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;EAC5C,MAAM,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;AACxB;EACA,MAAM,IAAI,CAAC,EAAE;EACb,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;EAC1B,QAAQ,CAAC,GAAG,KAAK,CAAC;EAClB,OAAO;AACP;EACA,MAAM,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;EACrB,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAClB,OAAO;AACP;EACA,MAAM,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;EACrB,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAClB,OAAO;AACP;EACA,MAAM,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;EACrB,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAClB,OAAO;AACP;EACA,MAAM,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;EACrB,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAClB,OAAO;AACP;EACA,MAAM,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;EACrB,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAClB,OAAO;AACP;EACA,MAAM,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;EACrB,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAClB,OAAO;EACP,KAAK;AACL;AACA;EACA,IAAI,IAAI,QAAQ,EAAE;EAClB,MAAM,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1B,MAAM,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1B,KAAK;AACL;EACA,IAAI,IAAI,QAAQ,EAAE;EAClB,MAAM,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC;EACtB,MAAM,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC;EACtB,MAAM,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC;EACtB,MAAM,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC;EACtB,MAAM,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC;EACtB,MAAM,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC;EACtB,KAAK;AACL;EACA,IAAI,OAAO,IAAI,CAAC;EAChB,GAAG;EACH;EACA;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,IAAI,CAAC,IAAI,EAAE;EACb,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;EAC1C,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;EAC1C,IAAI,OAAO,IAAI,CAAC;EAChB,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,KAAK,GAAG;EACV,IAAI,OAAO,IAAI,IAAI,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;EACjC,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,MAAM,CAAC,IAAI,EAAE;EACf,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;EACvE,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;EACvE,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;EACvE,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;EACvE,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;EACvE,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;EACvE,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,QAAQ,CAAC,IAAI,EAAE;EACjB,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;EAC/B,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;EAC/B,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;EAC/B,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;EAC/B;EACA;EACA;AACA;EACA,IAAI,MAAM,SAAS,GAAG,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;EACnF,IAAI,MAAM,SAAS,GAAG,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;EACnF,IAAI,MAAM,SAAS,GAAG,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;EACnF,IAAI,OAAO,SAAS,IAAI,SAAS,IAAI,SAAS,CAAC;EAC/C,GAAG;AACH;AACA;EACA,EAAE,MAAM,GAAG;EACX,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC;EAC9B,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC;EAC9B,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACnD,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,QAAQ,CAAC,IAAI,EAAE;EACjB,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;EAC/B,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;EAC/B,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;EAC/B,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;EAC/B;EACA;EACA;AACA;EACA,IAAI,OAAO,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;EACxG,GAAG;AACH;EACA,EAAE,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;EACrC,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC;EAC9B,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC;EAC9B,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;EACd,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACzB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACzB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACzB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACzB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACzB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACzB,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;EACd,GAAG;EACH;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,YAAY,CAAC,KAAK,EAAE,MAAM,EAAE;EAC9B,IAAI,MAAM,OAAO,GAAG,0BAA0B,CAAC;EAC/C,IAAI,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;EACzB,IAAI,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;EACzB,IAAI,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;EACzB,IAAI,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;EACzB,IAAI,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;EACzB,IAAI,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;EACzB,IAAI,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;EACzB,IAAI,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;AACzB;EACA,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC5C;EACA,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,EAAE;EAClC,MAAM,MAAM,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;EAChC,MAAM,KAAK,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;EACzC,KAAK;AACL;EACA,IAAI,OAAO,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;EACzC,GAAG;EACH;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,YAAY,CAAC,KAAK,EAAE,MAAM,EAAE;EAC9B,IAAI,MAAM,OAAO,GAAG,0BAA0B,CAAC;EAC/C,IAAI,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;EACzB,IAAI,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;EACzB,IAAI,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;EACzB,IAAI,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;EACzB,IAAI,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;EACzB,IAAI,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;EACzB,IAAI,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;EACzB,IAAI,MAAM,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;AACzB;EACA,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC5C;EACA,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,EAAE;EAClC,MAAM,MAAM,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;EAChC,MAAM,KAAK,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;EACzC,KAAK;AACL;EACA,IAAI,OAAO,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;EACzC,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,WAAW,CAAC,GAAG,EAAE;EACnB,IAAI,MAAM;EACV,MAAM,SAAS;EACf,MAAM,IAAI;EACV,KAAK,GAAG,GAAG,CAAC;EACZ;AACA;EACA,IAAI,MAAM,QAAQ,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;EACrC,IAAI,MAAM,QAAQ,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;EACrC,IAAI,MAAM,QAAQ,GAAG,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;AACrC;EACA,IAAI,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,IAAI,QAAQ,CAAC;EACvD,IAAI,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,IAAI,QAAQ,CAAC;EACvD,IAAI,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,IAAI,QAAQ,CAAC;EACvD,IAAI,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,IAAI,QAAQ,CAAC;EACvD,IAAI,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,IAAI,QAAQ,CAAC;EACvD,IAAI,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,IAAI,QAAQ,CAAC;EACvD;AACA;EACA,IAAI,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;EAC1F,IAAI,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;AAC1F;EACA,IAAI,IAAI,IAAI,GAAG,CAAC,EAAE;EAClB;EACA,MAAM,OAAO,KAAK,CAAC;EACnB,KAAK;AACL;AACA;EACA,IAAI,IAAI,IAAI,GAAG,IAAI,EAAE;EACrB;EACA,MAAM,OAAO,KAAK,CAAC;EACnB,KAAK;AACL;EACA,IAAI,OAAO,IAAI,CAAC;EAChB,GAAG;AACH;EACA,CAAC;EACD,MAAM,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC;EACzB,MAAM,0BAA0B,GAAG,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE,IAAI,IAAI,EAAE,CAAC,CAAC;AACpI;EACA;EACA;EACA;EACA;EACA,MAAM,oBAAoB,CAAC;EAC3B;EACA;EACA;EACA,EAAE,WAAW,GAAG;EAChB,IAAI,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;EACrB,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE;EACd,IAAI,IAAI;EACR,MAAM,KAAK,EAAE,CAAC;EACd,KAAK,GAAG,EAAE,CAAC;EACX,IAAI,IAAI;EACR,MAAM,KAAK,EAAE,CAAC;EACd,KAAK,GAAG,EAAE,CAAC;AACX;EACA,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE;EACf,MAAM,MAAM,IAAI,GAAG,CAAC,CAAC;EACrB,MAAM,CAAC,GAAG,CAAC,CAAC;EACZ,MAAM,CAAC,GAAG,IAAI,CAAC;EACf,KAAK;AACL;EACA,IAAI,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;EACnD,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE;EACrB,IAAI,IAAI;EACR,MAAM,KAAK,EAAE,CAAC;EACd,KAAK,GAAG,EAAE,CAAC;EACX,IAAI,IAAI;EACR,MAAM,KAAK,EAAE,CAAC;EACd,KAAK,GAAG,EAAE,CAAC;AACX;EACA,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE;EACf,MAAM,MAAM,IAAI,GAAG,CAAC,CAAC;EACrB,MAAM,CAAC,GAAG,CAAC,CAAC;EACZ,MAAM,CAAC,GAAG,IAAI,CAAC;EACf,KAAK;AACL;EACA,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;EAC5D,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,KAAK,GAAG;EACV,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,EAAE;EAC1D,MAAM,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACzB,KAAK;EACL,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,aAAa,CAAC,CAAC,EAAE;EACnB,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;EAC1C,GAAG;AACH;EACA,CAAC;AACD;EACA;EACA;EACA;EACA,MAAM,WAAW,CAAC;EAClB;EACA;EACA;EACA;EACA,EAAE,gBAAgB,CAAC,IAAI,EAAE,QAAQ,EAAE;EACnC,IAAI,IAAI,IAAI,CAAC,UAAU,KAAK,SAAS,EAAE;EACvC,MAAM,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;EAC3B,KAAK;AACL;EACA,IAAI,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;AACtC;EACA,IAAI,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,SAAS,EAAE;EACvC,MAAM,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;EAC3B,KAAK;AACL;EACA,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;EAC7C,MAAM,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;EACrC,KAAK;AACL;EACA,IAAI,OAAO,IAAI,CAAC;EAChB,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,gBAAgB,CAAC,IAAI,EAAE,QAAQ,EAAE;EACnC,IAAI,IAAI,IAAI,CAAC,UAAU,KAAK,SAAS,EAAE;EACvC,MAAM,OAAO,KAAK,CAAC;EACnB,KAAK;AACL;EACA,IAAI,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;AACtC;EACA,IAAI,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,SAAS,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;EAC7E,MAAM,OAAO,IAAI,CAAC;EAClB,KAAK;AACL;EACA,IAAI,OAAO,KAAK,CAAC;EACjB,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,mBAAmB,CAAC,IAAI,EAAE;EAC5B,IAAI,IAAI,IAAI,CAAC,UAAU,KAAK,SAAS,EAAE;EACvC,MAAM,OAAO,KAAK,CAAC;EACnB,KAAK;AACL;EACA,IAAI,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;EACtC,IAAI,OAAO,SAAS,CAAC,IAAI,CAAC,KAAK,SAAS,CAAC;EACzC,GAAG;EACH;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,mBAAmB,CAAC,IAAI,EAAE,QAAQ,EAAE;EACtC,IAAI,IAAI,IAAI,CAAC,UAAU,KAAK,SAAS,EAAE;EACvC,MAAM,OAAO,IAAI,CAAC;EAClB,KAAK;AACL;EACA,IAAI,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;AACtC;EACA,IAAI,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,SAAS,EAAE;EACvC,MAAM,OAAO,IAAI,CAAC;EAClB,KAAK;AACL;EACA,IAAI,MAAM,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACpD;EACA,IAAI,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;EACtB,MAAM,SAAS,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;EACvC,KAAK;AACL;EACA,IAAI,OAAO,IAAI,CAAC;EAChB,GAAG;EACH;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,aAAa,CAAC,KAAK,EAAE;EACvB,IAAI,IAAI,IAAI,CAAC,UAAU,KAAK,SAAS,EAAE;EACvC,MAAM,OAAO,IAAI,CAAC;EAClB,KAAK;AACL;EACA,IAAI,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;EACtC,IAAI,MAAM,aAAa,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAChD;EACA,IAAI,IAAI,aAAa,KAAK,SAAS,EAAE;EACrC,MAAM,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC;AAC1B;EACA,MAAM,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;EAC5D,QAAQ,aAAa,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;EAC3C,OAAO;EACP,KAAK;AACL;EACA,IAAI,OAAO,IAAI,CAAC;EAChB,GAAG;AACH;EACA,CAAC;AACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACA;EACA,MAAM,UAAU,CAAC;EACjB,EAAE,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;EAC1B,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,EAAE;EACtB,MAAM,CAAC,GAAG,CAAC,CAAC;EACZ,KAAK;AACL;EACA,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,EAAE;EACtB,MAAM,CAAC,GAAG,CAAC,CAAC;EACZ,KAAK;AACL;EACA,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,EAAE;EACtB,MAAM,CAAC,GAAG,CAAC,CAAC;EACZ,KAAK;AACL;EACA,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,EAAE;EACtB,MAAM,CAAC,GAAG,CAAC,CAAC;EACZ,KAAK;AACL;EACA,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACf,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACf,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACf,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACf,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;EAClB,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACf,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACf,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACf,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACf,IAAI,OAAO,IAAI,CAAC;EAChB,GAAG;EACH;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,QAAQ,GAAG;EACb,IAAI,OAAO,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;EACrD,GAAG;EACH;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,OAAO,GAAG;EACZ,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;EAC5C,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,gBAAgB,CAAC,MAAM,EAAE,KAAK,EAAE;EAClC,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC;EACpC,IAAI,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;EAC1B,IAAI,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;EAC1B,IAAI,IAAI,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;EAC1B,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC;EACnC,IAAI,OAAO,IAAI,CAAC;EAChB,GAAG;EACH;EACA;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,WAAW,CAAC,UAAU,EAAE;EAC1B,IAAI,IAAI,UAAU,KAAK,KAAK,CAAC,EAAE;EAC/B,MAAM,UAAU,GAAG,IAAI,IAAI,EAAE,CAAC;EAC9B,KAAK;AACL;EACA,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;AACrB;EACA,IAAI,MAAM,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;EACxC,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AAC7C;EACA,IAAI,IAAI,CAAC,GAAG,KAAK,EAAE;EACnB;EACA;EACA,MAAM,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;AAC5B;EACA,MAAM,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EAC5B,MAAM,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EAC5B,KAAK,MAAM;EACX,MAAM,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;AAChC;EACA,MAAM,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EAChC,MAAM,UAAU,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EAChC,KAAK;AACL;EACA,IAAI,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;EAC/B,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE;EACvB,IAAI,IAAI,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE;EAC/B,MAAM,MAAM,EAAE,GAAG,MAAM,CAAC;EACxB,MAAM,MAAM,EAAE,GAAG,MAAM,CAAC;EACxB,MAAM,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;EACzB,MAAM,IAAI,CAAC,gBAAgB,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;EACzC,KAAK,MAAM;EACX,MAAM,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;EAC3B,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACnB,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACnB,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACnB,MAAM,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACvE,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;EACvB,KAAK;AACL;EACA,IAAI,OAAO,IAAI,CAAC;EAChB,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE;EACrB,IAAI,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE;EAC3B,MAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;EAChC,KAAK;AACL;EACA,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;EACtB,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;EACtB,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;EACtB,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;EACtB,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;EACtB,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;EACtB,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;EACtB,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;EACtB,IAAI,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EACrD,IAAI,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EACrD,IAAI,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EACrD,IAAI,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EACrD,IAAI,OAAO,MAAM,CAAC;EAClB,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,OAAO,CAAC,MAAM,EAAE;EAClB,IAAI,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE;EAC3B,MAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;EAChC,KAAK;AACL;EACA,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;EAC3B,IAAI,MAAM,MAAM,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;EACvD,IAAI,MAAM,CAAC,CAAC,IAAI,MAAM,CAAC;EACvB,IAAI,MAAM,CAAC,CAAC,IAAI,MAAM,CAAC;EACvB,IAAI,MAAM,CAAC,CAAC,IAAI,MAAM,CAAC;EACvB,IAAI,MAAM,CAAC,CAAC,IAAI,MAAM,CAAC;EACvB,IAAI,OAAO,MAAM,CAAC;EAClB,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,SAAS,CAAC,MAAM,EAAE;EACpB,IAAI,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE;EAC3B,MAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;EAChC,KAAK;AACL;EACA,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;EACvB,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;EACvB,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;EACvB,IAAI,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACtB,IAAI,OAAO,MAAM,CAAC;EAClB,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,SAAS,GAAG;EACd,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AAC7F;EACA,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE;EACjB,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACjB,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACjB,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACjB,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACjB,KAAK,MAAM;EACX,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;EAChB,MAAM,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;EAClB,MAAM,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;EAClB,MAAM,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;EAClB,MAAM,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;EAClB,KAAK;AACL;EACA,IAAI,OAAO,IAAI,CAAC;EAChB,GAAG;EACH;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,aAAa,GAAG;EAClB,IAAI,MAAM,CAAC,GAAG,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC;AACpG;EACA,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE;EACjB,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACjB,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACjB,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACjB,MAAM,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;EACjB,KAAK,MAAM;EACX,MAAM,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;EAClB,MAAM,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;EAClB,MAAM,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;EAClB,MAAM,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC;EAClB,KAAK;AACL;EACA,IAAI,OAAO,IAAI,CAAC;EAChB,GAAG;EACH;EACA;EACA;AACA;AACA;EACA,EAAE,KAAK,CAAC,CAAC,EAAE,MAAM,EAAE;EACnB,IAAI,IAAI,MAAM,KAAK,KAAK,CAAC,EAAE;EAC3B,MAAM,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;EAC1B,KAAK;AACL;EACA,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAClB,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAClB,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAClB,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;EACtB,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;EACtB,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;EACtB,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;AACtB;EACA,IAAI,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;EACxC,IAAI,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;EACxC,IAAI,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;EACxC,IAAI,MAAM,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;EACzC,IAAI,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC;EACxD,IAAI,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC;EACxD,IAAI,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC;EACxD,IAAI,OAAO,MAAM,CAAC;EAClB,GAAG;EACH;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,IAAI,CAAC,IAAI,EAAE;EACb,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACpB,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACpB,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACpB,IAAI,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACpB,IAAI,OAAO,IAAI,CAAC;EAChB,GAAG;EACH;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,OAAO,CAAC,MAAM,EAAE,KAAK,EAAE;EACzB,IAAI,IAAI,KAAK,KAAK,KAAK,CAAC,EAAE;EAC1B,MAAM,KAAK,GAAG,KAAK,CAAC;EACpB,KAAK;AACL;EACA,IAAI,IAAI,OAAO,CAAC;EAChB,IAAI,IAAI,QAAQ,CAAC;EACjB,IAAI,IAAI,IAAI,CAAC;EACb,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;EACrB,IAAI,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;AACrB;EACA,IAAI,QAAQ,KAAK;EACjB,MAAM,KAAK,KAAK;EAChB,QAAQ,MAAM,IAAI,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACnC;EACA,QAAQ,IAAI,IAAI,GAAG,KAAK,EAAE;EAC1B;EACA,UAAU,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACzC,UAAU,QAAQ,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;EACjC,UAAU,IAAI,GAAG,CAAC,CAAC;EACnB,SAAS;AACT;EACA,QAAQ,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE;EAC3B;EACA,UAAU,OAAO,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1C,UAAU,QAAQ,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;EAClC,UAAU,IAAI,GAAG,CAAC,CAAC;EACnB,SAAS;AACT;EACA,QAAQ,IAAI,OAAO,KAAK,SAAS,EAAE;EACnC,UAAU,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;EAC5B,UAAU,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;EAC5B,UAAU,MAAM,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;EAC5B,UAAU,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;AAC7E;EACA,UAAU,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;AACzC;EACA,UAAU,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;EAC1E,SAAS;AACT;EACA,QAAQ,MAAM;AACd;EACA,MAAM;EACN,QAAQ,MAAM,IAAI,KAAK,CAAC,CAAC,YAAY,EAAE,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC;EACnE,KAAK;AACL;EACA,IAAI,MAAM,CAAC,CAAC,GAAG,OAAO,CAAC;EACvB,IAAI,MAAM,CAAC,CAAC,GAAG,QAAQ,CAAC;EACxB,IAAI,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC;EACpB,GAAG;EACH;EACA;EACA;EACA;EACA;EACA;EACA;AACA;AACA;EACA,EAAE,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE;EAC/B,IAAI,IAAI,KAAK,KAAK,KAAK,CAAC,EAAE;EAC1B,MAAM,KAAK,GAAG,KAAK,CAAC;EACpB,KAAK;AACL;EACA,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EAC/B,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EAC/B,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EAC/B,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EAC/B,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EAC/B,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AAC/B;EACA,IAAI,IAAI,KAAK,KAAK,KAAK,EAAE;EACzB,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,KAAK,MAAM,IAAI,KAAK,KAAK,KAAK,EAAE;EAChC,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,KAAK,MAAM,IAAI,KAAK,KAAK,KAAK,EAAE;EAChC,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,KAAK,MAAM,IAAI,KAAK,KAAK,KAAK,EAAE;EAChC,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,KAAK,MAAM,IAAI,KAAK,KAAK,KAAK,EAAE;EAChC,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;EAC3C,KAAK,MAAM,IAAI,KAAK,KAAK,KAAK,EAAE;EAChC,MAAM,IAAI,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,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AC3B,IAAI,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AAC3B;EACA,IAAI,OAAO,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;EAC5B,MAAM,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;EAC7B,MAAM,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;EACvB,KAAK;EACL,GAAG;AACH;EACA,CAAC;AACD;EACA;EACA;EACA;EACA,MAAM,KAAK,SAAS,WAAW,CAAC;EAChC;EACA;EACA;AACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;AACA;EACA;EACA;EACA;EACA,EAAE,WAAW,CAAC,OAAO,EAAE;EACvB,IAAI,IAAI,OAAO,KAAK,KAAK,CAAC,EAAE;EAC5B,MAAM,OAAO,GAAG,EAAE,CAAC;EACnB,KAAK;AACL;EACA,IAAI,KAAK,EAAE,CAAC;EACZ,IAAI,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;EACjB,IAAI,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC;EAC3C,IAAI,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;EACvB,IAAI,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;EAChC,IAAI,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,KAAK,SAAS,GAAG,OAAO,CAAC,iBAAiB,GAAG,CAAC,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"}', false);
 /* eslint-enable */
 
 class CannonWorkerAPI extends EventEmitter$1 {
diff --git a/dist/types.d.ts b/dist/types.d.ts
index 7f03ca4045bc52df9b81d2874b308a85a307f92f..b5553298f5903e92f9d796daaf643b621762dece 100644
--- a/dist/types.d.ts
+++ b/dist/types.d.ts
@@ -71,6 +71,12 @@ export interface WheelInfoOptions {
 }
 declare type WorkerContact = WorkerCollideEvent['data']['contact'];
 export declare type CollideEvent = Omit<WorkerCollideEvent['data'], 'body' | 'target' | 'contact'> & {
+    data: {
+        body: string;
+        target: string;
+        bi: string;
+        bj: string;
+    };
     body: Object3D;
     contact: Omit<WorkerContact, 'bi' | 'bj'> & {
         bi: Object3D;
@@ -79,12 +85,20 @@ export declare type CollideEvent = Omit<WorkerCollideEvent['data'], 'body' | 'ta
     target: Object3D;
 };
 export declare type CollideBeginEvent = {
+    data: {
+        body: string;
+        target: string;
+    };
     body: Object3D;
     op: 'event';
     target: Object3D;
     type: 'collideBegin';
 };
 export declare type CollideEndEvent = {
+    data: {
+        body: string;
+        target: string;
+    };
     body: Object3D;
     op: 'event';
     target: Object3D;
diff --git a/src/types.ts b/src/types.ts
index 343586dfa5f20fe7881faffaf70506ab5265b0a6..8acc1c87608742e744c1a8f2b94e0efd754bed13 100644
--- a/src/types.ts
+++ b/src/types.ts
@@ -79,6 +79,12 @@ export interface WheelInfoOptions {
 
 type WorkerContact = WorkerCollideEvent['data']['contact']
 export type CollideEvent = Omit<WorkerCollideEvent['data'], 'body' | 'target' | 'contact'> & {
+  data:{
+    body: string
+    target: string
+    bi: string
+    bj: string
+  }
   body: Object3D
   contact: Omit<WorkerContact, 'bi' | 'bj'> & {
     bi: Object3D
@@ -87,12 +93,20 @@ export type CollideEvent = Omit<WorkerCollideEvent['data'], 'body' | 'target' |
   target: Object3D
 }
 export type CollideBeginEvent = {
+  data:{
+    body: string
+    target: string
+  }
   body: Object3D
   op: 'event'
   target: Object3D
   type: 'collideBegin'
 }
 export type CollideEndEvent = {
+  data:{
+    body: string
+    target: string
+  }
   body: Object3D
   op: 'event'
   target: Object3D