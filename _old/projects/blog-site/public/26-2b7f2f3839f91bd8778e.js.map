{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/art/artwork/nft-adventure/stories/nft-text-adventure.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/nft-adventure/art.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/nft-adventure/game-engine.ts"],"names":["metadata","key","name","description","author","asciiArt_manArmUp","trim","replace","nftAdventure_nftDungeon","items","story","title","asciiArt","glitch","ratio","messages","inventory","actions","art_nftAdventure_nftTextAdventure","artist","canSetSeed","getTokenDescription","seed","split","map","x","parseInt","stepIndex","actionIndex","step","action","renderArt","hostElement","recorder","createP5","createRandomGenerator","random","size","window","innerWidth","innerHeight","canvas","timeStart","Date","now","wasRecording","isDone","s","setup","console","log","result","createCanvas","canvasId","Math","id","document","getElementById","draw","isRecording","timeProvider","timeMs","gameData","frame","done","randomSlow","floor","shouldGlitch","charLength","background","color","cos","PI","fill","textFont","textAlign","textSize","actionCount","length","drawActionInputText","t","text","PAD","height","width","drawNextPart","drawText","fontSize","speedMultiplier","substr","drawWaitMessage","altText","waitChars","waitText","rotate","scale","glitches","titleColor","join","drawGameStepAction","isWaitingForFrame","a","getRecorder","addFrame"],"mappings":"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","file":"26-2b7f2f3839f91bd8778e.js","sourcesContent":["const metadata = {\r\n    key: `nft-text-adventure`,\r\n    name: `NFT Text Adventure`,\r\n    description: `NFT Text Adventure is a game where actions are chosen by the NFT community`,\r\n    author: `Rick Love & the NFT Community`,\r\n};\r\n\r\n// https://cloudapps.herokuapp.com/imagetoascii/\r\n// .:*I$VMoun-\r\n// .!\"#$%&O0olWM()*+-{|}~<>[]\r\n// .,:|'Oo(){}[]\r\n// .-:SOo\r\nconst asciiArt_manArmUp = `\r\n.........()-,.......................\r\n.......(),...}:.....................\r\n..........\"}:==::>..................\r\n.....()::}:-==:::::>................\r\n..........,==:::::::::}.............\r\n.....():\"}..:::::::::::::::.........\r\n.............:::-...<::::::::::.....\r\n...........():..........::::::::::..\r\n..........................-::::::::.\r\n.........oooSS:.............-::::::.\r\n......:SSOOOoo::...........:::::::-.\r\n......oOoo:o::..:.........::::::::..\r\n.....:OOo:...:::::........::::::::..\r\n......oOS:::::::::........o::::::...\r\n......-oOo::::...::..:ooooooo:::....\r\n..........::::--::::oooooooooo:.....\r\n...........:::::::oooooooooooo:.....\r\n....-:oooo:ooooooooooooooooooo:.....\r\n`.trim().replace(/\\./g, ` `);\r\n\r\nconst items = [\r\n    {\r\n        key: `torch`,\r\n        name: `Torch`,\r\n        description: `This torch will be your light when all other lights go out...`,\r\n    },\r\n    {\r\n        key: `torch_lit`,\r\n        name: `Lit Torch`,\r\n        description: `This torch it lit!`,\r\n    },\r\n    {\r\n        key: `rope`,\r\n        name: `Knife`,\r\n        description: `That's not a knife... This is a knife!`,\r\n    },\r\n] as const;\r\ntype GameItemKey = typeof items[number]['key'];\r\n\r\ntype GameStep = {\r\n    title: string;\r\n    asciiArt?: string;\r\n    description: string;\r\n    glitch?: {\r\n        ratio: number;\r\n        messages: string[];\r\n    };\r\n    inventory: GameItemKey[];\r\n    actions: {\r\n        name: string;\r\n        description: string;\r\n        gameOver?: boolean;\r\n    }[];\r\n};\r\n/** There is only a single linear progression, all other choices end in death */\r\nconst story: GameStep[] = [\r\n    {\r\n        title: `Cold`,\r\n        asciiArt: asciiArt_manArmUp,\r\n        description: `\r\n\r\nCold, damp, wet... you wake up shivering. \r\n\r\nWhen you open your eyes, everything is still dark.\r\n\r\nYou can't see anything, but you can feel that you are lying on a cold hard surface...`,\r\n        glitch: {\r\n            ratio: 0.07,\r\n            messages: [`HELP ME!`, `Who are you?`, `What are you?`, `How are you?`, `Where are you?`, `Why are you?`, `I'm cold`, `I'm alone`, `I'm afraid`],\r\n        },\r\n        inventory: [],\r\n        actions: [\r\n            { name: `search the ground`, description: `?` },\r\n            { name: `call for help`, description: `?` },\r\n            { name: `listen`, description: `?` },\r\n        ],\r\n    },\r\n];\r\n\r\nexport const createNftAdventure_nftTextAdventure = () => {\r\n\r\n    return {\r\n        metadata,\r\n        items,\r\n        story,\r\n    };\r\n};\r\n","/* eslint-disable new-cap */\r\n/* eslint-disable no-new */\r\nimport type p5 from 'p5';\r\nimport { createRandomGenerator } from '../../rando';\r\nimport { ArtWork } from '../../artwork-type';\r\nimport { createNftAdventure_nftTextAdventure } from './stories/nft-text-adventure';\r\nimport { drawGameStepAction } from './game-engine';\r\n\r\nconst nftAdventure_nftDungeon = createNftAdventure_nftTextAdventure();\r\n\r\nexport const art_nftAdventure_nftTextAdventure: ArtWork = {\r\n    key: `nft-text-adventure`,\r\n    title: nftAdventure_nftDungeon.metadata.name,\r\n    description: nftAdventure_nftDungeon.metadata.description,\r\n    artist: nftAdventure_nftDungeon.metadata.author,\r\n    canSetSeed: false,\r\n    getTokenDescription: (seed: string) => {\r\n        const [stepIndex, actionIndex] = seed.split(`:`).map(x => parseInt(x, 10));\r\n\r\n        const step = nftAdventure_nftDungeon.story[stepIndex];\r\n        const action = step?.actions[actionIndex];\r\n\r\n        if (!action){\r\n            return `${stepIndex} - ${step?.title ?? ``}`;\r\n        }\r\n\r\n        return `${stepIndex}:${actionIndex} - ${step?.title ?? ``} > ${action?.name ?? ``}`;\r\n    },\r\n    // openSea: {\r\n    //     tokenAddress: `0x495f947276749ce646f68ac8c248420045cb7b5e`,\r\n    //     tokenId: `91242641486941084018191434774360347389366801368112854311223385694785434025985`,\r\n    // },\r\n    renderArt: (hostElement: HTMLElement, seed = `This is my hash!`, recorder, createP5) => {\r\n        // const { a, b, c } = { a: 57, b: 23, c: 15 };\r\n\r\n\r\n        const { random } = createRandomGenerator(seed);\r\n\r\n        // const { a, b, c } = { a: 1 + Math.floor(57 * random()), b: 1 + Math.floor(213 * random()), c: 1 + Math.floor(115 * random()) };\r\n        // const { cr, cg, cb, ca } = { cr: Math.floor(25 + 230 * random()), cg: Math.floor(25 + 230 * random()), cb: Math.floor(25 + 230 * random()), ca: Math.floor(25 + 25 * random()) };\r\n\r\n        const TARGET_SIZE = 300;\r\n        const SMALL_SIZE = 300;\r\n        const size = window.innerWidth > TARGET_SIZE && window.innerHeight > TARGET_SIZE ? TARGET_SIZE : SMALL_SIZE;\r\n\r\n        const h = 200;\r\n        const scale = size / 400;\r\n        const speed = 0.5;\r\n\r\n        let canvas = null as null | HTMLCanvasElement;\r\n        let timeStart = Date.now();\r\n        let wasRecording = false;\r\n        let isDone = false;\r\n\r\n        const [stepIndex, actionIndex] = seed.split(`:`).map(x => parseInt(x, 10));\r\n\r\n        return createP5((s: p5) => {\r\n            s.setup = () => {\r\n                console.log(`renderArt:createP5:s.setup`);\r\n\r\n                const result = s.createCanvas(size, size);\r\n                const canvasId = `${Math.random()}`;\r\n                result.id(canvasId);\r\n                canvas = document.getElementById(canvasId) as HTMLCanvasElement;\r\n            };\r\n            s.draw = () => {\r\n                console.log(`renderArt:createP5:s.draw`);\r\n\r\n                if (recorder?.isRecording() && !wasRecording){\r\n                    timeStart = recorder.timeProvider.now();\r\n                    isDone = false;\r\n                }\r\n                wasRecording = recorder?.isRecording() ?? false;\r\n\r\n                if (isDone){ return; }\r\n\r\n                // if (recorder?.isWaitingForFrame() && canvas) {\r\n                //     console.log(`game.update waitingForFrame - addFrame`, {});\r\n                //     (async () => await recorder.getRecorder().addFrame(canvas))();\r\n                //     return;\r\n                // }\r\n\r\n                const timeMs = recorder ? (recorder.timeProvider.now() - timeStart)\r\n                    : (Date.now() - timeStart);\r\n                const result = drawGameStepAction({\r\n                    frame: { width: size, height: size },\r\n                    s,\r\n                    gameData: nftAdventure_nftDungeon,\r\n                    step: nftAdventure_nftDungeon.story[stepIndex],\r\n                    actionIndex,\r\n                    timeMs,\r\n                    seed: seed,\r\n                });\r\n\r\n                if (result.done){\r\n                    isDone = true;\r\n                }\r\n\r\n                if (recorder?.isWaitingForFrame() && canvas){\r\n                    console.log(`game.update waitingForFrame - addFrame`, {});\r\n                    (async () => await recorder.getRecorder().addFrame(canvas))();\r\n                }\r\n\r\n            };\r\n        }, hostElement);\r\n    },\r\n};\r\n","import { createRandomGenerator } from 'art/rando';\r\nimport type p5 from 'p5';\r\n\r\ntype GameStep = {\r\n    title: string;\r\n    asciiArt?: string;\r\n    description: string;\r\n    glitch?: {\r\n        ratio: number;\r\n        messages: string[];\r\n    };\r\n    inventory: string[];\r\n    actions: {\r\n        name: string;\r\n        description: string;\r\n        gameOver?: boolean;\r\n    }[];\r\n};\r\ntype GameItem = {\r\n    key: string;\r\n    description: string;\r\n};\r\ntype GameData = {\r\n    items: readonly GameItem [];\r\n};\r\nexport const drawGameStepAction = ({\r\n    step,\r\n    actionIndex,\r\n    gameData,\r\n    s,\r\n    timeMs,\r\n    frame,\r\n    seed,\r\n}: {\r\n    step: GameStep;\r\n    actionIndex?: number;\r\n    gameData: GameData;\r\n    s: p5;\r\n    timeMs: number;\r\n    frame: { width: number, height: number };\r\n    seed: string;\r\n}): { done: boolean } => {\r\n\r\n    if (!step){ return { done: true };}\r\n\r\n    const { random: randomSlow } = createRandomGenerator(`${seed}${step}${Math.floor(timeMs / 250)}`);\r\n    const { random: random } = createRandomGenerator(`${seed}${step}${Math.floor(timeMs / 50)}`);\r\n    const shouldGlitch = step.glitch && randomSlow() > (1.0 - step.glitch.ratio);\r\n\r\n    const charsPerSecond = 30;\r\n    let charLength = Math.floor(timeMs / 1000 * charsPerSecond);\r\n\r\n    s.background(s.color(25 - 25 * Math.cos((2 * Math.PI * timeMs / 1000) / 10), 0, 0));\r\n    // s.background(0);\r\n    s.fill(s.color(255, 255, 255));\r\n    s.textFont(`monospace`);\r\n    s.textAlign(`left`);\r\n    s.textSize(14);\r\n\r\n    const LINE = 20;\r\n    const PAD = 4;\r\n    const actionCount = step.actions.length;\r\n\r\n    const drawTitleText = (t: string) => {\r\n        s.text(t,\r\n            PAD,\r\n            PAD * +1 + 0 * LINE,\r\n            PAD * -2 + frame.width,\r\n            PAD * +1 + 2 * LINE,\r\n        );\r\n    };\r\n    const drawAsciiArtText = (t: string) => {\r\n        s.text(t,\r\n            PAD,\r\n            PAD + +3 + 2 * LINE,\r\n            PAD * -2 + frame.width,\r\n            PAD * -1 + frame.height,\r\n        );\r\n    };\r\n    const drawDescriptionText = (t: string) => {\r\n        s.text(t,\r\n            PAD,\r\n            PAD + +3 + 2 * LINE,\r\n            PAD * -2 + frame.width,\r\n            PAD * -6 + frame.height - (actionCount + 2) * LINE,\r\n        );\r\n    };\r\n    const drawActionsText = (t: string) => {\r\n        s.text(t,\r\n            PAD,\r\n            PAD * -4 + frame.height - (actionCount + 2) * LINE,\r\n            PAD * -2 + frame.width,\r\n            PAD * -3 + frame.height - 2 * LINE,\r\n        );\r\n    };\r\n    const drawActionInputText = (t: string) => {\r\n        s.text(t,\r\n            PAD,\r\n            PAD * -2 + frame.height - 2 * LINE,\r\n            PAD * -2 + frame.width,\r\n            PAD * -1 + frame.height,\r\n        );\r\n    };\r\n\r\n    const drawNextPart = (text: string, drawText: (t: string) => void, color: p5.Color, fontSize: number, speedMultiplier = 1) => {\r\n        s.fill(color);\r\n        s.textSize(fontSize);\r\n\r\n        if (charLength * speedMultiplier < text.length){\r\n            const t = text.substr(0, charLength * speedMultiplier);\r\n            drawText(t);\r\n            return { done: false };\r\n        }\r\n\r\n        drawText(text);\r\n        charLength -= Math.floor(text.length / speedMultiplier);\r\n\r\n        return { done: true };\r\n    };\r\n\r\n    const drawWaitMessage = (timeMs: number,\r\n        text?: string, altText?: string,\r\n        drawText?: (t: string) => void, color?: p5.Color, fontSize?: number,\r\n    ) => {\r\n        const waitChars = timeMs / 1000 * charsPerSecond;\r\n        if (charLength < waitChars){\r\n            const waitText = !text ? ``\r\n                : !altText ? text\r\n                    : ((charLength / charsPerSecond * 1000) % 1000 < 500 ? text : altText);\r\n            if (color){\r\n                s.fill(color);\r\n            }\r\n            if (fontSize){\r\n                s.textSize(fontSize);\r\n            }\r\n            if (waitText && drawText){\r\n                drawText(waitText);\r\n            }\r\n            return { done: false };\r\n        }\r\n\r\n        charLength -= waitChars;\r\n        return { done: true };\r\n    };\r\n\r\n    // const titleColor = s.color(\r\n    //     255 - 60 + 30 * Math.sin((2 * Math.PI * (timeMs + 100) / 1000) / 3),\r\n    //     255 - 60 + 30 * Math.sin((2 * Math.PI * (timeMs + 400) / 1000) / 3),\r\n    //     255 - 60 + 30 * Math.sin((2 * Math.PI * (timeMs + 800) / 1000) / 3),\r\n    // );\r\n\r\n    // Use random glitch effect\r\n    if (step.glitch && shouldGlitch){\r\n        s.rotate(0.25 * random());\r\n        s.scale(1 - 0.25 * random(), 1);\r\n        s.background(s.color(0, 150 * random(), 0));\r\n\r\n        if (randomSlow() > 0.25){\r\n            s.fill(s.color(255, 255, 255));\r\n            s.textAlign(`center`);\r\n            s.textSize(12);\r\n            const glitches = step.glitch.messages;\r\n            s.text(glitches[Math.floor(random() * glitches.length) ],\r\n                PAD,\r\n                PAD + LINE * 5,\r\n                PAD * -2 + frame.width,\r\n                PAD * -2 + frame.height,\r\n            );\r\n            return { done: false };\r\n        }\r\n    }\r\n\r\n    // Skip title typing\r\n    charLength += step.title.trim().length;\r\n    s.textAlign(`center`);\r\n    const titleColor = s.color(255, 255, 255);\r\n    if (!drawNextPart(step.title.trim(), drawTitleText, titleColor, 14).done){\r\n        return { done: false };\r\n    }\r\n\r\n    if (!drawWaitMessage(5000, step.asciiArt, step.asciiArt, drawAsciiArtText, titleColor, 10).done){\r\n        return { done: false };\r\n    }\r\n\r\n    s.textAlign(`left`);\r\n    if (!drawNextPart(step.description.trim(), drawDescriptionText, s.color(255, 255, 255), 12).done){\r\n        return { done: false };\r\n    }\r\n    if (!drawWaitMessage(1000).done){\r\n        return { done: false };\r\n    }\r\n\r\n    const actionsText = `${step.actions.map(x => `    - ${x.name}\\n`).join(``)}`;\r\n    if (!drawNextPart(actionsText, drawActionsText, s.color(255, 255, 100), 12).done){\r\n        return { done: false };\r\n    }\r\n\r\n    // Wait a sec\r\n    if (!drawWaitMessage(3000, `>`, `> |`, drawActionInputText, s.color(100, 255, 100), 12).done){\r\n        return { done: false };\r\n    }\r\n\r\n    const actionName = step.actions[actionIndex ?? -1]?.name ?? ``;\r\n    if (!drawNextPart(`> ${actionName}`, drawActionInputText, s.color(100, 255, 100), 14).done){\r\n        return { done: false };\r\n    }\r\n\r\n    if (!drawWaitMessage(1000).done){\r\n        return { done: false };\r\n    }\r\n\r\n    return { done: true };\r\n};\r\n"],"sourceRoot":""}