{"componentChunkName":"component---gatsby-lite-template-ts","path":"/complexity-is-the-enemy","result":{"pageContext":{"sitePath":"/complexity-is-the-enemy","data":{"postPage":{"sourceFilePath":"D:/Projects/rick-love-master/code/blog-content/posts/future/2021-05-05-complexity-is-the-enemy/complexity-is-the-enemy.md","sourceFileContent":"---\r\ntitle: \"Complexity is the Real Enemy\"\r\ndate: \"2021-05-05\"\r\npath: \"/complexity-is-the-enemy\"\r\nauthor: \"Rick Love\"\r\nexcerpt: \"Keep your code as simple as possible\"\r\ntags: code, architecture\r\n---\r\n\r\n\r\nCode complexity is the enemy to productivity.\r\n\r\nTips to keep your typescript/node/react code simple:\r\n\r\n- Minimize Dependencies\r\n    - Eliminate as many dependencies as possible\r\n- Minimize Imports\r\n    - Especially watch for files imported from a great distance, the more complex the import path, the more likely it should be eliminated\r\n- Minimize function input and output types\r\n    - An inline type with only the required fields that are used in the function is the ideal input type definition since it only defines the minimal input interface\r\n    - Never use type definitions that you don't control\r\n    - Use implicit typing for return type when possible\r\n    - Only declare the return type when you want to ensure type correctness of the function itself\r\n- Minimize branching\r\n    - Never use a nested if statement\r\n    - Never use an else statement\r\n    - Handle error cases first and throw an error or return early\r\n    - Handle exceptional cases first and return early\r\n    - Handle simple cases first and return early\r\n    - As you handle the cases, the typescript type system will narrow the remaining type to it's remaining possibilities\r\n- Remove everything possible - the bare minimal is always the goal\r\n- Organize code by features not by structure\r\n","title":"Complexity is the Real Enemy","headers":[{"key":"title","value":"Complexity is the Real Enemy"},{"key":"date","value":"2021-05-05"},{"key":"path","value":"/complexity-is-the-enemy"},{"key":"author","value":"Rick Love"},{"key":"excerpt","value":"Keep your code as simple as possible"},{"key":"tags","value":"code, architecture"}],"body":"\r\n\r\n\r\nCode complexity is the enemy to productivity.\r\n\r\nTips to keep your typescript/node/react code simple:\r\n\r\n- Minimize Dependencies\r\n    - Eliminate as many dependencies as possible\r\n- Minimize Imports\r\n    - Especially watch for files imported from a great distance, the more complex the import path, the more likely it should be eliminated\r\n- Minimize function input and output types\r\n    - An inline type with only the required fields that are used in the function is the ideal input type definition since it only defines the minimal input interface\r\n    - Never use type definitions that you don't control\r\n    - Use implicit typing for return type when possible\r\n    - Only declare the return type when you want to ensure type correctness of the function itself\r\n- Minimize branching\r\n    - Never use a nested if statement\r\n    - Never use an else statement\r\n    - Handle error cases first and throw an error or return early\r\n    - Handle exceptional cases first and return early\r\n    - Handle simple cases first and return early\r\n    - As you handle the cases, the typescript type system will narrow the remaining type to it's remaining possibilities\r\n- Remove everything possible - the bare minimal is always the goal\r\n- Organize code by features not by structure\r\n","summary":"Code complexity is the enemy to productivity.\r\n\r\nTips to keep your typescript/node/react code simple:\r\n\r\n- Minimize Dependencies\r\n    - Eliminate as many dependencies as possible\r\n- Minimize Imports\r\n    - Especially watch for files imported from a great distance, the more complex the import path, the more likely it should be eliminated\r\n- Minimize function input and output types\r\n    - An inline type with only the required fields that are used in the function is the ideal input type definition since it only defines the minimal input interface\r\n    - Never use type definitions that you don't control\r\n    - Use implicit typing for return type when possible\r\n    - Only declare the return type when you want to ensure type correctness of the function itself\n\n...","excerpt":"Keep your code as simple as possible","tags":["code","architecture"],"order":-1620172800000,"dateLabel":"2021-05-05","relatedPages":[{"postSitePath":"/complexity-is-the-enemy","title":"Complexity is the Real Enemy","tags":["code","architecture"],"dateLabel":"2021-05-05","order":-1620172800000}]}}}},"staticQueryHashes":[]}