{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/art/artwork/nft-adventure/stories/nft-text-adventure.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/nft-adventure/game-engine.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/nft-adventure/art.ts"],"names":["metadata","key","name","description","author","asciiArt_manArmUp","trim","replace","items","story","title","asciiArt","inventory","actions","gameOver","glitch","ratio","messages","drawGame","gameState","gameData","s","frame","seed","timeMs","mode","input","timeStartMs","actionIndex","undefined","stepIndex","step","done","result","timeMsRaw","randomSlow","createRandomGenerator","Math","floor","random","shouldGlitch","charLength","background","color","cos","PI","fill","textFont","textAlign","textSize","actionCount","length","drawDescriptionText","t","text","PAD","width","height","drawActionInputText","drawNextPart","drawText","fontSize","speedMultiplier","substr","drawWaitMessage","altText","waitChars","waitText","rotate","scale","glitches","Number","MAX_SAFE_INTEGER","titleColor","map","x","join","action","actionResponse","actionColor","drawGameStep","endsWith","words","split","filter","i","findIndex","some","n","w","nftAdventure_nftDungeon","art_nftAdventure_nftTextAdventure","artist","canSetSeed","getTokenDescription","parseInt","renderArt","hostElement","recorder","createP5","size","window","innerWidth","innerHeight","canvas","wasRecording","stepIndexInit","actionIndexInit","now","timeProvider","Date","timeStart","isRespondingToInput","setup","console","log","createCanvas","canvasId","id","document","getElementById","createEventProvider","windowAddEventListener","toLowerCase","match","trimStart","draw","isRecording","isWaitingForFrame","a","getRecorder","addFrame"],"mappings":"wQAAMA,EAAW,CACbC,IAAK,qBACLC,KAAM,qBACNC,YAAa,6EACbC,OAAQ,iCAQNC,EAAoB,irBAmBxBC,OAAOC,QAAQ,MAnBS,KAqBpBC,EAAQ,CACV,CACIP,IAAK,QACLC,KAAM,QACNC,YAAa,iEAEjB,CACIF,IAAK,YACLC,KAAM,YACNC,YAAa,sBAEjB,CACIF,IAAK,OACLC,KAAM,QACNC,YAAa,2CAqBfM,EAAoB,CACtB,CACIC,MAAO,qBACPC,SAAUN,EACVF,YAAa,GACbS,UAAW,GACXC,QAAS,CACL,CACIX,KAAM,OACNC,YAAa,GACbW,UAAU,KAItB,CACIJ,MAAO,OAEPP,YAAa,gMAObY,OAAQ,CACJC,MAAO,IACPC,SAAU,CAAC,WAAD,oHAEdL,UAAW,GACXC,QAAS,CACL,CACIX,KAAM,oBACNC,YAAa,2BACbW,SAAU,uJAOd,CACIZ,KAAM,gBACNC,YAAa,uBACbW,SAAU,oMAMd,CAAEZ,KAAM,SAAUC,YAAa,iDAAkDW,UAAU,KAGnG,CACIJ,MAAO,WAEPP,YAAa,yOAObY,OAAQ,CACJC,MAAO,IACPC,SAAU,CAAC,WAAD,oHAEdL,UAAW,GACXC,QAAS,CACL,CAAEX,KAAM,eAAgBC,YAAa,mDACrC,CAAED,KAAM,YAAaC,YAAa,qCAClC,CAAED,KAAM,WAAYC,YAAa,0CCuIhCe,EAAW,SAAC,GAcsB,MAb3CC,EAa2C,EAb3CA,UACAC,EAY2C,EAZ3CA,SACAC,EAW2C,EAX3CA,EACAC,EAU2C,EAV3CA,MACAC,EAS2C,EAT3CA,KACAC,EAQ2C,EAR3CA,OAWI,SAAAL,EAAUM,MAAmBN,EAAUO,QACvCP,EAAUQ,YAAc,EACxBR,EAAUS,iBAAcC,GALe,MAavCV,EAJAW,iBATuC,MAS3B,EAT2B,EAUvCF,EAGAT,EAHAS,YAVuC,EAavCT,EAFAO,aAXuC,WAYvCD,EACAN,EADAM,KAGEM,EAAI,UAAGX,EAASX,MAAMqB,GAAa,UAA/B,aAAqCD,EAE/C,IAAKE,EACD,MAAO,CACHC,MAAM,EACNb,aAIR,IA8BiD,MA9B3Cc,EA7RkB,SAAC,GAkBJ,QAjBrBF,EAiBqB,EAjBrBA,KACAH,EAgBqB,EAhBrBA,YACAP,EAeqB,EAfrBA,EACQa,EAca,EAdrBV,OACAF,EAaqB,EAbrBA,MACAC,EAYqB,EAZrBA,KACAG,EAWqB,EAXrBA,MACAD,EAUqB,EAVrBA,KAYA,IAAKM,EAAO,MAAO,CAAEC,MAAM,GAE3B,IAAMR,EAASU,EAECC,EAAeC,YAAsB,GAAGb,EAAOQ,EAAOM,KAAKC,MAAMd,EAAS,MAAlFe,OACQA,EAAWH,YAAsB,GAAGb,EAAOQ,EAAOM,KAAKC,MAAMd,EAAS,KAA9Ee,OACFC,EAAeT,EAAKhB,QAAUoB,IAAgB,EAAMJ,EAAKhB,OAAOC,MAGlEyB,EAAaJ,KAAKC,MAAMd,EAAS,IADd,IAGvBH,EAAEqB,WAAWrB,EAAEsB,MAAM,GAAK,GAAKN,KAAKO,IAAK,EAAIP,KAAKQ,GAAKrB,EAAS,IAAQ,IAAK,EAAG,IAEhFH,EAAEyB,KAAKzB,EAAEsB,MAAM,IAAK,IAAK,MACzBtB,EAAE0B,SAAF,aACA1B,EAAE2B,UAAF,QACA3B,EAAE4B,SAAS,IAEX,IAEMC,EAAcnB,EAAKlB,QAAQsC,OAkB3BC,EAAsB,SAACC,GACzBhC,EAAEiC,KAAKD,EApBC,EAsBJE,IACAA,EAAWjC,EAAMkC,OACjBD,GAAWjC,EAAMmC,OAzBZ,IAyBsBP,EAAc,KAW3CQ,EAAsB,SAACL,GACzBhC,EAAEiC,KAAKD,EApCC,GAsCJE,EAAWjC,EAAMmC,OAAS,IAC1BF,EAAWjC,EAAMkC,OACjBD,EAAWjC,EAAMmC,SAInBE,EAAe,SAACL,EAAcM,EAA+BjB,EAAiBkB,EAAkBC,GAIlG,YAJ0H,IAAxBA,MAAkB,GACpHzC,EAAEyB,KAAKH,GACPtB,EAAE4B,SAASY,GAEPpB,EAAaqB,EAAkBR,EAAKH,QAEpCS,EADUN,EAAKS,OAAO,EAAGtB,EAAaqB,IAE/B,CAAE9B,MAAM,KAGnB4B,EAASN,GACTb,GAAcJ,KAAKC,MAAMgB,EAAKH,OAASW,GAEhC,CAAE9B,MAAM,KAGbgC,EAAkB,SAACxC,EACrB8B,EAAeW,EACfL,EAAgCjB,EAAkBkB,GAElD,IAAMK,EAAY1C,EAAS,IA3ER,GA4EnB,GAAIiB,EAAayB,EAAU,CACvB,IAAMC,EAAYb,EACXW,EACKxB,EA/EG,GA+E2B,IAAQ,IAAO,IAAMa,EAAOW,EADrDX,EADA,GAYjB,OATIX,GACAtB,EAAEyB,KAAKH,GAEPkB,GACAxC,EAAE4B,SAASY,GAEXM,GAAYP,GACZA,EAASO,GAEN,CAAEnC,MAAM,GAInB,OADAS,GAAcyB,EACP,CAAElC,MAAM,IAUnB,GAAID,EAAKhB,QAAUyB,IACfnB,EAAE+C,OAAO,IAAO7B,KAChBlB,EAAEgD,MAAM,EAAI,IAAO9B,IAAU,GAC7BlB,EAAEqB,WAAWrB,EAAEsB,MAAM,EAAG,IAAMJ,IAAU,IAEpCJ,IAAe,KAAK,CACpBd,EAAEyB,KAAKzB,EAAEsB,MAAM,IAAK,IAAK,MACzBtB,EAAE2B,UAAF,UACA3B,EAAE4B,SAAS,IACX,IAAMqB,EAAWvC,EAAKhB,OAAOE,SAO7B,OANAI,EAAEiC,KAAKgB,EAASjC,KAAKC,MAAMC,IAAW+B,EAASnB,SAtG3C,EAwGAI,KACAA,EAAWjC,EAAMkC,OACjBD,EAAWjC,EAAMmC,QAEd,CAAEzB,MAAM,GAIV,SAATP,IACAgB,EAAa8B,OAAOC,kBAIxB/B,GAAcV,EAAKrB,MAAMJ,OAAO6C,OAChC9B,EAAE2B,UAAF,UACA,IAAMyB,EAAapD,EAAEsB,MAAM,IAAK,IAAK,KACrC,IAAKgB,EAAa5B,EAAKrB,MAAMJ,QArHP,SAAC+C,GACnBhC,EAAEiC,KAAKD,EAJC,EAMJE,GACAA,EAAWjC,EAAMkC,MACjBD,MAgH4CkB,EAAY,IAAIzC,KAChE,MAAO,CAAEA,MAAM,GAGnB,IAAKgC,EAAgB,IAAMjC,EAAKpB,SAAUoB,EAAKpB,UAjHtB,SAAC0C,GACtBhC,EAAEiC,KAAKD,EAZC,EAcJE,IACAA,EAAWjC,EAAMkC,OACjBD,EAAWjC,EAAMmC,UA4GkDgB,EAAY,IAAIzC,KACvF,MAAO,CAAEA,MAAM,GAInB,GADAX,EAAE2B,UAAF,SACKW,EAAa5B,EAAK5B,YAAYG,OAAQ8C,EAAqB/B,EAAEsB,MAAM,IAAK,IAAK,KAAM,IAAIX,KACxF,MAAO,CAAEA,MAAM,GAEnB,IAAKgC,EAAgB,KAAMhC,KACvB,MAAO,CAAEA,MAAM,GAInB,IAAK2B,EADe,GAAG5B,EAAKlB,QAAQ6D,KAAI,SAAAC,GAAC,eAAaA,EAAEzE,KAAf,QAAyB0E,KAA3C,KA7GC,SAACvB,GACrBhC,EAAEiC,KAAKD,EA5BC,GA8BJE,GAAWjC,EAAMmC,OA/BZ,IA+BsBP,EAAc,IACzCK,EAAWjC,EAAMkC,OACjBD,GAAWjC,EAAMmC,OAAS,MAyGcpC,EAAEsB,MAAM,IAAK,IAAK,KAAM,IAAIX,KACxE,MAAO,CAAEA,MAAM,GAInB,IAAKgC,EAAgB,IAAD,UAAmBN,EAAqBrC,EAAEsB,MAAM,IAAK,IAAK,KAAM,IAAIX,KACpF,MAAO,CAAEA,MAAM,GAGnB,IAAM6C,EAAS9C,EAAKlB,QAAQe,WAAgB,GAE5C,IAAK+B,EAAa,MADF,oBAAGkB,aAAH,EAAGA,EAAQ3E,YAAX,QAAmBwB,SAAnB,YACqBgC,EAAqBrC,EAAEsB,MAAM,IAAK,IAAK,KAAM,IAAIX,KAClF,MAAO,CAAEA,MAAM,GAGnB,IAAKgC,EAAgB,KAAMhC,KACvB,MAAO,CAAEA,MAAM,GAGnB,GAAa,aAATP,GAAuBoD,EAAO,OAC9BpC,EAAaJ,KAAKC,MAAMd,EAAS,IAxKd,IA0KnBH,EAAEqB,WAAWrB,EAAEsB,MAAM,GAAK,GAAKN,KAAKO,IAAK,EAAIP,KAAKQ,GAAKrB,EAAS,IAAQ,IAAK,EAAG,IAEhF,IAAMsD,EAAiBD,EAAO1E,YACxBW,EAAQ,UAAG+D,EAAO/D,gBAAV,SACRiE,EAAcjE,EAAWO,EAAEsB,MAAM,IAAK,IAAK,KAAOtB,EAAEsB,MAAM,IAAK,IAAK,KAC1E,IAAKgB,EAAamB,EAAgB1B,EAAqB2B,EAAa,IAAI/C,KACpE,MAAO,CAAEA,MAAM,GAGnB,IAAKgC,EAAgB,KAAMhC,KACvB,MAAO,CAAEA,MAAM,GAGnB,GAAuB,MAAnB6C,EAAO/D,WACPO,EAAE2B,UAAF,WACKW,EAAa,kBAAmBD,EAAqBqB,EAAa,IAAI/C,MACvE,MAAO,CAAEA,MAAM,GAIvB,GAAIlB,EAAS,CAGT,GAFAO,EAAEqB,WAAWrB,EAAEsB,MAAM,GAAK,GAAKN,KAAKO,IAAK,EAAIP,KAAKQ,GAAKrB,EAAS,IAAQ,IAAK,EAAG,KAE3EmC,EAAa7C,EAAUsC,EAAqB2B,EAAa,IAAI/C,KAC9D,MAAO,CAAEA,MAAM,GAGnB,IAAKgC,EAAgB,KAAMhC,KACvB,MAAO,CAAEA,MAAM,GAInB,GADAX,EAAE2B,UAAF,WACKW,EAAa,YAAaD,EAAqBqB,EAAa,IAAI/C,KACjE,MAAO,CAAEA,MAAM,IAM3B,MAAO,CAAEA,MAAM,GAgDAgD,CAAa,CACxBjD,OAAMH,cAAaP,IACnBG,SAAQF,QAAOC,OAAMG,QAAOD,SAGhC,GAAIC,EAAMuD,SAAN,OAAwBvD,EAAMpB,OAAO,CACrC,IAAM4E,EAAQxD,EAAMpB,OAAO6E,MAAb,KAAwBC,QAAO,SAAAT,GAAC,OAAIA,KAC5CU,EAAItD,EAAKlB,QAAQyE,WAAU,SAAAX,GAAC,OAAIA,EAAEzE,KAAKiF,MAAP,KAAkBI,MAAK,SAAAC,GAAC,OAAIN,EAAMK,MAAK,SAAAE,GAAC,OAAIA,IAAMD,WACxF,OAAIH,GAAK,EACE,CACHrD,MAAM,EACNb,UAAW,OAAF,UACFA,EADE,CAELO,MAAO,GACPE,YAAayD,EACb5D,KAAM,WACNE,iBAAaE,KAId,CACHG,MAAM,EACNb,UAAW,OAAF,UACFA,EADE,CAELO,MAAO,MAMvB,MAAI,aAAAP,EAAUM,MAAuBQ,EAAOD,KAExB,oBAAGD,EAAKlB,QAAL,UAAaM,EAAUS,mBAAvB,SAAuC,UAA1C,aAAG,EAA2Cd,gBAA9C,SAIRY,EACO,CACHM,MAAM,EACNb,UAAW,OAAF,UACFA,EADE,CAELM,KAAM,OACNK,UAAW,EACXF,iBAAaC,EACbF,iBAAaE,EACbH,MAAO,MAKZ,CACHM,MAAM,EACNb,aAID,CACHa,MAAM,EACNb,UAAW,OAAF,UACFA,EADE,CAELM,KAAM,OACNK,UAAWA,EAAY,EACvBF,iBAAaC,EACbF,iBAAaE,KAKzB,iBACOI,EADP,CAEId,e,YCpXFuE,EFwIK,CACH1F,WACAQ,QACAC,SEzIKkF,EAA6C,CACtD1F,IAAK,qBACLS,MAAOgF,EAAwB1F,SAASE,KACxCC,YAAauF,EAAwB1F,SAASG,YAC9CyF,OAAQF,EAAwB1F,SAASI,OACzCyF,YAAY,EACZC,oBAAqB,SAACvE,GAAiB,QAMvB,EANuB,EACFA,EAAK4D,MAAL,KAAgBT,KAAI,SAAAC,GAAC,OAAIoB,SAASpB,EAAG,OAA/D7C,EAD4B,KACjBF,EADiB,KAG7BG,EAAO2D,EAAwBjF,MAAMqB,GACrC+C,EAAS9C,aAAH,EAAGA,EAAMlB,QAAQe,GAE7B,OAAKiD,EAIK/C,EAAV,IAAuBF,EAAvB,iBAAwCG,aAAxC,EAAwCA,EAAMrB,aAA9C,6BAA+DmE,aAA/D,EAA+DA,EAAQ3E,YAAvE,YAHc4B,EAAV,iBAAyBC,aAAzB,EAAyBA,EAAMrB,aAA/B,aASRsF,UAAW,SAACC,EAA0B1E,EAA2B2E,EAAUC,QAAa,IAAlD5E,MAAkD,oBAIjEa,YAAsBb,GAAjCgB,OAJ4E,IAW9E6D,GAAOC,OAAOC,WAFA,KAE4BD,OAAOE,YAFnC,KAQhBC,EAAS,KACTC,GAAe,EAlBiE,EAsB3ClF,EAAK4D,MAAL,KAAgBT,KAAI,SAAAC,GAAC,OAAIoB,SAASpB,EAAG,OAAvE+B,EAtB6E,KAsB9DC,EAtB8D,KAwB9EC,EAAM,WACR,OAAOV,EAAWA,EAASW,aAAaD,MAAQE,KAAKF,OAGrDzF,EAAY,CACZ4F,UAAWH,IACX9E,UAAW4E,EACX9E,YAAa+E,EACbjF,MAAO,GACPsF,qBAAqB,EACrBvF,KAAM,QAGV,OAAO0E,GAAS,SAAC9E,GACbA,EAAE4F,MAAQ,WACNC,QAAQC,IAAR,8BAEA,IAAMlF,EAASZ,EAAE+F,aAAahB,EAAMA,GAC9BiB,EAAW,GAAGhF,KAAKE,SACzBN,EAAOqF,GAAGD,GACVb,EAASe,SAASC,eAAeH,GAEjBI,YAAoBjB,GACtBkB,uBAAd,WAAgD,SAAA/C,GAExC,cAAAA,EAAE1E,IAAI0H,cACNxG,EAAUO,MAAQP,EAAUO,MAAMqC,OAAO,EAAG5C,EAAUO,MAAMyB,OAAS,GAC9D,UAAAwB,EAAE1E,IAAI0H,cACbxG,EAAWO,OAAX,KACOiD,EAAE1E,IAAI2H,MAAM,oBACnBzG,EAAUO,MAAQP,EAAUO,MAAMmG,YAAclD,EAAE1E,KAGtDiH,QAAQC,IAAR,WAAwB,CAAExC,IAAGjD,MAAOP,EAAUO,YAItDL,EAAEyG,KAAO,WAAM,QAGP5B,WAAU6B,gBAAkBtB,IAC5BtF,EAAUQ,YAAcuE,EAASW,aAAaD,OACrC,GAEbH,EAAY,UAAGP,aAAH,EAAGA,EAAU6B,qBAAb,SAUZ,IAAMhB,EAAS,UAAG5F,EAAUQ,mBAAb,QAA4BiF,IACrCpF,EAASoF,IAAQG,EAEjB9E,EAASf,EAAS,CACpBI,MAAO,CAAEkC,MAAO4C,EAAM3C,OAAQ2C,GAC9B/E,IACAD,SAAUsE,EACVvE,YACAI,KAAMA,EACNC,YAGJL,EAAYc,EAAOd,WACJQ,cACXR,EAAUQ,YAAciF,KAGxB3E,EAAOD,MACE,EAITkE,WAAU8B,qBAAuBxB,IACjCU,QAAQC,IAAR,yCAAsD,IACtD,sBAAC,sBAAAc,EAAA,sEAAkB/B,EAASgC,cAAcC,SAAS3B,GAAlD,kFAAD,OAITP","file":"26-407cc4ea2cb34bd52a00.js","sourcesContent":["const metadata = {\r\n    key: `nft-text-adventure`,\r\n    name: `NFT Text Adventure`,\r\n    description: `NFT Text Adventure is a game where actions are chosen by the NFT community`,\r\n    author: `Rick Love & the NFT Community`,\r\n};\r\n\r\n// https://cloudapps.herokuapp.com/imagetoascii/\r\n// .:*I$VMoun-\r\n// .!\"#$%&O0olWM()*+-{|}~<>[]\r\n// .,:|'Oo(){}[]\r\n// .-:SOo\r\nconst asciiArt_manArmUp = `\r\n.........()-,.......................\r\n.......(),...}:.....................\r\n..........\"}:==::>..................\r\n.....()::}:-==:::::>................\r\n..........,==:::::::::}.............\r\n.....():\"}..:::::::::::::::.........\r\n.............:::-...<::::::::::.....\r\n...........():..........::::::::::..\r\n..........................-::::::::.\r\n.........oooSS:.............-::::::.\r\n......:SSOOOoo::...........:::::::-.\r\n......oOoo:o::..:.........::::::::..\r\n.....:OOo:...:::::........::::::::..\r\n......oOS:::::::::........o::::::...\r\n......-oOo::::...::..:ooooooo:::....\r\n..........::::--::::oooooooooo:.....\r\n...........:::::::oooooooooooo:.....\r\n....-:oooo:ooooooooooooooooooo:.....\r\n`.trim().replace(/\\./g, ` `);\r\n\r\nconst items = [\r\n    {\r\n        key: `torch`,\r\n        name: `Torch`,\r\n        description: `This torch will be your light when all other lights go out...`,\r\n    },\r\n    {\r\n        key: `torch_lit`,\r\n        name: `Lit Torch`,\r\n        description: `This torch it lit!`,\r\n    },\r\n    {\r\n        key: `rope`,\r\n        name: `Knife`,\r\n        description: `That's not a knife... This is a knife!`,\r\n    },\r\n] as const;\r\ntype GameItemKey = typeof items[number]['key'];\r\n\r\ntype GameStep = {\r\n    title: string;\r\n    asciiArt?: string;\r\n    description: string;\r\n    glitch?: {\r\n        ratio: number;\r\n        messages: string[];\r\n    };\r\n    inventory: GameItemKey[];\r\n    actions: {\r\n        name: string;\r\n        description: string;\r\n        gameOver?: string | false;\r\n    }[];\r\n};\r\n/** There is only a single linear progression, all other choices end in death */\r\nconst story: GameStep[] = [\r\n    {\r\n        title: `NFT Text Adventure`,\r\n        asciiArt: asciiArt_manArmUp,\r\n        description: ``,\r\n        inventory: [],\r\n        actions: [\r\n            {\r\n                name: `play`,\r\n                description: ``,\r\n                gameOver: false,\r\n            },\r\n        ],\r\n    },\r\n    {\r\n        title: `Cold`,\r\n        // asciiArt: asciiArt_manArmUp,\r\n        description: `\r\n\r\nCold, damp, wet... you wake up shivering. \r\n\r\nWhen you open your eyes, everything is still dark.\r\n\r\nYou can't see anything, but you can feel that you are lying on a cold hard surface...`,\r\n        glitch: {\r\n            ratio: 0.07,\r\n            messages: [`HELP ME!`, `Who are you?`, `What are you?`, `How are you?`, `Where are you?`, `Why are you?`, `I'm cold`, `I'm alone`, `I'm afraid`],\r\n        },\r\n        inventory: [],\r\n        actions: [\r\n            {\r\n                name: `search the ground`,\r\n                description: `You search the ground...`,\r\n                gameOver: `\r\nAs you feel around your position, you realize that there is no ground anywhere around you.\r\n                \r\nThere is no way you can escape.\r\n\r\n`,\r\n            },\r\n            {\r\n                name: `call for help`,\r\n                description: `You call for help...`,\r\n                gameOver: `\r\nSuddenly you hear scratching quickly coming towards you.\r\n                \r\nYou feel a sharp pain in your stomach. Your muscles spasm for a moment, but then you are no longer able to move.\r\n`,\r\n            },\r\n            { name: `listen`, description: `You carefully listen without making a sound...`, gameOver: false },\r\n        ],\r\n    },\r\n    {\r\n        title: `Whispers`,\r\n        // asciiArt: asciiArt_manArmUp,\r\n        description: `\r\n\r\nIn the distance, you hear the slight brookling of water flowing over stones, but nothing else at first.\r\n\r\nThen, you hear something you did not expect, a whisper in your ear that says: \r\n\r\n\"Do not move... They will see you...\"`,\r\n        glitch: {\r\n            ratio: 0.03,\r\n            messages: [`HELP ME!`, `Who are you?`, `What are you?`, `How are you?`, `Where are you?`, `Why are you?`, `I'm cold`, `I'm alone`, `I'm afraid`],\r\n        },\r\n        inventory: [],\r\n        actions: [\r\n            { name: `remain still`, description: `You decide not moving is a good idea for now...` },\r\n            { name: `move away`, description: `You jerk away from the whisper...` },\r\n            { name: `stand up`, description: `You push yourself off the ground...` },\r\n        ],\r\n    },\r\n];\r\n\r\nexport const createNftAdventure_nftTextAdventure = () => {\r\n\r\n    return {\r\n        metadata,\r\n        items,\r\n        story,\r\n    };\r\n};\r\n","import { createRandomGenerator } from 'art/rando';\r\nimport type p5 from 'p5';\r\n\r\ntype GameStep = {\r\n    title: string;\r\n    asciiArt?: string;\r\n    description: string;\r\n    glitch?: {\r\n        ratio: number;\r\n        messages: string[];\r\n    };\r\n    inventory: string[];\r\n    actions: {\r\n        name: string;\r\n        description: string;\r\n        gameOver?: string | false;\r\n    }[];\r\n};\r\ntype GameItem = {\r\n    key: string;\r\n    description: string;\r\n};\r\ntype GameData = {\r\n    story: GameStep[];\r\n    items: readonly GameItem [];\r\n};\r\nexport const drawGameStep = ({\r\n    step,\r\n    actionIndex,\r\n    s,\r\n    timeMs: timeMsRaw,\r\n    frame,\r\n    seed,\r\n    input,\r\n    mode,\r\n}: {\r\n    step: GameStep;\r\n    actionIndex?: number;\r\n    s: p5;\r\n    timeMs: number;\r\n    frame: { width: number, height: number };\r\n    seed: string;\r\n    input: string;\r\n    mode: 'step' | 'response';\r\n}): { done: boolean } => {\r\n\r\n    if (!step){ return { done: true };}\r\n\r\n    const timeMs = timeMsRaw;\r\n\r\n    const { random: randomSlow } = createRandomGenerator(`${seed}${step}${Math.floor(timeMs / 250)}`);\r\n    const { random: random } = createRandomGenerator(`${seed}${step}${Math.floor(timeMs / 50)}`);\r\n    const shouldGlitch = step.glitch && randomSlow() > (1.0 - step.glitch.ratio);\r\n\r\n    const charsPerSecond = 30;\r\n    let charLength = Math.floor(timeMs / 1000 * charsPerSecond);\r\n\r\n    s.background(s.color(25 - 25 * Math.cos((2 * Math.PI * timeMs / 1000) / 10), 0, 0));\r\n    // s.background(0);\r\n    s.fill(s.color(255, 255, 255));\r\n    s.textFont(`monospace`);\r\n    s.textAlign(`left`);\r\n    s.textSize(14);\r\n\r\n    const LINE = 20;\r\n    const PAD = 4;\r\n    const actionCount = step.actions.length;\r\n\r\n    const drawTitleText = (t: string) => {\r\n        s.text(t,\r\n            PAD,\r\n            PAD * +1 + 0 * LINE,\r\n            PAD * -2 + frame.width,\r\n            PAD * +1 + 2 * LINE,\r\n        );\r\n    };\r\n    const drawAsciiArtText = (t: string) => {\r\n        s.text(t,\r\n            PAD,\r\n            PAD + +3 + 2 * LINE,\r\n            PAD * -2 + frame.width,\r\n            PAD * -1 + frame.height,\r\n        );\r\n    };\r\n    const drawDescriptionText = (t: string) => {\r\n        s.text(t,\r\n            PAD,\r\n            PAD + +3 + 2 * LINE,\r\n            PAD * -2 + frame.width,\r\n            PAD * -6 + frame.height - (actionCount + 2) * LINE,\r\n        );\r\n    };\r\n    const drawActionsText = (t: string) => {\r\n        s.text(t,\r\n            PAD,\r\n            PAD * -4 + frame.height - (actionCount + 2) * LINE,\r\n            PAD * -2 + frame.width,\r\n            PAD * -3 + frame.height - 2 * LINE,\r\n        );\r\n    };\r\n    const drawActionInputText = (t: string) => {\r\n        s.text(t,\r\n            PAD,\r\n            PAD * -2 + frame.height - 2 * LINE,\r\n            PAD * -2 + frame.width,\r\n            PAD * -1 + frame.height,\r\n        );\r\n    };\r\n\r\n    const drawNextPart = (text: string, drawText: (t: string) => void, color: p5.Color, fontSize: number, speedMultiplier = 1) => {\r\n        s.fill(color);\r\n        s.textSize(fontSize);\r\n\r\n        if (charLength * speedMultiplier < text.length){\r\n            const t = text.substr(0, charLength * speedMultiplier);\r\n            drawText(t);\r\n            return { done: false };\r\n        }\r\n\r\n        drawText(text);\r\n        charLength -= Math.floor(text.length / speedMultiplier);\r\n\r\n        return { done: true };\r\n    };\r\n\r\n    const drawWaitMessage = (timeMs: number,\r\n        text?: string, altText?: string,\r\n        drawText?: (t: string) => void, color?: p5.Color, fontSize?: number,\r\n    ) => {\r\n        const waitChars = timeMs / 1000 * charsPerSecond;\r\n        if (charLength < waitChars){\r\n            const waitText = !text ? ``\r\n                : !altText ? text\r\n                    : ((charLength / charsPerSecond * 1000) % 1000 < 500 ? text : altText);\r\n            if (color){\r\n                s.fill(color);\r\n            }\r\n            if (fontSize){\r\n                s.textSize(fontSize);\r\n            }\r\n            if (waitText && drawText){\r\n                drawText(waitText);\r\n            }\r\n            return { done: false };\r\n        }\r\n\r\n        charLength -= waitChars;\r\n        return { done: true };\r\n    };\r\n\r\n    // const titleColor = s.color(\r\n    //     255 - 60 + 30 * Math.sin((2 * Math.PI * (timeMs + 100) / 1000) / 3),\r\n    //     255 - 60 + 30 * Math.sin((2 * Math.PI * (timeMs + 400) / 1000) / 3),\r\n    //     255 - 60 + 30 * Math.sin((2 * Math.PI * (timeMs + 800) / 1000) / 3),\r\n    // );\r\n\r\n    // Use random glitch effect\r\n    if (step.glitch && shouldGlitch){\r\n        s.rotate(0.25 * random());\r\n        s.scale(1 - 0.25 * random(), 1);\r\n        s.background(s.color(0, 150 * random(), 0));\r\n\r\n        if (randomSlow() > 0.25){\r\n            s.fill(s.color(255, 255, 255));\r\n            s.textAlign(`center`);\r\n            s.textSize(12);\r\n            const glitches = step.glitch.messages;\r\n            s.text(glitches[Math.floor(random() * glitches.length) ],\r\n                PAD,\r\n                PAD + LINE * 5,\r\n                PAD * -2 + frame.width,\r\n                PAD * -2 + frame.height,\r\n            );\r\n            return { done: false };\r\n        }\r\n    }\r\n\r\n    if (mode !== `step`){\r\n        charLength = Number.MAX_SAFE_INTEGER;\r\n    }\r\n\r\n    // Skip title typing\r\n    charLength += step.title.trim().length;\r\n    s.textAlign(`center`);\r\n    const titleColor = s.color(255, 255, 255);\r\n    if (!drawNextPart(step.title.trim(), drawTitleText, titleColor, 14).done){\r\n        return { done: false };\r\n    }\r\n\r\n    if (!drawWaitMessage(5000, step.asciiArt, step.asciiArt, drawAsciiArtText, titleColor, 10).done){\r\n        return { done: false };\r\n    }\r\n\r\n    s.textAlign(`left`);\r\n    if (!drawNextPart(step.description.trim(), drawDescriptionText, s.color(255, 255, 255), 12).done){\r\n        return { done: false };\r\n    }\r\n    if (!drawWaitMessage(1000).done){\r\n        return { done: false };\r\n    }\r\n\r\n    const actionsText = `${step.actions.map(x => `    - ${x.name}\\n`).join(``)}`;\r\n    if (!drawNextPart(actionsText, drawActionsText, s.color(255, 255, 100), 12).done){\r\n        return { done: false };\r\n    }\r\n\r\n    // Blink\r\n    if (!drawWaitMessage(3000, `>`, `> |`, drawActionInputText, s.color(100, 255, 100), 12).done){\r\n        return { done: false };\r\n    }\r\n\r\n    const action = step.actions[actionIndex ?? -1];\r\n    const actionName = action?.name ?? input ?? ``;\r\n    if (!drawNextPart(`> ${actionName}`, drawActionInputText, s.color(100, 255, 100), 14).done){\r\n        return { done: false };\r\n    }\r\n\r\n    if (!drawWaitMessage(1000).done){\r\n        return { done: false };\r\n    }\r\n\r\n    if (mode === `response` && action){\r\n        charLength = Math.floor(timeMs / 1000 * charsPerSecond);\r\n\r\n        s.background(s.color(25 - 25 * Math.cos((2 * Math.PI * timeMs / 1000) / 10), 0, 0));\r\n\r\n        const actionResponse = action.description;\r\n        const gameOver = action.gameOver ?? false;\r\n        const actionColor = gameOver ? s.color(255, 100, 100) : s.color(100, 100, 255);\r\n        if (!drawNextPart(actionResponse, drawDescriptionText, actionColor, 14).done){\r\n            return { done: false };\r\n        }\r\n\r\n        if (!drawWaitMessage(1000).done){\r\n            return { done: false };\r\n        }\r\n\r\n        if (action.gameOver == null){\r\n            s.textAlign(`center`);\r\n            if (!drawNextPart(`TO BE CONTINUED`, drawActionInputText, actionColor, 14).done){\r\n                return { done: true };\r\n            }\r\n        }\r\n\r\n        if (gameOver){\r\n            s.background(s.color(25 - 25 * Math.cos((2 * Math.PI * timeMs / 1000) / 10), 0, 0));\r\n\r\n            if (!drawNextPart(gameOver, drawDescriptionText, actionColor, 14).done){\r\n                return { done: false };\r\n            }\r\n\r\n            if (!drawWaitMessage(1000).done){\r\n                return { done: false };\r\n            }\r\n\r\n            s.textAlign(`center`);\r\n            if (!drawNextPart(`GAME OVER`, drawActionInputText, actionColor, 14).done){\r\n                return { done: true };\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return { done: true };\r\n};\r\n\r\nexport type GameState = {\r\n    timeStartMs?: number;\r\n    stepIndex?: number;\r\n    actionIndex?: number;\r\n    input: string;\r\n    mode: 'step' | 'response';\r\n};\r\nexport const drawGame = ({\r\n    gameState,\r\n    gameData,\r\n    s,\r\n    frame,\r\n    seed,\r\n    timeMs,\r\n}: {\r\n    gameState: GameState;\r\n    gameData: GameData;\r\n    s: p5;\r\n    frame: { width: number, height: number };\r\n    seed: string;\r\n    timeMs: number;\r\n}): { done: boolean, gameState: GameState } => {\r\n\r\n\r\n    if (gameState.mode === `step` && gameState.input){\r\n        gameState.timeStartMs = 1;\r\n        gameState.actionIndex = undefined;\r\n    }\r\n\r\n    const {\r\n        stepIndex = 0,\r\n        actionIndex,\r\n        input = ``,\r\n        mode,\r\n    } = gameState;\r\n\r\n    const step = gameData.story[stepIndex || 0] ?? undefined;\r\n\r\n    if (!step){\r\n        return {\r\n            done: true,\r\n            gameState,\r\n        };\r\n    }\r\n\r\n    const result = drawGameStep({\r\n        step, actionIndex, s,\r\n        timeMs, frame, seed, input, mode,\r\n    });\r\n\r\n    if (input.endsWith(`\\n`) && input.trim()){\r\n        const words = input.trim().split(` `).filter(x => x);\r\n        const i = step.actions.findIndex(x => x.name.split(` `).some(n => words.some(w => w === n)));\r\n        if (i >= 0){\r\n            return {\r\n                done: false,\r\n                gameState: {\r\n                    ...gameState,\r\n                    input: ``,\r\n                    actionIndex: i,\r\n                    mode: `response`,\r\n                    timeStartMs: undefined,\r\n                },\r\n            };\r\n        } else {\r\n            return {\r\n                done: false,\r\n                gameState: {\r\n                    ...gameState,\r\n                    input: ``,\r\n                },\r\n            };\r\n        }\r\n    }\r\n\r\n    if (gameState.mode === `response` && result.done){\r\n\r\n        const isGameOver = step.actions[gameState.actionIndex ?? -1]?.gameOver ?? true;\r\n        if (isGameOver){\r\n\r\n            // Start over\r\n            if (input){\r\n                return {\r\n                    done: false,\r\n                    gameState: {\r\n                        ...gameState,\r\n                        mode: `step`,\r\n                        stepIndex: 0,\r\n                        actionIndex: undefined,\r\n                        timeStartMs: undefined,\r\n                        input: ``,\r\n                    },\r\n                };\r\n            }\r\n\r\n            return {\r\n                done: true,\r\n                gameState,\r\n            };\r\n        }\r\n\r\n        return {\r\n            done: false,\r\n            gameState: {\r\n                ...gameState,\r\n                mode: `step`,\r\n                stepIndex: stepIndex + 1,\r\n                actionIndex: undefined,\r\n                timeStartMs: undefined,\r\n            },\r\n        };\r\n    }\r\n\r\n    return {\r\n        ...result,\r\n        gameState,\r\n    };\r\n};\r\n","/* eslint-disable new-cap */\r\n/* eslint-disable no-new */\r\nimport type p5 from 'p5';\r\nimport { createRandomGenerator } from '../../rando';\r\nimport { ArtWork } from '../../artwork-type';\r\nimport { createNftAdventure_nftTextAdventure } from './stories/nft-text-adventure';\r\nimport { drawGame, GameState } from './game-engine';\r\nimport { createEventProvider, EventProvider } from '../games/event-provider';\r\n\r\nconst nftAdventure_nftDungeon = createNftAdventure_nftTextAdventure();\r\n\r\nexport const art_nftAdventure_nftTextAdventure: ArtWork = {\r\n    key: `nft-text-adventure`,\r\n    title: nftAdventure_nftDungeon.metadata.name,\r\n    description: nftAdventure_nftDungeon.metadata.description,\r\n    artist: nftAdventure_nftDungeon.metadata.author,\r\n    canSetSeed: false,\r\n    getTokenDescription: (seed: string) => {\r\n        const [stepIndex, actionIndex] = seed.split(`:`).map(x => parseInt(x, 10));\r\n\r\n        const step = nftAdventure_nftDungeon.story[stepIndex];\r\n        const action = step?.actions[actionIndex];\r\n\r\n        if (!action){\r\n            return `${stepIndex} - ${step?.title ?? ``}`;\r\n        }\r\n\r\n        return `${stepIndex}:${actionIndex} - ${step?.title ?? ``} > ${action?.name ?? ``}`;\r\n    },\r\n    // openSea: {\r\n    //     tokenAddress: `0x495f947276749ce646f68ac8c248420045cb7b5e`,\r\n    //     tokenId: `91242641486941084018191434774360347389366801368112854311223385694785434025985`,\r\n    // },\r\n    renderArt: (hostElement: HTMLElement, seed = `This is my hash!`, recorder, createP5) => {\r\n        // const { a, b, c } = { a: 57, b: 23, c: 15 };\r\n\r\n\r\n        const { random } = createRandomGenerator(seed);\r\n\r\n        // const { a, b, c } = { a: 1 + Math.floor(57 * random()), b: 1 + Math.floor(213 * random()), c: 1 + Math.floor(115 * random()) };\r\n        // const { cr, cg, cb, ca } = { cr: Math.floor(25 + 230 * random()), cg: Math.floor(25 + 230 * random()), cb: Math.floor(25 + 230 * random()), ca: Math.floor(25 + 25 * random()) };\r\n\r\n        const TARGET_SIZE = 300;\r\n        const SMALL_SIZE = 300;\r\n        const size = window.innerWidth > TARGET_SIZE && window.innerHeight > TARGET_SIZE ? TARGET_SIZE : SMALL_SIZE;\r\n\r\n        const h = 200;\r\n        const scale = size / 400;\r\n        const speed = 0.5;\r\n\r\n        let canvas = null as null | HTMLCanvasElement;\r\n        let wasRecording = false;\r\n        let isDone = false;\r\n\r\n        let eventProvider = null as null |EventProvider;\r\n        const [stepIndexInit, actionIndexInit] = seed.split(`:`).map(x => parseInt(x, 10) as undefined | number);\r\n\r\n        const now = () => {\r\n            return recorder ? recorder.timeProvider.now() : Date.now();\r\n        };\r\n\r\n        let gameState = {\r\n            timeStart: now(),\r\n            stepIndex: stepIndexInit,\r\n            actionIndex: actionIndexInit,\r\n            input: ``,\r\n            isRespondingToInput: false,\r\n            mode: `step`,\r\n        } as GameState;\r\n\r\n        return createP5((s: p5) => {\r\n            s.setup = () => {\r\n                console.log(`renderArt:createP5:s.setup`);\r\n\r\n                const result = s.createCanvas(size, size);\r\n                const canvasId = `${Math.random()}`;\r\n                result.id(canvasId);\r\n                canvas = document.getElementById(canvasId) as HTMLCanvasElement;\r\n\r\n                eventProvider = createEventProvider(canvas);\r\n                eventProvider.windowAddEventListener(`keydown`, x => {\r\n\r\n                    if (x.key.toLowerCase() === `backspace`){\r\n                        gameState.input = gameState.input.substr(0, gameState.input.length - 1);\r\n                    } else if (x.key.toLowerCase() === `enter`){\r\n                        gameState. input += `\\n`;\r\n                    } else if (x.key.match(/^[A-Za-z0-9 ]$/)) {\r\n                        gameState.input = gameState.input.trimStart() + x.key;\r\n                    }\r\n\r\n                    console.log(`keypress`, { x, input: gameState.input });\r\n                });\r\n\r\n            };\r\n            s.draw = () => {\r\n                // console.log(`renderArt:createP5:s.draw`);\r\n\r\n                if (recorder?.isRecording() && !wasRecording){\r\n                    gameState.timeStartMs = recorder.timeProvider.now();\r\n                    isDone = false;\r\n                }\r\n                wasRecording = recorder?.isRecording() ?? false;\r\n\r\n                // if (isDone){ return; }\r\n\r\n                // if (recorder?.isWaitingForFrame() && canvas) {\r\n                //     console.log(`game.update waitingForFrame - addFrame`, {});\r\n                //     (async () => await recorder.getRecorder().addFrame(canvas))();\r\n                //     return;\r\n                // }\r\n\r\n                const timeStart = gameState.timeStartMs ?? now();\r\n                const timeMs = now() - timeStart;\r\n\r\n                const result = drawGame({\r\n                    frame: { width: size, height: size },\r\n                    s,\r\n                    gameData: nftAdventure_nftDungeon,\r\n                    gameState,\r\n                    seed: seed,\r\n                    timeMs,\r\n                });\r\n\r\n                gameState = result.gameState;\r\n                if (!gameState.timeStartMs){\r\n                    gameState.timeStartMs = now();\r\n                }\r\n\r\n                if (result.done){\r\n                    isDone = true;\r\n                    return;\r\n                }\r\n\r\n                if (recorder?.isWaitingForFrame() && canvas){\r\n                    console.log(`game.update waitingForFrame - addFrame`, {});\r\n                    (async () => await recorder.getRecorder().addFrame(canvas))();\r\n                }\r\n\r\n            };\r\n        }, hostElement);\r\n    },\r\n};\r\n"],"sourceRoot":""}