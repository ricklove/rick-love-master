{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/art/artwork/gpu-01/gpu-01.tsx"],"names":["path","art_gpu_01","key","title","description","artist","getTokenDescription","tokenId","renderArt","hostElement","hash","createRandomGenerator","random","shaderInstance","p5","s","preload","loadShader","setup","createCanvas","WEBGL","noStroke","draw","setUniform","millis","mouseX","map","mouseY","shader","rect"],"mappings":"wHAAA,uFAMMA,EAAO,qCAEAC,EAAsB,CAC/BC,IAAK,SACLC,MAAO,iBACPC,YAAa,+IAKbC,OAAQ,cACRC,oBAAqB,SAACC,GAClB,OAAO,MAMXC,UAAW,SAACC,EAA0BC,QAA8B,IAA9BA,MAA8B,oBAG7CC,YAAsBD,GAAjCE,OAHwD,IAgB5DC,EAAmC,KAEvC,OAAO,IAAIC,KAAG,SAACC,GACXA,EAAEC,QAAU,WACRH,EAAiBE,EAAEE,WAAcjB,EAAhB,QAAgCA,EAAhC,UAErBe,EAAEG,MAAQ,WACNH,EAAEI,aAdG,QAcsBJ,EAAEK,OAC7BL,EAAEM,YAENN,EAAEO,KAAO,WACAT,IAGLA,EAAeU,WAAf,eAA0C,CArBrC,UAsBLV,EAAeU,WAAf,SAAoCR,EAAES,SAAW,KACjDX,EAAeU,WAAf,UAAqC,CAACR,EAAEU,OAAQV,EAAEW,IAAIX,EAAEY,OAAQ,EAvB3D,QAuB0E,KAG/EZ,EAAEa,OAAOf,GAGTE,EAAEc,KAAK,EAAG,EA7BL,aA+BVpB","file":"24-04d2fde910ce0ae22328.js","sourcesContent":["/* eslint-disable new-cap */\r\n/* eslint-disable no-new */\r\nimport p5 from 'p5';\r\nimport { createRandomGenerator } from '../../rando';\r\nimport { ArtWork } from '../../artwork-type';\r\n\r\nconst path = `/content/art/artwork/gpu-01/gpu-01`;\r\n\r\nexport const art_gpu_01: ArtWork = {\r\n    key: `gpu-01`,\r\n    title: `Gpu Example 01`,\r\n    description: `2015 - http://patriciogonzalezvivo.com\r\n\r\nThis is included as a great example of a gpu shader.\r\n    \r\nFrom: https://thebookofshaders.com/13/`,\r\n    artist: `@patriciogv`,\r\n    getTokenDescription: (tokenId: string) => {\r\n        return null;\r\n    },\r\n    // openSea: {\r\n    //     tokenAddress: `0x495f947276749ce646f68ac8c248420045cb7b5e`,\r\n    //     tokenId: `91242641486941084018191434774360347389366801368112854311223385694785434025985`,\r\n    // },\r\n    renderArt: (hostElement: HTMLElement, hash = `This is my hash!`) => {\r\n        // const { a, b, c } = { a: 57, b: 23, c: 15 };\r\n\r\n        const { random } = createRandomGenerator(hash);\r\n\r\n\r\n        // const { a, b, c } = { a: 1 + Math.floor(57 * random()), b: 1 + Math.floor(213 * random()), c: 1 + Math.floor(115 * random()) };\r\n        // const { cr, cg, cb, ca } = { cr: Math.floor(25 + 230 * random()), cg: Math.floor(25 + 230 * random()), cb: Math.floor(25 + 230 * random()), ca: Math.floor(25 + 25 * random()) };\r\n\r\n        const size = 600;\r\n        // const h = 200;\r\n        // const scale = size / 400;\r\n        // const speed = 0.5;\r\n\r\n        // let tick = 0;\r\n\r\n        let shaderInstance: null | p5.Shader = null;\r\n\r\n        return new p5((s: p5) => {\r\n            s.preload = () => {\r\n                shaderInstance = s.loadShader(`${path}.vert`, `${path}.frag`);\r\n            };\r\n            s.setup = () => {\r\n                s.createCanvas(size, size, s.WEBGL);\r\n                s.noStroke();\r\n            };\r\n            s.draw = () => {\r\n                if (!shaderInstance) { return; }\r\n\r\n                // send resolution of sketch into shader\r\n                shaderInstance.setUniform(`u_resolution`, [size, size]);\r\n                shaderInstance.setUniform(`u_time`, s.millis() / 1000);\r\n                shaderInstance.setUniform(`u_mouse`, [s.mouseX, s.map(s.mouseY, 0, size, size, 0)]);\r\n\r\n                // shader() sets the active shader with our shader\r\n                s.shader(shaderInstance);\r\n\r\n                // rect gives us some geometry on the screen\r\n                s.rect(0, 0, size, size);\r\n            };\r\n        }, hostElement);\r\n    },\r\n};\r\n"],"sourceRoot":""}