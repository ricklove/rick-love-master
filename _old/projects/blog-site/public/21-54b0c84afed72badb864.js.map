{"version":3,"sources":["webpack:///D:/Projects/rick-love-master/code/art/artwork/games/art-game.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/games/debug-drawing-tools.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/games/snake/snake.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/music/music-notes.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/music/beat.ts","webpack:///D:/Projects/rick-love-master/code/art/artwork/example-PavelDoGreat-fluid-simulation/fluid-snake.tsx","webpack:///D:/Projects/rick-love-master/code/utils/clamp.ts"],"names":["createDebugGameView","game","gameCanvas","eventProvider","console","log","debugRenderer","debugState","getOrCreateState","canvas","document","createElement","parentElement","appendChild","style","pointerEvents","position","left","top","opacity","context","getContext","Error","tools","getDisplaySize","getDebugColor","color","r","g","b","getPosition","uvPos","size","x","width","y","height","getSize","drawX","gamePosition","gameSize","undefined","strokeStyle","beginPath","moveTo","lineTo","stroke","drawBox","drawArrow","fromGamePos","toGamePos","fromPos","toPos","drawLabel","text","fillStyle","fillRect","length","font","fillText","createDebugDrawingTools","renderArgs","statsState","frameLast","time","Date","now","updateFrameTick","renderFrameTick","frame125","frame250","isVisible","autoResizeCanvas","scaleByPixelRatio","clientWidth","clientHeight","setup","windowAddEventListener","e","s","key","render","gameInstance","stats","frameA","frameB","toFixed","padStart","destroy","remove","entries","noteMap","snakeGame","name","createGame","timeProvider","environmentProvider","destroyed","state","environment","timeLast","timeMsStart","timeDelta","tick","gridSize","input","u","d","l","pointer","lastTime","player","id","targetGridPosition","targetPosition","velocity","sizeInit","color1","color2","color2Stength","segments","playerState","deadAtTime","restartAtTime","wasHitThisFrame","ateThisFrame","wasThisFrameOnBeat","beatIndex","timeNextTurn","nextDirection","food","foodState","toPositionFromGridPosition","gridPosition","Vector2","divide","add","adjustGridPositionForWall","addPlayerSegment","push","isStill","scale","forEach","updatePlayer","Math","random","ratio","gridUnitPerSec","pow","timePerUnit","i","deltaSegment","subtract","f","foodDelta","nextPlayerPosition_noTurn","turnNone","turnA","turnB","nextPlayerPosition_turnA","nextPlayerPosition_turnB","nextFoodDelta","lengthSq","turnAFoodDelta","turnBFoodDelta","willHitWall_turnA","equal","willHitWall_turnB","willHit_turnA","some","willHit_turnB","updateAutoPilot","delta","moveDelta","entity","distanceSq","every","canvasAddEventListener","setPointerPosition","timeMs","getMouseGamePosition","getTouchPositions","preventDefault","subscribeEvents","update","error","isPaused","max","minTickTimeMs","gridUnitSize","Rect2","collidesRectangle","splice","updateObstacles","displaySize","args","obstacles","renderEntity","kind","onPlayerReward","onPlayerHit","onBeat","positions","map","filter","removeEntity","data","p","setBackgroundVelocity","musicNotes","split","noteText","frequencyText","notes","frequency","parseFloat","Map","n","set","createAudio","voiceCount","audioContext","window","AudioContext","webkitAudioContext","compressor","finalMixNode","createDynamicsCompressor","connect","destination","mainFilterNode","createBiquadFilter","Q","value","type","sampleRate","mainGainNode","createGain","gain","mixNode","voices","Array","oscNode","createOscillator","gainNode","filterNode","createVoice","createBeatPlayer","createSong","replace","note","has","get","song1A","song1","song3","createRandomSong","mainNotes","mainOctave","randomItem","sSongSource","floor","join","substr","audio","isStarted","iBeat","timePerBeat","timeLastBeat","shape","songs","scheduleNote","iVoice","timeOffset","timeForNote","audioTime","currentTime","freq","setValueAtTime","timeStart","timePlay","timePlayEnd","timeStop","linearRampToValueAtTime","start","v","beat","voiceLength","real","Float32Array","imag","wave","createPeriodicWave","disableNormalization","setPeriodicWave","updateWaveform","min","art_fluidSnakeGame","title","description","artist","getTokenDescription","tokenId","renderArt","hostElement","hash","recorder","sim","runFluidSimulator","disableGui","disableInput","disableStartupSplats","createEventProvider","gameSource","beatPlayer","debugViewer","config","COLORFUL","CURL","resetBloomAtTimeMs","darkenAtTimeMs","darkenUntilTimeMs","frameTick","isDestroyed","a","BLOOM_INTENSITY","SUNRAYS_WEIGHT","getFrameTick","splat","MOTION_X","MOTION_Y","isWaitingForFrame","getRecorder","addFrame","requestAnimationFrame","setTimeout","close"],"mappings":"uQAmBaA,EAAsB,SAC/BC,EACAC,EACAC,GAIA,GAFAC,QAAQC,IAAR,sBAAmC,CAAEJ,OAAMC,gBAEtCD,EAAKK,cAAiB,OAAO,KAElC,IA0DIC,EAAa,KACXC,EAAmB,WAIrB,OAHKD,IACDA,EA7DM,WAAM,MAChB,IAAKN,EAAKK,cAAiB,OAAO,KAElC,IAAMG,EAASC,SAASC,cAAT,UACf,UAAAT,EAAWU,qBAAX,SAA0BC,YAAYJ,GACtCA,EAAOK,MAAMC,cAAb,OACAN,EAAOK,MAAME,SAAb,WACAP,EAAOK,MAAMG,KAAb,IACAR,EAAOK,MAAMI,IAAb,IACAT,EAAOK,MAAMK,QAAb,MAGA,IAYMC,EAAUX,EAAOY,WAAP,MAChB,IAAKD,EAAW,MAAM,IAAIE,MAAJ,4CAEtB,IAAMC,ECrDyB,SAACH,EAAmCI,GAEvE,IAAMC,EAAgB,SAACC,GAAD,OACjBA,EACK,iBAAOA,EAAqBA,EAA5B,OACWA,EAAMC,EADjB,IACsBD,EAAME,EAD5B,IACiCF,EAAMG,EADvC,IADN,WAIEC,EAAc,SAACC,GACjB,IAAMC,EAAOR,IACb,MAAO,CACHS,EAAGF,EAAME,EAAID,EAAKE,MAClBC,GAAI,EAAIJ,EAAMI,GAAKH,EAAKI,SAG1BC,EAAU,SAACN,GACb,IAAMC,EAAOR,IACb,MAAO,CACHS,EAAGF,EAAME,EAAID,EAAKE,MAClBC,EAAGJ,EAAMI,EAAIH,EAAKI,SAIpBb,EAAQ,CACVe,MAAO,SAACC,EAAuBC,EAAoBd,GAC/C,IAAMV,EAAWc,EAAYS,GACvBP,EAAOQ,EAAWH,EAAQG,QAAYC,EAC5CrB,EAAQsB,YAAcjB,EAAcC,GAEpC,IAAMC,EAAIK,EAAO,CAAEC,EAAGD,EAAKC,EAAI,EAAGE,EAAGH,EAAKG,EAAI,GAAM,CAAEF,EAAG,EAAGE,EAAG,GAE/Df,EAAQuB,YACRvB,EAAQwB,OAAO5B,EAASiB,EAAIN,EAAEM,EAAGjB,EAASmB,EAAIR,EAAEQ,GAChDf,EAAQyB,OAAO7B,EAASiB,EAAIN,EAAEM,EAAGjB,EAASmB,EAAIR,EAAEQ,GAChDf,EAAQwB,OAAO5B,EAASiB,EAAIN,EAAEM,EAAGjB,EAASmB,EAAIR,EAAEQ,GAChDf,EAAQyB,OAAO7B,EAASiB,EAAIN,EAAEM,EAAGjB,EAASmB,EAAIR,EAAEQ,GAChDf,EAAQ0B,UAEZC,QAAS,SAACR,EAAuBC,EAAoBd,GACjD,IAAMV,EAAWc,EAAYS,GACvBP,EAAOQ,EAAWH,EAAQG,QAAYC,EAC5CrB,EAAQsB,YAAcjB,EAAcC,GAEpC,IAAMC,EAAIK,EAAO,CAAEC,EAAGD,EAAKC,EAAI,EAAGE,EAAGH,EAAKG,EAAI,GAAM,CAAEF,EAAG,EAAGE,EAAG,GAE/Df,EAAQuB,YACRvB,EAAQwB,OAAO5B,EAASiB,EAAIN,EAAEM,EAAGjB,EAASmB,EAAIR,EAAEQ,GAChDf,EAAQyB,OAAO7B,EAASiB,EAAIN,EAAEM,EAAGjB,EAASmB,EAAIR,EAAEQ,GAChDf,EAAQyB,OAAO7B,EAASiB,EAAIN,EAAEM,EAAGjB,EAASmB,EAAIR,EAAEQ,GAChDf,EAAQyB,OAAO7B,EAASiB,EAAIN,EAAEM,EAAGjB,EAASmB,EAAIR,EAAEQ,GAChDf,EAAQyB,OAAO7B,EAASiB,EAAIN,EAAEM,EAAGjB,EAASmB,EAAIR,EAAEQ,GAChDf,EAAQ0B,UAEZE,UAAW,SAACC,EAAsBC,EAAoBxB,GAClD,IAAMyB,EAAUrB,EAAYmB,GACtBG,EAAQtB,EAAYoB,GAC1B9B,EAAQsB,YAAcjB,EAAcC,GAEpCN,EAAQuB,YACRvB,EAAQwB,OAAOO,EAAQlB,EAAGkB,EAAQhB,GAClCf,EAAQyB,OAAOO,EAAMnB,EAAGmB,EAAMjB,GAC9Bf,EAAQ0B,SAERvB,EAAMe,MAAMY,EAAW,CAAEjB,EAAG,IAAME,EAAG,KAAQT,IAEjD2B,UAAW,SAACd,EAAuBe,EAAc5B,GAC7C,IAAMV,EAAWc,EAAYS,GAE7BnB,EAAQmC,UAAR,UACAnC,EAAQoC,SAASxC,EAASiB,EAAGjB,EAASmB,EAAI,GAAI,EAAImB,EAAKG,OAAQ,IAE/DrC,EAAQmC,UAAY9B,EAAcC,GAElCN,EAAQuB,YACRvB,EAAQsC,KAAR,iBACAtC,EAAQuC,SAASL,EAAMtC,EAASiB,EAAGjB,EAASmB,KAIpD,OAAOZ,EDzBWqC,CAAwBxC,GAAS,iBAAO,CAAEc,MAAOzB,EAAOyB,MAAOE,OAAQ3B,EAAO2B,WACtFyB,EAAa5D,EAAKK,cAAciB,EAAOH,EAASX,GAChDqD,EAAa,CACfC,UAAW,CACPC,KAAMC,KAAKC,MACXC,gBAAiB,EACjBC,gBAAiB,GAErBC,SAAU,CACNL,KAAMC,KAAKC,MACXC,gBAAiB,EACjBC,gBAAiB,GAErBE,SAAU,CACNN,KAAMC,KAAKC,MACXC,gBAAiB,EACjBC,gBAAiB,IAIzB,MAAO,CACHG,WAAW,EACX9D,SACAW,UACAG,QACAsC,aACAC,aACAU,iBA1CqB,WACrB,IAAMtC,EAAQuC,YAAkBvE,EAAWwE,aACrCtC,EAASqC,YAAkBvE,EAAWyE,cAC5C,OAAIlE,EAAOyB,QAAUA,GAASzB,EAAO2B,SAAWA,KAC5C3B,EAAOyB,MAAQA,EACfzB,EAAO2B,OAASA,GAET,KA0CEwC,IAEVrE,GAaX,OAVAJ,EAAc0E,uBAAd,WAAgD,SAAAC,GAC5C,IAAMC,EAAIvE,IACLuE,GACD,MAAAD,EAAEE,MAEFD,EAAER,WAAaQ,EAAER,UACjBQ,EAAEtE,OAAOK,MAAMK,QAAU4D,EAAER,UAAF,cAI1B,CACHU,OAAQ,SAACC,EAAkEC,GACvE,GAAK5E,EAAL,CAEA,IAAMwE,EAAIvE,IACV,GAAKuE,GACAA,EAAER,UAAP,CALuI,IAQnI9D,EAMAsE,EANAtE,OACAW,EAKA2D,EALA3D,QACAG,EAIAwD,EAJAxD,MACAsC,EAGAkB,EAHAlB,WACAC,EAEAiB,EAFAjB,WACAU,EACAO,EADAP,iBAIAP,KAAKC,MAAQJ,EAAWQ,SAASN,KAAO,MACxCF,EAAWQ,SAAWR,EAAWO,UAEjCJ,KAAKC,MAAQJ,EAAWO,SAASL,KAAO,MACxCF,EAAWO,SAAWP,EAAWC,WAErCD,EAAWC,UAAY,CACnBC,KAAMC,KAAKC,MACXE,gBAAiBe,EAAMf,gBACvBD,gBAAiBgB,EAAMhB,iBAI3BK,IAGApD,EAAQuB,YACRvB,EAAQmC,UAAR,YACAnC,EAAQoC,SAAS,EAAG,EAAG/C,EAAOyB,MAAOzB,EAAO2B,QAE5Cb,EAAMwB,QAAQ,CAAEd,EAAG,GAAKE,EAAG,IAAO,CAAEF,EAAG,GAAKE,EAAG,IAA/C,YACA+C,EAAaD,OAAOpB,GAEpB,IAAMuB,EAAStB,EAAWO,SACpBgB,EAASvB,EAAWQ,SAE1B/C,EAAM8B,UAAU,CAAEpB,EAAG,EAAGE,EAAG,IAA3B,gBAAsG,KAAnDiD,EAAOhB,gBAAkBiB,EAAOjB,kBAA2BgB,EAAOpB,KAAOqB,EAAOrB,OAAOsB,QAAQ,GAAGC,SAAS,EAA7G,MACjDhE,EAAM8B,UAAU,CAAEpB,EAAG,EAAGE,EAAG,IAA3B,gBAAsG,KAAnDiD,EAAOjB,gBAAkBkB,EAAOlB,kBAA2BiB,EAAOpB,KAAOqB,EAAOrB,OAAOsB,QAAQ,GAAGC,SAAS,EAA7G,SAErDC,QAAS,WACAjF,GACLA,EAAWE,OAAOgF,Y,80BErIvB,ICfGC,EAQAC,EDOGC,EAAiC,CAC1CC,KAAM,QACNC,WAAY,SAACC,EAAcC,GAEvB,IAAIC,GAAY,EAkBVC,EAAQ,CACVC,YAAa,CACTnC,KAAM,EACNoC,SAAUL,EAAa7B,MACvBmC,YAAaN,EAAa7B,MAC1BoC,UAAW,EACXC,KAAM,EACNvE,KAAM,CAAEC,EAAG,IAAKE,EAAG,KACnBqE,SAAU,CAAEvE,EAAG,GAAIE,EAAG,IAE1BsE,MAAO,CACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHjF,GAAG,EACHkF,QAAS,KAITC,UAAW,KAEfC,OAAQ,CACJC,GAAI,GACJhG,SAAU,CAAEiB,EAAG,GAAKE,EAAG,IACvB8E,mBAAoB,CAAEhF,EAAG,GAAIE,EAAG,IAChC+E,eAAgB,CAAEjF,EAAG,GAAKE,EAAG,IAC7BgF,SAAU,CAAElF,EAAG,EAAGE,EAAG,GACrBH,KAAM,CAAEC,EAAG,IAAME,EAAG,KACpBiF,SAAU,CAAEnF,EAAG,IAAME,EAAG,KACxBT,MAAO,CAAEC,EA1CM,EA0CaC,EA1Cb,EA0CgCC,EA1ChC,GA2CfwF,OAAQ,CAAE1F,EA3CK,EA2CcC,EA3Cd,EA2CiCC,EA3CjC,GA4CfyF,OAAQ,CAAE3F,EA5CK,EA4CcC,EA5Cd,EA4CiCC,EA5CjC,GA6Cf0F,cAAe,GACfC,SAAU,IAEdC,YAAa,CACTC,WAAY,KACZC,cAAe,KACfC,iBAAiB,EACjBC,cAAc,EACdC,oBAAoB,EACpBC,UAAW,EACXC,aAAc,EACdC,cAAe,CAAEhG,EAAG,EAAGE,EAAG,IAE9B+F,KAAM,GACNC,UAAW,IAGTC,EAA6B,SAACC,GAChC,OAAOC,IAAQC,OACXD,IAAQE,IAAIH,EAAc,CAAEpG,EAAG,GAAKE,EAAG,KACvCmG,IAAQE,IAAItC,EAAMC,YAAYK,SAAU,CAAEvE,EAAG,EAAGE,EAAG,MAGrDsG,EAA4B,SAACJ,GAC/B,IAAMzG,EAAI,OAAH,UAAQyG,GACTtD,EAAImB,EAAMC,YAAYK,SAM5B,OALI5E,EAAEK,EAAI,IAAKL,EAAEK,EAAI,GACjBL,EAAEO,EAAI,IAAKP,EAAEO,EAAI,GACjBP,EAAEK,EAAI8C,EAAE9C,IAAKL,EAAEK,EAAI8C,EAAE9C,GACrBL,EAAEO,EAAI4C,EAAE5C,IAAKP,EAAEO,EAAI4C,EAAE5C,GAElBP,GA+DL8G,EAAmB,WAAM,MACnB3B,EAAWb,EAAXa,OACFhC,EAAC,UAAGgC,EAAOS,SAAST,EAAOS,SAAS/D,OAAS,UAA5C,QAAkDsD,EAEzDA,EAAOS,SAASmB,KAAK,CACjB3B,GAAI,IAAOD,EAAOS,SAAS/D,OAC3BmF,SAAS,EACTlH,MAAO,OAAF,UAAOqF,EAAOrF,OACnBV,SAAU,OAAF,UAAO+D,EAAE/D,UACjBmG,SAAU,OAAF,UAAOpC,EAAEoC,UACjBnF,KAAM,OAAF,UAAO+C,EAAE/C,MACbkF,eAAgBoB,IAAQE,IAAR,iBAAiBzD,EAAEmC,gBAAkB,CAAEjF,EAAG,KAAOE,EAAG,MAIxE4E,EAAO/E,KAAOsG,IAAQO,MADD,KACqB9B,EAAO/E,MACjD+E,EAAOS,SAASsB,SAAQ,SAAA7G,GAAMA,EAAED,KAAOsG,IAAQO,MAF1B,KAE8C5G,EAAED,UAGnE+G,EAAe,WAAM,IACfhC,EAAuEb,EAAvEa,OAAQU,EAA+DvB,EAA/DuB,YAAahB,EAAkDP,EAAlDO,MADN,EACwDP,EAA3CC,YAAenC,EAD5B,EAC4BA,KAAMsC,EADlC,EACkCA,UADlC,EAC6CtE,KAGpE+E,EAAOQ,eAA6B,EAAZjB,EACpBS,EAAOQ,cAAgB,IACvBR,EAAOM,OAASN,EAAOO,OACvBP,EAAOO,OAAS,CACZ3F,EAAG,GAA2BqH,KAAKC,SACnCrH,EAAG,GAA2BoH,KAAKC,SACnCpH,EAAG,GAA2BmH,KAAKC,UAEvClC,EAAOQ,cAAgB,GAI3B,IAAM2B,EAAQnC,EAAOQ,cACrBR,EAAOrF,MAAQ,CACXC,GAAI,EAAIuH,GAASnC,EAAOM,OAAO1F,EAAIuH,EAAQnC,EAAOO,OAAO3F,EACzDC,GAAI,EAAIsH,GAASnC,EAAOM,OAAOzF,EAAIsH,EAAQnC,EAAOO,OAAO1F,EACzDC,GAAI,EAAIqH,GAASnC,EAAOM,OAAOxF,EAAIqH,EAAQnC,EAAOO,OAAOzF,GAIzD4E,EAAMG,IAAIa,EAAYQ,cAAgB,CAAEhG,GAAI,EAAGE,EAAG,IAClDsE,EAAM9E,IAAI8F,EAAYQ,cAAgB,CAAEhG,EAAG,EAAIE,EAAG,IAClDsE,EAAMC,IAAIe,EAAYQ,cAAgB,CAAEhG,EAAG,EAAIE,EAAG,IAClDsE,EAAME,IAAIc,EAAYQ,cAAgB,CAAEhG,EAAG,EAAIE,GAAI,IAEvD,IAAMgH,EAAiB,EAAIH,KAAKI,IAAI,KAAMrC,EAAOS,SAAS/D,QACpD4F,EAAc,EAAIF,EAGxB,GAAInF,EAAOyD,EAAYO,aAAa,CAChCP,EAAYO,aAAehE,EAAOqF,EAClC5B,EAAYK,oBAAqB,EAGjC,IAAK,IAAIwB,EAAIvC,EAAOS,SAAS/D,OAAS,EAAG6F,GAAK,EAAGA,IAAI,SACjDvC,EAAOS,SAAS8B,GAAGpC,eAAnB,oBAAoCH,EAAOS,SAAS8B,EAAI,UAAxD,aAAoC,EAAwBpC,sBAA5D,QAA8EH,EAAOG,eACrF,IAAMqC,EAAejB,IAAQkB,SAASzC,EAAOS,SAAS8B,GAAGpC,eAAgBH,EAAOS,SAAS8B,GAAGtI,UAC5F+F,EAAOS,SAAS8B,GAAGnC,SAAW,CAC1BlF,EAAGsH,EAAatH,EAAIkH,EACpBhH,EAAGoH,EAAapH,EAAIgH,IA1HZ,WAAM,IAClBpC,EAAuEb,EAAvEa,OAAQU,EAA+DvB,EAA/DuB,YADU,GACqDvB,EAAlDO,MAAkDP,EAA3CC,aAAenC,EADzB,EACyBA,KADzB,EAC+BsC,UAD/B,EAC0CtE,KAEpE,KAAIgC,EAAOkC,EAAMO,MAAMK,SAAW,IAAlC,CAGA,IAAM2C,EAAIvD,EAAMgC,KAAK,GACrB,GAAKuB,EAAL,CAEA,IAAMC,EAAYpB,IAAQkB,SAASC,EAAEzI,SAAU+F,EAAO/F,UAChD2I,EAA4BvB,EAA2BE,IAAQE,IAAIzB,EAAOE,mBAAoBQ,EAAYQ,gBAE1G2B,EAAWnC,EAAYQ,cACvB4B,EAAQ,CACV5H,EAAGwF,EAAYQ,cAAc9F,EAC7BA,EAAGsF,EAAYQ,cAAchG,GAE3B6H,EAAQ,CACV7H,GAAIwF,EAAYQ,cAAc9F,EAC9BA,GAAIsF,EAAYQ,cAAchG,GAE5B8H,EAA2B3B,EAA2BE,IAAQE,IAAIzB,EAAOE,mBAAoB4C,IAC7FG,EAA2B5B,EAA2BE,IAAQE,IAAIzB,EAAOE,mBAAoB6C,IAG7FG,EAAgB3B,IAAQkB,SAASC,EAAEzI,SAAU2I,GAGnD,KAF2BrB,IAAQ4B,SAASD,GAAiB3B,IAAQ4B,SAASR,KAEnDV,KAAKC,SAAW,IAAK,CAE5C,IAAMkB,EAAiB7B,IAAQkB,SAASC,EAAEzI,SAAU+I,GAC9CK,EAAiB9B,IAAQkB,SAASC,EAAEzI,SAAUgJ,GAEhD1B,IAAQ4B,SAASC,GAAkB7B,IAAQ4B,SAASE,GACpD3C,EAAYQ,cAAgB4B,EAE5BpC,EAAYQ,cAAgB6B,EAKpC,IAAMO,GAAqB/B,IAAQgC,MAAMP,EAA0BtB,EAA0BsB,IACvFQ,GAAqBjC,IAAQgC,MAAMN,EAA0BvB,EAA0BuB,IAEvFQ,EAAgBH,GAAqBtD,EAAOS,SAASiD,MAAK,SAAAxI,GAAC,OAAIqG,IAAQgC,MAAMrI,EAAEiF,eAAgB6C,MAC/FW,EAAgBH,GAAqBxD,EAAOS,SAASiD,MAAK,SAAAxI,GAAC,OAAIqG,IAAQgC,MAAMrI,EAAEiF,eAAgB8C,MACjGQ,GAAiBE,EACjBjD,EAAYQ,cAAgB2B,EAG5BY,EACA/C,EAAYQ,cAAgB6B,EAG5BY,IACAjD,EAAYQ,cAAgB4B,KAwE5Bc,GAEA5D,EAAOE,mBAAqBQ,EAAYC,WAAaX,EAAOE,mBACtDqB,IAAQE,IAAIzB,EAAOE,mBAAoBQ,EAAYQ,eAGzDlB,EAAOE,mBAAqBwB,EAA0B1B,EAAOE,oBAE7DF,EAAOG,eAAiBkB,EAA2BrB,EAAOE,oBAC1D,IAAM2D,EAAQtC,IAAQkB,SAASzC,EAAOG,eAAgBH,EAAO/F,UAC7D+F,EAAOI,SAAW,CACdlF,EAAG2I,EAAM3I,EAAIkH,EACbhH,EAAGyI,EAAMzI,EAAIgH,GAkBrB,IAAM0B,EAAYvC,IAAQO,MAAM,GAAKP,IAAQkB,SAASzC,EAAOG,eAAgBH,EAAO/F,WACpF+F,EAAO/F,SAASiB,GAAK4I,EAAU5I,EAC/B8E,EAAO/F,SAASmB,GAAK0I,EAAU1I,EAG/B,cAAgB4E,EAAOS,YAAvB,aAAgC,KAArBzC,EAAqB,QAC5BA,EAAE/D,SAASiB,GAAKqE,EAAYvB,EAAEoC,SAASlF,EACvC8C,EAAE/D,SAASmB,GAAKmE,EAAYvB,EAAEoC,SAAShF,EAU3C,cAAqB4E,EAAOS,YAA5B,aAAsC,KAA3BsD,EAA2B,QAClC,GAAIxC,IAAQyC,WAAWD,EAAO5D,eAAgBH,EAAOG,iBAAmB,EAAG,CACvEhB,EAAMuB,YAAYG,iBAAkB,EACpC1B,EAAMuB,YAAYC,WAAa1D,EAC/B,OAKJkC,EAAMuB,YAAYC,aAAexB,EAAMuB,YAAYE,gBAC/BZ,EAAOS,SAASwD,OAAM,SAAA/I,GAAC,OAAIqG,IAAQyC,WAAW9I,EAAEiF,eAAgBH,EAAOG,iBAAmB,SAE1GO,EAAYE,cAAgB3D,EAAO,IAGvCkC,EAAMuB,YAAYE,eAAiB3D,EAAOkC,EAAMuB,YAAYE,gBAC5DZ,EAAOS,SAAW,GAClBC,EAAYC,WAAa,KACzBD,EAAYE,cAAgB,KAC5BZ,EAAO/E,KAAP,iBAAmB+E,EAAOK,YAsPlC,MAAO,CACHxC,MAAO,SAACzE,IAhDY,SAAC,GAA6E,IAA3E0E,EAA2E,EAA3EA,uBAAwBoG,EAAmD,EAAnDA,uBAAwB1J,EAA2B,EAA3BA,MACvEsD,EAAuB,WAAW,SAAAC,GAC1B,MAAAA,EAAEE,KAAe,YAAAF,EAAEE,MAAqBkB,EAAMO,MAAMC,GAAI,EAAMR,EAAMO,MAAMK,SAAWZ,EAAMC,YAAYnC,MACvG,MAAAc,EAAEE,KAAe,cAAAF,EAAEE,MAAuBkB,EAAMO,MAAMG,GAAI,EAAMV,EAAMO,MAAMK,SAAWZ,EAAMC,YAAYnC,MACzG,MAAAc,EAAEE,KAAe,cAAAF,EAAEE,MAAuBkB,EAAMO,MAAME,GAAI,EAAMT,EAAMO,MAAMK,SAAWZ,EAAMC,YAAYnC,MACzG,MAAAc,EAAEE,KAAe,eAAAF,EAAEE,MAAwBkB,EAAMO,MAAM9E,GAAI,EAAMuE,EAAMO,MAAMK,SAAWZ,EAAMC,YAAYnC,SAElHa,EAAuB,SAAS,SAAAC,GACxB,MAAAA,EAAEE,KAAe,YAAAF,EAAEE,MAAqBkB,EAAMO,MAAMC,GAAI,EAAOR,EAAMO,MAAMK,SAAWZ,EAAMC,YAAYnC,MACxG,MAAAc,EAAEE,KAAe,cAAAF,EAAEE,MAAuBkB,EAAMO,MAAMG,GAAI,EAAOV,EAAMO,MAAMK,SAAWZ,EAAMC,YAAYnC,MAC1G,MAAAc,EAAEE,KAAe,cAAAF,EAAEE,MAAuBkB,EAAMO,MAAME,GAAI,EAAOT,EAAMO,MAAMK,SAAWZ,EAAMC,YAAYnC,MAC1G,MAAAc,EAAEE,KAAe,eAAAF,EAAEE,MAAwBkB,EAAMO,MAAM9E,GAAI,EAAOuE,EAAMO,MAAMK,SAAWZ,EAAMC,YAAYnC,SAGnH,IAAMkH,EAAqB,SAAC3I,GACxB2D,EAAMO,MAAMI,QAAU,CAClB7F,SAAUuB,EACV4I,OAAQpF,EAAa7B,QAI7B+G,EAAuB,aAAa,SAAAnG,GAChCoG,EAAmB3J,EAAM6J,qBAAqBtG,OAGlDmG,EAAuB,aAAa,SAAAnG,IAG3BoB,EAAMO,MAAMI,SACVd,EAAa7B,MAAQgC,EAAMO,MAAMI,QAAQsE,OAAS,KAEzDD,EAAmB3J,EAAM6J,qBAAqBtG,OAGlDmG,EAAuB,cAAc,SAAAnG,GAGjC,OAFAoG,EAAmB3J,EAAM8J,kBAAkBvG,GAAG,IAC9CA,EAAEwG,kBACK,KAGXL,EAAuB,aAAa,SAAAnG,GAGhC,OAFAoG,EAAmB3J,EAAM8J,kBAAkBvG,GAAG,IAC9CA,EAAEwG,kBACK,KACR,GAKCC,CAAgBpL,IAEpBqL,OA/KW,WAGX,GAAIvF,EACA7F,QAAQqL,MAAR,wBAAuC,SAI3C,GAAI1F,EAAa2F,WACbtL,QAAQC,IAAR,kCAA+C,QADnD,CAMA,IAAM2B,EAAOgE,EAAoBxE,iBACjC0E,EAAMC,YAAYnE,KAAO,CAAEC,EAAGD,EAAKE,MAAOC,EAAGH,EAAKI,QAClD8D,EAAMC,YAAYC,SAAWF,EAAMC,YAAYnC,KAC/CkC,EAAMC,YAAYnC,KAAO,MAAS+B,EAAa7B,MAAQgC,EAAMC,YAAYE,aACzEH,EAAMC,YAAYG,UAAY0C,KAAK2C,IAAIC,KAA6B1F,EAAMC,YAAYnC,KAAOkC,EAAMC,YAAYC,UAG/GF,EAAMuB,YAAYI,cAAe,EACjC3B,EAAMuB,YAAYG,iBAAkB,EACpC1B,EAAMuB,YAAYK,oBAAqB,EACvCiB,IA/FoB,WAAM,IAClBhC,EAA8Db,EAA9Da,OAAQmB,EAAsDhC,EAAtDgC,KADU,GAC4ChC,EAAhDiC,UAAgDjC,EAArCC,aAC3B0F,GAFoB,EACsB7H,KADtB,EAC4BsC,UACjCgC,IAAQC,OAAO,CAAEtG,EAAG,EAAGE,EAAG,GAAK+D,EAAMC,YAAYK,WAElE0B,EAAKzE,QAAU,GACfyE,EAAKS,KAAK,CACN3B,GAAI,IAAQkB,EAAKzE,OACjB/B,MAAOqF,EAAOrF,MACdkH,SAAS,EACT5H,SAAU,CAAEiB,EAAG,GAAM,GAAM+G,KAAKC,SAAU9G,EAAG,GAAM,GAAM6G,KAAKC,UAC9DjH,KAAM6J,EACN1E,SAAU,CAAElF,EAAG,EAAGE,EAAG,KA+C7B,cAA0B+F,EAAKxC,aAA/B,aAA0C,eAA9B4D,EAA8B,KAA3BwB,EAA2B,KACtC,GAAIgB,IAAMC,kBAAkBjB,EAAQ/D,EAAQ,IAAM,CAC9Cb,EAAMuB,YAAYI,cAAe,EACjCa,IAEAR,EAAK8D,OAAO1C,EAAG,GACf,QAgCR2C,GAIA,IADA,IAAMC,EAAclG,EAAoBxE,iBACxC,OAAiB0E,EAAMa,QAAvB,mBAAkCb,EAAMgC,OAAxC,eAA+C,CAA1C,IAAMjG,EAAC,KACRA,EAAED,KAAKG,EAAIF,EAAED,KAAKC,EAAIiK,EAAYhK,MAAQgK,EAAY9J,OAG1D8D,EAAMC,YAAYI,SA+IlBtB,OA1IW,SAACkH,GAAqB,IACzBpF,EAAyCb,EAAzCa,OAAQU,EAAiCvB,EAAjCuB,YAAmB2E,EAAclG,EAApBgC,KAU7BiE,EAAKE,aAAa,CACdrF,GAAID,EAAOC,GACXsF,KAAM,SACNtL,SAAU+F,EAAO/F,SACjBmG,SAAUJ,EAAOI,SACjBnF,KAAM+E,EAAO/E,KACbN,MAAOqF,EAAOrF,QAGd+F,EAAYI,cACZsE,EAAKI,eAAe,CAAEvL,SAAU+F,EAAOS,SAAST,EAAOS,SAAS/D,OAAS,GAAGzC,WAG5EyG,EAAYG,iBACZuE,EAAKK,YAAY,CAAExL,SAAU+F,EAAO/F,WAGpCyG,EAAYK,qBACZqE,EAAKM,OAAO,CACR1E,UAAWN,EAAYM,UACvB2E,UAAW,CAAC3F,EAAO/F,UAAV,mBAAuB+F,EAAOS,SAASmF,KAAI,SAAA1K,GAAC,OAAIA,EAAEjB,YACtD4L,QAAO,SAAA3K,GAAC,OAAKqG,IAAQgC,MAAMrI,EAAG8E,EAAO/F,iBAE9CyG,EAAYM,aAIhB,cAAgBhB,EAAOS,YAAvB,aAAiC,KAAtBzC,EAAsB,QAC7BoH,EAAKE,aAAa,CACdrF,GAAIjC,EAAEiC,GACNsF,KAAM,WACNtL,SAAU+D,EAAE/D,SACZmG,SAAUpC,EAAEoC,SACZnF,KAAM+C,EAAE/C,KACRN,MAAOqD,EAAErD,QAKjB,cAAqB0K,KAArB,aAAgC,KAArBtB,EAAqB,QAEXA,EAAO9J,SAASiB,GAAK,KAC/B6I,EAAO9J,SAASiB,EAAI,MACpB6I,EAAO9J,SAASmB,GAAK,KACrB2I,EAAO9J,SAASmB,EAAI,KAGvBgK,EAAKU,aAAa/B,EAAO9D,IAIzB8D,EAAOlC,QACPuD,EAAKE,aAAa,CACdrF,GAAI8D,EAAO9D,GACXsF,KAAM,iBACNtL,SAAU8J,EAAO9J,SACjBmG,SAAU,CAAElF,EAAG,EAAGE,EAAG,GACrBH,KAAM8I,EAAO9I,KACbN,MAAOoJ,EAAOpJ,QAKtByK,EAAKE,aAAa,CACdrF,GAAI8D,EAAO9D,GACXsF,KAAM,WACNtL,SAAU8J,EAAO9J,SACjBmG,SAAU2D,EAAO3D,SACjBnF,KAAM8I,EAAO9I,KACbN,MAAOoJ,EAAOpJ,UA2DtB8D,QAAS,WACLS,GAAY,KAIxB3F,cAAe,SAACiB,GACZ,MAAO,CACHiL,YAAa,SAACM,GACVvL,EAAMe,MAAMwK,EAAK9L,SAAU,CAAEiB,EAAG,GAAKE,EAAG,IAAxC,YAEJoK,eAAgB,SAACO,GACbvL,EAAMe,MAAMwK,EAAK9L,SAAU,CAAEiB,EAAG,GAAKE,EAAG,IAAxC,YAEJsK,OAAQ,SAACK,GACLA,EAAKJ,UAAU5D,SAAQ,SAAAiE,GACnBxL,EAAMe,MAAMyK,EAAG,CAAE9K,EAAG,GAAKE,EAAG,IAA5B,eAGRkK,aAAc,SAACS,GACXvL,EAAMwB,QAAQ+J,EAAK9L,SAAU8L,EAAK9K,KAAM,WAAA8K,EAAKR,KAAL,eAAqC7J,GAC7ElB,EAAMyB,UAAU8J,EAAK9L,SAAUsH,IAAQE,IAAIsE,EAAK9L,SAAU8L,EAAK3F,UAAW,WAAA2F,EAAKR,KAAL,eAAqC7J,IAEnHoK,aAAc,SAAC7F,KAGfgG,sBAAuB,SAACF,GACpBvL,EAAMyB,UAAU,CAAEf,EAAG,GAAKE,EAAG,IAAOmG,IAAQE,IAAI,CAAEvG,EAAG,GAAKE,EAAG,IAAO2K,EAAK3F,UAAzE,e,YCthBH8F,GAxCHvH,EAwCgC,qjIA3CjCwH,MADS,MAETN,QAAO,SAAA3K,GAAC,OAAIA,KAEK0K,KAAI,SAAA/F,GAAK,MACOA,EAAEsG,MAAF,KAAaN,QAAO,SAAA3K,GAAC,OAAIA,KAApDkL,EADoB,KACVC,EADU,KAG3B,MAAO,CACHC,MAFUF,EAASD,MAAT,KAAoBN,QAAO,SAAAzK,GAAC,OAAIA,KAAGwK,KAAI,SAAAxK,GAAC,OAAIA,KAGtDmL,UAAWC,WAAWH,OAGxBzH,EAAU,IAAI6H,IACpB9H,EAAQoD,SAAQ,SAAA7G,GAAC,OAAIA,EAAEoL,MAAMvE,SAAQ,SAAA2E,GAAC,OAAI9H,EAAQ+H,IAAID,EAAGxL,EAAEqL,iBACpD3H,G,k0BCXX,IAAMgI,EAAc,SAACC,GACjB,IAAMC,EAAgB,WAClB,IAEI,OAAO,IADeC,OAAOC,cAAiBD,OAA2DE,oBAE3G,SAEE,OADA5N,QAAQqL,MAAR,kEACO,MANO,GAStB,IAAKoC,EAAe,OAAO,KAE3B,IAEcI,EAFRC,EAAgBL,EAAaM,2BAErBF,EAAaJ,EAAaM,4BACrBC,QAAQP,EAAaQ,aACzBJ,GAJ+CJ,EAAaQ,YAOrEC,EAAiBT,EAAaU,qBACpCD,EAAeE,EAAEC,MAAQ,EACzBH,EAAeI,KAAf,UACAJ,EAAehB,UAAUmB,MAAQ,GAAMZ,EAAac,WACpDL,EAAeF,QAAQF,GAGvB,IAAMU,EAAef,EAAagB,aAClCD,EAAaE,KAAKL,MAAQ,GAC1BG,EAAaR,QAAQE,GAErB,IAAMS,EAAUH,EA4EhB,MAAO,CACHf,eACAmB,OAAQ,YAAK,IAAIC,MAAMrB,IAAajB,KAAI,kBA5ExB,WAChB,IAAMuC,EAAUrB,EAAasB,mBAC7BD,EAAQ5B,UAAUmB,MAAQ,EAE1B,IAAMW,EAAWvB,EAAagB,aAC9BO,EAASN,KAAKL,MAAQ,EAEtB,IAAMY,EAAaxB,EAAaU,qBAChCc,EAAWb,EAAEC,MAAQ,EACrBY,EAAWX,KAAX,WAYA,OAPIQ,EAAQd,QAAQiB,GAChBA,EAAWjB,QAAQgB,GAIvBA,EAAShB,QAAQW,GAEV,CACHG,UACAG,aACAD,YAoD0CE,QAKzCC,EAAmB,WAC5B,IAIMC,EAAa,SAACnC,GAAD,OAAmBA,EAAMoC,QAAQ,MAAd,KAA0BvC,MAA1B,KAAqCN,QAAO,SAAA3K,GAAC,OAAIA,KAAG0K,KAAI,SAAA1K,GAAC,OAJ9EyN,EAI0FzN,EAHlGgL,EAAW0C,IAAID,GACbzC,EAAW2C,IAAIF,GADyB,EADnC,IAACA,MAMXG,EAASL,EAAW,2CAMpBM,EAAQN,EAAW,6DAqBnBO,GAfQP,EAAW,mHAeXA,EAAW,+IA4CnBQ,EAAmB,WAErB,GAAIhH,KAAKC,SAAW,IAAK,CACrB,IAAMgH,EAAY,cAAc/C,MAAd,IACZgD,EAAaC,YAAW,CAAC,EAAG,IAE5BC,EAAc,YAAI,IAAInB,MAAM,GAAK,EAAIjG,KAAKqH,MAAM,EAAIrH,KAAKC,aAC1D0D,KAAI,oBAASwD,YAAWF,GAAaC,EAAjC,OACJI,KAFe,IAIpB,OADcd,EAAWY,EAAYG,OAAO,GAAnB,KAA4BL,EAAa,IAgBtE,OAXcC,YAAW,CAACN,EAAQC,EAAOC,KAcvC7J,EAAQ,CACVsK,MAAO,KACPC,WAAW,EACXC,MAAO,EACPC,YAAa,IACbC,aAAc,EACdlE,UAAW,GACXmE,MAAO,KACPC,MAAO,CAACd,MAyBNe,EAAe,SAACC,EAAgBN,EAAeO,EAAoBC,GAAwB,MACrFV,EAAUtK,EAAVsK,MACR,GAAKA,GAC0B,IAA3BtK,EAAMwG,UAAUjJ,OAApB,CAGA,IAAM0N,EAAYX,EAAM3C,aAAauD,YAAcH,EAE7CI,EAAI,UAAGnL,EAAM4K,MAAME,GAAQN,UAAvB,QAAiC,EAI3C,GAHAF,EAAMxB,OAAOgC,GAAQ9B,QAAQ5B,UAAUgE,eAAeD,EAAMF,GAC5DX,EAAMxB,OAAOgC,GAAQ3B,WAAW/B,UAAUgE,eAAeD,EAAMF,GAE1DE,EAAL,CAGA,IAIME,EAAYJ,EAJK,IAAOD,EAKxBM,EAAWD,EAJM,GAAML,EAKvBO,EAAcD,EAHEN,EAIhBQ,EAAWD,EALK,GAAMP,EAO5BV,EAAMxB,OAAOgC,GAAQ5B,SAASN,KAAKwC,eAAe,EAAGC,GACrDf,EAAMxB,OAAOgC,GAAQ5B,SAASN,KAAK6C,wBAAwB,EAAGH,GAC9DhB,EAAMxB,OAAOgC,GAAQ5B,SAASN,KAAKwC,eAAe,EAAGG,GACrDjB,EAAMxB,OAAOgC,GAAQ5B,SAASN,KAAK6C,wBAAwB,EAAGD,MAKlE,MAAO,CAEHE,MAAO,WAAM,MACL1L,EAAMuK,YACVvK,EAAMuK,WAAY,EAElBvK,EAAMsK,MAAQ7C,EAAY,GAC1B,UAAAzH,EAAMsK,aAAN,SAAaxB,OAAOlG,SAAQ,SAAA+I,GAAC,OAAIA,EAAE3C,QAAQ0C,MAAM,QAErDE,KAAM,SAAChF,GACH,GAAK5G,EAAMsK,OACNtK,EAAMuK,UAAX,CAEAvK,EAAMyK,YAAczK,EAAMsK,MAAM3C,aAAauD,YAAclL,EAAM0K,aACjE1K,EAAM0K,aAAe1K,EAAMsK,MAAM3C,aAAauD,YAG9C,GAAItE,EAAK/E,UADS,GACiB,EAAnC,CACA7B,EAAMwK,OAFY,EAKlBxK,EAAMwG,UAAYI,EAAKJ,UAEvB,IADA,IAAMqF,EAAc7L,EAAMsK,MAAMxB,OAAOvL,OAbkB,WAchDoO,GACL,GAAIA,GAAK3L,EAAMwG,UAAUjJ,OAAS,mBAE7ByC,EAAM4K,MAAMe,IACT/E,EAAK/E,UAAY7B,EAAM4K,MAAMe,GAAGpO,QAAW,GAC5CuF,KAAKC,SAAW,OACnB/C,EAAM4K,MAAMe,GAAK7B,IACjB9J,EAAMwK,MAAQ,GAIlB,IAAMhE,EAAYxG,EAAMwG,UAAUE,QAAO,SAAC3K,EAAGqH,GAAJ,OAAUA,EAAIyI,IAAgBF,MAxF5D,SAACb,EAAgBtE,GAAyB,IACrD8D,EAAUtK,EAAVsK,MACR,GAAKA,GACoB,IAArB9D,EAAUjJ,OAAd,CACArD,QAAQC,IAAR,iBAA8B,CAAE2Q,SAAQtE,cAExC,IAAMsF,EAAO,IAAIC,aAAa,EAAIvF,EAAUjJ,QACtCyO,EAAO,IAAID,aAAa,EAAIvF,EAAUjJ,QAC5CuO,EAAK,GAAK,EACVE,EAAK,GAAK,EACVF,EAAKtF,EAAUjJ,OAAS,GAAK,EAC7ByO,EAAKxF,EAAUjJ,OAAS,GAAK,EAE7B,cAAqBiJ,EAAUhH,aAA/B,aAAyC,eAA7B4D,EAA6B,KAA1ByD,EAA0B,KACrCiF,EAAK1I,EAAI,GAAKyD,EAAE9K,EAChBiQ,EAAK5I,EAAI,GAAKyD,EAAE5K,EAGpB,IAAMgQ,EAAO3B,EAAM3C,aAAauE,mBAAmBJ,EAAME,EAAM,CAAEG,sBAAsB,IACvF7B,EAAMxB,OAAOgC,GAAQ9B,QAAQoD,gBAAgBH,IAsErCI,CAAeV,EAAGnF,GAElB,IAAK,IAAIpD,EAAI,EAAGA,EArBF,EAqBiBA,IAAI,CAC/B,IAAM4H,EAAchL,EAAMyK,YACpB3H,KAAKwJ,IAAI,EAAItM,EAAMwG,UAAUjJ,OAAQyC,EAAMsK,MAAMxB,OAAOvL,QAC9DsN,EAAac,GACR3L,EAAMwK,MAAQpH,GAAKpD,EAAM4K,MAAMe,GAAGpO,OACnC6F,EAAIpD,EAAMyK,YAAckB,EAAIX,EAC5BA,KApBHW,EAAI,EAAGA,EAAIE,EAAaF,IAAI,EAA5BA,QC3SRY,EAA8B,CACvCzN,IAAK,mBACL0N,MAAO,mBACPC,YAAa,sRAGbC,OAAQ,YACRC,oBAAqB,SAACC,GAClB,OAAO,MAMXC,UAAW,SAACC,EAAaC,EAAMC,GAAa,MAClCC,EAAMC,YAAkBJ,EAjBlB,iEAiB4C,CAAE9Q,MAAO,OAAQE,OAAQ,QAAU,CACvFiR,YAAY,EAAMC,cAAc,EAAMC,sBAAsB,EAC5DxN,aAAcmN,aAAF,EAAEA,EAAUnN,eAE5B,IAAKoN,EAAO,MAAO,CAAE1N,OAAQ,cAE7B,IAAMM,EAAY,UAAGmN,aAAH,EAAGA,EAAUnN,oBAAb,QAA6B,CAAE7B,IAAK,kBAAMD,KAAKC,OAAOwH,SAAU,kBAAM,IAClFvL,EAAgBqT,YAAoBL,EAAI1S,QAGxCgT,EAAa7N,EACb3F,EAAOwT,EAAW3N,WACpBC,EACA,CAAEvE,eAAgB,iBAAO,CAAEU,MAAOiR,EAAI1S,OAAOyB,MAAOE,OAAQ+Q,EAAI1S,OAAO2B,WAE3EnC,EAAK2E,MAAMzE,GAEX,IAAMuT,EAAanE,IACnBpP,EAAc8K,uBAAd,aAAkD,WAC9CyI,EAAW9B,WAEfzR,EAAc8K,uBAAd,aAAkD,WAC9CyI,EAAW9B,WAEfzR,EAAc8K,uBAAd,WAAgD,WAC5CyI,EAAW9B,WAIf,IAAM+B,EAAc3T,EAAoByT,EAAYN,EAAI1S,OAAQN,GAExDyT,EAAWT,EAAXS,OAEJA,IAGAA,EAAOC,UAAW,EAClBD,EAAOE,KAAO,IAIlB,IAMM5N,EAAQ,CACV6N,mBAAoB,EACpBC,eAAgB,EAChBC,kBAAmB,GAGnBC,EAAY,EA0EZC,GAAc,EACZ3I,EAAM,uCAAG,sBAAA4I,EAAA,0DACPD,EADO,oDAGNpO,EAAa2F,aC9JR+C,SAAe+D,SAAa7G,SDkFtCiI,EAAOS,iBClFG5F,EDkFqB,MAASvI,EAAM6N,mBAAqBhO,EAAa7B,OClF1CyH,EDkFqD,ECjF5F8C,GAD0B+D,EDkF+D,GCjF3EA,EACf/D,EAAQ9C,EAAMA,EACV8C,GDgFFmF,EAAOU,eAAiBvO,EAAa7B,MAAQgC,EAAM8N,gBAAkBjO,EAAa7B,MAAQgC,EAAM+N,kBAAoB,EAAI,EAExHhU,EAAKuL,SACLmI,WAAa1O,OAAOhF,EAAM,CAAEkE,gBAAiB+P,EAAW9P,gBAAiB+O,EAAIoB,iBAE7EtU,EAAKgF,OAAO,CACRuH,YAAa,WAMTtG,EAAM6N,mBAAqBhO,EAAa7B,MAAQ,KAEpDqI,eAAgB,SAACO,GAMb5G,EAAM6N,mBAAqBhO,EAAa7B,MAAQ,KAEpDuI,OAAQ,SAACK,GACL4G,EAAW5B,KAAKhF,GACZA,EAAK/E,UAAY,GAAM,IACvB7B,EAAM8N,eAAiBjO,EAAa7B,MAAQ,EAC5CgC,EAAM+N,kBAAoBlO,EAAa7B,MAAQ,KAGvDmI,aAAc,SAACS,GAeXqG,EAAIqB,MAAM1H,EAAK9F,IACX,EACA8F,EAAK9L,SAASiB,EAAG6K,EAAK9L,SAASmB,EA7D9B,KA8DU2K,EAAK3F,SAASlF,EA9DxB,KA+DU6K,EAAK3F,SAAShF,EACzB,CACIF,EAAG6K,EAAK9K,KAAKC,GAAK6K,EAAKR,KA/DlB,GAgELnK,EAAG2K,EAAK9K,KAAKG,GAAK2K,EAAKR,KAhElB,IAkET,CACI3K,EAlEG,IAkEAmL,EAAKpL,MAAMC,EACdC,EAnEG,IAmEAkL,EAAKpL,MAAME,EACdC,EApEG,IAoEAiL,EAAKpL,MAAMG,KAG1BgL,aAAc,SAAC7F,GACXmM,EAAIqB,MAAMxN,GAAI,EAAO,EAAG,EAAG,EAAG,IAElCgG,sBAAuB,SAACF,GACpB8G,EAAOa,SAAW3H,EAAK3F,SAASlF,EAChC2R,EAAOc,SAAW5H,EAAK3F,SAAShF,KAIxC+R,KAWIhB,YAAUyB,oBAPH,uBAQPvU,QAAQC,IAAR,yCAAsD,IAR/C,SASD6S,EAAS0B,cAAcC,SAAS1B,EAAI1S,QATnC,gCAYJqU,uBAAsB,WAAYtJ,QAZ9B,iCA1EI,ICjFLiD,EAAe+D,EAAa7G,ID2J3B,OAAH,qDAsBZ,OALAoJ,YAAW,WACP,sBAAC,sBAAAX,EAAA,sEAAoB5I,IAApB,0CAAD,GACA2H,EAAIvB,UACL,KAEI,CACHnM,OAAQ,WACJ0O,GAAc,EACdhU,EAAcqF,UACdvF,EAAKuF,UACLmO,WAAanO,UACb2N,WAAK6B","file":"21-54b0c84afed72badb864.js","sourcesContent":["import { EventProvider } from './event-provider';\r\nimport { createDebugDrawingTools, DebugDrawingTools } from './debug-drawing-tools';\r\nimport { TimeProvider } from '../../time-provider';\r\nimport { Vector2, Size2, scaleByPixelRatio } from './utils';\r\n\r\nexport type ArtGame<TRenderArgs> = {\r\n    name: string;\r\n    createGame: (\r\n        timeProvider: TimeProvider,\r\n        environmentProvider: { getDisplaySize: () => Size2 }\r\n    ) => {\r\n        setup: (eventProvider: EventProvider) => void;\r\n        update: () => void;\r\n        render: (renderCallbacks: TRenderArgs) => void;\r\n        destroy: () => void;\r\n    };\r\n    debugRenderer?: (tools: DebugDrawingTools, context: CanvasRenderingContext2D, canvas: HTMLCanvasElement,) => TRenderArgs;\r\n};\r\n\r\nexport const createDebugGameView = <TRenderArgs>(\r\n    game: ArtGame<TRenderArgs>,\r\n    gameCanvas: HTMLCanvasElement,\r\n    eventProvider: EventProvider,\r\n) => {\r\n    console.log(`createDebugGameView`, { game, gameCanvas });\r\n\r\n    if (!game.debugRenderer) { return null; }\r\n\r\n    const setup = () => {\r\n        if (!game.debugRenderer) { return null; }\r\n\r\n        const canvas = document.createElement(`canvas`);\r\n        gameCanvas.parentElement?.appendChild(canvas);\r\n        canvas.style.pointerEvents = `none`;\r\n        canvas.style.position = `absolute`;\r\n        canvas.style.left = `0`;\r\n        canvas.style.top = `0`;\r\n        canvas.style.opacity = `0.5`;\r\n        // canvas.style.backgroundColor = `#00FF0022`;\r\n\r\n        const autoResizeCanvas = () => {\r\n            const width = scaleByPixelRatio(gameCanvas.clientWidth);\r\n            const height = scaleByPixelRatio(gameCanvas.clientHeight);\r\n            if (canvas.width !== width || canvas.height !== height) {\r\n                canvas.width = width;\r\n                canvas.height = height;\r\n\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n\r\n        const context = canvas.getContext(`2d`);\r\n        if (!context) { throw new Error(`createDebugCanvas: Could not get context`); }\r\n\r\n        const tools = createDebugDrawingTools(context, () => ({ width: canvas.width, height: canvas.height }));\r\n        const renderArgs = game.debugRenderer(tools, context, canvas);\r\n        const statsState = {\r\n            frameLast: {\r\n                time: Date.now(),\r\n                updateFrameTick: 0,\r\n                renderFrameTick: 0,\r\n            },\r\n            frame125: {\r\n                time: Date.now(),\r\n                updateFrameTick: 0,\r\n                renderFrameTick: 0,\r\n            },\r\n            frame250: {\r\n                time: Date.now(),\r\n                updateFrameTick: 0,\r\n                renderFrameTick: 0,\r\n            },\r\n        };\r\n\r\n        return {\r\n            isVisible: false,\r\n            canvas,\r\n            context,\r\n            tools,\r\n            renderArgs,\r\n            statsState,\r\n            autoResizeCanvas,\r\n        };\r\n    };\r\n\r\n    let debugState = null as null | ReturnType<typeof setup>;\r\n    const getOrCreateState = () => {\r\n        if (!debugState) {\r\n            debugState = setup();\r\n        }\r\n        return debugState;\r\n    };\r\n\r\n    eventProvider.windowAddEventListener(`keydown`, e => {\r\n        const s = getOrCreateState();\r\n        if (!s) { return; }\r\n        if (e.key === `t`) {\r\n            // toggle debug\r\n            s.isVisible = !s.isVisible;\r\n            s.canvas.style.opacity = s.isVisible ? `0.5` : `0`;\r\n        }\r\n    });\r\n\r\n    return {\r\n        render: (gameInstance: { render: (renderCallbacks: TRenderArgs) => void }, stats: { updateFrameTick: number, renderFrameTick: number }) => {\r\n            if (!debugState) { return; }\r\n\r\n            const s = getOrCreateState();\r\n            if (!s) { return; }\r\n            if (!s.isVisible) { return; }\r\n\r\n            const {\r\n                canvas,\r\n                context,\r\n                tools,\r\n                renderArgs,\r\n                statsState,\r\n                autoResizeCanvas,\r\n            } = s;\r\n\r\n            // Stats\r\n            if (Date.now() > statsState.frame250.time + 250) {\r\n                statsState.frame250 = statsState.frame125;\r\n            }\r\n            if (Date.now() > statsState.frame125.time + 125) {\r\n                statsState.frame125 = statsState.frameLast;\r\n            }\r\n            statsState.frameLast = {\r\n                time: Date.now(),\r\n                renderFrameTick: stats.renderFrameTick,\r\n                updateFrameTick: stats.updateFrameTick,\r\n            };\r\n\r\n            // console.log(`DebugGameView render`, { game, gameInstance });\r\n            autoResizeCanvas();\r\n\r\n            // Erode\r\n            context.beginPath();\r\n            context.fillStyle = `#00000010`;\r\n            context.fillRect(0, 0, canvas.width, canvas.height);\r\n\r\n            tools.drawBox({ x: 0.5, y: 0.5 }, { x: 0.1, y: 0.1 }, `#00FF008`);\r\n            gameInstance.render(renderArgs);\r\n\r\n            const frameA = statsState.frame125;\r\n            const frameB = statsState.frame250;\r\n\r\n            tools.drawLabel({ x: 0, y: 0.1 }, `render fps: ${((frameA.renderFrameTick - frameB.renderFrameTick) * 1000 / (frameA.time - frameB.time)).toFixed(1).padStart(8, ` `)}`);\r\n            tools.drawLabel({ x: 0, y: 0.2 }, `update fps: ${((frameA.updateFrameTick - frameB.updateFrameTick) * 1000 / (frameA.time - frameB.time)).toFixed(1).padStart(8, ` `)}`);\r\n        },\r\n        destroy: () => {\r\n            if (!debugState) { return; }\r\n            debugState.canvas.remove();\r\n        },\r\n    };\r\n};\r\n","import { ColorRgb, Size2, Vector2 } from './utils';\r\n\r\nexport const createDebugDrawingTools = (context: CanvasRenderingContext2D, getDisplaySize: () => Size2) => {\r\n\r\n    const getDebugColor = (color: undefined | null | string | ColorRgb) =>\r\n        !color ? `#00FF00`\r\n            : typeof color === `string` ? color\r\n                : `rgb(${color.r},${color.g},${color.b})`;\r\n\r\n    const getPosition = (uvPos: Vector2) => {\r\n        const size = getDisplaySize();\r\n        return {\r\n            x: uvPos.x * size.width,\r\n            y: (1 - uvPos.y) * size.height,\r\n        };\r\n    };\r\n    const getSize = (uvPos: Vector2) => {\r\n        const size = getDisplaySize();\r\n        return {\r\n            x: uvPos.x * size.width,\r\n            y: uvPos.y * size.height,\r\n        };\r\n    };\r\n\r\n    const tools = {\r\n        drawX: (gamePosition: Vector2, gameSize?: Vector2, color?: string | ColorRgb) => {\r\n            const position = getPosition(gamePosition);\r\n            const size = gameSize ? getSize(gameSize) : undefined;\r\n            context.strokeStyle = getDebugColor(color);\r\n\r\n            const r = size ? { x: size.x / 2, y: size.y / 2 } : { x: 2, y: 2 };\r\n\r\n            context.beginPath();\r\n            context.moveTo(position.x - r.x, position.y - r.y);\r\n            context.lineTo(position.x + r.x, position.y + r.y);\r\n            context.moveTo(position.x - r.x, position.y + r.y);\r\n            context.lineTo(position.x + r.x, position.y - r.y);\r\n            context.stroke();\r\n        },\r\n        drawBox: (gamePosition: Vector2, gameSize?: Vector2, color?: string | ColorRgb) => {\r\n            const position = getPosition(gamePosition);\r\n            const size = gameSize ? getSize(gameSize) : undefined;\r\n            context.strokeStyle = getDebugColor(color);\r\n\r\n            const r = size ? { x: size.x / 2, y: size.y / 2 } : { x: 2, y: 2 };\r\n\r\n            context.beginPath();\r\n            context.moveTo(position.x - r.x, position.y - r.y);\r\n            context.lineTo(position.x - r.x, position.y + r.y);\r\n            context.lineTo(position.x + r.x, position.y + r.y);\r\n            context.lineTo(position.x + r.x, position.y - r.y);\r\n            context.lineTo(position.x - r.x, position.y - r.y);\r\n            context.stroke();\r\n        },\r\n        drawArrow: (fromGamePos: Vector2, toGamePos: Vector2, color?: string | ColorRgb) => {\r\n            const fromPos = getPosition(fromGamePos);\r\n            const toPos = getPosition(toGamePos);\r\n            context.strokeStyle = getDebugColor(color);\r\n\r\n            context.beginPath();\r\n            context.moveTo(fromPos.x, fromPos.y);\r\n            context.lineTo(toPos.x, toPos.y);\r\n            context.stroke();\r\n\r\n            tools.drawX(toGamePos, { x: 0.01, y: 0.01 }, color);\r\n        },\r\n        drawLabel: (gamePosition: Vector2, text: string, color?: string | ColorRgb) => {\r\n            const position = getPosition(gamePosition);\r\n\r\n            context.fillStyle = `#000000`;\r\n            context.fillRect(position.x, position.y - 24, 8 * text.length, 32);\r\n\r\n            context.fillStyle = getDebugColor(color);\r\n\r\n            context.beginPath();\r\n            context.font = `14px monospace`;\r\n            context.fillText(text, position.x, position.y);\r\n        },\r\n    };\r\n\r\n    return tools;\r\n};\r\nexport type DebugDrawingTools = ReturnType<typeof createDebugDrawingTools>;\r\n","import { ArtGame } from '../art-game';\r\nimport { EventProvider } from '../event-provider';\r\nimport { ColorRgb, Vector2, scaleByPixelRatio, Rect2 } from '../utils';\r\n\r\ntype EntityRenderData = {\r\n    id: number;\r\n    kind: 'player' | 'obstacle' | 'obstacle-still';\r\n    position: Vector2;\r\n    velocity: Vector2;\r\n    size: Vector2;\r\n    color: ColorRgb;\r\n};\r\ntype RenderArgs = {\r\n    onPlayerHit: (data: { position: Vector2 }) => void;\r\n    onPlayerReward: (data: { position: Vector2 }) => void;\r\n    onBeat: (data: { beatIndex: number, positions: Vector2[] }) => void;\r\n    renderEntity: (data: EntityRenderData) => void;\r\n    removeEntity: (id: number) => void;\r\n    setBackgroundVelocity: (data: { velocity: Vector2 }) => void;\r\n};\r\nexport const snakeGame: ArtGame<RenderArgs> = {\r\n    name: `Snake`,\r\n    createGame: (timeProvider, environmentProvider) => {\r\n\r\n        let destroyed = false;\r\n\r\n        const MOTION_X = -0.1;\r\n        const MOTION_Y = -0.025;\r\n\r\n        const COLOR_STRENGTH = 1;\r\n\r\n        type Entity = {\r\n            id: number;\r\n            color: ColorRgb;\r\n            position: Vector2;\r\n            velocity: Vector2;\r\n            size: Vector2;\r\n            isStill: boolean;\r\n        };\r\n        type Segment = Entity & {\r\n            targetPosition: Vector2;\r\n        };\r\n        const state = {\r\n            environment: {\r\n                time: 0,\r\n                timeLast: timeProvider.now(),\r\n                timeMsStart: timeProvider.now(),\r\n                timeDelta: 0,\r\n                tick: 0,\r\n                size: { x: 600, y: 600 },\r\n                gridSize: { x: 16, y: 9 },\r\n            },\r\n            input: {\r\n                u: false,\r\n                d: false,\r\n                l: false,\r\n                r: false,\r\n                pointer: null as null | {\r\n                    position: Vector2;\r\n                    timeMs: number;\r\n                },\r\n                lastTime: -1000,\r\n            },\r\n            player: {\r\n                id: 42,\r\n                position: { x: 0.5, y: 0.5 },\r\n                targetGridPosition: { x: 10, y: 10 },\r\n                targetPosition: { x: 0.5, y: 0.5 },\r\n                velocity: { x: 0, y: 0 },\r\n                size: { x: 0.01, y: 0.01 },\r\n                sizeInit: { x: 0.01, y: 0.01 },\r\n                color: { r: COLOR_STRENGTH, g: COLOR_STRENGTH, b: COLOR_STRENGTH },\r\n                color1: { r: COLOR_STRENGTH, g: COLOR_STRENGTH, b: COLOR_STRENGTH },\r\n                color2: { r: COLOR_STRENGTH, g: COLOR_STRENGTH, b: COLOR_STRENGTH },\r\n                color2Stength: 0.5,\r\n                segments: [] as Segment[],\r\n            },\r\n            playerState: {\r\n                deadAtTime: null as null | number,\r\n                restartAtTime: null as null | number,\r\n                wasHitThisFrame: false,\r\n                ateThisFrame: false,\r\n                wasThisFrameOnBeat: false,\r\n                beatIndex: 0,\r\n                timeNextTurn: 0,\r\n                nextDirection: { x: 1, y: 0 },\r\n            },\r\n            food: [] as Entity[],\r\n            foodState: {},\r\n        };\r\n\r\n        const toPositionFromGridPosition = (gridPosition: Vector2) => {\r\n            return Vector2.divide(\r\n                Vector2.add(gridPosition, { x: 0.5, y: 0.5 }),\r\n                Vector2.add(state.environment.gridSize, { x: 1, y: 1 }));\r\n        };\r\n\r\n        const adjustGridPositionForWall = (gridPosition: Vector2) => {\r\n            const g = { ...gridPosition };\r\n            const s = state.environment.gridSize;\r\n            if (g.x < 0) { g.x = 0; }\r\n            if (g.y < 0) { g.y = 0; }\r\n            if (g.x > s.x) { g.x = s.x; }\r\n            if (g.y > s.y) { g.y = s.y; }\r\n\r\n            return g;\r\n        };\r\n\r\n        const updateAutoPilot = () => {\r\n            const { player, playerState, input, environment: { time, timeDelta, size } } = state;\r\n\r\n            if (time < state.input.lastTime + 15) { return; }\r\n\r\n            // Turn toward the food\r\n            const f = state.food[0];\r\n            if (!f){ return; }\r\n\r\n            const foodDelta = Vector2.subtract(f.position, player.position);\r\n            const nextPlayerPosition_noTurn = toPositionFromGridPosition(Vector2.add(player.targetGridPosition, playerState.nextDirection));\r\n\r\n            const turnNone = playerState.nextDirection;\r\n            const turnA = {\r\n                x: playerState.nextDirection.y,\r\n                y: playerState.nextDirection.x,\r\n            };\r\n            const turnB = {\r\n                x: -playerState.nextDirection.y,\r\n                y: -playerState.nextDirection.x,\r\n            };\r\n            const nextPlayerPosition_turnA = toPositionFromGridPosition(Vector2.add(player.targetGridPosition, turnA));\r\n            const nextPlayerPosition_turnB = toPositionFromGridPosition(Vector2.add(player.targetGridPosition, turnB));\r\n\r\n            // Turn to food\r\n            const nextFoodDelta = Vector2.subtract(f.position, nextPlayerPosition_noTurn);\r\n            const isGoingTowardsFood = Vector2.lengthSq(nextFoodDelta) < Vector2.lengthSq(foodDelta);\r\n\r\n            if (!isGoingTowardsFood && Math.random() < 0.75){\r\n\r\n                const turnAFoodDelta = Vector2.subtract(f.position, nextPlayerPosition_turnA);\r\n                const turnBFoodDelta = Vector2.subtract(f.position, nextPlayerPosition_turnB);\r\n\r\n                if (Vector2.lengthSq(turnAFoodDelta) < Vector2.lengthSq(turnBFoodDelta)){\r\n                    playerState.nextDirection = turnA;\r\n                } else {\r\n                    playerState.nextDirection = turnB;\r\n                }\r\n            }\r\n\r\n            // Avoid hit\r\n            const willHitWall_turnA = !Vector2.equal(nextPlayerPosition_turnA, adjustGridPositionForWall(nextPlayerPosition_turnA));\r\n            const willHitWall_turnB = !Vector2.equal(nextPlayerPosition_turnB, adjustGridPositionForWall(nextPlayerPosition_turnB));\r\n\r\n            const willHit_turnA = willHitWall_turnA || player.segments.some(x => Vector2.equal(x.targetPosition, nextPlayerPosition_turnA));\r\n            const willHit_turnB = willHitWall_turnB || player.segments.some(x => Vector2.equal(x.targetPosition, nextPlayerPosition_turnB));\r\n            if (willHit_turnA && willHit_turnB){\r\n                playerState.nextDirection = turnNone;\r\n                return;\r\n            }\r\n            if (willHit_turnA){\r\n                playerState.nextDirection = turnB;\r\n                return;\r\n            }\r\n            if (willHit_turnB){\r\n                playerState.nextDirection = turnA;\r\n                return;\r\n            }\r\n        };\r\n\r\n        const addPlayerSegment = () => {\r\n            const { player } = state;\r\n            const s = player.segments[player.segments.length - 1] ?? player;\r\n\r\n            player.segments.push({\r\n                id: 1000 + player.segments.length,\r\n                isStill: false,\r\n                color: { ...player.color },\r\n                position: { ...s.position },\r\n                velocity: { ...s.velocity },\r\n                size: { ...s.size },\r\n                targetPosition: Vector2.add({ ...s.targetPosition }, { x: 0.001, y: 0 }),\r\n            });\r\n\r\n            const GROWTH_SCALE = 1.01;\r\n            player.size = Vector2.scale(GROWTH_SCALE, player.size);\r\n            player.segments.forEach(x => {x.size = Vector2.scale(GROWTH_SCALE, x.size); });\r\n        };\r\n\r\n        const updatePlayer = () => {\r\n            const { player, playerState, input, environment: { time, timeDelta, size } } = state;\r\n\r\n            // Player color\r\n            player.color2Stength += timeDelta * 1;\r\n            if (player.color2Stength > 1) {\r\n                player.color1 = player.color2;\r\n                player.color2 = {\r\n                    r: 1 * COLOR_STRENGTH * 0.5 * Math.random(),\r\n                    g: 1 * COLOR_STRENGTH * 0.5 * Math.random(),\r\n                    b: 1 * COLOR_STRENGTH * 0.5 * Math.random(),\r\n                };\r\n                player.color2Stength = 0;\r\n            }\r\n\r\n\r\n            const ratio = player.color2Stength;\r\n            player.color = {\r\n                r: (1 - ratio) * player.color1.r + ratio * player.color2.r,\r\n                g: (1 - ratio) * player.color1.g + ratio * player.color2.g,\r\n                b: (1 - ratio) * player.color1.b + ratio * player.color2.b,\r\n            };\r\n\r\n            // Player motion\r\n            if (input.l){ playerState.nextDirection = { x: -1, y: +0 }; }\r\n            if (input.r){ playerState.nextDirection = { x: +1, y: +0 }; }\r\n            if (input.u){ playerState.nextDirection = { x: +0, y: +1 }; }\r\n            if (input.d){ playerState.nextDirection = { x: +0, y: -1 }; }\r\n\r\n            const gridUnitPerSec = 3 * Math.pow(1.01, player.segments.length);\r\n            const timePerUnit = 1 / gridUnitPerSec;\r\n\r\n            // Change directions\r\n            if (time > playerState.timeNextTurn){\r\n                playerState.timeNextTurn = time + timePerUnit;\r\n                playerState.wasThisFrameOnBeat = true;\r\n\r\n                // Segments\r\n                for (let i = player.segments.length - 1; i >= 0; i--){\r\n                    player.segments[i].targetPosition = player.segments[i - 1]?.targetPosition ?? player.targetPosition;\r\n                    const deltaSegment = Vector2.subtract(player.segments[i].targetPosition, player.segments[i].position);\r\n                    player.segments[i].velocity = {\r\n                        x: deltaSegment.x * gridUnitPerSec,\r\n                        y: deltaSegment.y * gridUnitPerSec,\r\n                    };\r\n                }\r\n\r\n                // If autopilot\r\n                updateAutoPilot();\r\n\r\n                player.targetGridPosition = playerState.deadAtTime ? player.targetGridPosition\r\n                    : Vector2.add(player.targetGridPosition, playerState.nextDirection);\r\n\r\n                // Block\r\n                player.targetGridPosition = adjustGridPositionForWall(player.targetGridPosition);\r\n\r\n                player.targetPosition = toPositionFromGridPosition(player.targetGridPosition);\r\n                const delta = Vector2.subtract(player.targetPosition, player.position);\r\n                player.velocity = {\r\n                    x: delta.x * gridUnitPerSec,\r\n                    y: delta.y * gridUnitPerSec,\r\n                };\r\n\r\n                // // TEST\r\n                // if( Math.random() < 0.25 ){\r\n                //     addPlayerSegment();\r\n                // }\r\n\r\n            }\r\n\r\n            // const speedX = 0.9;\r\n            // const speedY = speedX * size.x / size.y;\r\n\r\n            // Smooth movement\r\n            // player.position.x += timeDelta * player.velocity.x;\r\n            // player.position.y += timeDelta * player.velocity.y;\r\n\r\n            // Jumpy movement\r\n            const moveDelta = Vector2.scale(0.2, Vector2.subtract(player.targetPosition, player.position));\r\n            player.position.x += moveDelta.x;\r\n            player.position.y += moveDelta.y;\r\n\r\n            // Segments\r\n            for (const s of player.segments){\r\n                s.position.x += timeDelta * s.velocity.x;\r\n                s.position.y += timeDelta * s.velocity.y;\r\n            }\r\n\r\n            // Wrap\r\n            // if (player.position.x < 0) { player.position.x = 1; player.targetPosition = player.position; }\r\n            // if (player.position.x > 1) { player.position.x = 0; player.targetPosition = player.position; }\r\n            // if (player.position.y < 0) { player.position.y = 1; player.targetPosition = player.position; }\r\n            // if (player.position.y > 1) { player.position.y = 0; player.targetPosition = player.position; }\r\n\r\n            // Collisions\r\n            for (const entity of player.segments) {\r\n                if (Vector2.distanceSq(entity.targetPosition, player.targetPosition) <= 0) {\r\n                    state.playerState.wasHitThisFrame = true;\r\n                    state.playerState.deadAtTime = time;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Reset player if all segments have been smashed\r\n            if (state.playerState.deadAtTime && !state.playerState.restartAtTime){\r\n                const allAtPlayer = player.segments.every(x => Vector2.distanceSq(x.targetPosition, player.targetPosition) <= 0.01);\r\n                if (allAtPlayer){\r\n                    playerState.restartAtTime = time + 3;\r\n                }\r\n            }\r\n            if (state.playerState.restartAtTime && time > state.playerState.restartAtTime){\r\n                player.segments = [];\r\n                playerState.deadAtTime = null;\r\n                playerState.restartAtTime = null;\r\n                player.size = { ...player.sizeInit };\r\n            }\r\n        };\r\n\r\n        const updateObstacles = () => {\r\n            const { player, food, foodState, environment: { time, timeDelta } } = state;\r\n            const gridUnitSize = Vector2.divide({ x: 1, y: 1 }, state.environment.gridSize);\r\n\r\n            if (food.length <= 0){\r\n                food.push({\r\n                    id: 10000 + food.length,\r\n                    color: player.color,\r\n                    isStill: true,\r\n                    position: { x: 0.1 + 0.8 * Math.random(), y: 0.1 + 0.8 * Math.random() },\r\n                    size: gridUnitSize,\r\n                    velocity: { x: 0, y: 0 },\r\n                });\r\n            }\r\n            // if (time > obstaclesState.timeNextObstacle) {\r\n            //     obstaclesState.timeNextObstacle = time + 1.5;\r\n\r\n            //     let freeObstacle = obstacles.find(x => x.position.x < -0.25);\r\n            //     if (!freeObstacle) {\r\n            //         freeObstacle = {\r\n            //             id: obstacles.length + 1000,\r\n            //             position: { x: 1.25, y: 0.1 },\r\n            //             velocity: { x: -0.125, y: 0 },\r\n            //             color: { r: 0.01, g: 0, b: 0 },\r\n            //             size: { x: 0.05, y: 0.05 },\r\n            //             isStill: false,\r\n            //         };\r\n            //         // Add an obstacle\r\n            //         obstacles.push(freeObstacle);\r\n            //     }\r\n\r\n            //     freeObstacle.color = { r: COLOR_STRENGTH * Math.random(), g: COLOR_STRENGTH * Math.random(), b: COLOR_STRENGTH * Math.random() };\r\n\r\n            //     const motionSignX = Math.sign(MOTION_X);\r\n\r\n            //     freeObstacle.position = { x: motionSignX * -1.05, y: Math.random() };\r\n            //     freeObstacle.velocity = {\r\n            //         x: motionSignX * (0.05 + 0.25 * Math.random()),\r\n            //         y: (0.2 + 0.1 - 0.2 * Math.random()),\r\n            //     };\r\n            //     freeObstacle.isStill = Math.random() < 0.1;\r\n\r\n            //     freeObstacle.size = { x: 0.05 + 0.01 * Math.random(), y: 0.05 + 0.01 * Math.random() };\r\n            // }\r\n\r\n            // for (const entity of obstacles) {\r\n            //     if (entity.isStill) {\r\n            //         entity.velocity = { x: MOTION_X, y: MOTION_Y };\r\n            //     }\r\n\r\n            //     entity.position.x += entity.velocity.x * timeDelta;\r\n            //     entity.position.y += entity.velocity.y * timeDelta;\r\n\r\n            //     // Gravity\r\n            //     entity.velocity.y -= timeDelta * 0.1;\r\n            // }\r\n\r\n            // Collisions\r\n            for (const [i, entity] of food.entries()) {\r\n                if (Rect2.collidesRectangle(entity, player, 0.8)) {\r\n                    state.playerState.ateThisFrame = true;\r\n                    addPlayerSegment();\r\n\r\n                    food.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n\r\n        };\r\n\r\n        const minTickTimeMs = 16;\r\n        const update = () => {\r\n            // console.log(`game.update START`, {});\r\n\r\n            if (destroyed) {\r\n                console.error(`game.update DESTROYED`, {});\r\n                return;\r\n            }\r\n\r\n            if (timeProvider.isPaused()) {\r\n                console.log(`game.update timeProvider.PAUSED`, {});\r\n                return;\r\n            }\r\n\r\n\r\n            const size = environmentProvider.getDisplaySize();\r\n            state.environment.size = { x: size.width, y: size.height };\r\n            state.environment.timeLast = state.environment.time;\r\n            state.environment.time = 0.001 * (timeProvider.now() - state.environment.timeMsStart);\r\n            state.environment.timeDelta = Math.max(minTickTimeMs * 0.001 * 0.5, state.environment.time - state.environment.timeLast);\r\n            // console.log(`gameInverval`, { environment: state.environment });\r\n\r\n            state.playerState.ateThisFrame = false;\r\n            state.playerState.wasHitThisFrame = false;\r\n            state.playerState.wasThisFrameOnBeat = false;\r\n            updatePlayer();\r\n            updateObstacles();\r\n\r\n            // Fix sizes\r\n            const displaySize = environmentProvider.getDisplaySize();\r\n            for (const x of [state.player, ...state.food]) {\r\n                x.size.y = x.size.x * displaySize.width / displaySize.height;\r\n            }\r\n\r\n            state.environment.tick++;\r\n\r\n            // console.log(`game.update DONE`, {});\r\n        };\r\n\r\n        const render = (args: RenderArgs) => {\r\n            const { player, playerState, food: obstacles } = state;\r\n\r\n            // args.setBackgroundVelocity({\r\n            //     velocity: {\r\n            //         x: MOTION_X,\r\n            //         y: MOTION_Y,\r\n            //     },\r\n            // });\r\n\r\n            // Render Player\r\n            args.renderEntity({\r\n                id: player.id,\r\n                kind: `player`,\r\n                position: player.position,\r\n                velocity: player.velocity,\r\n                size: player.size,\r\n                color: player.color,\r\n            });\r\n\r\n            if (playerState.ateThisFrame) {\r\n                args.onPlayerReward({ position: player.segments[player.segments.length - 1].position });\r\n            }\r\n\r\n            if (playerState.wasHitThisFrame) {\r\n                args.onPlayerHit({ position: player.position });\r\n            }\r\n\r\n            if (playerState.wasThisFrameOnBeat) {\r\n                args.onBeat({\r\n                    beatIndex: playerState.beatIndex,\r\n                    positions: [player.position, ...player.segments.map(x => x.position)\r\n                        .filter(x => !Vector2.equal(x, player.position))],\r\n                });\r\n                playerState.beatIndex++;\r\n            }\r\n\r\n            // Render player segments\r\n            for (const s of player.segments) {\r\n                args.renderEntity({\r\n                    id: s.id,\r\n                    kind: `obstacle`,\r\n                    position: s.position,\r\n                    velocity: s.velocity,\r\n                    size: s.size,\r\n                    color: s.color,\r\n                });\r\n            }\r\n\r\n            // Render Entities\r\n            for (const entity of obstacles) {\r\n\r\n                const isHidden = entity.position.x < -0.25\r\n                    || entity.position.x > 1.25\r\n                    || entity.position.y < -0.25\r\n                    || entity.position.y > 1.25;\r\n\r\n                if (isHidden) {\r\n                    args.removeEntity(entity.id);\r\n                    continue;\r\n                }\r\n\r\n                if (entity.isStill) {\r\n                    args.renderEntity({\r\n                        id: entity.id,\r\n                        kind: `obstacle-still`,\r\n                        position: entity.position,\r\n                        velocity: { x: 0, y: 0 },\r\n                        size: entity.size,\r\n                        color: entity.color,\r\n                    });\r\n                    continue;\r\n                }\r\n\r\n                args.renderEntity({\r\n                    id: entity.id,\r\n                    kind: `obstacle`,\r\n                    position: entity.position,\r\n                    velocity: entity.velocity,\r\n                    size: entity.size,\r\n                    color: entity.color,\r\n                });\r\n            }\r\n        };\r\n\r\n\r\n        const subscribeEvents = ({ windowAddEventListener, canvasAddEventListener, tools }: EventProvider) => {\r\n            windowAddEventListener(`keydown`, e => {\r\n                if (e.key === `w` || e.key === `ArrowUp`) { state.input.u = true; state.input.lastTime = state.environment.time; }\r\n                if (e.key === `a` || e.key === `ArrowLeft`) { state.input.l = true; state.input.lastTime = state.environment.time; }\r\n                if (e.key === `s` || e.key === `ArrowDown`) { state.input.d = true; state.input.lastTime = state.environment.time; }\r\n                if (e.key === `d` || e.key === `ArrowRight`) { state.input.r = true; state.input.lastTime = state.environment.time; }\r\n            });\r\n            windowAddEventListener(`keyup`, e => {\r\n                if (e.key === `w` || e.key === `ArrowUp`) { state.input.u = false; state.input.lastTime = state.environment.time; }\r\n                if (e.key === `a` || e.key === `ArrowLeft`) { state.input.l = false; state.input.lastTime = state.environment.time; }\r\n                if (e.key === `s` || e.key === `ArrowDown`) { state.input.d = false; state.input.lastTime = state.environment.time; }\r\n                if (e.key === `d` || e.key === `ArrowRight`) { state.input.r = false; state.input.lastTime = state.environment.time; }\r\n            });\r\n\r\n            const setPointerPosition = (gamePosition: Vector2) => {\r\n                state.input.pointer = {\r\n                    position: gamePosition,\r\n                    timeMs: timeProvider.now(),\r\n                };\r\n            };\r\n\r\n            canvasAddEventListener(`mousedown`, e => {\r\n                setPointerPosition(tools.getMouseGamePosition(e));\r\n            });\r\n\r\n            canvasAddEventListener(`mousemove`, e => {\r\n\r\n                // Check if mouse active\r\n                if (!state.input.pointer\r\n                    || timeProvider.now() > state.input.pointer.timeMs + 1000) { return; }\r\n\r\n                setPointerPosition(tools.getMouseGamePosition(e));\r\n            });\r\n\r\n            canvasAddEventListener(`touchstart`, e => {\r\n                setPointerPosition(tools.getTouchPositions(e)[0]);\r\n                e.preventDefault();\r\n                return false;\r\n            });\r\n\r\n            canvasAddEventListener(`touchmove`, e => {\r\n                setPointerPosition(tools.getTouchPositions(e)[0]);\r\n                e.preventDefault();\r\n                return false;\r\n            }, false);\r\n        };\r\n\r\n        return {\r\n            setup: (eventProvider) => {\r\n                subscribeEvents(eventProvider);\r\n            },\r\n            update,\r\n            render,\r\n            destroy: () => {\r\n                destroyed = true;\r\n            },\r\n        };\r\n    },\r\n    debugRenderer: (tools) => {\r\n        return {\r\n            onPlayerHit: (data) => {\r\n                tools.drawX(data.position, { x: 0.1, y: 0.1 }, `#FF0000`);\r\n            },\r\n            onPlayerReward: (data) => {\r\n                tools.drawX(data.position, { x: 0.1, y: 0.1 }, `#0000FF`);\r\n            },\r\n            onBeat: (data) => {\r\n                data.positions.forEach(p => {\r\n                    tools.drawX(p, { x: 0.1, y: 0.1 }, `#00FFFF`);\r\n                });\r\n            },\r\n            renderEntity: (data) => {\r\n                tools.drawBox(data.position, data.size, data.kind === `player` ? `#0000FF` : undefined);\r\n                tools.drawArrow(data.position, Vector2.add(data.position, data.velocity), data.kind === `player` ? `#0000FF` : undefined);\r\n            },\r\n            removeEntity: (id) => {\r\n                // tools.drawBox(data.position, data.size, `#FF000000`);\r\n            },\r\n            setBackgroundVelocity: (data) => {\r\n                tools.drawArrow({ x: 0.5, y: 0.5 }, Vector2.add({ x: 0.5, y: 0.5 }, data.velocity), `#FFFF00`);\r\n            },\r\n        };\r\n    },\r\n};\r\n","const parseMusicNotes = (doc: string) => {\r\n    const lines = doc\r\n        .split(`\\n`)\r\n        .filter(x => x);\r\n\r\n    const entries = lines.map(l => {\r\n        const [noteText, frequencyText] = l.split(` `).filter(x => x);\r\n        const notes = noteText.split(`/`).filter(y => y).map(y => y as NoteName);\r\n        return {\r\n            notes,\r\n            frequency: parseFloat(frequencyText),\r\n        };\r\n    });\r\n    const noteMap = new Map<NoteName, number>();\r\n    entries.forEach(x => x.notes.forEach(n => noteMap.set(n, x.frequency)));\r\n    return noteMap;\r\n};\r\n\r\ntype NoteKey =\r\n| 'C'\r\n| 'C#' | 'Db'\r\n| 'D'\r\n| 'D#' | 'Eb'\r\n| 'E'\r\n| 'F'\r\n| 'F#' | 'Gb'\r\n| 'G'\r\n| 'G#' | 'Ab'\r\n| 'A'\r\n| 'A#' | 'Bb'\r\n| 'B'\r\n    ;\r\ntype NoteOctave =\r\n| '0'\r\n| '1'\r\n| '2'\r\n| '3'\r\n| '4'\r\n| '5'\r\n| '6'\r\n| '7'\r\n| '8'\r\n;\r\nexport type NoteName = `${NoteKey}${NoteOctave}`;\r\n\r\nexport const musicNotes = parseMusicNotes(`\r\nC0        16.35                 \r\nC#0/Db0   17.32                         \r\nD0        18.35                 \r\nD#0/Eb0   19.45                         \r\nE0        20.60                 \r\nF0        21.83                 \r\nF#0/Gb0   23.12                         \r\nG0        24.50                 \r\nG#0/Ab0   25.96                         \r\nA0        27.50                 \r\nA#0/Bb0   29.14                         \r\nB0        30.87                 \r\nC1        32.70                 \r\nC#1/Db1   34.65                         \r\nD1        36.71                 \r\nD#1/Eb1   38.89                         \r\nE1        41.20                 \r\nF1        43.65                 \r\nF#1/Gb1   46.25                         \r\nG1        49.00                 \r\nG#1/Ab1   51.91                         \r\nA1        55.00                 \r\nA#1/Bb1   58.27                         \r\nB1        61.74                 \r\nC2        65.41                 \r\nC#2/Db2   69.30                         \r\nD2        73.42                 \r\nD#2/Eb2   77.78                         \r\nE2        82.41                 \r\nF2        87.31                 \r\nF#2/Gb2   92.50                         \r\nG2        98.00                 \r\nG#2/Ab2   103.83                         \r\nA2        110.00                 \r\nA#2/Bb2   116.54                         \r\nB2        123.47                 \r\nC3        130.81                 \r\nC#3/Db3   138.59                         \r\nD3        146.83                 \r\nD#3/Eb3   155.56                         \r\nE3        164.81                 \r\nF3        174.61                 \r\nF#3/Gb3   185.00                         \r\nG3        196.00                 \r\nG#3/Ab3   207.65                         \r\nA3        220.00                 \r\nA#3/Bb3   233.08                         \r\nB3        246.94                 \r\nC4        261.63                 \r\nC#4/Db4   277.18                         \r\nD4        293.66                 \r\nD#4/Eb4   311.13                         \r\nE4        329.63                 \r\nF4        349.23                 \r\nF#4/Gb4   369.99                         \r\nG4        392.00                 \r\nG#4/Ab4   415.30                         \r\nA4        440.00                 \r\nA#4/Bb4   466.16                         \r\nB4        493.88                 \r\nC5        523.25                 \r\nC#5/Db5   554.37                         \r\nD5        587.33                 \r\nD#5/Eb5   622.25                         \r\nE5        659.25                 \r\nF5        698.46                 \r\nF#5/Gb5   739.99                         \r\nG5        783.99                 \r\nG#5/Ab5   830.61                         \r\nA5        880.00                 \r\nA#5/Bb5   932.33                         \r\nB5        987.77                 \r\nC6        1046.50                 \r\nC#6/Db6   1108.73                         \r\nD6        1174.66                 \r\nD#6/Eb6   1244.51                         \r\nE6        1318.51                 \r\nF6        1396.91                 \r\nF#6/Gb6   1479.98                         \r\nG6        1567.98                 \r\nG#6/Ab6   1661.22                         \r\nA6        1760.00                 \r\nA#6/Bb6   1864.66                         \r\nB6        1975.53                 \r\nC7        2093.00                 \r\nC#7/Db7   2217.46                         \r\nD7        2349.32                 \r\nD#7/Eb7   2489.02                         \r\nE7        2637.02                 \r\nF7        2793.83                 \r\nF#7/Gb7   2959.96                         \r\nG7        3135.96                 \r\nG#7/Ab7   3322.44                         \r\nA7        3520.00                 \r\nA#7/Bb7   3729.31                         \r\nB7        3951.07                 \r\nC8        4186.01                 \r\nC#8/Db8   4434.92                         \r\nD8        4698.63                 \r\nD#8/Eb8   4978.03                         \r\nE8        5274.04                 \r\nF8        5587.65                 \r\nF#8/Gb8   5919.91                         \r\nG8        6271.93                 \r\nG#8/Ab8   6644.88                         \r\nA8        7040.00                 \r\nA#8/Bb8   7458.62                         \r\nB8        7902.13                 \r\n`);\r\n","import { randomItem, randomOrder } from 'utils/random';\r\nimport { Vector2 } from '../games/utils';\r\nimport { musicNotes, NoteName } from './music-notes';\r\n\r\nconst createAudio = (voiceCount: number) => {\r\n    const audioContext = (() => {\r\n        try {\r\n            const AudioContext = (window.AudioContext || (window as unknown as { webkitAudioContext: AudioContext }).webkitAudioContext);\r\n            return new AudioContext();\r\n        } catch {\r\n            console.error(`The Web Audio API is apparently not supported in this browser.`);\r\n            return null;\r\n        }\r\n    })();\r\n    if (!audioContext){ return null; }\r\n\r\n    const finalMixNode = !audioContext.createDynamicsCompressor ? audioContext.destination\r\n        : (() => {\r\n            const compressor = audioContext.createDynamicsCompressor();\r\n            compressor.connect(audioContext.destination);\r\n            return compressor;\r\n        })();\r\n\r\n    const mainFilterNode = audioContext.createBiquadFilter();\r\n    mainFilterNode.Q.value = 1;\r\n    mainFilterNode.type = `lowpass`;\r\n    mainFilterNode.frequency.value = 0.5 * audioContext.sampleRate;\r\n    mainFilterNode.connect(finalMixNode);\r\n\r\n    // Create master volume.\r\n    const mainGainNode = audioContext.createGain();\r\n    mainGainNode.gain.value = 0.7; // reduce overall volume to avoid clipping\r\n    mainGainNode.connect(mainFilterNode);\r\n\r\n    const mixNode = mainGainNode;\r\n\r\n    const createVoice = () => {\r\n        const oscNode = audioContext.createOscillator();\r\n        oscNode.frequency.value = 0;\r\n\r\n        const gainNode = audioContext.createGain();\r\n        gainNode.gain.value = 0;\r\n\r\n        const filterNode = audioContext.createBiquadFilter();\r\n        filterNode.Q.value = 1;\r\n        filterNode.type = `bandpass`;\r\n\r\n        // Connect nodes\r\n        const enableFilter = true;\r\n        if (enableFilter){\r\n            oscNode.connect(filterNode);\r\n            filterNode.connect(gainNode);\r\n        } else {\r\n            oscNode.connect(gainNode);\r\n        }\r\n        gainNode.connect(mixNode);\r\n\r\n        return {\r\n            oscNode,\r\n            filterNode,\r\n            gainNode,\r\n        };\r\n    };\r\n\r\n\r\n    // oscNode.type = `custom`;\r\n\r\n    // const periodicWave = audioContext.createPeriodicWave()\r\n\r\n    // oscNode.type = `triangle`;\r\n    // oscNode.type = `sine`;\r\n\r\n    // const isMobile = (navigator.userAgent.includes(`Android`))||(navigator.userAgent.includes(`iPad`))||(navigator.userAgent.includes(`iPhone`));\r\n\r\n    // // set up the master effects chain for all voices to connect to.\r\n    // // const effectChain = audioContext.createGain();\r\n    // // const waveshaper = new WaveShaper( audioContext );\r\n    // // effectChain.connect( waveshaper.input );\r\n    // // onUpdateDrive( currentDrive );\r\n\r\n    // const revNode =  !isMobile ? audioContext.createConvolver() : audioContext.createGain();\r\n    // const revGain = audioContext.createGain();\r\n    // const revBypassGain = audioContext.createGain();\r\n    // const volNode = audioContext.createGain();\r\n    // volNode.gain.value = 75;\r\n    // const compressor = audioContext.createDynamicsCompressor();\r\n    // // waveshaper.output.connect( revNode );\r\n    // // waveshaper.output.connect( revBypassGain );\r\n    // revNode.connect( revGain );\r\n    // revGain.connect( volNode );\r\n    // revBypassGain.connect( volNode );\r\n    // // onUpdateReverb( {currentTarget:{value:currentRev}} );\r\n\r\n    // volNode.connect( compressor );\r\n    // compressor.connect(    audioContext.destination );\r\n    // // onUpdateVolume( {currentTarget:{value:currentVol}} );\r\n\r\n    // // if (!isMobile) {\r\n    // //       const irRRequest = new XMLHttpRequest();\r\n    // //     irRRequest.open(`GET`, `sounds/irRoom.wav`, true);\r\n    // //     irRRequest.responseType = `arraybuffer`;\r\n    // //     irRRequest.addEventListener(`load`, function() {\r\n    // //           audioContext.decodeAudioData(irRRequest.response,\r\n    // //               function(buffer) { if (revNode) revNode.buffer = buffer; else console.log(`no revNode ready!`);});\r\n    // //     });\r\n    // //     irRRequest.send();\r\n    // // }\r\n\r\n    // }\r\n\r\n    return {\r\n        audioContext,\r\n        voices: [... new Array(voiceCount)].map(() => createVoice()),\r\n    };\r\n\r\n};\r\n\r\nexport const createBeatPlayer = () => {\r\n    const getNote = (note: string) => {\r\n        if (!musicNotes.has(note as NoteName)){ return 0;}\r\n        return musicNotes.get(note as NoteName);\r\n    };\r\n    const createSong = (notes: string) => notes.replace(/\\s/g, ` `).split(` `).filter(x => x).map(x => getNote(x));\r\n\r\n    const song1A = createSong(`\r\n    A2 A2 A2 .\r\n    A2 A2 A2 A4\r\n    `);\r\n\r\n    // const song1 = createSong(`A2 A2 A2 A4 . B2 C3 A4`);\r\n    const song1 = createSong(`\r\n    C2 D2 E2 G2\r\n    D2 E2 G2 A2\r\n    E2 G2 A2 C3\r\n    `);\r\n\r\n    const song2 = createSong(`\r\n    C2 E2 D2 G2\r\n    E2 A2 G2 C3\r\n    A2 D3 C3 E3\r\n\r\n    D3 G3 E3 A3 \r\n    G3 C4 A3 D4 \r\n    C4 .  .  .\r\n    `);\r\n\r\n    // const song3Dis = createSong(`\r\n    // F#2 G#3 D#3 A#2\r\n    // F#2 G#3 D#3 .\r\n    // `);\r\n\r\n    const song3 = createSong(`\r\n    C4 A3 G3 E3\r\n    A3 G3 E3 .\r\n    G3 E3 D3 C3\r\n    E3 D3 C3 .\r\n    D3 C3 A2 G2\r\n    C3 A2 G2 .\r\n    A2 G2 E2 D2\r\n    G2 E2 D2 .\r\n    `);\r\n\r\n    // const song2 = createSong(`\r\n    //  . B2 C3 D3\r\n    // F2 C3 D3 A3\r\n    // C3 .  E3 D3\r\n    // A2 E2 G2 A3\r\n    // `);\r\n\r\n    // const song3 = createSong(`\r\n    //  . B2 C3  .\r\n    // F2 C3 D3 A4\r\n    // C3 .  E3 D4\r\n    // A2 E2 G4 A4\r\n    // `);\r\n\r\n    // const song4 = createSong(`\r\n    //  . C3 A3 A3\r\n    // F3 G3 A3 .\r\n    // F3 A3 F3 B3\r\n    // G3 A3 B3 .\r\n    // G3 C4 B3 A3\r\n    // `);\r\n\r\n    // const song5 = createSong(`\r\n    //  . A2 .  F1\r\n    // E2 E1 D1 .\r\n    //  . F2 E1 A2\r\n    // B2 A2 F1 .\r\n    // `);\r\n\r\n    // const song = createSong(`C3 A3 B3 C3 . A3 C3 A3 A3 F3 G3 A3 . F3 A3 F3 B3 G3 A3 B3 . G3 B3 A3 G3 G3 G3 G3`);\r\n    // const song = createSong(`A3 C3 A3 A3 F3 G3 A3 . F3 A3 F3 B3 G3 A3 B3 . G3 C4 B3 A3 .`);\r\n    // const song = createSong(`aabcd aabcd aabcd ffe`);\r\n\r\n    const createRandomSong = () => {\r\n\r\n        if (Math.random() < 0.25){\r\n            const mainNotes = `CDEGACDEGA.`.split(``);\r\n            const mainOctave = randomItem([2, 3]);\r\n\r\n            const sSongSource = [...new Array(4 * (2 + Math.floor(4 * Math.random())))]\r\n                .map(() => `${randomItem(mainNotes)}${mainOctave} `)\r\n                .join(``);\r\n            const sSong = createSong(sSongSource.substr(1) + `C${mainOctave + 1}`);\r\n            return sSong;\r\n        }\r\n\r\n        //const sSong = randomItem([song1A, song1, song2, song3]);\r\n        const sSong = randomItem([song1A, song1, song3]);\r\n        // const sSong = randomItem([song1, song2, song3, song4, song5]);\r\n        // return sSong;\r\n        // return [...new Array(2 + 4 * Math.floor(4 * Math.random()))]\r\n        //     .map((_, i) => (i % 4 === 3) ? sSong[0] : randomItem(sSong));\r\n        // return randomOrder(sSong);\r\n\r\n        // if (Math.random() < 0.25){\r\n        //     return randomOrder(sSong);\r\n        // }\r\n\r\n        return sSong;\r\n    };\r\n\r\n    const state = {\r\n        audio: null as null | ReturnType<typeof createAudio>,\r\n        isStarted: false,\r\n        iBeat: 0,\r\n        timePerBeat: 0.25,\r\n        timeLastBeat: 0,\r\n        positions: [] as Vector2[],\r\n        shape: null as null | PeriodicWave,\r\n        songs: [createRandomSong()],\r\n    };\r\n\r\n    const updateWaveform = (iVoice: number, positions: Vector2[]) => {\r\n        const { audio } = state;\r\n        if (!audio){ return; }\r\n        if (positions.length === 0){ return; }\r\n        console.log(`updateWaveform`, { iVoice, positions });\r\n\r\n        const real = new Float32Array(2 + positions.length);\r\n        const imag = new Float32Array(2 + positions.length);\r\n        real[0] = 0;\r\n        imag[0] = 0;\r\n        real[positions.length - 1] = 1;\r\n        imag[positions.length - 1] = 0;\r\n\r\n        for (const [i, p] of positions.entries()){\r\n            real[i + 1] = p.x;\r\n            imag[i + 1] = p.y;\r\n        }\r\n\r\n        const wave = audio.audioContext.createPeriodicWave(real, imag, { disableNormalization: true });\r\n        audio.voices[iVoice].oscNode.setPeriodicWave(wave);\r\n    };\r\n\r\n    const scheduleNote = (iVoice: number, iBeat: number, timeOffset: number, timeForNote: number) => {\r\n        const { audio } = state;\r\n        if (!audio){ return; }\r\n        if (state.positions.length === 0){ return; }\r\n\r\n        // Play song\r\n        const audioTime = audio.audioContext.currentTime + timeOffset;\r\n\r\n        const freq = state.songs[iVoice][iBeat] ?? 0;\r\n        audio.voices[iVoice].oscNode.frequency.setValueAtTime(freq, audioTime);\r\n        audio.voices[iVoice].filterNode.frequency.setValueAtTime(freq, audioTime);\r\n        // audio.filterNode.frequency.setValueAtTime(800 + freq * 0.1, audioTime);\r\n        if (!freq){ return;}\r\n\r\n        // Note length\r\n        const timeToDelaySec = 0.01 * timeForNote;\r\n        const timeToStartSec = 0.1 * timeForNote;\r\n        const timeToStopSec = 0.1 * timeForNote;\r\n        const timeToPlaySec = timeForNote;\r\n        const timeStart = audioTime + timeToDelaySec;\r\n        const timePlay = timeStart + timeToStartSec;\r\n        const timePlayEnd = timePlay + timeToPlaySec;\r\n        const timeStop = timePlayEnd + timeToStopSec;\r\n\r\n        audio.voices[iVoice].gainNode.gain.setValueAtTime(0, timeStart);\r\n        audio.voices[iVoice].gainNode.gain.linearRampToValueAtTime(1, timePlay);\r\n        audio.voices[iVoice].gainNode.gain.setValueAtTime(1, timePlayEnd);\r\n        audio.voices[iVoice].gainNode.gain.linearRampToValueAtTime(0, timeStop);\r\n\r\n        // audio.voices[iVoice].gainNode.gain.setValueAtTime(1, audioTime);\r\n    };\r\n\r\n    return {\r\n        /** This must be done after user UI */\r\n        start: () => {\r\n            if (state.isStarted) { return; }\r\n            state.isStarted = true;\r\n\r\n            state.audio = createAudio(2);\r\n            state.audio?.voices.forEach(v => v.oscNode.start(0));\r\n        },\r\n        beat: (data: { beatIndex: number, positions: Vector2[] }) => {\r\n            if (!state.audio){ return; }\r\n            if (!state.isStarted) { return; }\r\n\r\n            state.timePerBeat = state.audio.audioContext.currentTime - state.timeLastBeat;\r\n            state.timeLastBeat = state.audio.audioContext.currentTime;\r\n\r\n            const chunkSize = 4;\r\n            if (data.beatIndex % chunkSize !== 0){ return;}\r\n            state.iBeat += chunkSize;\r\n\r\n\r\n            state.positions = data.positions;\r\n            const voiceLength = state.audio.voices.length;\r\n            for (let v = 0; v < voiceLength; v++){\r\n                if (v >= state.positions.length){ continue;}\r\n\r\n                if (!state.songs[v]\r\n                    || (data.beatIndex % state.songs[v].length === 0\r\n                    && Math.random() < 0.15)){\r\n                    state.songs[v] = createRandomSong();\r\n                    state.iBeat = 0;\r\n                }\r\n\r\n                // state.audio.voices[v].oscNode.type = `custom`;\r\n                const positions = state.positions.filter((x, i) => i % voiceLength === v);\r\n                updateWaveform(v, positions);\r\n\r\n                for (let i = 0; i < chunkSize; i++){\r\n                    const timeForNote = state.timePerBeat\r\n                        / Math.min(1 + state.positions.length, state.audio.voices.length);\r\n                    scheduleNote(v,\r\n                        (state.iBeat + i) % state.songs[v].length,\r\n                        i * state.timePerBeat + v * timeForNote,\r\n                        timeForNote);\r\n\r\n                    // const timeForNote = 0.25 * state.timePerBeat;\r\n                    // scheduleNote(v,\r\n                    //     (state.iBeat + i) % state.songs[v].length,\r\n                    //     i * state.timePerBeat,\r\n                    //     timeForNote);\r\n                }\r\n            }\r\n\r\n            // console.log(`beat`, { iBeat: state.iBeat });\r\n        },\r\n    };\r\n};\r\n","/* eslint-disable new-cap */\r\n/* eslint-disable no-new */\r\nimport { clamp } from 'utils/clamp';\r\nimport { ArtWork } from '../../artwork-type';\r\nimport { runFluidSimulator } from './src/run';\r\nimport { createEventProvider } from '../games/event-provider';\r\nimport { createDebugGameView } from '../games/art-game';\r\nimport { snakeGame } from '../games/snake/snake';\r\nimport { createBeatPlayer } from '../music/beat';\r\n\r\nconst contentPath = `/content/art/artwork/example-PavelDoGreat-fluid-simulation/src`;\r\n\r\nexport const art_fluidSnakeGame: ArtWork = {\r\n    key: `fluid-snake-game`,\r\n    title: `Fluid Snake Game`,\r\n    description: `Snake with Fluid Simulator Renderer and Procedural Music\r\nMusic is procedurally generated using waveforms shaped like the snake's current body and position.\r\nFluid Renderer is based on Fluid Simulator by Pavel Dobryakov: https://paveldogreat.github.io/WebGL-Fluid-Simulation/`,\r\n    artist: `Rick Love`,\r\n    getTokenDescription: (tokenId: string) => {\r\n        return null;\r\n    },\r\n    // openSea: {\r\n    //     tokenAddress: `0x495f947276749ce646f68ac8c248420045cb7b5e`,\r\n    //     tokenId: `91242641486941084018191434774360347389366801368112854311223385694785434025985`,\r\n    // },\r\n    renderArt: (hostElement, hash, recorder) => {\r\n        const sim = runFluidSimulator(hostElement, contentPath, { width: `100%`, height: `100%` }, {\r\n            disableGui: true, disableInput: true, disableStartupSplats: true,\r\n            timeProvider: recorder?.timeProvider,\r\n        });\r\n        if (!sim) { return { remove: () => { /* Ignore */ } }; }\r\n\r\n        const timeProvider = recorder?.timeProvider ?? { now: () => Date.now(), isPaused: () => false };\r\n        const eventProvider = createEventProvider(sim.canvas);\r\n\r\n        // const game = flappyDodgeGame.createGame(\r\n        const gameSource = snakeGame;\r\n        const game = gameSource.createGame(\r\n            timeProvider,\r\n            { getDisplaySize: () => ({ width: sim.canvas.width, height: sim.canvas.height }) });\r\n\r\n        game.setup(eventProvider);\r\n\r\n        const beatPlayer = createBeatPlayer();\r\n        eventProvider.canvasAddEventListener(`touchdown`, () => {\r\n            beatPlayer.start();\r\n        });\r\n        eventProvider.canvasAddEventListener(`mousedown`, () => {\r\n            beatPlayer.start();\r\n        });\r\n        eventProvider.canvasAddEventListener(`keydown`, () => {\r\n            beatPlayer.start();\r\n        });\r\n\r\n        // Debug\r\n        const debugViewer = createDebugGameView(gameSource, sim.canvas, eventProvider);\r\n\r\n        const { config } = sim;\r\n\r\n        if (config) {\r\n            // config.SPLAT_RADIUS = 0.001;\r\n\r\n            config.COLORFUL = false;\r\n            config.CURL = 10;\r\n            // config.BLOOM = false;\r\n        }\r\n\r\n        const VEL_MULT = 0.0005;\r\n        const SIZE_MULT_OBSTACLE = 4;\r\n        const SIZE_MULT_PLAYER = 4;\r\n        const COLOR_STRENGTH = 0.06;\r\n        // const CURL_BASE_VALUE = 30;\r\n\r\n        const state = {\r\n            resetBloomAtTimeMs: 0,\r\n            darkenAtTimeMs: 0,\r\n            darkenUntilTimeMs: 0,\r\n        };\r\n\r\n        let frameTick = 0;\r\n        const updateGame = () => {\r\n            config.BLOOM_INTENSITY = clamp(0.001 * (state.resetBloomAtTimeMs - timeProvider.now()), 0, 2);\r\n            config.SUNRAYS_WEIGHT = timeProvider.now() > state.darkenAtTimeMs && timeProvider.now() < state.darkenUntilTimeMs ? 0 : 1;\r\n\r\n            game.update();\r\n            debugViewer?.render(game, { updateFrameTick: frameTick, renderFrameTick: sim.getFrameTick() });\r\n\r\n            game.render({\r\n                onPlayerHit: () => {\r\n                    // console.log(`onPlayerHit`, {});\r\n\r\n                    // config.BLOOM = true;\r\n                    // sim.updateConfig();\r\n\r\n                    state.resetBloomAtTimeMs = timeProvider.now() + 3000;\r\n                },\r\n                onPlayerReward: (data) => {\r\n                    // console.log(`onPlayerHit`, {});\r\n\r\n                    // config.BLOOM = true;\r\n                    // sim.updateConfig();\r\n\r\n                    state.resetBloomAtTimeMs = timeProvider.now() + 500;\r\n                },\r\n                onBeat: (data) => {\r\n                    beatPlayer.beat(data);\r\n                    if (data.beatIndex % 4 === 3){\r\n                        state.darkenAtTimeMs = timeProvider.now() + 0;\r\n                        state.darkenUntilTimeMs = timeProvider.now() + 50;\r\n                    }\r\n                },\r\n                renderEntity: (data) => {\r\n\r\n                    // if (data.kind === `player`) {\r\n                    //     console.log(`player`, { data, config });\r\n\r\n                    //     // // Adjust vorticity based on player speed\r\n                    //     // const curl = CURL_BASE_VALUE * clamp((1 + 0.1 * data.velocity.x), 0.5, 2);\r\n                    //     // config.CURL = curl;\r\n\r\n                    //     // if (Math.abs(data.velocity.x) > 0.25) {\r\n                    //     //     config.BLOOM = true;\r\n                    //     //     state.resetBloomAtTime = timeProvider.now() + 5;\r\n                    //     // }\r\n                    // }\r\n\r\n                    sim.splat(data.id,\r\n                        true,\r\n                        data.position.x, data.position.y,\r\n                        VEL_MULT * data.velocity.x,\r\n                        VEL_MULT * data.velocity.y,\r\n                        {\r\n                            x: data.size.x * (data.kind === `player` ? SIZE_MULT_PLAYER : SIZE_MULT_OBSTACLE),\r\n                            y: data.size.y * (data.kind === `player` ? SIZE_MULT_PLAYER : SIZE_MULT_OBSTACLE),\r\n                        },\r\n                        {\r\n                            r: data.color.r * COLOR_STRENGTH,\r\n                            g: data.color.g * COLOR_STRENGTH,\r\n                            b: data.color.b * COLOR_STRENGTH,\r\n                        });\r\n                },\r\n                removeEntity: (id) => {\r\n                    sim.splat(id, false, 0, 0, 0, 0);\r\n                },\r\n                setBackgroundVelocity: (data) => {\r\n                    config.MOTION_X = data.velocity.x;\r\n                    config.MOTION_Y = data.velocity.y;\r\n                },\r\n            });\r\n\r\n            frameTick++;\r\n        };\r\n\r\n        let isDestroyed = false;\r\n        const update = async () => {\r\n            if (isDestroyed) { return; }\r\n\r\n            if (!timeProvider.isPaused()) {\r\n                updateGame();\r\n            }\r\n\r\n            if (recorder?.isWaitingForFrame()) {\r\n                console.log(`game.update waitingForFrame - addFrame`, {});\r\n                await recorder.getRecorder().addFrame(sim.canvas);\r\n            }\r\n\r\n            return requestAnimationFrame(() => {void update();});\r\n        };\r\n\r\n\r\n        // Start\r\n        setTimeout(() => {\r\n            (async () => { await update(); })();\r\n            sim.start();\r\n        }, 250);\r\n\r\n        return {\r\n            remove: () => {\r\n                isDestroyed = true;\r\n                eventProvider.destroy();\r\n                game.destroy();\r\n                debugViewer?.destroy();\r\n                sim?.close();\r\n            },\r\n        };\r\n    },\r\n};\r\n","export const clamp = (value: number, min: number, max: number) => {\r\n    return value < min ? min\r\n        : value > max ? max\r\n            : value;\r\n};\r\n"],"sourceRoot":""}