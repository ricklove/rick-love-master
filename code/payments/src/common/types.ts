/** This token is used to identify a specific app user with the user's id in the provider's context (i.e. customer id) */
export type PaymentProviderUserToken = unknown & { __type: 'PaymentProviderUserToken' };
/** This token is used to identify the client as it negotiates directly with the provider to enter payment method data */
export type PaymentProviderSavedPaymentMethodClientSetupToken = unknown & { __type: 'PaymentProviderSavedPaymentMethodClientSetupToken' };
/** This token is used to identify the payment method obtained on the client from the provider */
export type PaymentProviderSavedPaymentMethodClientToken = unknown & { __type: 'PaymentProviderSavedPaymentMethodClientToken' };
/** This token is used to identify the payment method long term after being verified by the provider on the server */
export type PaymentProviderSavedPaymentMethodStorageToken = unknown & { __type: 'PaymentProviderSavedPaymentMethodStorageToken' };

/** PaymentProviderName identifies the payment provider and it's implementation (i.e. stripe, paypal, etc.) */
export type PaymentProviderName = string & { __type: 'PaymentProviderName' };

/** PaymentMethodStorageKey is the auto generated storage key to uniquely identify a stored payment method */
export type PaymentMethodStorageKey = string & { __type: 'PaymentMethodStorageKey' };

export type PaymentMethodExpiration = {
    year: number;
    month: number;
};
export type PaymentMethodClientInfo = {
    key: PaymentMethodStorageKey;
    providerName: PaymentProviderName;
    title: string;
    expiration: PaymentMethodExpiration;
};

export type PaymentAmount = { currency: 'usd', usdCents: number };

export type PaymentTransaction = {
    providerName: PaymentProviderName;
    created: Date;
    amount: PaymentAmount;
    status: 'success' | 'incomplete' | 'terminated';
}

/** Payment Client to Server Calls
 * 
 * These are the calls made on the client to the server, it supports multiple payment provider types
 */
export type PaymentClientApi = {
    // Normal Flow
    setupSavedPaymentMethod: (params: { providerName: PaymentProviderName }) => Promise<PaymentProviderSavedPaymentMethodClientSetupToken>;
    saveSavedPaymentMethod: (params: { providerName: PaymentProviderName, paymentMethodClientToken: PaymentProviderSavedPaymentMethodClientToken }) => Promise<void>;

    // Management of Payment Methods
    getSavedPaymentMethods: () => Promise<PaymentMethodClientInfo[]>;
    deleteSavedPaymentMethod: (params: { key: PaymentMethodStorageKey }) => Promise<void>;

    // Management of Payments
    debug_triggerPayment: (params: { amount: PaymentAmount }) => Promise<void>;
    getPayments: () => Promise<PaymentTransaction[]>;
    // getPaymentsRequiringUserAction: () => Promise<PaymentTransaction[]>;
}


/** Payment Server to Server Calls
 * 
 * These are the calls intended to be used server-side to process payments
 */
export type PaymentServerApi = {
    /** This will use the payment methods in order until one succeeds */
    chargeUsingSavedPaymentMethods: (params: { amount: PaymentAmount }) => Promise<void>;
}

/** Payment Server to Payment Provider Api Calls
 * 
 * This wraps the provider-specific server code
 */
export type PaymentProviderApi = {
    providerName: PaymentProviderName;
    setupSavedPaymentMethod: (userToken: PaymentProviderUserToken | null) => Promise<{
        newUserToken?: PaymentProviderUserToken;
        setupToken: PaymentProviderSavedPaymentMethodClientSetupToken;
    }>;
    obtainSavedPaymentMethod: (userToken: PaymentProviderUserToken, clientToken: PaymentProviderSavedPaymentMethodClientToken) => Promise<{
        token: PaymentProviderSavedPaymentMethodStorageToken;
        title: string;
        expiration: PaymentMethodExpiration;
    }>;
    chargeSavedPaymentMethod: (userToken: PaymentProviderUserToken, token: PaymentProviderSavedPaymentMethodStorageToken, amount: PaymentAmount) => Promise<void>;

    getPayments: (userToken: PaymentProviderUserToken) => Promise<PaymentTransaction[]>;
}

/** Payment Server Dependencies */
export type PaymentMethodStorageData = {
    /** Key should be auto-generated by storage provider */
    key: PaymentMethodStorageKey;
    title: string;
    expiration: PaymentMethodExpiration;
    providerName: PaymentProviderName;
    paymentMethodStorageToken: PaymentProviderSavedPaymentMethodStorageToken;
};

export type PaymentUserTokenData = {
    providerName: PaymentProviderName;
    userToken: PaymentProviderUserToken;
};

export type PaymentStorageProviderApi = {
    getUserToken: (params: { providerName: PaymentProviderName }) => Promise<PaymentUserTokenData | null>;
    setUserToken: (params: PaymentUserTokenData) => Promise<void>;

    savePaymentMethod: (params: Omit<PaymentMethodStorageData, 'key'>) => Promise<void>;
    /** Return all saved payment methods - In the order that they were created */
    getSavedPaymentMethods: () => Promise<PaymentMethodStorageData[]>;
    deleteSavedPaymentMethod: (params: { key: PaymentMethodStorageKey }) => Promise<void>;
}

export class PaymentError extends Error {
    constructor(public message: string, public data?: unknown) { super(); }
}
