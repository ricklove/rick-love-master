
/** This token is used to identify the client as it negotiates directly with the provider to enter payment method data */
export type PaymentProviderSavedPaymentMethodClientSetupToken = unknown & { __type: 'PaymentProviderSavedPaymentMethodClientSetupToken' };
/** This token is used to identify the payment method obtained on the client from the provider */
export type PaymentProviderSavedPaymentMethodClientToken = unknown & { __type: 'PaymentProviderSavedPaymentMethodClientToken' };
/** This token is used to identify the payment method long term after being verified by the provider on the server */
export type PaymentProviderSavedPaymentMethodStorageToken = unknown & { __type: 'PaymentProviderSavedPaymentMethodStorageToken' };

/** PaymentProviderName identifies the payment provider and it's implementation (i.e. stripe, paypal, etc.) */
export type PaymentProviderName = string & { __type: 'PaymentProviderName' };

/** PaymentMethodStorageKey is the auto generated storage key to uniquely identify a stored payment method */
export type PaymentMethodStorageKey = string & { __type: 'PaymentMethodStorageKey' };

/** Payment Client to Server Calls
 * 
 * These are the calls made on the client to the server, it supports multiple payment provider types
 */
export type PaymentApi = {
    // Normal Flow
    setupSavedPaymentMethod: (params: { providerName: PaymentProviderName }) => Promise<PaymentProviderSavedPaymentMethodClientSetupToken>;
    saveSavedPaymentMethod: (params: { providerName: PaymentProviderName, title: string, paymentMethodClientToken: PaymentProviderSavedPaymentMethodClientToken }) => Promise<void>;

    // Management of Payment Methods
    getSavedPaymentMethods: () => Promise<{ key: PaymentMethodStorageKey, providerName: PaymentProviderName, title: string }[]>;
    deleteSavedPaymentMethod: (params: { key: PaymentMethodStorageKey }) => Promise<void>;
}

/** Payment Server to Payment Provider Api Calls
 * 
 * This wraps the provider-specific server code
 */
export type PaymentProviderApi = {
    providerName: PaymentProviderName;
    setupSavePaymentMethod: () => Promise<PaymentProviderSavedPaymentMethodClientSetupToken>;
    obtainSavedPaymentMethod: (clientToken: PaymentProviderSavedPaymentMethodClientToken) => Promise<PaymentProviderSavedPaymentMethodStorageToken>;
    chargeSavedPaymentMethod: (token: PaymentProviderSavedPaymentMethodStorageToken) => Promise<void>;
}

/** Payment Server Dependencies */
export type PaymentMethodStorageData = {
    /** Key should be auto-generated by storage provider */
    key: PaymentMethodStorageKey;
    title: string;
    providerName: PaymentProviderName;
    paymentMethodStorageToken: PaymentProviderSavedPaymentMethodStorageToken;
};

export type PaymentStorageProviderApi = {
    savePaymentMethod: (params: Omit<PaymentMethodStorageData, 'key'>) => Promise<void>;
    /** Return all saved payment methods - In the order that they were created */
    getSavedPaymentMethods: () => Promise<PaymentMethodStorageData[]>;
    deleteSavedPaymentMethod: (params: { key: PaymentMethodStorageKey }) => Promise<void>;
}

export class PaymentError extends Error {
    constructor(public message: string, public data?: unknown) { super(); }
}
